[{"labels":["documentation"],"text":"It seems that @radar started working on an overhaul of the Getting Started guide a while back but only the first (#38268) of the PRs batch (#38328 #38329) got merged. This resulted on the [guide](https://edgeguides.rubyonrails.org/getting_started.html) being inconsistent. More specifically, at the [hello rails section](https://edgeguides.rubyonrails.org/getting_started.html#say-hello-rails) we moved away from introducing a welcome controller, but [later in the guide](https://edgeguides.rubyonrails.org/getting_started.html#setting-the-application-home-page) it is still referenced.\r\n\r\nWhat do you think is the best course of action here? The rest of the work is still there (see stale PRs above), should this be reverted or re-open the rest of the PRs? I can help with proof-reading and squashing/rebasing."},{"labels":[null,"documentation"],"text":"[`ActiveRecord::Base.create_or_find_by/!`](https://apidock.com/rails/v6.0.0/ActiveRecord/Relation/create_or_find_by) attempts to improve on [`ActiveRecord::Base.find_or_create_by/!`](https://apidock.com/rails/v6.0.0/ActiveRecord/Relation/find_or_create_by) by avoiding race conditions that the previous implementation was susceptible to.\r\n\r\n`create_or_find_by` attempts to first create the record while relying on the database uniqueness constraint to inform us if it already exists.\r\nWhen the record does exist, it catches an exception and finds the record using the attributes provided. \r\n\r\nMy initial expectation of the method was that if used properly, it's expected to always return a record, even in concurrent situations.\r\n\r\nThe new strategy is still susceptible to race conditions which are not mentioned in the docs, the behavior in these cases is dependent on the database isolation level. \r\n\r\nMore concretely, `create_or_find_by` could raise a `RecordNotFound` if called from within an existing transaction in a repeatable reads isolation level.\r\n\r\nGiven how common it is for application code to run within an existing transaction (For example, code inside AR callbacks), and the fact that repeatable reads is the default isolation level for mysql, I think this is a fairly common use case.\r\n\r\n### Reproduction\r\n\r\nRepeatable read guarantees a consistent snapshot of the database, in InnoDB, the snapshot is established during the [first read](https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html). This means that if our transaction performed a read before a record is created by another transaction, we won't \"see\" it. In respect to uniqueness constraints, if we try inserting a record that violates it, the database would still protect us, but if we try querying for the record, it'll seem like it doesn't exist.\r\n\r\nIn the context of [`ActiveRecord::Base.create_or_find_by/!`](https://apidock.com/rails/v6.0.0/ActiveRecord/Relation/create_or_find_by), this would manifest as a uniqueness error being raised, but the record not existing.\r\n\r\n```ruby\r\ndef create_or_find_by(attributes, &block)\r\n  transaction(requires_new: true) { create(attributes, &block) }\r\nrescue ActiveRecord::RecordNotUnique \r\n  # exception caught, but we can't see the record because it's not present in our snapshot \r\n  find_by!(attributes)\r\nend\r\n```\r\n\r\nI created a few [test cases](https://gist.github.com/mzruya/603f722ede1615fd7957cfd95a4d466c#file-test_create_or_find_by_race_condition-rb-L101-L127) that demonstrate the issue.\r\n\r\n### Suggestions\r\nIt doesn't seem like it's possible to fix this behavior, the database isolation level would always prevent us from returning something that another connection committed. \r\n\r\nI do think that there's a misconception (at least I had it) that `ActiveRecord::Base.create_or_find_by` is meant to be atomic and work correctly in concurrent situations. \r\n\r\nTherefore it probably makes sense to document this behavior a bit more thoroughly and mention these caveats in the [docs](https://apidock.com/rails/v6.0.0/ActiveRecord/Relation/create_or_find_by).\r\n\r\nI'll gladly take on improving the current documentation if that seems reasonable.\r\nBut I'd also love to hear if anyone has any other thoughts on this behavior.\r\n\r\nThank you!"},{"labels":[null,"documentation"],"text":"### Steps to reproduce\r\nexecutable test case:\r\nhttps://gist.github.com/patrickneugebauer/6cd48c71835cf03aa2a332871f26efdf\r\n\r\n### Expected behavior\r\n`validates_presence_of :record` will not allow save if `record` is not persisted and cannot be persisted.\r\n\r\n### Actual behavior\r\n`validates_presence_of :record` allows save if `record` is not persisted and cannot be persisted.\r\n\r\n### System configuration\r\n**Rails version**: Rails 6.0.3.1\r\n\r\n**Ruby version**: ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux]\r\n\r\n### Did you write a patch that fixes a bug?\r\nNo, wondering if this is expected before I dig in further.\r\nShould people just know to use `validated_presence_of :record, :record_id` together to ensure integrity of connections?\r\n\r\nI checked the documentation and it is not technically wrong, but I feel it could be improved by adding detail about what is expected.\r\n\r\nhttps://guides.rubyonrails.org/active_record_validations.html#presence\r\n\r\n> If you want to be sure that an association is present, you'll need to test whether the associated object itself is present, and not the foreign key used to map the association. This way, it is not only checked that the foreign key is not empty but also that the referenced object exists.\r\n```\r\nclass LineItem < ApplicationRecord  \r\n  belongs_to :order  \r\n  validates :order, presence: true\r\nend\r\n```\r\n"},{"labels":["documentation"],"text":"[self-join](https://guides.rubyonrails.org/association_basics.html#self-joins) guide says `In your migrations/schema, you will add a references column to the model itself.`\r\n```ruby\r\nclass CreateEmployees < ActiveRecord::Migration[5.0]\r\n  def change\r\n    create_table :employees do |t|\r\n      # this woudn't create foreign_key to employees table\r\n      t.references :manager\r\n      # alternative we need to use to_table option with foreign_key\r\n      t.references :manager, foreign_key: { to_table: :employees }\r\n      t.timestamps\r\n    end\r\n  end\r\nend\r\n```"},{"labels":["documentation"],"text":"![image](https://user-images.githubusercontent.com/48516031/82900356-fb639000-9f8e-11ea-909f-cbdd1ff1155d.png)\r\nIn the Rails Installer page\r\n![image](https://user-images.githubusercontent.com/48516031/82900496-3665c380-9f8f-11ea-8e3b-59e09f97d8f7.png)\r\nShouldn't this be updated? Or specify the Rails Installer is for quickly installing lower versions of rails and if user wants the newest version of rails they should follow the following installation instructions?\r\n![image](https://user-images.githubusercontent.com/48516031/82901086-04a12c80-9f90-11ea-88f3-8446f89ce4f0.png)\r\n\r\n\r\n"},{"labels":[null,"documentation"],"text":"The `ActiveRecord::Base.connection_handler.while_preventing_writes` method does not prevent all writes as the name suggests.\r\n\r\nThis should be mentioned in the method documentation, particularly because in the [original Changelog](https://github.com/eileencodes/rails/blob/f39d72d5267baed1000932831cda98503d1e1047/activerecord/CHANGELOG.md) the author @eileencodes does mention this.\r\n\r\n### Description\r\n\r\nWhile looking for a way to safely expose a sql query parameter I stumbled upon the `while_preventing_writes` method. I was surprised that I wouldn't need a another readonly DB user. Not quite sure if this would really work, I did some digging and found that, at least in Postgresql, this method is not sufficient to block all writes. \r\n\r\n### Steps to reproduce\r\n\r\nAll of the following queries do write to a Postgresql database in a `while_preventing_writes` block:\r\n\r\n#### Explain analyze\r\n\r\nPostgresql let's you not only explain a query, you can also [explain and analyze](https://www.postgresql.org/docs/current/sql-explain.html) a query which actually **runs** it and also analyzes it:\r\n\r\n```ruby\r\nActiveRecord::Base.connection_handler.while_preventing_writes do\r\n  ActiveRecord::Base.connection.execute \"EXPLAIN ANALYZE INSERT INTO roles_users (role_id, user_id) VALUES (1, 1234)\"\r\n  ActiveRecord::Base.connection.execute \"EXPLAIN ANALYZE UPDATE users SET role = 'admin' WHERE id = 10\"\r\n  ActiveRecord::Base.connection.execute \"EXPLAIN ANALYZE DELETE FROM users WHERE id = 26\"\r\nend\r\n```\r\n\r\n#### Nested comments\r\n\r\nPostgres has a [peculiar comment syntax](https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-COMMENTS) which lets you nest comments within other comments:\r\n\r\n```\r\n/* comment with nesting: /* nested comment */ */\r\n```\r\n\r\nThat is why these comments look like SELECT queries to the regular expression [READ_QUERY](https://github.com/rails/rails/blob/7cd59448ba7b841b47cf8fdbdab55053e56ba787/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb#L23) which is supposed to guard against writes, but to the SQL parser they are comments:\r\n\r\n```ruby\r\nActiveRecord::Base.connection_handler.while_preventing_writes do\r\n  ActiveRecord::Base.connection.execute \"/*/**/SELECT*/ INSERT INTO roles_users (role_id, user_id) VALUES (1, 1234)\"\r\n  ActiveRecord::Base.connection.execute \"/*/**/SELECT*/ UPDATE users SET role = 'admin' WHERE id = 10\"\r\n  ActiveRecord::Base.connection.execute \"/*/**/SELECT*/ DELETE FROM users WHERE id = 26\"\r\nend\r\n```\r\n\r\n#### Select into\r\n\r\nFinally postgres let's you create tables using the [`SELECT INTO` statement](https://www.postgresql.org/docs/12/sql-selectinto.html), which starts the query with a `SELECT` but then goes on to write the result into a new table. While it cannot write into an existing table, technically it's still a write query:\r\n\r\n```ruby\r\nActiveRecord::Base.connection_handler.while_preventing_writes do\r\n  ActiveRecord::Base.connection.execute \"SELECT * INTO users_new FROM users\"\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe writing queries are not applied to the database.\r\n\r\n### Actual behavior\r\n\r\nThe queries are written to the database.  The [regular](https://github.com/rails/rails/blob/7cd59448ba7b841b47cf8fdbdab55053e56ba787/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb#L23) [expression](https://github.com/rails/rails/blob/7cd59448ba7b841b47cf8fdbdab55053e56ba787/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L69) which is supposed to guard against write queries does not catch the write statements.\r\n\r\n### Discussion\r\n\r\nI suspect that parsing SQL with regexes is like parsing HTML with regexes: it cannot work. I suspect that @eileencodes was aware of the limitations of this regular expression approach and mentioned them in the Changelog at the time.\r\n\r\nI did spend a fair amount of time trying to fix these issues and I believe that a somewhat more complex Regex will be able to catch some of these issues, but not all.\r\n\r\nConsidering that the nested comments can have any level of depth, I don't think that they can be solved with Regexes. You will need to parse the SQL and strip out the comments entirely to safeguard against those.\r\n\r\nThe `SELECT INTO` issue is complex as well, as there can be a lot of statements between the `SELECT` and the `INTO` some of which may be strings or comments, so the regular expression approach is probably not going to work here as well. \r\n\r\nI have tests and a fix for the `EXPLAIN ANALYZE` queries, if you want me to I can open a pull request for those. I will add a pull request for the documentation change.\r\n\r\n### System configuration\r\n\r\n* Rails master\r\n* ruby 2.7.0p0\r\n* vagrant@rails-dev-box\r\n"},{"labels":[null,"documentation"],"text":"### Steps to reproduce\r\nSearch through the testing portion of the guide [https://edgeguides.rubyonrails.org/testing.html](https://edgeguides.rubyonrails.org/testing.html) for an example on how to test a post with a json body.\r\n\r\nThe result will be that you won't find an example that makes it clear on how to do this. When initializing a rails app, you have an option to build it as an api. So, I'd assume that I'd also learn how to test json body posts.\r\n\r\n### Expected behavior\r\nHave realistic documentation on posting JSON data to a Rails 6 API. I can't find anything at all on how to do this in the guide: [https://edgeguides.rubyonrails.org/testing.html](https://edgeguides.rubyonrails.org/testing.html)\r\n\r\n### Actual behavior\r\nNot able to write a post test that uses a json post body because I simply cannot see how to do it.\r\n\r\n### System configuration\r\n**Rails version**:\r\nlatest\r\n**Ruby version**:\r\nany ruby version"},{"labels":["documentation",null],"text":"### Steps to reproduce\r\nCreate an rails engine\r\nTest it with spec\r\nFails about assets\r\n\r\n### Expected behavior\r\nGuide says https://guides.rubyonrails.org/engines.html#separate-assets-precompiling\r\n```ruby\r\ninitializer \"blorgh.assets.precompile\" do |app|\r\n  app.config.assets.precompile += %w( admin.js admin.css )\r\nend\r\n```\r\n\r\nIt not works. I solved it with\r\n```ruby\r\ninitializer \"blorgh.assets.precompile\" do |app|\r\n  app.config.assets.precompile += %w( engine_name/admin.js engine_name/admin.css )\r\nend\r\n```\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\n\r\n### System configuration\r\n**Rails version**: 6\r\n\r\n**Ruby version**: 2.7\r\n"},{"labels":["documentation",null],"text":"For now, there is no mention of Webpack in the official guides – neither on edge guides – except for Ruby on Rails 6 release notes and upgrade guide. The documentation of the Webpacker gem is quite good, but a newcomer to Rails wouldn't know at first that he needs to have a look to it.\r\n\r\nSpecifically, it would be good to have a mention of Webpack in the following guides:\r\n* The Asset Pipeline\r\n* Working with JavaScript in Rails\r\n\r\nIn case of more than a simple mention, there could be a quite thorough explanation of the current state of the recommended use of the Rails asset pipeline together with Webpack – e.g. use asset pipeline for normal CSS and images, and use Webpack for JS. It would be good also to mention that Turbolinks and UJS are (now) just Yarn packages.\r\n\r\nAlso, because of Webpack, Rails now depend on having a JS runtime on your computer and Yarn. This is briefly mentionned in the Getting Started guide, section Starting up the Web Server, but it could be more explicit in the Installing Rails part."},{"labels":["documentation"],"text":"The prod and edge versions of \"Getting Started with Rails\" both point to RailsInstaller as a great way to get started on Windows. However, RailsInstaller is offering only Ruby 2.2 and 2.3. When you get to the `bundle install` step, multiple of the standard gems now require at least Ruby 2.4. If we have a relationship with Engine Yard, perhaps a request from the right member of the team would move them to release more current versions of the RailsInstaller downloadables."},{"labels":[null,null,"documentation"],"text":"Rails Guides [state](https://edgeguides.rubyonrails.org/caching_with_rails.html#caching-in-development) that \"Rails provides the rails command dev:cache to easily toggle caching on/off\".\r\n\r\nThis is not entirely true since `NullStore` still caches via `LocalCache`, so there is no way to disable low-level cache within the scope of a single web request, regardless of the toggle.\r\n\r\nThe [low-level caching docs](https://edgeguides.rubyonrails.org/caching_with_rails.html#low-level-caching) don't really help since they provide a model-level example, giving the impression of a generic mechanism independent of web requests or Rack middleware.\r\n\r\nMy questions are:\r\n\r\n1. Why does `NullStore` implement the local cache strategy? Shouldn't it be a veritable bit bucket?\r\n2. Why isn't `ActiveSupport::Cache::Strategy::LocalCache` also toggled via `rails dev:cache`?\r\n3. At the very least, shouldn't this caveat be mentioned in Rails Guides, stating clearly that low-level cache still kicks in within the scope of a web request?\r\n\r\n\r\n### Steps to reproduce\r\n\r\nCreate a new Rails app and make sure to disable local caching:\r\n\r\n```\r\n$ bin/rails dev:cache\r\nDevelopment mode is no longer being cached.\r\n```\r\n\r\nAdd the following to the application layout or any view:\r\n\r\n```\r\n<pre>\r\n<%= Rails.cache.fetch('foo') { rand } %>\r\n<%= Rails.cache.fetch('foo') { rand } %>\r\n</pre>\r\n```\r\n\r\nRun `bin/rails s` and visit the modified view.\r\n\r\n\r\n### Expected behavior\r\n\r\nI'd expect `Rails.cache.fetch` to return different values given that \"development mode is no longer being cached\".\r\n\r\n\r\n### Actual behavior\r\n\r\n`Rails.cache.fetch` still caches values.\r\n\r\n\r\n### System configuration\r\n\r\n**Rails version**: 6.0.2.1\r\n\r\n**Ruby version**: 2.7.0p0\r\n"},{"labels":[null,"documentation"],"text":"There is a wrong guide in [RequestForgeryProtection comment](https://github.com/rails/rails/blob/08e4a71d02ee8556e5a7ebc4b0f8c364e0b8abd6/actionpack/lib/action_controller/metal/request_forgery_protection.rb) and [documentation](https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html)\r\n\r\n```ruby\r\nclass ApplicationController < ActionController::Base\r\n  protect_from_forgery unless: -> { request.format.json? }\r\nend\r\n```\r\n\r\n> It is generally safe to exclude XHR requests from CSRF protection (like the code snippet above does), because XHR requests can only be made from the same origin.\r\n\r\nHowever, as I know same origin policy cannot protect CSRF attack because [it does not prevent sending requests.](https://stackoverflow.com/a/33324803/2566679)\r\n\r\n> ... one origin is permitted to send information to another origin, but one origin is not permitted to receive information from another origin   [Same Origin Policy\r\n](https://www.w3.org/Security/wiki/Same_Origin_Policy)\r\n\r\nIf this is true, I think this guide must be modified, soon.\r\n"},{"labels":["documentation"],"text":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\nFollow the Docs: https://guides.rubyonrails.org/testing.html#using-separate-files\r\n\r\n```ruby\r\n# lib/test/authenticated_test_helper.rb\r\nmodule AuthenticatedTestHelper\r\n  def sign_in(email, password)\r\n    post account_login_url(email: email, password: password)\r\n  end\r\n\r\n  def admin_sign_in(email, password)\r\n    post admin_session_url(email: email, password: password)\r\n  end\r\nend\r\n```\r\n\r\n```ruby\r\n# test/controllers/admin/samples_controller_test.rb\r\nrequire 'test_helper'\r\nrequire 'test/authenticated_test_helper' # << throws: `cannot load such file -- lib/test/authenticated_test_helper\r\n\r\nmodule Admin\r\n  module SamplesControllerTest < ActionDispatch::IntegrationTest\r\n    ...\r\n    ...\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\nIt should find the file since it's defined in EXACTLY the location that's recommended\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\n```bash\r\n30: from -e:1:in `<main>'\r\n        29: from -e:1:in `require'\r\n        28: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:54:in `load'\r\n        27: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:54:in `load'\r\n        26: from /home/samps/sites/cannabislims/bin/rails:9:in `<main>'\r\n        25: from /home/samps/.gem/ruby/2.6.5/gems/zeitwerk-2.2.2/lib/zeitwerk/kernel.rb:23:in `require'\r\n        24: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'\r\n        23: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in `require_with_bootsnap_lfi'\r\n        22: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/loaded_features_index.rb:92:in `register'\r\n        21: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `block in require_with_bootsnap_lfi'\r\n        20: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `require'\r\n        19: from /home/samps/.gem/ruby/2.6.5/gems/railties-6.0.2.1/lib/rails/commands.rb:18:in `<main>'\r\n        18: from /home/samps/.gem/ruby/2.6.5/gems/railties-6.0.2.1/lib/rails/command.rb:46:in `invoke'\r\n        17: from /home/samps/.gem/ruby/2.6.5/gems/railties-6.0.2.1/lib/rails/command/base.rb:69:in `perform'\r\n        16: from /home/samps/.gem/ruby/2.6.5/gems/thor-1.0.1/lib/thor.rb:392:in `dispatch'\r\n        15: from /home/samps/.gem/ruby/2.6.5/gems/thor-1.0.1/lib/thor/invocation.rb:127:in `invoke_command'\r\n        14: from /home/samps/.gem/ruby/2.6.5/gems/thor-1.0.1/lib/thor/command.rb:27:in `run'\r\n        13: from /home/samps/.gem/ruby/2.6.5/gems/railties-6.0.2.1/lib/rails/commands/test/test_command.rb:33:in `perform'\r\n        12: from /home/samps/.gem/ruby/2.6.5/gems/railties-6.0.2.1/lib/rails/test_unit/runner.rb:39:in `run'\r\n        11: from /home/samps/.gem/ruby/2.6.5/gems/railties-6.0.2.1/lib/rails/test_unit/runner.rb:50:in `load_tests'\r\n        10: from /home/samps/.gem/ruby/2.6.5/gems/railties-6.0.2.1/lib/rails/test_unit/runner.rb:50:in `each'\r\n         9: from /home/samps/.gem/ruby/2.6.5/gems/railties-6.0.2.1/lib/rails/test_unit/runner.rb:50:in `block in load_tests'\r\n         8: from /home/samps/.gem/ruby/2.6.5/gems/zeitwerk-2.2.2/lib/zeitwerk/kernel.rb:23:in `require'\r\n         7: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'\r\n         6: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in `require_with_bootsnap_lfi'\r\n         5: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/loaded_features_index.rb:92:in `register'\r\n         4: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `block in require_with_bootsnap_lfi'\r\n         3: from /home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `require'\r\n         2: from /home/samps/sites/cannabislims/test/controllers/admin/samples_controller_tests/authenticated_test.rb:2:in `<main>'\r\n         1: from /home/samps/.gem/ruby/2.6.5/gems/zeitwerk-2.2.2/lib/zeitwerk/kernel.rb:23:in `require'\r\n/home/samps/.gem/ruby/2.6.5/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:33:in `require': cannot load such file -- lib/test/authenticated_test_helper (LoadError)\r\n```\r\n### System configuration\r\n**Rails version**: 6.0.2.1\r\n\r\n**Ruby version**: 2.6.5p114 (2019-10-01 revision 67812) [x86_64-linux]\r\n"},{"labels":["documentation",null,null],"text":"I'm experimenting with some custom ajax functionality in a Rails 5 project.\r\n\r\nI've been struggling and struggling to post some data to the server using `Rails.ajax`, and after reading guide after guide, I eventually understood where I was going wrong from a two-year old [Github issue comment](https://github.com/rails/rails/issues/31507#issuecomment-354680347).\r\n\r\nLots of recent third party guides talk about `Rails.ajax` and recommend using it now that `jquery` isn't included by default any more ([for instance](https://www.rubyguides.com/2019/03/rails-ajax/)). If this isn't recommended, to save others the hassle I just went through, I would really appreciate a note in [these docs](https://guides.rubyonrails.org/working_with_javascript_in_rails.html)?"}]