[{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nI am opening this issue primarily for the purpose of tracking discussion regarding potential alternative ways to handle the \"typescript by default\" feature.\r\n\r\n### Motivation and Context\r\n\r\nAdding `gatsby-plugin-typescript` to the plugin array by default causes issues when trying to use other methods for handling Typescript transpiling via Webpack.  `gatsby-plugin-typescript` removes all of the types from the code, so by the time another transpiler hits it (with type-checking enabled), transpiling the code will result in a litany of failures.\r\n\r\nIn #26452, there was some discussion around different ways to this feature.  My thoughts were to use another property in `gatsby-config`, @vladar suggested alterations to how the plugin array is processed, and @wardpeet suggested that `gatsby-plugin-typescript` itself be altered to handle use cases that include typechecking (e.g. switch to `ts-loader`).\r\n\r\nFor additional context regarding the issue where this started, see #26027\r\n\r\n### Method Examples\r\n\r\n* Gatsby config option\r\n  * Stops the inclusion of `gatsby-plugin-typescript` before it happens.\r\n  * Involves increasing the surface area of the `gatsby-config` api\r\n\r\n```js\r\nmodule.exports = {\r\n  siteMetadata: { ... },\r\n  typescript: false,\r\n  plugins: [ ... ],\r\n}\r\n```\r\n\r\n* Plugin array option\r\n\r\n  * Plugin array processing would need to look at the `disable` option to determine whether or not to include a plugin\r\n  * Either requires installing `gatsby-plugin-typescript` in your project (for the sole purpose of disabling it), or special handling of internal plugins.\r\n\r\n```js\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-typescript`,\r\n      options: {\r\n        disable: true,\r\n      }\r\n    }\r\n  ],\r\n}\r\n```\r\n\r\n* `gatsby-plugin-typescript` alteration (:+1: :+1:)\r\n\r\n  * If `typecheck === true`, use `ts-loader`.\r\n  * Would require increasing the options accepted/used by the plugin, to allow configuring `ts-loader`\r\n\r\n```js\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-typescript`,\r\n      options: {\r\n        typecheck: true,\r\n      }\r\n    }\r\n  ],\r\n}\r\n```\r\n\r\n"},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\nI would like to introduce an `overrides` option in `gatsby-plugin-canonical-urls`. This plugin is really useful for adding the canonical tag across all the pages created in Gatsby. But it has an all-or-nothing approach about it. If I want just one page to reference another page, then I need to remove this plugin and manually add a canonical URL to every page. \r\n\r\nMy proposal for an `overrides` tag will make this easier. I am not attached to the label `overrides`, if there is a better term for this (perhaps `originalReferences`?). Also, I am happy to enter a PR myself, although I have not contributed to this repo before, so I could use a little guidance. \r\n\r\n### Basic example\r\n\r\n\r\nCurrently the plugin, `gatsby-plugin-canonical-urls`, supports two options: `siteUrl` and `stripQueryString`\r\n```js\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-canonical-urls`,\r\n      options: {\r\n        siteUrl: `https://www.example.com`,\r\n        stripQueryString: true,\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\nI would like to see a third option that is `overrides`. This would then look like the following:\r\n```js\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-canonical-urls`,\r\n      options: {\r\n        siteUrl: `https://www.example.com`,\r\n        stripQueryString: true,\r\n        overrides: {\r\n            \"someSpecificUrl\": \"/\",\r\n            \"someOtherPath/withSpecificUrl\": \"/page-2\"\r\n        }\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\nAll URLs not specified in this `overrides` object will operate using the existing logic.\r\n\r\n### Motivation\r\n\r\nThe hope is to make this plugin more flexible and therefore more sticky. I am currently using this plugin, and now that I have one page with some duplicate content, I need to remove this plugin and add react-helmet to every one of my pages. \r\n\r\nI did a bit of research and I couldn't find anything, but let me know if there is already an existing, better alternative. I'm happy to hear feedback. \r\n"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n`gatsby-remark-autolink-headers` adds `style=\"position: relative\"` to `<h..>` Tags. Adding the style attribute to `<h..>` Tags is intrusive and not always wanted. It should be possible to disable this behavior.\r\n\r\n### Motivation\r\n\r\nNot all designs work well with relative positioned heading elements. One example is `\"float:right\"` "},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nPostCSS 8 was released. It added a new plugin API. Right now Gatsby does not support PostCSS 8 plugins.\r\n\r\nUpdating `postcss-loader` and adding `postcss` to dependencies for `gatsby-plugin-postcss` will fix the problem.\r\n\r\n[PostCSS 8 changelog](https://github.com/postcss/postcss/releases/tag/8.0.0) does not have breaking changes related to Gatsby only removing Node.js 6 and 8 support)."},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nIs it possible to import whatever node module package in my custom SW? \r\n\r\n## Relevant information\r\n\r\nIn `gatsby-config.js` i am using the `gatsby-plugin-offline` to register my `src/custom-sw.js`. In `src/custom-sw.js` i am trying to use my locally installed lodash because i want to share it with React part of app `src/pages/index.js`.\r\n\r\nThis is not specific to lodash but it is good example to demonstrate the problem.\r\n\r\n### Problem\r\n\r\nAs you can guess the `src/custom-sw.js` throwing 404 lodash not found...\r\n\r\n### Question\r\n\r\nIs it even possible to use same library across React and SW part of app?\r\n\r\n### File contents\r\n\r\n`gatsby-config.js`:\r\n```javascript\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-offline`,\r\n\toptions: {\r\n\t  appendScript: require.resolve(`./src/custom-sw.js`)\r\n\t}\r\n    },\r\n    ...\r\n ]\r\n...\r\n}\r\n```\r\n`src/custom-sw.js`:\r\n```\r\nimportScripts(\"lodash\");\r\n```\r\n\r\n`package.json`:\r\n```\r\n{\r\n  \"dependencies\": {\r\n    \"lodash\": \"^4.17.20\",\r\n    \"whatever_lib\": \"^X.Y.Z\",\r\n    ...\r\n  },\r\n...\r\n}\r\n```\r\n\r\n`src/pages/index.js`:\r\n```\r\nimport React from \"react\";\r\nimport lodash from \"lodash\";\r\n...\r\n```\r\n"},{"labels":[null,"enhancement"],"text":"`<link as=\"fetch\" rel=\"preload\" .../>` entries in the `<head>` of SSR pages should be de-duplicated to reduce HTML payload size.\r\n\r\n(There's a _chance_ this is causing iOS errors and/or log noise, which is how I noticed the duplication; I'm getting intermittent `Unexpected end of JSON input` errors in Sentry that seem to indicate JSON files are being parsed before they're downloaded. Wondering aloud if duplicate `preload` requests could trigger undefined Safari race condition behaviour.)\r\n\r\n### Basic example\r\n\r\nhttps://www.nishe.shop/ view source snippet shows two duplicate pairs of preload requests:\r\n\r\n```html\r\n<link as=\"fetch\" rel=\"preload\" href=\"/page-data/sq/d/1927784376.json\" crossorigin=\"anonymous\"/>\r\n<link as=\"fetch\" rel=\"preload\" href=\"/page-data/sq/d/1927784376.json\" crossorigin=\"anonymous\"/>\r\n<link as=\"fetch\" rel=\"preload\" href=\"/page-data/sq/d/4004863914.json\" crossorigin=\"anonymous\"/>\r\n<link as=\"fetch\" rel=\"preload\" href=\"/page-data/sq/d/4004863914.json\" crossorigin=\"anonymous\"/>\r\n```\r\n\r\nI believe it's because multiple components on the page use the same static query hooks. Ideally this would be de-duplicated, since (a) reusable hooks are good and (b) smaller SSR pages are good."},{"labels":["enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nAllow a user to modify the Graphql type name from `ContentfulModelName` to `CustomContentfulModelName`\r\n\r\n\r\n### Motivation\r\n\r\nThere are instances where we need to query multiple spaces from Contentful in the same gatsby site. You can do that currently, but the problem is Gatsby combines both types if the content model have the same name.\r\n\r\nIt also becomes messy and hard to manage if both spaces have the same `Contentful` prefix.\r\n\r\n### How to implement it\r\n\r\nI would assume making this [line](https://github.com/gatsbyjs/gatsby/blob/60fdd228c67e19538fd66d298ccddb0a08f5cda8/packages/gatsby-source-contentful/src/normalize.js#L7) dynamic. But I could be wrong and we need a different cache key as well"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nTwo possibilities for improvements:\r\n\r\n1) When sourcing e.g. the packages for Gatsby plugins you get the following warning:\r\n\r\n```shell\r\nwarn There are conflicting field types in your data.\r\n\r\nIf you have explicitly defined a type for those fields, you can safely ignore this warning message.\r\nOtherwise, Gatsby will omit those fields from the GraphQL schema.\r\n\r\nIf you know all field types in advance, the best strategy is to explicitly define them with the `createTypes` action, and skip inference with the `@dontInfer`\r\ndirective.\r\nNPMPackage.types.ts:\r\n - type: boolean\r\n   value: false\r\n - type: string\r\n   value: 'included'\r\n```\r\n\r\n2) The plugin also prints this warning:\r\n\r\n```shell\r\nwarn The type `NPMPackageReadme` does not explicitly define the field `childMarkdownRemark`.\r\nOn types with the `@dontInfer` directive, or with the `infer` extension set to `false`, automatically adding fields for children types is deprecated.\r\nIn Gatsby v3, only children fields explicitly set with the `childOf` extension will be added.\r\n```\r\n\r\nBoth warnings should be resolved. More context on 1) can also be found here: https://github.com/gatsbyjs/gatsby/issues/20925#issuecomment-671137644\r\n"},{"labels":[null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nI propose that `gatsby-plugin-feed` be able to accept functions for `title`, `output`, and `link`. Each of these functions would accept the result of the `query` value and return a string.\r\n\r\n### Basic example\r\n\r\nCompared to the current example configuration:\r\n\r\n```diff\r\n// In your gatsby-config.js\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-plugin-feed`,\r\n      options: {\r\n        query: `\r\n          {\r\n            site {\r\n              siteMetadata {\r\n                title\r\n                description\r\n                siteUrl\r\n+                feedTitle\r\n+                feedOutput\r\n+                feedLink\r\n              }\r\n            }\r\n          }\r\n        `,\r\n        feeds: [\r\n          {\r\n            serialize:  serializeCallback,\r\n            query: queryString,\r\n-            output: \"/rss.xml\",\r\n+            output: ({ query: { site: { feedOutput } } }) => feedOutput,\r\n-            title: \"Your Site's RSS Feed\",\r\n+            title: ({ query: { site: { feedTitle } } }) => feedTitle,\r\n            match: \"^/blog/\",\r\n-            link: \"https://feeds.feedburner.com/gatsby/blog\",\r\n+            link: ({ query: { site: { feedLink } } }) => feedLink,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\n### Motivation\r\n\r\nThis allows these values to be configured through the same GraphQL API that the rest of the data is in. You can store these values in JSON, YAML, or some other queryable source instead of editing `gatsby-config.js`. This will also make it easier to use with CMSes. \r\n"},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nThe netlify plugin automatically creates a redirects file based on a combination of any supplied redirects via `static/_redirects`. It'd be great if during development it also created virtual redirects inside gatsby (materialized from `static/_redirects`) so the site appears to work as it would when you build and host it.\r\n"},{"labels":[null,"enhancement",null],"text":"If one wants to ignore certain pages but not to move the default `pages` directory, is there any way to do that?\r\n\r\nIf you do this\r\n\r\n```js\r\n    {\r\n      resolve: `gatsby-plugin-page-creator`,\r\n      options: {\r\n        path: `src/pages`,\r\n        ignore: [`**/*.components.js`],\r\n      },\r\n    },\r\n```\r\n\r\nThen you are creating pages __twice__ which causes `Non-deterministic routing danger` warnings if you are removing trailing slashes\r\n\r\nIs there a current way to do this (other than using another page route)?"},{"labels":[null,null,null,"enhancement",null],"text":"I'd like to know how I can speed up the performance of this plugin.  I have a store with thousands of products and every time I use npm run dev, the build process takes minutes and is killing my productivity.  \r\n\r\n1. Is there a way to cache the product and collection data?\r\n2. Is there a way to eliminate the querying of all data? (I don't need terms, policies, blog etc - I only need products and collections) \r\n\r\nIs there any documentation on this, because I don't see that available? "},{"labels":["enhancement",null],"text":"## Summary\r\n\r\n`gatsby-source-filesystem` use a dependency to download file, `got`, this module doesn't work behind http/https proxy. Gatsby  use axios elsewhere and you have juste to define two env variables `http_proxy` and `https_proxy` to work with proxy.\r\n\r\n## Relevant information\r\n\r\nThe author of got refuse to respect this convention, and don't want to implement proxy mechanism. Today the only solution is to use a dirty global agent. Node.js teams already explain why the proxy part wouldn't be handled in core.\r\n\r\nWhat is the main reason of using got (Axios can handle files, or good old request) ?\r\n\r\nOne dependency off and it would be easier for everyone using a proxy."},{"labels":[null,"enhancement",null],"text":"## Summary\r\n\r\nIt would nice to be able to semantically add a caption to Gatsby images, and maybe there already is an issue for this but I couldn't find one. \r\n\r\nThe syntax could look like this:\r\n\r\n```js\r\n        <Img\r\n            Tag=\"figure\"\r\n            fluid={post.featuredImage.asset.fluid}\r\n          >\r\n            <figcaption>\r\n              {post.featuredImage.caption}\r\n            </figcaption>\r\n      </Img>\r\n```\r\n\r\nI would maybe be interested in trying to take this issue on if it isn't already possible?\r\n"},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nI'd like to see `gatsby-plugin-mdx` guard against common unterminated HTML elements that show up in .md or .mdx files. \r\n\r\nTags like:\r\n\r\n```html\r\n<br>\r\n<hr>\r\n<img src=\"image.png\">\r\n```\r\n\r\n### Basic example\r\n\r\nIn on-create-node.js line [#47](https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/gatsby/on-create-node.js#L47) the content of the .md/.mdx file is loaded before it is passed to `createMDXNode`. Input like:\r\n\r\n```markdown\r\n# Test\r\n\r\nThis is a test.<br>Of the emergency broadcast system.\r\n\r\n<hr>\r\n\r\nThis is only a test.\r\n```\r\n\r\ncould be converted to:\r\n\r\n```markdown\r\n# Test\r\n\r\nThis is a test.<br/>Of the emergency broadcast system.\r\n\r\n<hr/>\r\n\r\nThis is only a test.\r\n```\r\n\r\nJust by doing some string manipulation.\r\n\r\n### Motivation\r\n\r\nWhy are we doing this? What use cases does it support? What is the expected outcome?\r\n\r\nWe are hoping to make this change as we have a lot of historical documentation in markdown but would like to use MDX when creating our site. Since we pull down the docs using `gatsby-source-git` we often don't have the offending markdown in the same codebase as being used to create the site. We are hoping to avoid having to send PR's to many, many repos in order to fix these issues.\r\n"},{"labels":[null,null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nRight now you can only configure Webpack from within `gatsby-node.js`.  But let's say you want to use some Webpack feature in that file: it's impossible.\r\n\r\n### Basic example\r\nFor instance, let's say you want something extremely basic.  Instead of wrapping a GraphQL query with:\r\n\r\n    # queryFile.js\r\n    export default `*my query*`\r\n\r\nand putting it into a `.js` file, you'd like to just be able to have a raw query string file:\r\n\r\n    # queryFile.gql\r\n    *my query*\r\n\r\nWebpack has a raw loader that let's you do *exactly* that (import a file's contents as a string) ... but it doesn't work with Gatsby, or at least not in `gatsby-node.js` itself.  Why? Because it runs the `import`s in that file before that webpack config is ever set.\r\n\r\n### Motivation\r\n\r\nIf I could just define the loader in some sort of `gatsby-webpack.js` file, somehow, then that file could get run *beforehand*.  This would allow *any* webpack config that anyone might ever want (not just my loader, but any other loader, any path changes, etc.) to apply within the gatsby files (like `gatsby-node`)."},{"labels":["enhancement"],"text":"## Summary\r\n\r\nI'm still very new to gatsby so I'm sorry if I'm missing something that already exists here!\r\n\r\nI've found that occasionally I need to make a check to window.localStorage or window.matchMedia which determins how I want my page to look before it loads - e.g dark mode or loading with an app tab bar instead of a top nav bar if launched as a PWA. Just including these checks in a useEffect hook works, but there is a flicker of the default state (I assume from the pre-rendering at build time?) before they take effect. This is a jarring experience. \r\n\r\nThrough following a [dark mode article](https://joshwcomeau.com/gatsby/dark-mode/) by @joshwcomeau I've seen there is a way to inject a blocking script before render which works really well - but the developer experience is quite convoluted, writing an IIFE as a string and converting it to html within the script. I was wondering if it would be possible to make this more intuitive?\r\n\r\nMaybe there could be a priority hook that we could use inside the component alongside useEffect which would block rendering until it is evaluated, or a gatsby-browser / srr api which lets us list the components that need to evaluate their useEffect hooks before rendering to screen, or a priority context provider we could use within useEffect which provides a state that gets assigned before anything is rendered to the screen.\r\n\r\nI don't know if any of this would be possible and I understand that adding more steps before the initial render is bad for performance, but it seems that sometimes this could be really valuable to avoid the flicker. If this already exists, please could you point me in the right direction?\r\n\r\n### Motivation\r\n\r\nAvoiding flickering on conditionally rendered components while calls to window are made. \r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nSimilar to the ability to configure the graphql node type, there should by a new configuration option called `includeFilename`.\r\n- default (falsy): no behavior change\r\n- true: will include the filename in the node under the top level field `filename`\r\n- function: function that accepts the filename and returns a tuple of field name and value to add to node.\r\n\r\n### Basic example\r\n\r\nNetlify CMS with JSON output only distinguishes files in a collection by filename by default. This feature would allow you to transform the json and then filter to a specific file in gaphql.\r\n\r\n### Motivation\r\n\r\nSee above\r\n"},{"labels":["enhancement"],"text":"## Summary\r\n\r\nIn an upcoming `0.26` release of `sharp`, support for [animated webp and gif](https://github.com/lovell/sharp/pull/2012#event-3661956457) will be available.\r\n\r\n### Motivation\r\n\r\n`gatsby-image` doesn't presently support animated images and [advises using plain `<img>` instead](https://www.gatsbyjs.com/plugins/gatsby-image/#some-other-stuff-to-be-aware-of), but that was due to a limitation with support in `sharp`. \r\n\r\n[A related doc on gif usage](https://www.gatsbyjs.com/docs/working-with-gifs/) also raises awareness regarding autoplay, while [this article](https://bradfrost.com/blog/post/reducing-motion-with-the-picture-element/) shows how the picture element can use a media condition to present a static image if the user has preferred reduced motion.\r\n\r\nThere's also [some code in `gatsby-transformer-sharp`](https://github.com/gatsbyjs/gatsby/issues/18699#issuecomment-591597997) that may need to be updated should this feature be added.\r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nSince the member permissions to add/remove labels are restricted the GatsbyBot now mark Issues as stale, but as a user i can not add now \"not stale\" \r\n\r\n### Changes:\r\n\r\n- ~add a action, when new comments incoming, removing the \"stale\" label~ *it is done with a delay*\r\n- if a user writes \"not stale\", add the label \"not stale\"\r\n- update the GatsbyBot info text and remove \"You can also add the label \"not stale\" to keep this issue open!\"\r\n\r\n\r\n### Motivation\r\n\r\nhe member permissions to add/remove labels are restricted now"},{"labels":["enhancement"],"text":"## Summary\r\n\r\nadd a small note about discontinuing official support at https://spectrum.chat/gatsby-js\r\n\r\n### Basic example\r\n\r\nIf the proposal involves a new or changed API, include a basic code example. Omit this section if it's not applicable.\r\n\r\n### Motivation\r\n\r\nguide user where to find answers\r\n\r\n\r\n## Related Issues\r\n\r\n- #26276 `Remove Spectrum from issue templates`   \r\n- #26351 `Remove Spectrum Community Reference From Documentation`"},{"labels":[null,"enhancement"],"text":"Is there a way to know what files have changed when I make an update?\r\n\r\nFor example, if I am hosting the website without CI/CD on Linux shared hosting, I want to update only the files which are needed to be updated."},{"labels":[null,"enhancement"],"text":"## Description\r\n\r\nIn the official RSS plugin:\r\nhttps://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-feed\r\n\r\nA small improvement could be made for better W3C validation. I recently used W3C to check my RSS feed was configured correctly and I noticed this issue.\r\n\r\n### Steps to reproduce\r\n\r\nMy feed result:\r\nhttps://validator.w3.org/feed/check.cgi?url=https%3A%2F%2Fwww.michaelfasani.com%2Frss.xml\r\n\r\n### Expected result\r\n\r\nW3C validation should be perfect but it suggests the following change:\r\n\r\n```\r\nRecommendations\r\nThis feed is valid, but interoperability with the widest range of feed readers could be improved by implementing the following recommendations.\r\n\r\nline 1, column 3376: Missing atom:link with rel=\"self\" [help]\r\n\r\n... 5 May 2020 14:23:23 GMT</pubDate></item></channel></rss>\r\n```\r\n\r\nHow to fix:\r\n\r\nInsert the following node into the `<channel>` node with the correct URL specified.\r\n\r\n`<atom:link href=\"http://dallas.example.com/rss.xml\" rel=\"self\" type=\"application/rss+xml\" />`\r\n\r\n\r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nIt would be great if there was an option to set the initial route that gets logged when running `gatsby develop` (e.g. `/en/` instead of `/`):\r\n\r\n<img width=\"331\" alt=\"image\" src=\"https://user-images.githubusercontent.com/24367010/89736356-b369ea80-da60-11ea-98e1-9cb4e48aeab6.png\">\r\n\r\nSo this ☝️ would then log http://localhost:8000/en/\r\n\r\nOne example use case would be for localised sites where there _is_ no page at `/`. Currently if you have a site like this and click on the suggested URL (http://localhost:8000/) where you're told you can view your site, you end up getting a 404.\r\n\r\n### Basic example\r\n\r\nI would imagine this would simply require an additional option in `gatsby-config` to set the initial route, e.g.:\r\n\r\n```js\r\nmodule.exports = {\r\n  initialRoute: `/en/`\r\n  ...\r\n}\r\n```\r\n\r\nNot sure if `initialRoute`, `defaultPath` or something else would be the best name for this.\r\n\r\n### Motivation\r\n\r\nIt's a small thing, but in my opinion would be a really nice addition and I assume very little effort involved in achieving this.\r\n\r\nI'm happy to look into this and try to open a PR if the suggestion is accepted.\r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nThis is super simple, but it's not a bug and didn't seem like a documentation issue. I think it would be good to standardize the reporter output to the console. Right now there's inconsistent capitalization, acronyms, and (grammatical) mood.\r\n\r\n### Basic example\r\n\r\nSpecifically, I'd prefer the `activityTimer()`, `phantomActivity()`, and `createProgress()` methods to prefer console outputs that follow normal capitalization, normal acronym capitalization, and the imperative mood. \r\n\r\ncurrent: `success delete html and css files from previous builds`\r\nproposed: `success Delete HTML and CSS files from previous builds`\r\n\r\ncurrent: `success Rewriting compilation hashes`\r\nproposed: `success Rewrite compilation hashes`\r\n\r\nFunction names would stay the same: `success createPagesStatefully`\r\n\r\n### Motivation\r\n\r\nGenerally, I think consistency is a good thing. Visually, sentence capitalization creates a nice demarcation between the result (`success`) and what produced the result (`Rewrite compilation hashes`). If we adopt sentence capitalization, not correctly capitalizing acronyms would seem weird to me(`Delete html and css files from previous builds`). Lastly, I think the imperative mood makes for more concise logging and I'm personally used to it from [git commit messages](https://chris.beams.io/posts/git-commit/#imperative). \r\n\r\nThe fixes should be simple but spread over several files: the files where the reporter methods are called, test files that check the console log, and documentation files that show expected outputs (for consistency's sake).\r\n\r\n\r\nIncidentally, though this might be a separate code quality issue, the `reporter` module is often imported as `report` rather than its export and filename `reporter`."},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\n The new `appendScript` option to enable features to be added to the generated Service Worker is a great addition but unfortunately it is not possible to use this to register a custom navigation route as suggested in the documentation.\r\n\r\n### Basic example\r\n\r\nThe plugin README suggests using `appendScript` to add a new navigation route with:\r\n\r\n```js\r\n// register a custom navigation route\r\nconst customRoute = new workbox.routing.NavigationRoute(({ event }) => {\r\n  // ...\r\n})\r\nworkbox.routing.registerRoute(customRoute)\r\n```\r\n\r\nbut this will never be called because the `NavigationRoute` already registered in the generated `sw.js` will process all navigation requests.\r\n\r\nTo allow a custom `NavigationRoute` I wonder if a new `customNavigationRoutes` option could be added to the plugin that would take a list of RegExps and feed them through to the `blacklist` option available as a second parameter in the constructor used when defining the [Gatsy NavigationRoute]( https://github.com/gatsbyjs/gatsby/blob/70698c2ba6208c263b0fff89de518283ce65de34/packages/gatsby-plugin-offline/src/sw-append.js#L64).\r\n\r\nUsers could then specify this option and register their own `NavigationRoute` to handle these routes in a script included via `appendScript`.\r\n \r\n### Motivation\r\n\r\nIn my case, I wanted to keep the functionality of the `gatsby-plugin-offline` plugin but also respond in the service worker to a navigation route that I can be used to implement a streaming download (using the approach taken by [StreamSaver.js](https://github.com/jimmywarting/StreamSaver.js)). "},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nPass custom encoding as argument to `loadNodeContent` method. Currently, it's hardcoded as `utf-8`, and there is no way to load different content.\r\n\r\n### Basic example\r\nI'm using `loadNodeContent` to get content from files:\r\n![image](https://user-images.githubusercontent.com/28801003/89067432-eb45a380-d377-11ea-9084-00479f073ccc.png)\r\n\r\nFiles used `windows-1251` encoding:\r\n![image](https://user-images.githubusercontent.com/28801003/89067628-58f1cf80-d378-11ea-89d2-da5d99e16a13.png)\r\n\r\nAfter loading with `loadNodeContent` symbols become broken:\r\n![image](https://user-images.githubusercontent.com/28801003/89067445-f698cf00-d377-11ea-9890-bfd981f4a9fd.png)\r\n\r\n### Motivation\r\n\r\nI faced with project that used `windows-1251` encoding in files, and I believe that's helpful for other Japanese/Chinese symbol encodings. Also it's useful for _transformer_ plugins development.\r\n\r\n\r\nI'll prepare PR with this feature. There is just few simple changes in [`gatsby-source-filesystem`](https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/src/index.js#L3-L5) and [`gatsby core`](https://github.com/gatsbyjs/gatsby/blob/d842f8c27c0c65d3c6d6a1113bfe12596f93c13c/packages/gatsby/src/db/nodes.ts#L7)\r\n\r\nP.S. This project from 2000s, so sorry for deprecated HTML markup on screenshots :man_shrugging: "},{"labels":["enhancement"],"text":"## Summary\r\n\r\nWebpack v5 (beta) is good on its way to get released.\r\n\r\nSo I think it's time to have a plan on how and when to integrate it in to Gatsby.\r\nFor me, a topic like that will naturally finds its place in the next major - v3.\r\n\r\n### Motivation\r\n\r\nThere are a couple of nice features I think, also Gatsby would have benefits of:\r\n\r\n- improve build performance with Persistent Caching.\r\n- improve Long Term Caching with better algorithms and defaults.\r\n- improve bundle size with better Tree Shaking and Code Generation\r\n\r\nMore details in the [Webpack v5 change log](https://github.com/webpack/changelog-v5)\r\n\r\nAlso, [Module Federation](https://github.com/module-federation) is something I see as a very interesting feature.\r\n\r\n### More details\r\n\r\nNext.js has just announced [their Webpack v5](https://nextjs.org/blog/next-9-5#webpack-5-support-beta) integration in that [blog post](https://nextjs.org/blog/next-9-5).\r\n\r\nThere is a [v4 to v5 migration guide](https://github.com/webpack/changelog-v5/blob/master/MIGRATION%20GUIDE.md).\r\n"},{"labels":["enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nOne really useful feature to have in the `gatsby-source-contentful` is the ability to customize locale fallback for assets. In Contentful, the locale fallback feature applies to all content (entries and assets). This almost never desirable and there doesn't seem to be any plans from them to make that configuration more granular. I noticed in the source plugin (based on 2.3.33) that there is a utility function used to fetch fields with a locale fallback. I'm wondering if that can be fed some plugin config option.\r\n\r\n### Basic example\r\n\r\nIn the following example, assets that don't have a file set for en-gb will use the file value for en-us.\r\n\r\n```js\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: \"gatsby-source-contentful\",\r\n      options: {\r\n        getFallbackLocale: (nodeType, fieldName, locale) => {\r\n          if (\r\n            nodeType === \"ContentfulAsset\" &&\r\n            fieldName === \"file\" &&\r\n            locale === \"en-gb\"\r\n          ) {\r\n            return \"en-us\";\r\n          }\r\n        },\r\n      },\r\n    },\r\n  ],\r\n};\r\n```\r\n\r\nThe API is purposely abstracted to support not just assets but any Contentful node type. There are use cases to customise the fallback behaviour for other content types. Another example is that we store our translation phrases as entries in Contentful and if a phrase is defined in en-gb but not en-au then we can define a fallback for ContentfulTranslation node type from en-au to en-gb.\r\n\r\n### Motivation\r\n\r\nWhy are we doing this? What use cases does it support? What is the expected outcome?\r\n\r\nExplained in earlier sections.\r\n"},{"labels":[null,null,null,"enhancement",null],"text":"I am using gatsby-plugin-feed to build a feed for a website. The site uses the pathPrefix functionality in production. Normally, one can use `withPrefix` function to add the prefix to a url when in production and add no prefix while developing.\r\n\r\nThe RSS serializes function however, is defined in gatsby-config.js and when loading the `withPrefix` function it displays this error:\r\n\r\n```\r\n__BASE_PATH__ is not defined\r\n```\r\n\r\nHow can I add a prefix to a url in gatsby-config without repeating all the logic in gatsby-cli to combine `process.argv` and `env.PREFIX_PATHS`.\r\n\r\n"},{"labels":[null,null,"enhancement"],"text":"If we fail to restart `gatsby develop`, the restarting screen should say so instead of staying in the loading state. See https://github.com/gatsbyjs/gatsby/pull/26000#discussion_r460904462 cc @pieh "},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nWhen navigating programmatically, Gatsby provides the navigate function which causes build errors when used in the render method (Window is not defined. See issue #10421). The build error message is not very helpful in tracking this mistake down and the documentation doesn't mention this. I was lucky to find a few issues mentioning this and was able to put navigate in a useEffect. There are a couple things I think to improve this:\r\n\r\n1. Include a Redirect component in Gatsby-Link. As suggested in the issue above, a user can import Redirect from reach router. Because Gatsby-Link already has this dependency, I think it'd be helpful to be able to just import Redirect from gatsby instead of installing Reach. \r\n2. Make a note about this in the documentation. \r\n3. Somewhat related but could probably be it's own issue: improve the error output on build. Just knowing that window is not defined is a good start, but it'd be helpful to see a stack trace or reference to what code is failing.\r\n\r\n### Basic example\r\n```\r\nimport { Redirect, navigate } from \"gatsby\"\r\n\r\n// Correct\r\nif (!user) {\r\n   <Redirect to=\"...\" />\r\n}\r\n\r\n// Incorrect, but common attempt\r\nif (!user) {\r\n navigate(\"/...\")\r\n}\r\n```\r\n\r\n\r\n### Motivation\r\n\r\nRedirecting programmatically is common, for example when creating components that redirect if a user isn't logged in.\r\n"},{"labels":[null,null,"enhancement",null],"text":"## Summary\r\nWhen running `gatsby new`, we change into the new site's directory to run the appropriate installations and then [we move back out to the previous directory](https://github.com/gatsbyjs/gatsby/blob/7b1a0f29eb48f5d0b1848baa269c6764a76dc172/packages/gatsby-cli/src/init-starter.ts#L125). Then, in both the CLI output and any of our docs, we tell the user to move back into that directory. I propose that we don't move back into the original directory but leave the users in their new sites' working directory. \r\n\r\n### Basic example\r\n```shell\r\n$parent-directory ~ gatsby new my-great-site\r\n... code runs ...\r\n$my-great-site ~ gatsby develop\r\n```\r\n### Motivation\r\nThe current setup likely causes some confusion (our anonymous telemetry data seems to indicate that) and at a gut-level, this feels like an unnecessary step for users. Dropping that directory change should likely improve the DX especially the first time you run `gatsby new`. \r\n\r\nA major assumption to test via discussion here: \r\nUse Case A: someone runs `gatsby new` they want to immediately begin working on that site\r\nUse Case B: someone runs `gatsby new` and then wants to move on to something else in the parent directory\r\n\r\nI'm assuming that Use Case A is way more common than Use Case B. Thoughts?"},{"labels":["enhancement"],"text":"## Summary\r\n\r\nAs described in the [docs](https://www.gatsbyjs.org/packages/gatsby-plugin-google-analytics/#optional-fields). all google analytics options should be supported. Although the [cookieFlags](https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#cookieFlags) option is missing.\r\n\r\nIt lets developers specify additional flags to append to the cookie.\r\n\r\n### Motivation\r\n\r\nTo give developers some flexibility regarding [sameSite behavior](https://www.chromium.org/updates/same-site). "},{"labels":["enhancement"],"text":"## Summary\r\n\r\nFor a while I've been working on a project that has a lot of images.\r\n\r\nOne of the biggest pain points is seeing 'Generating image thumbnails' in my terminal.\r\n\r\nIt takes 12 minutes for a build on my project to complete when Gatsby flushes the cache.\r\n\r\nThe cache is flushed:\r\n\r\n- every time a dependency is bumped (with dependabot this happens on a daily basis)\r\n- every time gatsby-config.js is touched. Frankly, this doesn't happen very often, but it is still a pain.\r\n\r\nI bumped Gatsby version in the project to take advantage of Jobs API V2, which runs 'Generating image thumbnails' in parallel with page queries. That barely makes a dent in build times.\r\n\r\nI considered other options:\r\n\r\n1) moving image resizing out to a third-party service, such as imgix. Then I could remove `gatsby-plugin-sharp`, append transformations on my image URLs and get transformed images this way. The down side - additional costs and complexity in setup\r\n\r\n2) using `serverless-sharp`. Again, I could remove `gatsby-plugin-sharp` and then rely on AWS Lambda to handle image requests, run transformations on them and cache them. It's kind of like do-it-yourself imgix. The downside is all the problems associated with performance, maintenance and a bunch of other things I can't even think of\r\n\r\n3) using a CMS that has imgix integration. However, that's one of those high-effort and high-impact options. Maybe one day\r\n\r\n4) Add another dependency ImageOptim-CLI (see https://github.com/JamieMason/ImageOptim-CLI) to squeeze any unresized/uncompressed original images. Then run this once for all images and add a background task to resize and compress any newly added images. This way, the committed images would get squashed, so every time an image has to go through the resizing process, the number of bytes going through the image resizing `sharp` library, would be smaller. The downside is that this is like an improvement rather than a solution to a problem \r\n\r\n5) conditionally setting different `gatsby-config`, so that in `NODE_ENV=development` I don't have `gatsby-plugin-sharp`, whereas in `NODE_ENV=production` I do have `gatsby-plugin-sharp`. The downside is that this would would require changes to every GraphQL query:\r\n\r\n```\r\nchildImageSharp {\r\n  fluid(maxWidth: 1200) {\r\n    ...GatsbyImageSharpFluid_withWebp\r\n  }\r\n}\r\n```\r\n\r\nThe above query would have to change to return just `src` in `development` and the current version in `production`. This could be done via GraphQL fragments and conditional queries. However, this is quite ugly and introduces divergence in the code\r\n\r\nAnd then every place that consumes it:\r\n\r\n`<Img fluid={data.something.childImageSharp.fluid} />`\r\n\r\nWould have to be handled by some sort of function that returns `src` in `development` and the current implementation in `production`.\r\n\r\nThis seems like a lot of overhead just to bypass time consuming image resizing\r\n\r\n6) Add a plugin option to `gatsby-plugin-sharp` to return original image src without doing the time consuming resizing when in `development`. This way my earlier mentioned GraphQL would still work, but every value would be the same unresized image src. It's a sort of by-pass without breaking the application.\r\n\r\nIt could look something like this:\r\n\r\n```\r\nplugins: [\r\n  {\r\n    resolve: `gatsby-plugin-sharp`,\r\n    options: {\r\n      returnOriginal: process.env.NODE_ENV !== 'production'\r\n    },\r\n  },\r\n]\r\n```\r\n\r\nI'd happily invest some of my time to work on option `6`, but first I'd like to hear Gatsby contributors thoughts on this issues as I don't know:\r\n\r\n- if this is already on the roadmap\r\n- if maintainers have discussed this and chucked the idea out the window\r\n- if maintainers have discussed this and came to a different conclusion\r\n\r\nI look forward to hearing your thoughts on this\r\n\r\n### Basic example\r\n\r\n```\r\nplugins: [\r\n  {\r\n    resolve: `gatsby-plugin-sharp`,\r\n    options: {\r\n      returnOriginal: process.env.NODE_ENV !== 'production'\r\n    },\r\n  },\r\n]\r\n```\r\n\r\n### Motivation\r\n\r\nTo speed up developer experience when running gatsby locally\r\n"},{"labels":[null,"enhancement",null],"text":"## Summary\r\n\r\nOpening this for discussion. From a recent conversation with @gaearon, he requested that we turn on StrictMode for gatsby users. React has a lot of major changes in the next 1-2 years and StrictMode is the pressure to get the community to update from legacy patterns that will be breaking in future React updates.\r\n\r\n**Proposal:** Gatsby wraps apps in develop mode with `StrictMode` and have a configuration that can disable it. But it would be opt-out.  \r\n\r\n### Motivation\r\n\r\nGatsby is an important member of the React ecosystem and we have the opportunity to do \"right\" by supporting the maintainers and the community to encourage that pressure to transition away from legacy APIs and patterns.\r\n\r\n### Discussion\r\n\r\nI'd like to discuss a few things in this issue:\r\n\r\n1. Are we happy to make this change? It might be contentious and disrupt some users _marginally._\r\n1. Can we ship this now or should it be part of the next major?\r\n1. What would be the costs/risks/negative consequences?"},{"labels":[null,"enhancement"],"text":"PR #25726 introduced slug directly in `gatsby-plugin-mdx`. Ideally, we'd be able to abstract this code to cover remark and other use cases. This will allow us to remove the MDX specific code and unlock this default field for all File based pages."},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed. This info allows Gatsby maintainers to diagnose (and fix!) your issue as quickly as possible.\r\n\r\n  Useful Links:\r\n  - Documentation: https://www.gatsbyjs.org/docs/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues: https://github.com/gatsbyjs/gatsby/issues\r\n-->\r\n\r\n## Description\r\n\r\nWhen stopping the development server, and running a production build with pathPrefixes, the cache from the development build somehow prevents gatsby-images from being prefixed and vice versa.\r\n\r\nRunning `gatsby clean` before the build will result in properly prefixed gatsby-images.  However, returning to the development server will now have prefixed gatsby-images from the production build.  To fix this I have to run `gatsby clean` and then run `gatsby develop`.\r\n\r\nHaving to run `gatsby clean` every time I want to build/develop is time consuming when having to rebuild the entire cache.\r\n\r\n### Steps to reproduce\r\n\r\nhttps://github.com/nicktouchette/gatsby-bug-repro\r\n\r\nAfter cloning and installing the repo.\r\n\r\nReproduction for broken gatsby-image in production build\r\n1. `gatsby develop` to ensure both images load without a prefix.\r\n2. `gatsby build --prefix-paths` or `yarn build`\r\n3. `gatsby serve --prefix-paths` or `yarn serve` and browse to localhost:9000/prefix\r\n\r\nFixing the gatsby-image prefix in the production build\r\n1. `gatsby clean`\r\n2. `gatsby build --prefix-paths` or `yarn build`\r\n3. `gatsby serve --prefix-paths` or `yarn serve` and browse to localhost:9000/prefix\r\n\r\nReproduction of broken gatsby-images in development\r\n1. `gatsby develop` gatsby-image should still be prefixed, resulting in a broken image.\r\n\r\nFixing the gatsby-image prefix in development\r\n1. `gatsby clean`\r\n2. `gatsby develop` gatsby-image will not be prefixed\r\n\r\n### Expected result\r\n\r\nBoth of the images should be prefixed with `/prefix` when serving with prefixPath, and when in development server, both images should not be prefixed.\r\n\r\n### Actual result\r\n\r\nThe imported image has the correct prefix in both development and production, and the gatsby-image does not update until a cache is wiped.\r\n\r\n### Environment\r\n\r\n  System:\r\n    OS: macOS 10.15.5\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-5250U CPU @ 1.60GHz\r\n    Shell: 5.7.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 10.15.0 - ~/.nvm/versions/node/v10.15.0/bin/node\r\n    Yarn: 1.22.4 - ~/.nvm/versions/node/v10.15.0/bin/yarn\r\n    npm: 6.13.6 - ~/.nvm/versions/node/v10.15.0/bin/npm\r\n  Languages:\r\n    Python: 2.7.16 - /usr/bin/python\r\n  Browsers:\r\n    Chrome: 83.0.4103.116\r\n    Safari: 13.1.1\r\n  npmPackages:\r\n    gatsby: ^2.23.12 => 2.23.12 \r\n    gatsby-image: ^2.4.13 => 2.4.13 \r\n    gatsby-plugin-sharp: ^2.6.19 => 2.6.19 \r\n    gatsby-source-filesystem: ^2.3.19 => 2.3.19 \r\n    gatsby-transformer-sharp: ^2.5.11 => 2.5.11 \r\n\r\n"},{"labels":[null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed. This info allows Gatsby maintainers to diagnose (and fix!) your issue as quickly as possible.\r\n\r\n  Useful Links:\r\n  - Documentation: https://www.gatsbyjs.org/docs/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues: https://github.com/gatsbyjs/gatsby/issues\r\n-->\r\n\r\n## Description\r\n\r\nGatsby image does not generate the `type`  attribute two the second `source`  tag while using `GatsbyImageSharpFluid_withWebp` fragment\r\n\r\n### Steps to reproduce\r\n\r\nGo to the default [starter demo](https://gatsby-starter-default-demo.netlify.app/). Check the code of generated image on main page:\r\n```\r\n<picture>\r\n<source srcset=\"/static/6d91c86c0fde632ba4cd01062fd9ccfa/5db04/gatsby-astronaut.png 75w,\r\n/static/6d91c86c0fde632ba4cd01062fd9ccfa/6d161/gatsby-astronaut.png 150w,\r\n/static/6d91c86c0fde632ba4cd01062fd9ccfa/630fb/gatsby-astronaut.png 300w,\r\n/static/6d91c86c0fde632ba4cd01062fd9ccfa/62b1f/gatsby-astronaut.png 450w,\r\n/static/6d91c86c0fde632ba4cd01062fd9ccfa/2a4de/gatsby-astronaut.png 600w,\r\n/static/6d91c86c0fde632ba4cd01062fd9ccfa/ee604/gatsby-astronaut.png 800w\" sizes=\"(max-width: 300px) 100vw, 300px\">\r\n<img sizes=\"(max-width: 300px) 100vw, 300px\" srcset=\"/static/6d91c86c0fde632ba4cd01062fd9ccfa/5db04/gatsby-astronaut.png 75w,\r\n/static/6d91c86c0fde632ba4cd01062fd9ccfa/6d161/gatsby-astronaut.png 150w,\r\n/static/6d91c86c0fde632ba4cd01062fd9ccfa/630fb/gatsby-astronaut.png 300w,\r\n/static/6d91c86c0fde632ba4cd01062fd9ccfa/62b1f/gatsby-astronaut.png 450w,\r\n/static/6d91c86c0fde632ba4cd01062fd9ccfa/2a4de/gatsby-astronaut.png 600w,\r\n/static/6d91c86c0fde632ba4cd01062fd9ccfa/ee604/gatsby-astronaut.png 800w\" src=\"/static/6d91c86c0fde632ba4cd01062fd9ccfa/630fb/gatsby-astronaut.png\" alt=\"\" loading=\"lazy\" style=\"position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; object-fit: cover; object-position: center center; opacity: 1; transition: opacity 500ms ease 0s;\">\r\n</picture>\r\n```\r\nSource tag does not have `media` or `type` attributes\r\n\r\n### Expected result\r\n\r\nAccording to [specification](https://html.spec.whatwg.org/multipage/embedded-content.html#the-source-element):\r\n\r\n> When a source element has a following sibling source element or img element with a srcset attribute specified, it must have at least one of the following:\r\n>    * A media attribute specified with a value that, after stripping leading and trailing ASCII whitespace, is not the empty string and is not an ASCII case-insensitive match for the string \"all\".\r\n>    * A type attribute specified.\r\n\r\n### Actual result\r\n\r\n[Html validator](https://validator.w3.org/nu/) marks this behavior as an error:\r\n> A source element that has a following sibling source element or img element with a srcset attribute must have a media attribute and/or type attribute.\r\n\r\n### Environment\r\n\r\nAny environment"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nGatsby currently does not run SSR in develop mode. This has caused some users headaches when they deploy gatsby apps to find that there are production-only issues due to SSR.\r\n\r\nThe solution is to convert gatsby develop into running true SSR. \r\n\r\n### Motivation\r\n\r\nTo make Gatsby easier to use, prevent hard to debug errors, and have a more consistent developer experience.\r\n"},{"labels":["enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nWith the upcoming routing APIs in #25204 one pain point is creating url paths from markdown files. A common use case in current mdx apps is to generate a slug from the file path in gatsby node. \r\n\r\nInstead of creating that path when creating the page, we want to add that to the mdx schema. Something like this should work:\r\n\r\n\r\n```js\r\nexports.setFieldsOnGraphQLNodeType = ({type, getNode}) => {\r\n if (type.name === `allMdx`) {\r\n    return {\r\n      prettyPath: {\r\n        type: GraphQLString,\r\n        resolve: (node) => createFilePath({ node, getNode })\r\n      }\r\n    }\r\n  }\r\n  return {}\r\n}\r\n```\r\n\r\n### Basic example\r\n```js\r\ngraphql`\r\n  allMdx {\r\n    nodes {\r\n      prettyPath\r\n    }\r\n  }\r\n`\r\n```\r\n### Motivation\r\n\r\nThis will make creating these filepaths really easy:\r\n\r\n`/src/pages/blog/{prettyPath}.js`\r\n"},{"labels":[null,"enhancement"],"text":"## Description\r\n\r\nGatsby's html.js already contains a viewport specification:\r\n\r\n`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />`\r\n\r\nThus when you set the viewport with gatsby-plugin-react-helmet, there are two viewport specification.\r\n\r\nYou can fix this by overriding html.js and adding `data-react-helmet=\"true\"`.\r\n\r\nWould it make sense to add this by default so one does not have to override html.js?\r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nFor [gatsby-remark-prismjs](https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-remark-prismjs), please consider providing an option to set a _default language_ in gatsby-config.js.\r\n\r\n### Basic example\r\n\r\nRight now, we have to specify the language manually every time we add code to a markdown file, for example:\r\n\r\n```md\r\nLorem `csharp¬ipsum = dolor(sit);` amet.\r\n```\r\n\r\n### Motivation\r\n\r\nFor those of us using the same language almost exclusively, it would be much more convenient if there was an option to set a default language in gatsby-config.js, for example:\r\n\r\n```js\r\n{\r\n    resolve: 'gatsby-remark-prismjs',\r\n    options: {\r\n        inlineCodeMarker: '¬',\r\n        inlineCodeDefaultLanguage: 'csharp',\r\n        blockCodeDefaultLanguage: 'csharp',\r\n    },\r\n},          \r\n```"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nThere is a great PR handling `timeToRead` for Chinese/Japanese input in PR #21312 on `gatsby-transformer-remark`.\r\nHowever, this PR does not support mdx.\r\nIt would be great `gatsby-plugin-mdx` handle Chines/Japanese similarly.\r\n\r\n### Basic Example\r\n\r\nAn example similar to #21311, but using starter with mdx.\r\n\r\n### Motivation\r\n\r\nThis feature provides more accurate `timeToRead` field for Chinese/Japanese body for project using mdx.\r\n"},{"labels":[null,null,"enhancement"],"text":"# Summary\r\nIm trying to make some changes to the theme wkocjan/gatsby-theme-intro/ via shadowing, one of the components contain a graphQL fragment and i get the error\r\n```\r\nFound two different GraphQL fragments with identical name \"ProjectFragment\". Fragment names must be unique\r\n\r\n  File: /home/user/my-site/node_modules/@wkocjan/gatsby-theme-intro/src/types/project.js\r\n  > 1 | fragment ProjectFragment on ProjectsYaml{description icon image{childImageSharp{fluid(maxWidth:640 quality:85){...GatsbyImageSharpFluid_withWebp}}}name status tags url}\r\n|             ^^^^^^^^^^^^^^^\r\n\r\n  File: /home/user/my-site/src/@wkocjan/gatsby-theme-intro/types/project.js\r\n  > 1 | fragment ProjectFragment on ProjectsYaml{description icon image{childImageSharp{fluid(maxWidth:640 quality:85){...GatsbyImageSharpFluid_withWebp}}}name status tags url iconURL}\r\n|             ^^^^^^^^^^^^^^^\r\n\r\n```\r\nWhats the correct way to resolve this issue? Thanks in advance.\r\n## Relevant information\r\nBelow is the component i tried to shadow, i only added 2 lines indicted by the arrows.\r\n```\r\nimport { graphql } from \"gatsby\"\r\nimport { arrayOf, shape, string, object, oneOf } from \"prop-types\"\r\n\r\nexport const ProjectType = {\r\n  description: string,\r\n  icon: oneOf([\"github\", \"website\"]),\r\n  image: shape({\r\n    childImageSharp: object.isRequired,\r\n  }),\r\n  name: string.isRequired,\r\n  status: string,\r\n  tags: arrayOf(string),\r\n  url: string,\r\n  iconURL: string,  <------ added this\r\n}\r\n\r\nexport const query = graphql`\r\n  fragment ProjectFragment on ProjectsYaml {\r\n    description\r\n    icon\r\n    image {\r\n      childImageSharp {\r\n        fluid(maxWidth: 640, quality: 85) {\r\n          ...GatsbyImageSharpFluid_withWebp\r\n        }\r\n      }\r\n    }\r\n    name\r\n    status\r\n    tags\r\n    url\r\n    iconURL <------ added this\r\n  }\r\n`\r\n```\r\n\r\n### Environment (if relevant)\r\n  System:\r\n    OS: Linux 5.6 Manjaro Linux\r\n    CPU: (1) x64 Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz\r\n    Shell: 5.0.17 - /bin/bash\r\n  Binaries:\r\n    Node: 14.4.0 - ~/.nvm/versions/node/v14.4.0/bin/node\r\n    Yarn: 1.22.4 - /usr/bin/yarn\r\n    npm: 6.14.5 - ~/.nvm/versions/node/v14.4.0/bin/npm\r\n  Languages:\r\n    Python: 3.8.3 - /usr/bin/python\r\n  Browsers:\r\n    Firefox: 78.0.1\r\n  npmPackages:\r\n    gatsby: ^2.23.14 => 2.23.14\r\n  npmGlobalPackages:\r\n    gatsby-cli: 2.12.51\r\n\r\n\r\n### File contents (if changed)\r\n\r\n`gatsby-config.js`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n`package.json`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n`gatsby-node.js`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n`gatsby-browser.js`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n`gatsby-ssr.js`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n"},{"labels":[null,null,null,null,"enhancement"],"text":"## Description\r\n\r\nRe-add a \"Last updated\" field for the markdown documentation that shows when the page was last updated (according to git logs)\r\n\r\n## Background\r\n\r\nThis feature was previously implemented in  #19391, but there was a bug: the \"Last updated\" date was always displayed as the last time the site was built. The feature was removed in #25397 to prevent confusion, but we'd like to add it back.\r\n\r\nThe reason for the bug is most likely because the Gatsby Cloud build does a shallow checkout of the monorepo, only keeping the latest git log entry. It could be fixed by doing a deep clone of the monorepo, but it's too big and would increase the website's already slow build time."},{"labels":[null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nBabel macros are [supported](https://www.gatsbyjs.org/docs/babel-plugin-macros/) by Gatsby, however, despite being run at compile time they're not able to generate static queries. Attempting to do so results in:\r\n\r\n```\r\nError: It appears like Gatsby is misconfigured. Gatsby related `graphql` calls are supposed to only be evaluated at compile time, and then compiled away. Unfortunately, something went wrong and the query was left in the compiled code.\r\n```\r\n\r\nIt would be incredibly useful to allow plugin authors and users to leverage babel macros to generate static queries.\r\n\r\n### Motivation\r\n\r\nCurrently, the ergonomics around static queries can be quite bad and full of boilerplate. Since not all static queries are unique, it would make sense to have some method to reduce the code duplication caused by similar queries with a different parameter or something. I suppose this spirit of this feature request is similar to #10482."},{"labels":[null,"enhancement"],"text":"\r\n\r\n## Summary\r\nI'm using the plugin with a WPCOM site and I always see the error: \r\n```\r\nPath: /oauth2/token\r\nThe server response was \"400 Bad Request\"\r\n```\r\nThis feature request aims at implementing a way to remove the query for an oauth token\r\n\r\n\r\n### Basic example\r\n\r\n```\r\n...\r\nauth: {\r\n   oauth: false // boolean\r\n}\r\n```\r\n### Motivation\r\n\r\nThis should remove unnecessary error messages..   \r\n"},{"labels":[null,"enhancement"],"text":"Since as of apiVersion 2020-04, the `quantityAvailable` field can be queried from the Storefront API, is it possible to query this field now if I set the apiVersion to \"2020-04\"? It doesn't seem to be working for me. Is there something I need to do apart from enabling the `unauthenticated_read_product_inventory` permission for the Storefront API (which I've already done)?\r\n\r\nThanks"},{"labels":[null,"enhancement"],"text":"Hello!  I would like to request a feature to go with the <Pullquote> component. \r\n\r\nThe `<Pullquote>` component, which is allowed in MDX, supports setting an optional `citation` like so:  `<Pullquote citation=\"Dennis Brotzky, Founding Partner, Narative\">`.\r\n\r\nThe feature I'm requesting is the ability to add links to the citation, e. g. if we want to link to the website of the person we attributed the quote to. In MDX this would be `Dennis Brotzky, Founding Partner, [Narative](https://www.narative.co/)` but putting in the markdown link does not work in the `<Pullquote citation=\"\">` context.\r\n\r\nThanks!\r\n\r\n"},{"labels":["enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nI would like to be able to run `gatsby develop --prefix-paths` (eg, with the `pathPrefix` property set in `gatsby-config.js`), and it should work.\r\n\r\n### Motivation\r\n\r\nI'm trying to run a production build at the root page (`/`), and a development/staging server (at a prefixed path, such as `/editor/`) for admin controls (like live page editing, which would programmatically get 'published'/built on the production page at `/`). All this while using TinaCMS with Gatsby. Also, if it's weird behavior to have two different path prefixes, I'm fine with having slightly different `gatsby-config.js` files between the production and development/staging websites.\r\n\r\nAs a side note, perhaps this feature may even be better run as `gatsby staging --prefix-paths` since it's for a staging environment?\r\n\r\nI noticed that [people have wanted prefix paths in development for a while](https://github.com/gatsbyjs/gatsby/issues/16040), but I'm not sure what the status is on this... If you guys are willing to give some direction, I'd be willing to implement this feature, either for development or for a new 'staging' command.\r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nAdding a way to get AST of Table of contents just like the htmlAst property.\r\n\r\n### Basic example\r\n\r\n```graphql\r\n{\r\n  allMarkdownRemark {\r\n    edges {\r\n      node {\r\n        html\r\n        htmlAst\r\n        tableOfContents\r\n        tableOfContentsAst // <- add this\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Motivation\r\n\r\nWhen a user using htmlAst to customize the output DOM, they may want to access the AST of the table of contents too.\r\nIn my case, I'm using the htmlAst with `rehype-react`. When I want to add functionality to the table of contents, like emphasizing the header which a user is reading. It's very convenient if I can get the AST of the table of contents."},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nAllows gtag to be loaded in development. Currently, it is only loaded in production.\r\n\r\n### Basic example\r\n\r\nAdd an `includeInDevelopment` flag similar to `gatsby-plugin-google-tagmanager`.\r\n```\r\n {\r\n      resolve: `gatsby-plugin-google-gtag`,\r\n      options: {\r\n        includeInDevelopment: true,\r\n        trackingIds: ['GA_ID'],\r\n      },\r\n    }\r\n```\r\n\r\n### Motivation\r\n\r\nWe're currently revamping our entire analytics architecture at work which is fairly complex and need to test events locally before deploying to production. Allowing gtag to load in development will help tremendously and save us from needing to build every time we want to test.\r\n\r\nWe're currently using a modified fork of this plugin with the `includeInDevelopment` flag added. I'm happy to submit a PR if the community thinks this is a valuable contribution.\r\n"},{"labels":[null,null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nThe [Linklist object](https://shopify.dev/docs/themes/liquid/reference/objects/linklist) which is available via Shopify API is currently not being pulled in by the [Shopify source plugin](https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-source-shopify) . Can the source plugin pull in the Linklist object so we can access it in GraphQL?\r\n\r\n### Motivation\r\nThe Linklist object is primarily used for parsing Navigation and Menus but also often used by Shopify theme developers to give the customer a way to dynamically set a product for a specific feature. See e.g. [Gift wrap option](https://shopify.dev/tutorials/customize-theme-add-gift-wrap-option) as one of many examples of how the Linklist can be used not only for Menus."},{"labels":[null,"enhancement",null],"text":"## Summary\r\n\r\n[Gatsby Link](https://www.gatsbyjs.org/docs/gatsby-link/) is making low-priority prefetch requests for links in the viewport, and high-priority requests `onMouseOver`.\r\n\r\nCould this be matched for keyboard navigation by making high-priority requests `onFocus`?\r\n\r\n### Basic example\r\n\r\nn/a\r\n\r\n### Motivation\r\n\r\nThis would make navigation faster for keyboard users.\r\n"},{"labels":["enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nFirst off, thank you! Gatsby is a wonderful technology.\r\n\r\nI have created a gatsby-theme that requires **siteMetadata.siteUrl**; for instance, take a look at the **gatsby-plugin-canonical-urls** section of the theme's gatsby-config.js below:\r\n\r\n```js\r\n// gatsby-config.js of the theme\r\nmodule.exports = themeOptions => {\r\n  return {\r\n    plugins: [\r\n      ...\r\n      {\r\n        resolve: `gatsby-plugin-canonical-urls`,\r\n        options: {\r\n          siteUrl: themeOptions.siteUrl,\r\n        },\r\n      },\r\n      ...\r\n    ],\r\n  }\r\n}\r\n```\r\nHow it's used at the moment:\r\n\r\n```js\r\n// gatsby-config.js of plugin user\r\nmodule.exports = {\r\n  plugins: [\r\n    {\r\n      resolve: `gatsby-theme-test`,\r\n      options: {\r\n        siteUrl: \"https://example.com\",\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\nHow I would like to have it used:\r\n\r\n```js\r\n// gatsby-config.js of plugin user\r\nmodule.exports = {\r\n  plugins: [\r\n    ...\r\n    `gatsby-theme-test`,\r\n    ...\r\n  ],\r\n}\r\n```\r\n\r\n\r\n\r\nIt seems redundant to pass siteUrl for each plugin individually in gatsby-config.js. I would like to have my gatsby-theme fetch the siteUrl internally, and supply it to it's gatsby-config.js for use as necessary.\r\n\r\nI have found the API specified below that allows for gatsby-node.js queries to be run, yet I cannot seem to think of a way to pass data **from gatsby-node.js to gatsby-config.js**.\r\n\r\n[Node Model - runQuery | GatsbyJS](https://www.gatsbyjs.org/docs/node-model/#runQuery)\r\n\r\n### Motivation\r\n\r\nDon't repeat yourself principle"},{"labels":[null,"enhancement"],"text":"MDX v2 is currently an alpha. Upon full release, Gatsby should support v2 out of the box. This will also address lingering parsing issues from v1.\r\n\r\n- [MDX v2 PR](https://github.com/mdx-js/mdx/pull/1077)\r\n- [MDX v2 umbrella issue](https://github.com/mdx-js/mdx/issues/1041)"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nDuring `gatsby build`, errors encountered while rendering React components are shown as `WebpackError: ...`, without a useful stack trace. Would it be possible to add a stack trace through the React component tree, or at least the line number of where the error occurred?\r\n\r\n### Basic example\r\n\r\nOpen the [code sandbox](https://codesandbox.io/s/gatsby-2020-webpack-stack-trace-fr-5v4zz?file=/gatsby-node.js) and wait for the build to run into the error. The output will look like the following:\r\n\r\n![image](https://user-images.githubusercontent.com/33569/84850264-21b7a100-b00c-11ea-8152-52b271c10b33.png)\r\n\r\n\r\n### Motivation\r\n\r\nThis would enable tracking errors that occur in React components during SSR.\r\n\r\nAn alternative would be documentation about how to step through React components during SSR, added to https://gatsby.dev/html-builds or perhaps to https://www.gatsbyjs.org/docs/debugging-the-build-process/."},{"labels":["enhancement"],"text":"## Summary\r\n\r\nAccordingly to the documentation on [_redirects](https://docs.netlify.com/routing/redirects/redirect-options/#http-status-codes) of Netlify, I can have multiple 404 pages.\r\n\r\nNetlify correctly handles the additional 404 pages and as expected\r\n\r\n> the page content will change, but the URL in the browser address bar will not\r\n\r\nGatsby handles the classic `/404` page correctly like Netlify does.\r\nIf, instead, the browser receives a different 404 page, Gatsby redirects automatically to the real path of this 404 page.\r\n\r\n### Basic example\r\n\r\nThis is my _redirects file:\r\n```\r\n[some other redirect rules]\r\n\r\n/it/* /it/404 404\r\n/en/* /en/404 404\r\n```\r\nIf, for example, I type the path `www.example.com/en/asdasdasd` and I receive the content for the `/en/404` page, Gatsby automatically changes the browser path to `/en/404` instead of keeping `/en/asdasdasd`.\r\n\r\n### The issue\r\n\r\nI found the issue in `.cache/production-app.js`. Would it be a problem to change the below `pagePath.match(/^\\/404\\/?$/)` to `pagePath.match(/\\/404\\/?$/)`?\r\n\r\n```javascript\r\n  const { pagePath, location: browserLoc } = window\r\n\r\n  // Explicitly call navigate if the canonical path (window.pagePath)\r\n  // is different to the browser path (window.location.pathname). But\r\n  // only if NONE of the following conditions hold:\r\n  //\r\n  // - The url matches a client side route (page.matchPath)\r\n  // - it's a 404 page\r\n  // - it's the offline plugin shell (/offline-plugin-app-shell-fallback/)\r\n  if (\r\n    pagePath &&\r\n    __BASE_PATH__ + pagePath !== browserLoc.pathname &&\r\n    !(\r\n      loader.findMatchPath(stripPrefix(browserLoc.pathname, __BASE_PATH__)) ||\r\n      pagePath === `/404.html` ||\r\n      pagePath.match(/^\\/404\\/?$/) ||\r\n      pagePath.match(/^\\/offline-plugin-app-shell-fallback\\/?$/)\r\n    )\r\n  ) {\r\n    navigate(__BASE_PATH__ + pagePath + browserLoc.search + browserLoc.hash, {\r\n      replace: true,\r\n    })\r\n  }\r\n```"},{"labels":[null,null,"enhancement"],"text":"##  Description\r\n\r\nAdd explicit typings to NpmPackage and NpmPackageReadme so that sites that use the plugin still work even if no sites match the search parameters:\r\n\r\n```graphql\r\ntype NpmPackage implements Node {\r\n  # add fields\r\n}\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n1. Create a gatsby project using the `gatsby-source-npm-package-search` plugin\r\n2. Configure it for a keyword that returns no search results\r\n3. Create a page/static query that uses npm results\r\n4. Build the site\r\n\r\nAlternatively, run the source for gatsbyjs.org changing this line in `gatsby-config`: https://github.com/gatsbyjs/gatsby/blob/master/www/gatsby-config.js#L87\r\n\r\n```\r\n    {\r\n      resolve: `gatsby-source-npm-package-search`,\r\n      options: {\r\n        keywords: [`blablablablabla`],\r\n      },\r\n    },\r\n```\r\n\r\n### Expected result\r\n\r\nThe site builds, but the query returns `null`.\r\n\r\n### Actual result\r\n\r\nSite fails to build:\r\n\r\n```\r\nThere was an error in your GraphQL query:\r\n\r\nCannot query field \"npmPackage\" on type \"Query\".\r\n\r\nIf you don't expect \"npmPackage\" to exist on the type \"Query\" it is most likely a typo.\r\nHowever, if you expect \"npmPackage\" to exist there are a couple of solutions to common problems:\r\n\r\n- If you added a new data source and/or changed something inside gatsby-node.js/gatsby-config.js, please try a restart of your development server\r\n- The field might be accessible in another subfield, please try your query in GraphiQL and use the GraphiQL explorer to see which fields you can query and what shape they have\r\n- You want to optionally use your field \"npmPackage\" and right now it is not used anywhere. Therefore Gatsby can't infer the type and add it to the GraphQL schema. A quick fix is to add a least one entry with that field (\"dummy content\")\r\n```\r\n\r\n### Environment\r\n\r\nN/A"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nI need to report errors and warnings with their associated line number from a markdown file. For example, \"Targeted link at line 5 return 301\". The problem is that the line number does not take into consideration the number of lines of the front-matter. It is quite easy to extract the markdown content line number from the AST but I haven't find any solution to obtain and the number of front-matter lines.\r\n\r\nMy target environment is a gatsby website using gatsby-transformer-remark which itself uses gray-matter [here](https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/src/on-node-create.js#L28).\r\n\r\n### Basic example\r\n\r\nHere's an example:\r\n\r\n```md\r\n---\r\ntitle: a title\r\n---\r\n\r\ngo [here]('https://domain.com/does-no-exists')\r\n```\r\n\r\nThe above should throw a message like \"Targeted link at line 5 return 301\" while instead it print \"Targeted link at line 2 return 301\". I know the line number in the content but I can't add the number of lines of the front-matter.\r\n\r\n### Suggestion\r\n\r\nThe gray-matter module return a property called `matter` which is the raw content of the front-matter. From there, by splitting its value by lines, we could obtain the number of lines of the front-matter.\r\n\r\nI propose to expose the `matter` property with a new property named `rawMarkdownFrontMatter`, the same way as we expose the gray-matter `content` property in `rawMarkdownBody`.\r\n\r\nNote, I could provide a pull request if the proposal is relevant and accepted.\r\n"},{"labels":["enhancement"],"text":"Hi, I'm using Gatsby CLI version: 2.11.5, and the node_modules folder is just huge with 490Mo.\r\n\r\n`\r\ngatsby new gatsby-site\r\ndu -sh gatsby-site/node_modules\r\n490M\tgatsby-site/node_modules\r\n\r\ndu -sm gatsby-site/node_modules/* | sort -nr | head -15\r\n52\tgatsby-site/node_modules/typescript\r\n30\tgatsby-site/node_modules/sharp\r\n25\tgatsby-site/node_modules/react-icons\r\n25\tgatsby-site/node_modules/date-fns\r\n23\tgatsby-site/node_modules/@babel\r\n17\tgatsby-site/node_modules/rxjs\r\n12\tgatsby-site/node_modules/gatsby\r\n11\tgatsby-site/node_modules/prettier\r\n9\tgatsby-site/node_modules/gatsby-cli\r\n9\tgatsby-site/node_modules/fbjs\r\n9\tgatsby-site/node_modules/babel-runtime\r\n9\tgatsby-site/node_modules/@types\r\n8\tgatsby-site/node_modules/@graphql-tools\r\n7\tgatsby-site/node_modules/gatsby-interface\r\n7\tgatsby-site/node_modules/core-js-pure\r\n`\r\nI love Gatsby, I know it uses many technologies behind like graphQL, but I have multiple projects using it, and it takes a huge space on my old mac at the end. It would be great to reduce the overall size.\r\n\r\nAlso, I've noticed Gridsome suffers from more or less the same defect."},{"labels":["enhancement"],"text":"I'd love to see support for https://endler.dev/2019/tinysearch/ in Gatsby. "},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n_This feature is relevant for the build stage_\r\nSo  Gatsby creates a JS bundle which will be used: \r\n- When Gatsby creates the html pages.\r\n- When served to the client.\r\nBut suppose some of the packages are _only relevant_ when **creating the html pages**, (e.g. if when using a package to format a word for localization purpose like react-intl)\r\n### Basic example\r\nThis could be dont implemented as follows, _Suggestion_\r\nAs a plugin:\r\n```\r\n  resolve: 'gatsby-exclude-client',\r\n      options: {\r\n        modules: ['@formatjs','react-intl'],\r\n      },\r\n    }\r\n\r\n```\r\n### Motivation\r\n\r\nI think this would decrease the file size sent to the client, which would lead to better performance. \r\nI have encountered that when testing with lighthouse, hence I got unused script warning, this is a related issue #24332. (I have used [webpack bundle analyzer](https://www.gatsbyjs.org/packages/gatsby-plugin-webpack-bundle-analyser-v2/) also the [dev tools coverage tools](https://developers.google.com/web/tools/chrome-devtools/coverage)) which eventually lead me to this conclusion. "},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nAll native Wordpress graphQL endpoints start with \"wordpressWp\" except for posts, pages, categories and tags, because of the following piece of code:\r\n```\r\nswitch (rawType) {\r\n          case `${typePrefix}posts`:\r\n            validType = refactoredEntityTypes.post;\r\n            break;\r\n\r\n          case `${typePrefix}pages`:\r\n            validType = refactoredEntityTypes.page;\r\n            break;\r\n\r\n          case `${typePrefix}tags`:\r\n            validType = refactoredEntityTypes.tag;\r\n            break;\r\n\r\n          case `${typePrefix}categories`:\r\n            validType = refactoredEntityTypes.category;\r\n            break;\r\n\r\n          default:\r\n            validType = `${typePrefix}${manufacturer.replace(/-/g, `_`)}_${entityType.replace(/-/g, `_`)}`;\r\n            break;\r\n        }\r\n```\r\n\r\nIt seems the only thing it does is convert e.g. \"allWordpressWpPosts\" to \"allWordpressPost\".\r\n\r\n### Motivation\r\n\r\nIt's not consistent. It even changes it from being plural to singular. Is there any way this could just be removed or be made optional? It seems to serve no purpose.\r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nCustom props should be allowed to be passed to the root tag of a Gatsby Image component.\r\n\r\n### Basic example\r\n\r\n```\r\nimport Image from 'gatsby-image'\r\n\r\n<Image customProp={1} />\r\n<Image {...customProps} />\r\n```\r\n\r\nIn this example, customProp and customProps should be passed to the root element of the Image component.\r\n\r\n### Motivation\r\n\r\nI'm sure there are several use cases where custom props would be useful. A good example is for flip animations. [React-flip-toolkit](https://github.com/aholachek/react-flip-toolkit), requires custom props to be [passed to the root element of a React component](https://github.com/aholachek/react-flip-toolkit#wrapping-a-react-component). Without the ability to pass custom props, flip animations are not possible."},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\n`gatsby-source-wordpress` only allows the \"password\" grant type for integrating with wordpress.com, suggest we allow to configure `authorization_code` grant type as well.\r\n\r\n### Basic example\r\n\r\nAllow to specify an authorization code as [documented here](https://developer.wordpress.com/docs/oauth2/) using the `authorization_code` grant type.\r\n\r\n```\r\nauth: {\r\n    wpcom_app_clientSecret: \"xxxyyyzzz\",\r\n    wpcom_app_clientId: \"999999\",\r\n\r\n    // implies authorization_code grant type:\r\n    wpcom_app_code: \"abcdefg123\",\r\n}\r\n```\r\n\r\n\r\n### Motivation\r\n\r\nThis would allow:\r\n\r\n- Better security (don't use your Wordpress.com a/c username and password outside your direct control)\r\n- Other authn methods within Wordpress.com (sign in with Google, sign in with Apple)"},{"labels":["enhancement"],"text":"  Integrating a popular plugin to this CMS will help webmaster to leverage a lot of features.\r\n\r\n  Useful Links:\r\n  - [https://yoast.com/yoast-seo-platforms/your-platform/](url)\r\n\r\n  \r\n"},{"labels":[null,null,null,"enhancement"],"text":"I need less alias without tilde, it's supported in [less-loader version 6](https://github.com/webpack-contrib/less-loader/releases/tag/v6.0.0)\r\n\r\nIs it possible to update gatbsy-plugin-less less-loader to version 6.1.0? thanks"},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed. This info allows Gatsby maintainers to diagnose (and fix!) your issue as quickly as possible.\r\n\r\n  Useful Links:\r\n  - Documentation: https://www.gatsbyjs.org/docs/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues: https://github.com/gatsbyjs/gatsby/issues\r\n-->\r\n\r\n## Description\r\n\r\nOn slow networks it is impossible to download all assets when there are a large amount of them due to slow network and the default timeout set to 30s.\r\n\r\n### Steps to reproduce\r\n\r\nThere is no minimal reproduction link as it needs a Shopify store setup and a slow network.\r\n\r\nI also don't want to make public my Shopify access-token for security reasons.\r\n\r\n### Expected result\r\n\r\nI should be able to define a maximum timeout myself on the configuration in order to develop my site.\r\n\r\n### Actual result\r\n\r\nI am not able to develop because of my slow network, which makes the gatsby server throwing an error and crashing.\r\n\r\n```\r\nERROR #11321 PLUGIN\r\n\r\n\"gatsby-source-shopify\" threw an error while running the sourceNodes lifecycle:\r\n\r\nfailed to process https://cdn.shopify.com/s/files/1/0403/0159/2737/products/<my-asset-name>.png\r\n\r\nTimeoutError: Timeout awaiting 'request' for 30000ms\r\n\r\n[...]\r\n\r\nerror Command failed with exit code 1.\r\n```\r\n\r\n### What I tried to do\r\n\r\n- I tried to reduce the `paginationSize` option property of the `gatsby-source-shopify` plugin but it doesn't work, as this issue is related to images/videos assets and not Shopify JSON API.\r\n\r\n### Environment\r\n\r\n  System:\r\n    OS: macOS 10.15.4\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz\r\n    Shell: 5.7.1 - /bin/zsh\r\n  Binaries:\r\n    Node: 12.14.1 - ~/.nvm/versions/node/v12.14.1/bin/node\r\n    Yarn: 1.22.4 - ~/.yarn/bin/yarn\r\n    npm: 6.14.4 - ~/.nvm/versions/node/v12.14.1/bin/npm\r\n  Languages:\r\n    Python: 2.7.17 - /usr/local/bin/python\r\n  Browsers:\r\n    Chrome: 83.0.4103.61\r\n    Safari: 13.1\r\n  npmPackages:\r\n    gatsby: ^2.22.15 => 2.22.15 \r\n    gatsby-image: ^2.4.5 => 2.4.5 \r\n    gatsby-plugin-codegen: ^1.1.0 => 1.1.0 \r\n    gatsby-plugin-manifest: ^2.4.9 => 2.4.9 \r\n    gatsby-plugin-offline: ^3.2.7 => 3.2.7 \r\n    gatsby-plugin-react-helmet: ^3.3.2 => 3.3.2 \r\n    gatsby-plugin-sharp: ^2.6.9 => 2.6.9 \r\n    gatsby-plugin-styled-components: ^3.3.3 => 3.3.3 \r\n    gatsby-source-filesystem: ^2.3.8 => 2.3.8 \r\n    gatsby-source-shopify: ^3.2.10 => 3.2.10 \r\n    gatsby-transformer-sharp: ^2.5.3 => 2.5.3 \r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nadd a floating/sticky warning header which is always visible to inform about an outdated doc\r\n\r\n### Basic example\r\n\r\nopen link: https://www.gatsbyjs.org/docs/gatsby-internals-terminology/#matchpath\r\nthere is no hint about an outdated docs and the user try to read and understand the doc, and report links are broken (#24796)\r\n\r\n### Motivation\r\n\r\nuser should see at first glimbse that a doc needs an update"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\ni would like to skip the step of creating image thumbnails and create \"fake\" thumbnails.\r\n\r\n### Basic example\r\n\r\n- i set some option to skip the thumbnail creation / image processing\r\n- it creates \"Fake\" imagesets, and i can query all sharp image options from GraphQL, but it always return the original image without changes\r\n\r\n- i don't remember if there was planned an api for different image manipulation providers (image sharp, external services, lambda functions, gatsby cloud) - but then it can set up with a fake image service...\r\n\r\n\r\n### Motivation\r\n\r\n- i running the `gatsby develop` command in the gatsby doc site.\r\n- in some times something needs to run `gatsby clean` and the thumbnails are not cached anymore and it needs recreated\r\n- in most times i do not care of the image quality while developing\r\n\r\nTimes:\r\n\r\n```text\r\n1943.298 s 2678/4226 63% Generating image thumbnails\r\n\r\nsuccess run page queries - 1329.928s - 4622/4622 3.48/s\r\nsuccess Generating image thumbnails - 2196.493s - 4226/4226 1.92/s\r\n```\r\nabout 36min :("},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nCurrently the `gatsby dev -S` flag only starts up a listener for SSL requests. It'd be great if it also set up a basic 302 redirect from http -> https.\r\n\r\n### Motivation\r\n\r\nDeveloper experience, mostly. Chrome autocomplete remembers that I visit localhost:8000 regularly but not that it's an HTTPS website."},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nI would like to use the `mhchem` package with gatsby-remark-katex\r\n\r\n### Basic example\r\n\r\nFor this I would need to require the script after importing `katex` to modify katex behaviour like this:\r\n\r\n```js\r\nconst katex = require('katex');\r\nrequire('katex/dist/contrib/mhchem.js'); // modify katex module\r\n```\r\n\r\nAs described here: https://github.com/KaTeX/KaTeX/pull/2178/files\r\n\r\n### Motivation\r\n\r\nMaybe it could be added with another key in the configuration objects something like:\r\n\r\n```js\r\nplugins: ['katex/dist/contrib/mhchem.js', ...]\r\n```\r\n"},{"labels":[null,"enhancement"],"text":"## Goal\r\n\r\nWe want to make sure the following is true:\r\n- users can input information into the recipe\r\n- users can install the recipe\r\n- users can know if the recipe installed successfully or not\r\n- users can view the resources installed\r\n\r\n## How to reach that goal\r\n\r\nI'll setup at least 5 usability tests with Gatsby users so we can see if the statements above are true or not!\r\n\r\n## Blocked by\r\nNot sure the most effective way to test this; @kyleamathews and @johno at some point soon will people be able to clone your PR and run it in their own browser?"},{"labels":["enhancement"],"text":"## Summary\r\n\r\nThe auto-generated `#gatsby-focus-wrapper` and `#gatsby-announcer` elements have inline styles, which prevents a secure Content Security Policy from being created (it requires either `unsafe-inline`, or `unsafe-hashes` which currently poorly supported by browsers). Generating style tags instead of attributes would allow a hash of these styles to be used in the CSP.\r\n\r\n### Basic example\r\n\r\nInstead of:\r\n```\r\n<div style=\"outline:none\" tabindex=\"-1\" id=\"gatsby-focus-wrapper\">...</div>\r\n````\r\n\r\ngenerate:\r\n\r\n```\r\n<style>#gatsby-focus-wrapper { outline:none }</style>\r\n<div tabindex=\"-1\" id=\"gatsby-focus-wrapper\">...</div>\r\n```\r\n\r\nand likewise for `#gatsby-announcer`\r\n\r\n### Motivation\r\n\r\nAllowing Gatsby sites to enable Content Security Policy (https://github.com/gatsbyjs/gatsby/issues/10890)\r\n"},{"labels":[null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nGenerate fluid props without using graphql so we can use gatby-image in Contentful Rich Text\r\n\r\n### Basic example\r\n\r\n```jsx\r\nimport {  resolveFluid } from 'gatsby-source-contentful'\r\n\r\nconst fluidProps = resolveFluid(assetFromContentful, { maxWidth: 300, maxHeight: 400 })\r\n\r\n<Img  fluidProps={assetFromContentful} />\r\n```\r\nThe code is written already inside gatsby-source-contentful under [extend-node-type.js](https://github.com/gatsbyjs/gatsby/blob/9b077c6e87956c767dc506b6ef15eb8720f47841/packages/gatsby-source-contentful/src/extend-node-type.js#L116) we just need a way to access it!\r\n\r\n### Motivation\r\n\r\nFolks that are using Contentful's Rich Text are [having a hard time](https://github.com/contentful/rich-text/issues/70) implementing gatsby-image when they render the node coming from the rich text data. Since all it's returning is the asset data. With no access to `GatsbyContentfulFluid` or `GatsbyContentfulFluid` fragments.\r\n\r\nThe current solutions are [very hacky](https://github.com/contentful/rich-text/issues/70#issuecomment-585367684) or could [slow down](https://github.com/contentful/rich-text/issues/70#issuecomment-562997189) whole gatsby sites.\r\n\r\nI was inspired by how Sanity's gatsby source allows users to access gatsby-image outside of gatsby with a simple api.\r\n\r\n### Proof of concept\r\nHere's a [gist](https://gist.github.com/daydream05/b5befd50f9c9001fb094f331f98a3ec5). All copy pasted from extend-node-type with just a slight rename of the api\r\n\r\n"},{"labels":["enhancement"],"text":"## Summary\r\n\r\nInstalling `gatsby` produces a number of npm warnings about deprecated packages. While hunting down one of them, I noticed that gatsby [depends](https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/package.json#L16) on `@babel/polyfill`, which has been [deprecated](https://github.com/babel/babel/tree/master/packages/babel-polyfill).\r\n\r\nIn turn, @babel/polyfill depends on core-js@2, which has been deprecated and generates this warning when installing any Gatsby project:\r\n\r\n```\r\n$ npm install\r\nnpm WARN deprecated core-js@2.6.11: core-js@<3 is no longer maintained and not recommended for usage due to the number of issues. Please, upgrade your dependencies to the actual version of core-js@3.\r\n```\r\n\r\n### Motivation\r\n\r\nMany users are confused by NPM warnings about deprecated packages:\r\n\r\n* [NPM warn message about deprecated package](https://stackoverflow.com/questions/35236735/npm-warn-message-about-deprecated-package)\r\n* [npm deprecated warnings – do I need to update something?](https://stackoverflow.com/questions/34840153/npm-deprecated-warnings-do-i-need-to-update-something)\r\n* [How to deal with deprecation warnings from npm](https://stackoverflow.com/questions/38889519/how-to-deal-with-deprecation-warnings-from-npm)\r\n* [npm install and deprecated warnings](https://stackoverflow.com/questions/40132400/npm-install-and-deprecated-warnings)\r\n* [Getting npm WARN deprecated](https://stackoverflow.com/questions/58989617/getting-npm-warn-deprecated)"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nThe default [a11y eslint rules](https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/eslint-config.ts) are all defined as \"warn\". This is okay for most rules but for the newly added \"jsx-a11y/control-has-associated-label\" rule, adding \"warn\" is making it almost unusable.\r\n\r\nEven the following is flagged by eslint 🤔 :\r\n\r\n```jsx\r\n<label>lovely label<input type=\"text/></label>\r\n```\r\n\r\nThe [recommended config for this rule](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/master/src/index.js#L64-L92) is much more sane.\r\n\r\nWould you accept a PR to fix this?\r\n"},{"labels":["enhancement"],"text":"## Summary\r\n\r\nBrowserslist is used by Gatsby and supports definition of supported browsers using a `.browserslistrc` file. However Gatsby ignores such a file if present in the root of a project and only accepts config for browerslist as an attribute in the project's `package.json`.\r\n\r\nFrom the [docs](https://github.com/browserslist/browserslist):\r\n\r\nAll tools will find target browsers automatically, when you add the following to package.json:\r\n```\r\n  \"browserslist\": [\r\n    \"defaults\",\r\n    \"not IE 11\",\r\n    \"not IE_Mob 11\",\r\n    \"maintained node versions\"\r\n  ]\r\n```\r\n\r\nOr in .browserslistrc config:\r\n\r\n```\r\ndefaults\r\nnot IE 11\r\nnot IE_Mob 11\r\nmaintained node versions\r\n```\r\n\r\n### Motivation\r\n\r\nUsing a separate dotfile is much clearer and easier to generate, track and share between projects. Editing the list of browsers doesn't result in a change to `package.json`\r\n"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nAdd gatsby --inspect & and gatsby --inspect-brk commands to gatsby to enable easier debugging.\r\n\r\nNow with node 10 we can use the https://nodejs.org/docs/latest-v10.x/api/inspector.html API to enable debugging programmatically, especially with the new gatsby develop changes.\r\n\r\nFor develop we could just enable it when we spawn the command.\r\n\r\n### Basic example\r\n\r\nWhen gatsby --inspect is ran, in gatsby we do:\r\n```js\r\nconst inspector = require('inspector');\r\n\r\ninspector.open()\r\n```\r\n\r\n### Motivation\r\n\r\n\r\nFixes https://github.com/gatsbyjs/gatsby/issues/24349#issuecomment-635384602\r\n"},{"labels":["enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\nis that possible to generate different site with same template? , I need to build several website with the similar styles \r\n### Basic example\r\nfor example when i run `gatsby develop web1`, I got the web1 site and run `gatsby develop web2`, I got web2 site . two site are nearly same just with different content . how can I achieve this \r\n\r\n### Motivation\r\n\r\nThanks "},{"labels":["enhancement"],"text":"Add way to dynamically trigger load gatsby-image\r\n\r\n# problem\r\nusing a 3rd party slider library in loop mode can sometimes cause the image to not load again after looping all the way through and then seeing the same image but now its just the images skeleton.  maybe related to its intersection observer not detecting its viewable on the screen.\r\nissue pointed out here https://github.com/kidjp85/react-id-swiper/issues/394\r\n\r\n# possible solution\r\ncreate a way to dynamically trigger image load so can manually tell the image to load again\r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nSo I do agree that TypoCI is good for finding typos in docs PRs, but it really gets spammy in other types of situations.\r\n\r\nFor instance, in the site showcase submissions where there are proper nouns or URLs, it picks those up as misspellings which is incorrect frequently\r\n\r\nIs there specific files that it could be filtered down to only run on or ways to enhance it so it doesn't clutter the PRs as much as it does now?"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nThe ability to override the React wrapper used to generate the `html` field in GraphQL.\r\n\r\n### Basic example\r\n\r\nIn the plugin definition's `options`, allow for the field `staticHtmlWrapper`. If provided, this string will replace value of [this line](https://github.com/gatsbyjs/gatsby/blob/c4c7563d8dc167561962c4ab7c6ef8f2e2d3eec9/packages/gatsby-plugin-mdx/utils/render-html.js#L121). I would imagine when overriding defaults with this field, it should be on the user to use `require.resolve` and ensure the component is present.\r\n\r\n### Motivation\r\n\r\nThis enables shortcodes (global components) to be used in RSS feeds pretty easily, and otherwise users get a ton of warnings about undefined components. Being able to use different, more RSS friendly versions of the components would be nice as well."},{"labels":[null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nCurrently content nodes only pick up the `updatedAt` and `createdAt` fields from the contentful API response. I would like to suggest a change to also include the `publishedAt` and `firstPublishedAt` fields.\r\n\r\n### Motivation\r\n\r\nI am working on a project that requires us to sort a list of entries by their publish date.\r\n\r\n"},{"labels":[null,null,"enhancement",null],"text":"### Summary\r\n\r\nAdd an API to load some specific queries from graphql at runtime.\r\n\r\nI can imagine a new plugin API to expose a query with an id:\r\n```js\r\ncreateStaticQuery('my query id', graphql`\r\n  load {\r\n    something\r\n  }\r\n`)\r\n```\r\nand a client-side method to fetch it:\r\n```js\r\nimport { fetchStaticQuery } from 'gatsby'\r\n\r\nconst data = await fetchStaticQuery('my query id')\r\n```\r\n\r\nThis is different from `useStaticQuery` because the client can dynamically fetch any static query, effectively creating a \"static API\".\r\n\r\nExpose `window.___loader` as an API so that React code can leverage its functionality (or perhaps only part of it)\r\n\r\n### Motivation\r\n\r\nI wanted to create a \"stacked\" page navigation like this: https://twitter.com/aravindballa/status/1263112947670245377?s=20\r\n\r\nThat means loading data from notes at runtime (because it'd be too complex to generate all possible permutations at build time).\r\n\r\n### Workaround\r\n\r\nI had a ~stupid~ crazy [idea](https://twitter.com/MathieuDutour/status/1262823026191749122?s=20) but had an epiphany that the data I wanted was already accessible: it's the pages data. So I found `window.___loader` and managed to dynamically load the data from a page (like gatsby is doing with `Link`). The code is here: https://github.com/mathieudutour/gatsby-n-roamresearch/tree/master/packages/react-stacked-pages-hook.\r\n\r\nWhile this works (and a quick and dirty first step could be to expose `window.___loader` as an official API), I believe my proposal is more generic, powerful, and unlocks more use cases.\r\n\r\n### References\r\n\r\nhttps://twitter.com/kylemathews/status/1263254949816709120?s=20"},{"labels":[null,null,null,"enhancement",null],"text":"## Overview\r\n\r\nGenerate API documentation from [gatsby/index.d.ts](https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/index.d.ts) instead of a variety of files.\r\n\r\n## Motivation\r\n\r\n* Ensures that our API docs are always up-to-date with our types.\r\n* Makes it easier for us to translate APIs, since the documentation is separated from implementation.\r\n\r\n## Intermediate steps\r\n\r\n* Create typedefs for node helper API #24280 \r\n* Create typedefs for the Node Model\r\n* Add the documentation for the rest of the docs\r\n\r\n## Considerations\r\n\r\n* Some APIs have multiple definitions, for example [`sourceNodes`](https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/index.d.ts#L418). We either need to consolidate all the typings or show each typing separately (which may be beneficial?)\r\n* Some APIs are typed with very specific interfaces: for example, `createPages` and `CreatePagesArgs`. We need to figure out how to destructure these interfaces or override them."},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nHello,\r\n\r\nI have website built on Headless Drupal 8 with around 30 000 products (+10 000 out of stock) I started with building frontend on Gatsby without connecting to my Drupal 8 backend when I tried to connect it using gatsby-source-drupal plugin a lot of different problems started to show up.\r\n\r\nEach product have 5 images so in total there should be around 200 000 images\r\n\r\n### Basic example\r\n\r\n1. Javascript out of heap error - when reaching 2 GB (solved) by adding new command in package.json\r\n\"heavyload\": \"node --max-old-space-size=14192 ./node_modules/gatsby/dist/bin/gatsby.js develop\"\r\nand running: npm run heavyload\r\n\r\n2. Fetching - info Starting to fetch data from Drupal\r\nsuccess Fetch data from Drupal - 2623.108s - take around 43 minutes\r\n\r\n3. info Downloading remote files from Drupal <- and now the real problem begins, in order to run the Gatsby Develop our script starts to download all files into cache files (around 50GB) unfortunately if it fails while downloading those (50 GB) files and I want to run Gatsby develop again, I need to download all 50 GB from scratch (it already happened twice to me) and it takes around 8 hours to download 80 gb of files.\r\n\r\n4. After running the Gatsby Develop for past 20 hours I was unable to finish this process even once while connected to my Drupal website I'm attaching log of failed attempt\r\n\r\n```\r\n0 info it worked if it ends with ok\r\n1 verbose cli [\r\n1 verbose cli   'C:\\\\Program Files\\\\nodejs\\\\node.exe',\r\n1 verbose cli   'C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js',\r\n1 verbose cli   'run',\r\n1 verbose cli   'heavyload'\r\n1 verbose cli ]\r\n2 info using npm@6.14.4\r\n3 info using node@v12.16.3\r\n4 verbose run-script [ 'preheavyload', 'heavyload', 'postheavyload' ]\r\n5 info lifecycle gatsby-starter-hello-world@0.1.0~preheavyload: gatsby-starter-hello-world@0.1.0\r\n6 info lifecycle gatsby-starter-hello-world@0.1.0~heavyload: gatsby-starter-hello-world@0.1.0\r\n7 verbose lifecycle gatsby-starter-hello-world@0.1.0~heavyload: unsafe-perm in lifecycle true\r\n8 verbose lifecycle gatsby-starter-hello-world@0.1.0~heavyload: PATH: C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\npm-lifecycle\\node-gyp-bin;C:\\Users\\Karol\\nauka-gatsby\\mywebsite\\node_modules\\.bin;C:\\Python38\\Scripts\\;C:\\Python38\\;C:\\Python27\\;C:\\Python27\\Scripts;C:\\WINDOWS\\system32; ##commented out some of things from here ### C:\\Users\\Karol\\AppData\\Roaming\\npm;C:\\Users\\Karol\\AppData\\Local\\Programs\\Microsoft VS Code\r\n9 verbose lifecycle gatsby-starter-hello-world@0.1.0~heavyload: CWD: C:\\Users\\Karol\\nauka-gatsby\\mywebsite\r\n10 silly lifecycle gatsby-starter-hello-world@0.1.0~heavyload: Args: [\r\n10 silly lifecycle   '/d /s /c',\r\n10 silly lifecycle   'node --max-old-space-size=8192 ./node_modules/gatsby/dist/bin/gatsby.js develop'\r\n10 silly lifecycle ]\r\n11 silly lifecycle gatsby-starter-hello-world@0.1.0~heavyload: Returned: code: 1  signal: null\r\n12 info lifecycle gatsby-starter-hello-world@0.1.0~heavyload: Failed to exec heavyload script\r\n13 verbose stack Error: gatsby-starter-hello-world@0.1.0 heavyload: `node --max-old-space-size=8192 ./node_modules/gatsby/dist/bin/gatsby.js develop`\r\n13 verbose stack Exit status 1\r\n13 verbose stack     at EventEmitter.<anonymous> (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\npm-lifecycle\\index.js:332:16)\r\n13 verbose stack     at EventEmitter.emit (events.js:310:20)\r\n13 verbose stack     at ChildProcess.<anonymous> (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\npm-lifecycle\\lib\\spawn.js:55:14)\r\n13 verbose stack     at ChildProcess.emit (events.js:310:20)\r\n13 verbose stack     at maybeClose (internal/child_process.js:1021:16)\r\n13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:286:5)\r\n14 verbose pkgid gatsby-starter-hello-world@0.1.0\r\n15 verbose cwd C:\\Users\\Karol\\nauka-gatsby\\mywebsite\r\n16 verbose Windows_NT 10.0.18362\r\n17 verbose argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"run\" \"heavyload\"\r\n18 verbose node v12.16.3\r\n19 verbose npm  v6.14.4\r\n20 error code ELIFECYCLE\r\n21 error errno 1\r\n22 error gatsby-starter-hello-world@0.1.0 heavyload: `node --max-old-space-size=8192 ./node_modules/gatsby/dist/bin/gatsby.js develop`\r\n22 error Exit status 1\r\n23 error Failed at the gatsby-starter-hello-world@0.1.0 heavyload script.\r\n23 error This is probably not a problem with npm. There is likely additional logging output above.\r\n24 verbose exit [ 1, true ]\r\n```\r\n\r\n### Motivation\r\n\r\nI'm not sure what I'm doing wrong, but I don't know honestly how to deal with it, I want to connect my Gatsby website with my Drupal 8 website, but if it takes around 8 hours to connect and after 8 hours I get error and have to try from scratch it, I really don't know what to do.\r\n\r\nPerhaps it is my API fault, or Gatsby Drupal plugin have missing configuration, I can share my API but I wouldn't want to make it public.\r\n"},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nCurrently the only way to get access to the dev server's host and port is via the `developMiddleware` config option. Unfortunately that isn't very scalable when trying to create plugins to be shared across multiple teams. \r\n\r\n### Basic example\r\n\r\n```js\r\nexports.onCreateDevServer = ({ app, host, port }, pluginOptions = {}) => {\r\n  // Setup a proxy to target the current host and port\r\n};\r\n```\r\n\r\n### Motivation\r\n\r\nThe core motivation around this is to be able to attach a proxy server to the host and port that the development server is running on instead of needing to pass it via the plugin options or depending on environment variables.\r\n"},{"labels":["enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nIt would be nice have some params on `gatsby build` to choose which pages in /pages will be build\r\n\r\n### Basic example\r\n\r\nSomehting like `gatsby build --pages index.js,about-us,contact`\r\n\r\n### Motivation\r\n\r\nWe are running a very large gatsby project and we generate single pages as needed. So each time I move everything from /pages to /pages.tmp and only generate what I need.\r\n"},{"labels":[null,null,"enhancement"],"text":"# Summary\r\n\r\nIf we could cache network responses from contentful we would be able to startup gatsby quicker and it would help us triage issues for our customers.\r\n\r\n"},{"labels":[null,"enhancement"],"text":"# Summary\r\n\r\nI'm not super familiar with contentful rich text. For now this is just a placholder issues.\r\n\r\n- rich text causes a full rebuild (I think that's inevitable because it touches code)\r\n- random error appears\r\n\r\n"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nCurrently contentful does base64 generating during query-running. It reduces the amount of data being downloaded and process by contentful but we only run 4 queries at a time so this slowdown query-running. \r\n\r\nhttps://github.com/gatsbyjs/gatsby/blob/2c38a9dfb90b2684d97a092098e849f41d9a47d0/packages/gatsby-source-contentful/src/extend-node-type.js#L51-L77\r\n\r\n### Motivation\r\n\r\nMake query-running faster\r\n"},{"labels":[null,null,"enhancement"],"text":"# Summary\r\n\r\nThe preview api is a great way to get contentful data before a user hits publish. Tt works great while the process is running and updates can be received. However, when updates are happening when gatsby is not running, not all events will come to the client. To get all the correct data, gatsby needs a full sync.\r\n\r\nA full sync can be expensive when restarting gatsby so we don't want to set it to true by default. We rather have a warning so people understand what's happening.\r\n\r\nUser can setup\r\n```js\r\n{\r\n  resolve: 'gatsby-source-contentful`,\r\n  options: {\r\n    forceFullSync: process.env.NODE_ENV !== 'production',\r\n  }\r\n}\r\n```\r\n\r\n### Motivation\r\n\r\nIt should be more transparent to users why data is missing when not forcing a sync.\r\n"},{"labels":[null,null,"enhancement"],"text":"https://spotify.design/\r\n\r\nIt's super lovely\r\n\r\nhttps://twitter.com/shaunbent/status/1260933359934468096 is one of the creators"},{"labels":[null,null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nShopify Store Front API Supports Multi Language by adding `Accept-Language: \"it\"` in request header\r\n\r\nhttps://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-source-shopify\r\n\r\nhttps://shopify.dev/tutorials/manage-app-translations-with-admin-api\r\n\r\nhttps://github.com/Shopify/js-buy-sdk/pull/749/files\r\n\r\n### Basic example\r\n\r\nhttps://shopify.dev/tutorials/manage-app-translations-with-admin-api\r\n\r\n### Motivation\r\n\r\nHaving this option will  support multi language gatsby shopify store.\r\nExpectation is to query products, collection by passing language flag  and get the data to render the pages.\r\n\r\n### Approach\r\nIf we add as part of options, we will only able to pull one language at a time , Better way is to pass language while querying and add headers dynamically\r\nhttps://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-source-shopify#how-to-use\r\n\r\nTried some options from my localhost here\r\nhttps://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/src/lib.js#L25\r\n\r\n```\r\nconst queryOnce = async (client, query, first = 250, after) => {\r\n   if(lang) {\r\n      client.setHeader('Accept-Language', lang) // How to pass language code ?\r\n  }\r\n  return await client.request(query, {\r\n    first,\r\n    after\r\n  });\r\n}\r\n```\r\nI'm not sure how i can pass language code from  page or product query\r\n\r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\nI have a requirement to add `className` to the actual `<img>` element to support microformats.\r\n\r\nCurrently GatsbyJs only has \r\n- `ClassName` - on the wrapper only\r\n- `placeholderClassName` - on the placeholder `<img>`\r\n\r\nThere is no support for the actual `<img>` element.\r\n\r\n### Basic example\r\n\r\n```\r\n<Img\r\n  fluid={data['profilePic'].childImageSharp.fluid}\r\n  alt={`Ben Shi`}\r\n  className={'avatar'}\r\n  imgClassName={'u-photo'}\r\n/>\r\n```\r\n\r\n### Motivation\r\n\r\nIn microformats `u-photo` is only valid on (`<img src>`) elements. \r\ngatsby-image both fixed and fluid does not support this.\r\nhttp://microformats.org/wiki/microformats-2-implied-properties\r\n"},{"labels":["enhancement"],"text":"## Summary\r\n\r\nThere should be a check also for README.md files.\r\n\r\n### Basic example\r\n\r\nthere are some errors in some readme files.\r\n\r\n### Motivation\r\n\r\nTo find errors in README.md\r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nif templates are placed \"accidently\" in `/pages` then they run twice, one time from `gatsby-node.js` and one more time \"unexpected\" with the automatic `/pages` step\r\n\r\n### Basic example\r\n\r\nsee Issue: \r\n- #24010 `Variable \"$skip\" of required type \"Int!\" was not provided`\r\n\r\n```\r\n ERROR #85920  GRAPHQL\r\n\r\nThere was an error in your GraphQL query:\r\n\r\nVariable \"$skip\" of required type \"Int!\" was not provided.\r\n\r\n   8 |\r\n>  9 | query IndexQuery($skip: Int!, $limit: Int!) {\r\n     |                  ^\r\n  10 |   site {\r\n  11 |     siteMetadata {\r\n\r\nFile path: /Users/muescha/Work/gatsby/github/issue-24010/kinnikumegane/myblog/src/pages/index.jsx\r\nUrl path: /\r\nPlugin: none\r\n\r\nYou might have a typo in the variable name \"$skip\" or you didn't provide the variable via context to this page query. Have a look at the docs to learn how to add data to context:\r\n\r\nhttps://www.gatsbyjs.org/docs/page-query/#how-to-add-query-variables-to-a-page-query\r\n\r\nIf you're not using a page query but a StaticQuery / useStaticQuery you see this error because they currently don't support variables. To learn more about the limitations of StaticQuery / useStaticQuery, please visit these docs:\r\n\r\nhttps://www.gatsbyjs.org/docs/static-query/\r\nhttps://www.gatsbyjs.org/docs/use-static-query/\r\n```\r\n\r\n\r\n\r\n### Improvements\r\n\r\npossible improvements:\r\n#### 1) Context\r\n\r\nprint also the context variables when a graphql error is printed, then a user see if he have just a typo or all other variables are missing.\r\n\r\n#### 2) Hints in error text \r\n\r\nadd a hint to the error message about automatic running the pages when the file is placed in `/pages/`\r\n\r\n#### 3) Add warnings\r\n\r\nadd a check if a file from `/pages/` is called from `createPage(` in `gatsby-node.js` (or in a similar lifecycle step other than the automatic `pages` step) and print a warning - maybe as an example:\r\n\r\n```\r\nwarn The template /src/pages/index.jsx` is called from `createPage` in `gatsby-node.js` but also called one time more from the xxx livecycle\r\n``` \r\n\r\nthere exists a similar check for the templates:\r\n```\r\nwarn The GraphQL query in the non-page component \"/www/src/templates/tags.js\" will not be run.\r\n```\r\n\r\n\r\n### Motivation\r\n\r\nFor new users it is hard to find out why the variables are missing in this case\r\n\r\n\r\n### Related Issues:\r\n\r\n- #24010 `Variable \"$skip\" of required type \"Int!\" was not provided`\r\n"},{"labels":[null,null,"enhancement"],"text":"Hey Folks 👋 \r\n\r\nI'd like to write out a few ideas and proposals for modernizing and future proofing the CSS infrastructure.\r\n\r\n## Issues\r\n\r\n1. css-loader in Gatsby is old, and rarely updated. That's expected since it's built into Gatsby core and limited in the major versions it can bump on css-loader to Gatsby's own major bumps\r\n\r\n2. Extending CSS handling is hard, `gatsby-plugin-postcss` has to fully find and replace the Gatsby loader, because otherwise the css files will will be handled by both, it makes it difficult to adjust the behavior or integrate other tools that use `.css` files.\r\n\r\n3. Postcss support is awkwardly handled by `gatsby-plugin-postcss`, since it replaces the css-loader, you lose autoprefixing based on Gatsby's understand of browser support as well as any Gatsby specific configuration that is required for css (e.g. excludes and includes of internal files) \r\n\r\n## Proposals\r\n\r\nTo address **1** I think we should add `gatsby-plugin-css` outside of core, so that other plugins can be built off of it, and core can consume it, giving users the option to update it independently as they like. ([I've already done this partly](https://github.com/jquense/docpocalypse/tree/master/packages/gatsby-plugin-css))\r\n\r\nTo address **2** I would suggest that Gatsby support postcss via a `postcss-config.js` file out of the box, removing the need for `gatsby-plugin-postcss` and exposing utilities for plugins like sass and less to consume to easily create new gatsby plugins on top of the base one, maintaining all the nice  postcss utility functionality like autoprefixing and giving plugins the option to additionally support postcss plugins as well (via a postcss.config.js or plugin options). **This would unify the feature sets of all the preprocessor plugins nicely**\r\n\r\nFor **3**, I think that the **core** css loader used to handle `.css` files needs to provide an API for safely extending the files that it handles or does not handle. As an illustration, using `astroturf` I may want the Gatsby plugin to fully ignore generated `astroturf.css` files, at the moment there isn't any good way to do that. I'm proposing adding some amount of additional action/function to the api call for `onCreateWebpackConfig` that allows adding new excludes, includes, or tests to the default webpack rule.\r\n\r\nIf ya'll think this is a good idea i'll put together a suite of PR's "},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nWhen using gatsby-plugin-google-gtag it would be nice to have the google optimize anti-flicker snippet added to the top of the document as per [Google's installation guidelines](https://support.google.com/optimize/answer/7100284?hl=en)\r\n\r\n### Basic example\r\n\r\nChange the [gatsby-ssr.js file](https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/src/gatsby-ssr.js) to include the above snippet (CSS and JS), which can then be passed to `setComponents()` on line 79. I don't know if this will place the snippet in the right place - for example if using React Helmet, will it place it top-most in the `<head>` of the document?\r\n\r\n### Motivation\r\n\r\nTo be able to have out-of-the-box support for the Google Optimize Anti-flicker snippet. At the moment Optimize Experiences are delivered with a screen flicker as elements are replaced on the page as the page loads.\r\n"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nCurrently, we have to download all information from contentful before we start creating nodes. For large sites, this can take up to 10 - 20 minutes on huge sites. Waiting for http requests means our cpu is idle and is being wasted.\r\n\r\nIf we use the paged sync api we could start downloading and when the first page is downloaded start processing nodes. This would reduce idle time.\r\n\r\nContentful source plugin adds foreign references to each node, so there is a bi-directional link. These links cannot be calculated during this paged fetch. We have to wait until all processing is done. We'll have to introduce a breaking change here and use a custom resolver, so we don't break behavior.\r\n\r\n\r\n### Todo\r\n\r\n- [ ] setup paged fetch without doing paged processing\r\n- [ ] add extra option to enable paged fetching\r\n- [ ] setup paged processing"},{"labels":[null,null,null,"enhancement"],"text":"## Summary\r\n\r\nEnable schema customization for contentful data. Contentful gives us all the information we need to create typings.\r\n\r\nRich Text is the hardest one because it contains a JSON blob. In my opinion, it should stay that way. I'm not certain how we handle it currently in the plugin, so it might become a breaking change.\r\n\r\nSchema customization gives us faster type creation and also better error messaging when not all content is present yet.\r\n\r\n<details>\r\n<summary>Rich Text preview:</summary>\r\n\r\n```json\r\n{\r\n  \"fields\": [\r\n    {\r\n      \"id\": \"title\",\r\n      \"name\": \"Title\",\r\n      \"type\": \"Symbol\",\r\n      \"localized\": false,\r\n      \"required\": false,\r\n      \"validations\": [],\r\n      \"disabled\": false,\r\n      \"omitted\": false\r\n    },\r\n    {\r\n      \"id\": \"test\",\r\n      \"name\": \"test\",\r\n      \"type\": \"RichText\",\r\n      \"localized\": false,\r\n      \"required\": false,\r\n      \"validations\": [\r\n        {\r\n          \"nodes\": {}\r\n        },\r\n        {\r\n          \"enabledMarks\": [\r\n            \"bold\",\r\n            \"italic\",\r\n            \"underline\"\r\n          ],\r\n          \"message\": \"Only bold, italic, and underline marks are allowed\"\r\n        }\r\n      ],\r\n      \"disabled\": false,\r\n      \"omitted\": false\r\n    }\r\n  ],\r\n}\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>An entry with one reference:</summary>\r\n\r\n```json\r\n{\r\n  \"fields\": [\r\n    {\r\n      \"id\": \"parentPage\",\r\n      \"name\": \"Parent Page\",\r\n      \"type\": \"Link\",\r\n      \"localized\": false,\r\n      \"required\": false,\r\n      \"validations\": [\r\n        {\r\n          \"linkContentType\": [\r\n            \"page\"\r\n          ]\r\n        }\r\n      ],\r\n      \"disabled\": false,\r\n      \"omitted\": false,\r\n      \"linkType\": \"Entry\"\r\n    },\r\n  ]\r\n}\r\n```\r\n</details>\r\n\r\n\r\n<details>\r\n<summary>An entry with multiple references:</summary>\r\n\r\n```json\r\n{\r\n  \"fields\": [\r\n    {\r\n      \"id\": \"associatedPage\",\r\n      \"name\": \"Associated Page\",\r\n      \"type\": \"Link\",\r\n      \"localized\": false,\r\n      \"required\": false,\r\n      \"validations\": [\r\n        {\r\n          \"linkContentType\": [\r\n            \"jobsBlock\",\r\n            \"keyvisual\",\r\n            \"page\"\r\n          ]\r\n        }\r\n      ],\r\n      \"disabled\": false,\r\n      \"omitted\": false,\r\n      \"linkType\": \"Entry\"\r\n    },\r\n  ]\r\n}\r\n```\r\n</details>\r\n\r\n## Todo\r\n- [ ] create an option in gatsby-contentful-plugin to enable schema customization\r\n- [ ] Setup schema customization\r\n\r\nPrior art: https://github.com/gatsbyjs/gatsby/pull/12816\r\n"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nPrismJS highlighting (especially in MDX) produces extremely noisy output. On pages with a large number of code snippets, this means `page-data.json` will be bloated with unnecessary information.\r\n\r\nConsider this code snippet:\r\n\r\n```js\r\nconst x = {\r\n  some: 'thing'\r\n}\r\n```\r\n\r\nThe resulting mdx `body` property for an otherwise empty document with prism highlighting (stripped of leading helper functions) is\r\n\r\n```\r\nreturn function MDXContent(_ref) {\r\n    var components = _ref.components,\r\n      props = _objectWithoutProperties(_ref, [\\\"components\\\"]);\r\n\r\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\r\n      components: components,\r\n    mdxType: \\\"MDXLayout\\\"\r\n  }), mdx(\\\"div\\\", {\r\n      \\\"className\\\": \\\"gatsby-highlight\\\",\r\n    \\\"data-language\\\": \\\"js\\\"\r\n  }, mdx(\\\"pre\\\", _extends({\r\n      parentName: \\\"div\\\"\r\n  }, {\r\n      \\\"style\\\": {\r\n        \\\"counterReset\\\": \\\"linenumber NaN\\\"\r\n    },\r\n    \\\"className\\\": \\\"language-js line-numbers\\\"\r\n  }), mdx(\\\"code\\\", _extends({\r\n      parentName: \\\"pre\\\"\r\n  }, {\r\n      \\\"className\\\": \\\"language-js\\\"\r\n  }), mdx(\\\"span\\\", _extends({\r\n      parentName: \\\"code\\\"\r\n  }, {\r\n      \\\"className\\\": \\\"token keyword\\\"\r\n  }), \\\"const\\\"), \\\" x \\\", mdx(\\\"span\\\", _extends({\r\n      parentName: \\\"code\\\"\r\n  }, {\r\n      \\\"className\\\": \\\"token operator\\\"\r\n  }), \\\"=\\\"), \\\" \\\", mdx(\\\"span\\\", _extends({\r\n      parentName: \\\"code\\\"\r\n  }, {\r\n      \\\"className\\\": \\\"token punctuation\\\"\r\n  }), \\\"{\\\"), \\\"\\\r\n  some\\\", mdx(\\\"span\\\", _extends({\r\n      parentName: \\\"code\\\"\r\n  }, {\r\n      \\\"className\\\": \\\"token punctuation\\\"\r\n  }), \\\":\\\"), \\\" \\\", mdx(\\\"span\\\", _extends({\r\n      parentName: \\\"code\\\"\r\n  }, {\r\n      \\\"className\\\": \\\"token string\\\"\r\n  }), \\\"'thing'\\\"), \\\"\\\r\n\\\", mdx(\\\"span\\\", _extends({\r\n      parentName: \\\"code\\\"\r\n  }, {\r\n      \\\"className\\\": \\\"token punctuation\\\"\r\n  }), \\\"}\\\")), mdx(\\\"span\\\", _extends({\r\n      parentName: \\\"pre\\\"\r\n  }, {\r\n      \\\"aria-hidden\\\": \\\"true\\\",\r\n    \\\"className\\\": \\\"line-numbers-rows\\\",\r\n    \\\"style\\\": {\r\n        \\\"whiteSpace\\\": \\\"normal\\\",\r\n      \\\"width\\\": \\\"auto\\\",\r\n      \\\"left\\\": \\\"0\\\"\r\n    }\r\n  }), mdx(\\\"span\\\", {\r\n      parentName: \\\"span\\\"\r\n  }), mdx(\\\"span\\\", {\r\n      parentName: \\\"span\\\"\r\n  }), mdx(\\\"span\\\", {\r\n      parentName: \\\"span\\\"\r\n  })))));\r\n}\r\n```\r\n\r\nThis is substantially larger in plaintext than the resulting html:\r\n```html\r\n<pre\r\n  class=\"language-js line-numbers\"\r\n  style=\"counter-reset: linenumber 0 NaN 0;\"\r\n>\r\n  <code class=\"language-js\">\r\n    <span class=\"token keyword\">const</span> x\r\n    <span class=\"token operator\">=</span>\r\n    <span class=\"token punctuation\">{</span>\r\n    some<span class=\"token punctuation\">:</span>\r\n    <span class=\"token string\">'thing'</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  </code>\r\n  <span\r\n    aria-hidden=\"true\"\r\n    class=\"line-numbers-rows\"\r\n    style=\"white-space: normal; width: auto; left: 0px;\"\r\n  >\r\n    <span></span>\r\n    <span></span>\r\n    <span></span>\r\n  </span>\r\n</pre>;\r\n```\r\n\r\nAnd for more complex code, `page-data.json` contains correspondingly more content.\r\n\r\n### Motivation\r\n\r\nI'm building a documentation site with Gatsby that uses single giant page for the API Reference section, and `page-data.json` for that page is 3MB. _Only_ removing this plugin drops that to 0.75MB. While that data compresses quite well (about 160kb across the network) it's a significant hit to parse time. I'm likely going to remove this plugin and consume Prism.js as a \\<script\\> tag for this reason, but if the result were rendered to html instead of as MDX elements, it would represent a significant improvement for my use case.\r\n"},{"labels":[null,null,"enhancement"],"text":"## Problem\r\n\r\nRight now there is an increasing # of recipes by community members that aren't part of this directory https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-recipes/recipes\r\n\r\nSo there isn't one place someone can go to see a list of recipes they can run and get the URL for each recipe.\r\n\r\nEventually, too, we'll want to pull the list into Gatsby Admin and eventually eventually make it searchable.\r\n\r\n## Solution\r\nI'm thinking the lowest risk short-term solution is to make an MDX file at the root of this directory https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-recipes/recipes\r\n\r\nAnd invite any recipe authors to add their recipe in this format:\r\n```\r\nName of recipe: [insert name]\r\nAuthor: [insert name]\r\nDescription: [insert description]\r\nURL: [URL of recipe]\r\n```\r\n"},{"labels":[null,null,"enhancement"],"text":"## Problem\r\n\r\nIt seems that past steps, while visible, aren't leaving their diff visible. In a usability test we saw that users want to see the past diff to remember what the step actually accomplished.\r\n\r\n## Solution\r\nUser can see proposed diff for past steps that included a diff. If the step didn't include a diff, no need to show anything more than we're already showing."},{"labels":[null,null,"enhancement"],"text":"## Problem\r\n\r\nIt's important for users to know if something was successfully installed and *also* if it wasn't installed.\r\n\r\n## Solution\r\nWe should communicate these statuses:\r\n\r\n- success\r\n- error\r\n- nothing happened because it was already installed in the past\r\n\r\n"},{"labels":["enhancement"],"text":"I am using [React-fullpage](https://github.com/alvarotrigo/react-fullpage) library. Currently, the library is getting into action with some delay of few seconds depending on bandwidth.\r\n\r\nI need to **fetch this library on high priority and cache** it locally so the library comes into action quickly as page loads and consecutive page hits don't download the library again\r\n\r\nPlease help with a possible ways to do this. \r\n\r\n[Custom Webpack Config](https://www.gatsbyjs.org/docs/add-custom-webpack-config/), caching the library using service-workers without making the website PWA, [Code Splitting and Prefetching](https://www.gatsbyjs.org/docs/how-code-splitting-works/#prefetching-chunks)? Whatever the possible solution to achieve this.\r\n\r\nThanks."},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nadd a test for trailing slashes to yaml/json files with links to have sidebar links selected\r\n\r\n### Basic example\r\n\r\n- `/docs/guides/` <- trailing slash\r\n- `/tutorial/part-zero/#install-git` <- trailing slash before hash #\r\n\r\nbut should ignore comments like:\r\n```yaml\r\nfromPath: /community/ # Moved \"Community\" page from /community to /contributing/community\r\n```\r\n\r\n### Affected files\r\n\r\n- key `links:`\r\n  - [www/src/data/sidebars/contributing-links.yaml](https://github.com/gatsbyjs/gatsby/blob/master/www/src/data/sidebars/contributing-links.yaml)\r\n  - [www/src/data/sidebars/doc-links.yaml](https://github.com/gatsbyjs/gatsby/blob/master/www/src/data/sidebars/doc-links.yaml)\r\n  - [www/src/data/sidebars/features-links.yaml](https://github.com/gatsbyjs/gatsby/blob/master/www/src/data/sidebars/features-links.yaml)\r\n  - [www/src/data/sidebars/tutorial-links.yaml](https://github.com/gatsbyjs/gatsby/blob/master/www/src/data/sidebars/tutorial-links.yaml)\r\n\r\n- key `fromPath` and key `toPath`:\r\n  - [www/redirects.yaml](https://github.com/gatsbyjs/gatsby/blob/master/www/redirects.yaml)\r\n\r\n- key `url`:\r\n  - [www/src/data/diagram/static-hosts.yml](https://github.com/gatsbyjs/gatsby/blob/master/www/src/data/diagram/static-hosts.yml)\r\n\r\n- but also some json in js:\r\n  - [www/src/data/tags-docs.js](https://github.com/gatsbyjs/gatsby/blob/master/www/src/data/tags-docs.js)\r\n\r\n### Motivation\r\n\r\n> Could we write a test to validate this instead of checking manually every time?\r\n\r\n_Originally posted by @tesseralis in https://github.com/gatsbyjs/gatsby/pull/23921#issuecomment-626048414_\r\n\r\n\r\n\r\n### Related Issues:\r\n\r\n- Issue Links not selected in sidebar when not with slash\r\n  - #21318 `fix(www): Add slashes to links in features overview` \r\n  - #21604 `docs: redirect not select TOC`"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nWouldn't it be great to limit the number of products pulled in when querying a collection in the gatsby-source-shopify plugin? This would reduce the size of the generated page-data.json files, making page load and prefetching even faster.\r\n\r\n### Basic example\r\n\r\n```\r\nmyCollection: shopifyCollection(handle: { eq: \"kitchen\" }) {\r\n  handle\r\n  products(limit: 18) {\r\n    edges {\r\n      node {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Motivation\r\n\r\nSpeed. And thrift.\r\n\r\nRight now the plugin pulls in all the products in a collection. Say you only want to tease a collection by showing two or three products on a shop overview page and give the user the option to drill deeper. Right now i get rather largish page-data.json files that include all the queried data, although i will never use it.\r\n\r\nWe could do the same for images as well. Sometimes i don't need more than one image of a product or category.\r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nchange order of words in aria label\r\n\r\n### Basic example\r\n\r\nhttps://github.com/gatsbyjs/gatsby/blob/e36d73157e5964267fbcc62ed3b2d0e2582b735e/www/src/components/sidebar/section-title.js#L169-L172\r\n\r\n```jsx\r\n aria-label={ \r\n   isExpanded \r\n     ? i18n._(t`collapse ${item.title}`) \r\n     : i18n._(t`expand ${item.title}`) \r\n```\r\n\r\n### Motivation\r\n\r\nwhen there are long titles then i guess it is better when the important part comes first when the voicereader say the label."},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nWith modern browsers supporting [SVG favicons](https://caniuse.com/#search=svg%20favicon) and [dark mode](https://caniuse.com/#search=prefers-color-scheme), I was experimenting using with the `prefers-color-scheme` media query inside an SVG file. While this works fine, `gatsby-plugin-manifest` currently provides no option to make use of this trick – all images are converted to PNG. A `prefer_svg` (or `prefer_svg_favicon`) option in `gatsby-plugin-manifest` would give users an option to go with that simple solution.\r\n\r\n### Motivation\r\n\r\nTo provide the optimal experience for users with visual impairments, serving an SVG with `prefers-color-scheme` media query can is a simple solution. I understand that performance is one of the driving factors of Gatsby, but not only can a single SVGs be smaller than a PNG. Any workaround to provide the same experience involves extra-code and providing two files."},{"labels":[null,"enhancement"],"text":"This issue tracks the ongoing and upcoming work for gatsby-theme-blog and gatsby-theme-blog-core 2.0.\r\n\r\nWork being tracked on #23351 \r\n\r\n- [x] core as semantic HTML, unstyled blog theme\r\n- [ ] core includes classNames as styling hooks\r\n- [x] remove dark mode toggle (potentially separate theme)\r\n- [x] default prism and preset options\r\n- [x] skip nav and additional accessibility audit\r\n- [x] refresh gatsby-theme-ui-preset\r\n- [ ] docs update\r\n\r\nChanges elsewhere to support 2.0:\r\n- gatsby-plugin-theme-ui takes preset options\r\n- theme-ui typography handles fonts\r\n- prism highlighting\r\n- prism preset docs page\r\n\r\nCurrently being worked on in https://github.com/gatsbyjs/themes"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nCurrently, it is not possible to install Contentful source without getting Sharp plugin. This introduces a few issues\r\n\r\n* When Sharp releases are not available, gatsby installation fails. Recent example – https://www.githubstatus.com/incidents/1p369ttzrnqy We were not able to build our website during the incident. \r\n* `gatsby-plugin-sharp` package depends on packages with tricky licensing – https://github.com/gatsbyjs/gatsby/issues/17584. Since it is a required dependency of `gatsby-source-contentful`, this package itself has licensing issues.\r\n* Sharp is a native module, requires additional setup for non-mainstream OS.\r\n\r\nThe issues above are very frustrating when you don't have any images, so you have to deal with the issues for nothing.\r\n\r\n### Proposed change\r\n\r\nMove `gatsby-plugin-sharp` to `optionalDependencies` of `gatsby-source-contentful`. The change is backward-compatible, the package will be installed anyway, however, if the installation of this module fails, the build will proceed anyway."},{"labels":[null,null,"enhancement"],"text":"## Summary\r\nIs it possible to configure the delay for 'onRouteUpdateDelayed' hook ?\r\n\r\n## Relevant information\r\n\r\nDocumentation link: https://www.gatsbyjs.org/docs/browser-apis/#onRouteUpdateDelayed\r\n\r\nFor my page I implement a loading indicator. Therefore I would like to configure the default delay for the 'onRouteUpdateDelayed' hook. Currently I use it inside the gatsby-browser.js like so:\r\n\r\n```\r\nexports.onRouteUpdateDelayed = () => {\r\n  window.___emitter.emit('onRouteUpdateDelayed');\r\n};\r\n```\r\n\r\nThe default delay is 1s but i would like to show the spinner earlier like after 500ms or so..\r\n\r\n\r\n## Gatsby info\r\n\r\n```\r\n  System:\r\n    OS: macOS 10.15.4\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz\r\n    Shell: Unknown\r\n  Binaries:\r\n    Node: 12.13.0 - ~/.nvm/versions/node/v12.13.0/bin/node\r\n    npm: 6.13.7 - ~/.nvm/versions/node/v12.13.0/bin/npm\r\n  Languages:\r\n    Python: 2.7.16 - /usr/bin/python\r\n  Browsers:\r\n    Chrome: 81.0.4044.129\r\n    Firefox: 75.0\r\n    Safari: 13.1\r\n  npmPackages:\r\n    gatsby: ^2.20.12 => 2.20.15 \r\n    gatsby-image: ^2.3.1 => 2.3.1 \r\n    gatsby-plugin-layout: ^1.2.2 => 1.2.2 \r\n    gatsby-plugin-manifest: ^2.3.3 => 2.3.3 \r\n    gatsby-plugin-offline: ^3.1.2 => 3.1.2 \r\n    gatsby-plugin-react-helmet: ^3.2.1 => 3.2.1 \r\n    gatsby-plugin-react-svg: 3.0.0 => 3.0.0 \r\n    gatsby-plugin-sass: ^2.2.1 => 2.2.1 \r\n    gatsby-plugin-sharp: ^2.5.3 => 2.5.3 \r\n    gatsby-source-filesystem: 2.3.0 => 2.3.0 \r\n    gatsby-source-multi-api: 1.0.3 => 1.0.3 \r\n    gatsby-transformer-json: 2.4.0 => 2.4.0 \r\n    gatsby-transformer-sharp: ^2.4.3 => 2.4.3 \r\n```\r\n\r\n### File contents (if changed)\r\n\r\n`gatsby-config.js`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n`package.json`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n`gatsby-node.js`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n`gatsby-browser.js`: \r\n```\r\nexports.onRouteUpdateDelayed = () => {\r\n  window.___emitter.emit('onRouteUpdateDelayed');\r\n};\r\n\r\nexports.onRouteUpdate = () => {\r\n  window.___emitter.emit('onRouteUpdate');\r\n};\r\n```\r\n`gatsby-ssr.js`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n"},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nI'm working on rebuilding an existing Shopify site as a Gatsby site using the `gatsby-source-shopify` plugin. It has ~600x items, and my internet connection isn't particularly good, so it can take a very long time for the site the build (even in develop mode). Sometimes the build will fail completely. If sharp tries to transform any of the images it takes even longer and is even less stable.\r\n\r\nI think it might be a good idea to add an option to disable downloading the images, as we can still serve the images from Shopify's CDN. The Shopify CDN will let you resize images using the URL, so the performance is still pretty good. Here is a page with some info on doing this: <https://www.shopify.com/partners/blog/img-url-filter>\r\n\r\n### Basic example\r\n\r\n```js\r\nplugins: [\r\n  {\r\n    resolve: `gatsby-source-shopify`,\r\n    options: {\r\n      shopName: process.env.SHOPIFY_SHOP_NAME,\r\n      accessToken: accessToken: process.env.SHOPIFY_ACCESS_TOKEN,\r\n\r\n      // Whether or not images should be downloaded locally so that they can be\r\n      // transformed by sharp. You might want to disable this for stores with a\r\n      // lot of products\r\n      // Defaults to true\r\n      downloadImage: false,\r\n    },\r\n  },\r\n];\r\n```\r\n\r\n### Motivation\r\n\r\nAdding this option will make it much easier for people to use this plugin if they have poor internet connections, less powerful computers, or are using it to connect to a store with a large number of images to download.\r\n\r\nI plan to attempt to add this myself (along with the help of my friend @mrhut10), but I've never written/worked on a Gatsby plugin before, and have limited knowledge of GraphQL outside of using it within Gatsby.\r\n\r\nI also wanted to make sure it sounded like a good idea first, and that I'm not overlooking anything before doing the work and submitting a PR only to have it rejected.\r\n\r\nIf this goes well, I want to also work on a companion plugin to use the images from the Shopify CDN in `gatsby-image` in much the same way as \r\n[gatsby-transformer-cloudinary](https://github.com/cloudinary-devs/gatsby-transformer-cloudinary)\r\n\r\nI'm not sure if this is possible since we need a base64 image as well, but I'll open a seperate issue for that once I get some feedback on this issue."},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nOne of the common problems I've run into with Gatsby is having to check if the window is available before using it. Here's an example pulled from the [Gatsby docs](https://www.gatsbyjs.org/docs/debugging-html-builds/#how-to-check-if-window-is-defined):\r\n```js\r\nconst module = typeof window !== `undefined` ? require(\"module\") : null\r\n```\r\n\r\n### Basic example\r\n\r\nI learned that Docusaurus (heavily inspired by Gatsby) provides a module helper for this called [`ExecutionEnvironment`](https://v2.docusaurus.io/docs/docusaurus-core/#executionenvironment).\r\n\r\nHere's what it looks like:\r\n\r\n```js\r\nimport React from 'react';\r\nimport ExecutionEnvironment from '@docusaurus/ExecutionEnvironment';\r\n\r\nfunction MyPage() {\r\n  const location = ExecutionEnvironment.canUseDOM ? window.href.location : null;\r\n  return <div>{location}</div>;\r\n}\r\n```\r\n\r\nHere's a [link to the implementation in Docusaurus](https://github.com/facebook/docusaurus/blob/master/packages/docusaurus/src/client/exports/ExecutionEnvironment.ts) for reference. \r\n### Motivation\r\n\r\n- improve developer experience\r\n- fix a common problem in the Gatsby ecosystem\r\n"},{"labels":["enhancement"],"text":"I had some trouble with a custom eslint configuration. @KyleAMathews helped me out on Slack and asked me to file an issue to make this easier.\r\n\r\n## Summary\r\n\r\nGatsby supports using a custom eslint config. The steps are described in the [documentation page](https://www.gatsbyjs.org/docs/eslint/). However, when you use your own configuration `.eslintrc.js` file you will lose the build integration with `eslint-loader`. This will prevent any warnings from apearing in the terminal.\r\n\r\nTo be fair, this is described in the manual page with a note, and there is a link to a plugin you can use to get the integration back [using webpack](https://github.com/mongkuen/gatsby-plugin-eslint/blob/master/src/gatsby-node.js), but even then it is quite a hassle to get the same rules Gatsby uses back in your own config (in addition to your own config).\r\n\r\n### Basic example\r\n\r\n* First see that the [gatsby eslint](https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/utils/eslint-config.ts) configurations works:\r\n* Create a component which creates a warning on `gatsby develop`. (for me it was a `video` tag without a subtitles `track` which will trigger a warning from `jsx-a11y/media-has-caption`.\r\n* You should see warnings in the terminal about this.\r\n* Follow the instructions on [the documentation page](https://www.gatsbyjs.org/docs/eslint/) to create a your custom `.eslintrc` and add back the rules from gatsby.\r\n* Now you lost the output in the terminal\r\n* Add add the [plugin](https://www.gatsbyjs.org/packages/gatsby-plugin-eslint/) to fix this.\r\n* You should see the warning\r\n\r\n### Motivation\r\n\r\nIt would be nice if you could more easily extend Gatsby's eslint config instead of throwing it away and build your own for scratch which leads to [unexpected behavior](https://stackoverflow.com/questions/60645526/gatsby-extend-eslint-rules-overwrites-original-eslint). This is especially cumbersome if you just need one rule added or changed. \r\n"},{"labels":[null,null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nCould we have an option to remove all files from the build directory that is not necessary for the final working site?\r\n\r\n### Basic example\r\n\r\nIt seems like webpack.stats.json is not needed. Are some of the other *.js files also not needed for a functioning website.\r\n\r\n### Motivation\r\n\r\nI would like to have minimal output and not have any unecessary files. Also, some files like webpack.stats.json leak some internal info about the source files. It would be cleaner to have only the minimal set of files in the final build output directory."},{"labels":[null,"enhancement"],"text":"# Summary\r\n\r\nAllow working with [webhook's](https://www.gatsbyjs.com/docs/webhook) headers as well.\r\nExtend `NodePluginArgs` with headers of the webhook (currently only `NodePluginArgs.webhookBody` is available).\r\n\r\n### Basic example\r\n\r\nThe common practice using webhook is to validate the signature to prevent faking the webhooks.\r\nThe signature is commonly sent as a part of the headers of the request.\r\n\r\nI.e. Headless CMS [Kentico Kontent webhooks notification docs](https://docs.kontent.ai/reference/webhooks-reference#a-notification-signatures).\r\n\r\nTo be able to validate that hash/signature, it would be great to have the data accessible in `NodePluginArgs`.\r\n\r\n### Motivation\r\n\r\nThat could prevent to mock refresh webhooks and potentially protect Gatsby Cloud for some DDoS attacks."},{"labels":[null,"enhancement"],"text":"Trying to access `exported` constants within a `mdx` file through `GraphQL`\r\n\r\nI can see them if I define the constant with normal quotes\r\n\r\n```js\r\nexport const howareyou = 'very well'\r\n```\r\n\r\nThis example works (I can see it in `GraphiQL`)\r\n\r\nBut if I use the backtick quotes (i.e. [Template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals))\r\n\r\n```js\r\nexport const howareyou = `very well`\r\n```\r\n\r\n Then it doesn't work (I cannot see it in `GraphiQL`)\r\n\r\n(my use case is that I'd like to have multi-lines there)\r\n\r\nIs it a bug of there's an explanation not to allow them? \r\n\r\nEDIT: any expression fails (I was trying to workaround the backticks unavailability)\r\n\r\n```js\r\nexport const howareyou = 'very' + 'well'\r\n```"},{"labels":[null,null,"enhancement"],"text":"This request might seem crazy to most, so I'm mostly looking for clarification at least.\r\n\r\nWe have one main core theme that we want to maintain the gatsby version with. This is currently problematic with `gatsby develop` requiring the package to exist in each theme that utilizes the parent theme:\r\n\r\n```shell\r\ngatsby <develop> can only be run for a gatsby site.\r\nEither the current working directory does not contain a valid package.json or 'gatsby' is not specified as a dependency\r\n```\r\n\r\nWe've had issues in the past with gatsby version mismatches causing build failures when the multiple versions are specified in our `yarn.lock` files (I apologize, it's been some time so I can't share the error we received), so we've been keeping them in sync ever since. But this is inefficient because we will potentially have dozens of different sites using the one parent theme. So rolling out an update to utilize a new gatsby feature will result in a **breaking change** release for our core theme every time. Even if it's just a minor or patch release from gatsby.\r\n\r\nIf we can somehow detect that the site is utilizing a theme, and bypass the check for `gatsby develop` needing the dependency, I believe this resolves this problem for us.\r\n\r\nOur sites that utilize our core theme are also their own monorepo, so the gatsby dependency should be resolvable via their yarn workspace. Again, I realize this is likely a use-case outside of the norm, but I'm hoping for some sort of direction around this.\r\n\r\nThanks ahead of time"},{"labels":[null,"enhancement"],"text":"<!--\r\n  To make it easier for us to help you, please include as much useful information as possible.\r\n\r\n  Useful Links:\r\n  - Documentation: https://www.gatsbyjs.org/docs/\r\n  - Contributing: https://www.gatsbyjs.org/contributing/\r\n\r\n  Gatsby has several community support channels, try asking your question on:\r\n\r\n  - Discord: https://gatsby.dev/discord\r\n  - Spectrum: https://spectrum.chat/gatsby-js\r\n  - Twitter: https://twitter.com/gatsbyjs\r\n\r\n  Before opening a new issue, please search existing issues https://github.com/gatsbyjs/gatsby/issues\r\n-->\r\n\r\n## Summary\r\nI'm trying to manually control the scroll position in order to facilitate page transitions.\r\n\r\n## Relevant information\r\nI'm using Framer motion to transition pages as per [this example](https://github.com/ryanwiemer/gatsby-using-page-transitions). \r\n\r\nI prevent scroll in the gatsby-browser file, but some of my links still jump the page to the top. \r\n```js\r\nexport const shouldUpdateScroll = () => {\r\n  return false\r\n}\r\n```\r\nI found a [reference](https://github.com/reach/router/issues/242) to this being due to the underlying router lib being used. `@reach/router` updates scroll position on primary links. I do not know how to override this behavior. Does anyone know how to prevent all Gatsby links from affecting the scroll position?\r\n\r\n<!-- Provide as much useful information as you can -->\r\n"},{"labels":[null,null,null,"enhancement"],"text":"## Summary\r\n\r\nThe gatsby-plugin-google-analytics plugin works well but lacks information on how to set custom dimensions (or other fields) prior to the pageview hit being sent. Some data can be set in `gatsby-config` but this doesn't work for anything dynamic.\r\n\r\n## Relevant information\r\n\r\nFor example, I need to retrieve a GET parameter value and set it as a custom dimension _before_ the pageview hit is sent so that all subsequent hits (including pageview) will include this information.\r\n\r\nFor example, take the following URL: `https://howchoo.com/h/pi?ref=interest_list`\r\n\r\n_Before_ the GA pageview it is sent, I would normally set it here:\r\n\r\n```javascript\r\nga('set', 'dimension5', 'custom data');\r\n```\r\n\r\nI could theoretically retrieve the value in `gatsby-browser` and set it there, but GA doesn't provide a true async queue before the `ga` object is defined AFAIK. Therefore, I'd need to be sure it gets set _before_ the plugin sends the pageview hit.\r\n\r\nHow could this be done? The plugin isn't clear about how custom definitions (dimensions and metrics) can be set _before_ the pageview hit is sent. [This](https://github.com/gatsbyjs/gatsby/blob/230e8d70b3581ae635b649810ec5b682841bfd74/packages/gatsby-plugin-google-analytics/src/gatsby-browser.js#L19) seems to be a relevant section of code.\r\n\r\n### Environment (if relevant)\r\n\r\n```bash\r\n  System:\r\n    OS: macOS 10.15.3\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz\r\n    Shell: 3.2.57 - /bin/bash\r\n  Binaries:\r\n    Node: 12.8.0 - /usr/local/bin/node\r\n    npm: 6.10.3 - /usr/local/bin/npm\r\n  Languages:\r\n    Python: 2.7.16 - /usr/bin/python\r\n  Browsers:\r\n    Chrome: 80.0.3987.149\r\n    Firefox: 71.0\r\n    Safari: 13.0.5\r\n  npmPackages:\r\n    gatsby: ^2.19.45 => 2.19.45\r\n    gatsby-plugin-disqus: ^1.1.4 => 1.1.4\r\n    gatsby-plugin-google-analytics: ^2.1.38 => 2.1.38\r\n    gatsby-plugin-google-tagmanager: ^2.1.27 => 2.1.27\r\n    gatsby-plugin-less: ^3.0.21 => 3.0.21\r\n    gatsby-plugin-lodash: ^3.1.22 => 3.1.22\r\n    gatsby-plugin-manifest: ^2.2.48 => 2.2.48\r\n    gatsby-plugin-mdx: ^1.0.83 => 1.0.83\r\n    gatsby-plugin-offline: ^3.0.41 => 3.0.41\r\n    gatsby-plugin-react-helmet: ^3.1.24 => 3.1.24\r\n    gatsby-plugin-react-svg: ^3.0.0 => 3.0.0\r\n    gatsby-plugin-remove-trailing-slashes: ^2.1.24 => 2.1.24\r\n    gatsby-plugin-sass: ^2.1.31 => 2.1.31\r\n    gatsby-plugin-webpack-bundle-analyzer: ^1.0.5 => 1.0.5\r\n    gatsby-source-filesystem: ^2.1.56 => 2.1.56\r\n    gatsby-source-graphql: ^2.1.35 => 2.1.35\r\n    gatsby-source-shopify: ^3.0.52 => 3.0.52\r\n    gatsby-source-youtube: ^1.0.1 => 1.0.1\r\n    gatsby-transformer-yaml: ^2.2.27 => 2.2.27\r\n  npmGlobalPackages:\r\n    gatsby-cli: 2.10.2\r\n```\r\n\r\n### File contents (if changed)\r\n\r\n`gatsby-config.js`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n`package.json`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n`gatsby-node.js`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n`gatsby-browser.js`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n`gatsby-ssr.js`: N/A <!-- Please use a code block or just leave it as is if wasn't changed -->\r\n"},{"labels":["enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed. This info allows Gatsby maintainers to diagnose (and fix!) your issue as quickly as possible.\r\n\r\n  Useful Links:\r\n  - Documentation: https://www.gatsbyjs.org/docs/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues: https://github.com/gatsbyjs/gatsby/issues\r\n-->\r\n\r\n## Description\r\n\r\nWhen I use `gatsby-plugin-react-helmet` I notice that the `<Helmet />` components come way too late in the head tag. I have noticed that on occasion for instance Facebook does not always parse the `og` tags if they come too late in the head.\r\n\r\n### Steps to reproduce\r\n\r\nJust use `<Helmet />`, and notice in the static output files there is a lot of CSS related stuff etc. above the helmet tag in the `<head>`.\r\n\r\n### Expected result\r\n\r\nHelmet tags should be prioritised when doing the `<head />` tag.\r\n\r\n### Workaround\r\nCurrently there is easy workaround, but I consider that gatsby's default is broken. We should not need workaround for this.\r\n\r\ngatsby-ssr.js\r\n```javascript\r\nvar React = require(\"react\");\r\n\r\n// Hack, to reorder the helmet components as first in <head> tag\r\nexports.onPreRenderHTML = ({ getHeadComponents, replaceHeadComponents }) => {\r\n    /**\r\n     * @type {any[]} headComponents\r\n     */\r\n    const headComponents = getHeadComponents();\r\n\r\n    headComponents.sort((a, b) => {\r\n        if (a.props && a.props[\"data-react-helmet\"]) {\r\n            return 0;\r\n        }\r\n        return 1;\r\n    });\r\n    replaceHeadComponents(headComponents);\r\n};\r\n```"},{"labels":[null,"enhancement"],"text":"# Summary\r\n\r\nWe have recently noticed our app.js bundle has shot up in size, and after closer inspection it looks like the majority of the code is data relating to matchPaths.\r\n\r\n```\r\n{\r\n   \"path\":\"/example/path\",\r\n   \"matchPath\":\"/example/*\"\r\n}\r\n```\r\n\r\n## Relevant information\r\n\r\n- We have a total of 17 `matchPath`s.\r\n- We create around 25k pages using `createPage`.\r\n- When looking at our app.js, it seems every page is included in the `matchPath` array.\r\n- May be related to https://github.com/gatsbyjs/gatsby/pull/17412\r\n\r\nI think I may have tracked down the code that does this to `getMatchPaths` in `gatsby/src/bootstrap/requires-writer.js`. When I debug, `matchPathPages` has a length of 25237, and then I think this matchPath data is written to `match-paths.json`. Would this have an effect on the app.js bundle size?\r\n\r\n\r\n### Environment (if relevant)\r\n\r\n```  \r\nSystem:\r\n    OS: macOS High Sierra 10.13.6\r\n    CPU: (12) x64 Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz\r\n    Shell: 3.2.57 - /bin/bash\r\n  Binaries:\r\n    Node: 10.16.3 - /usr/local/bin/node\r\n    Yarn: 1.17.3 - /usr/local/bin/yarn\r\n    npm: 6.9.0 - /usr/local/bin/npm\r\n  Languages:\r\n    Python: 2.7.16 - /usr/local/bin/python\r\n  Browsers:\r\n    Chrome: 80.0.3987.116\r\n    Firefox: 72.0.2\r\n    Safari: 13.0.5\r\n```"},{"labels":[null,"enhancement"],"text":"The Google Tag Manager plugin currently uses a hardcoded event on a page change: 'gatsby-route-change'.\r\n\r\nhttps://github.com/gatsbyjs/gatsby/blob/79326a5f26e1a79610849d3992e44a6c7afbec7d/packages/gatsby-plugin-google-tagmanager/src/gatsby-browser.js#L12\r\n\r\nTo allow more flexibility, it would be great for users to add their own event for this. This could be managed within gatsby-config.js.\r\n\r\nIf this is a feature that interests you I would be happy to create a PR.\r\n\r\nThanks,\r\nRpb"},{"labels":[null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nPrismJS has great plugins that I would like to use, e.g.: \r\n\r\n- https://prismjs.com/plugins/copy-to-clipboard/\r\n- https://prismjs.com/plugins/show-invisibles/\r\n- https://prismjs.com/plugins/show-language/\r\n\r\nI'm not sure if this is already possible but couldn't find any reference in the docs. Would be pretty great to allow passing plugins.\r\n\r\n### Basic example\r\n\r\n```js\r\nconst gatsbyPrism =  {\r\n    resolve: `gatsby-remark-prismjs`,\r\n    options: {\r\n      noInlineHighlight: true,\r\n      prompt: {\r\n        user: 'root',\r\n        host: 'localhost',\r\n        global: false,\r\n      },\r\n      plugins: [\r\n        require.resolve(\r\n          'prismjs/plugins/show-invisibles/prism-show-invisibles'\r\n        ),\r\n      ],\r\n    },\r\n  }\r\n```\r\n\r\n### Motivation\r\n\r\nThis would allow me to have the same awesome code highlighter as the Gatsby docs themselves.\r\n"},{"labels":[null,null,"enhancement"],"text":"###  Summary\r\n\r\nCurrently gatsby-link prefetch route on `Link` component `componentDidMount`.\r\nhttps://github.com/gatsbyjs/gatsby/blob/762506f714ca5c22764aa9befd3042f78b6d9d6a/packages/gatsby-link/src/index.js#L74-L79\r\n\r\nIt would be great if we also support some kind of prefetch for `navigate` function or a new programmatically prefetch page function. My current solution is using `window.___loader.enqueue` which is _technically unsupported_.\r\n\r\nhttps://github.com/gatsbyjs/gatsby/blob/6f3eb9718330a1fc2debad44c1d0c7a92dbe94ea/docs/docs/production-app.md#L120"},{"labels":[null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nCurrently if two themes (or a theme and the site) both export the `developMiddleware` key in `gatsby-config`, only one will win.  Of course you can overcome this by implementing the node api, but it would be nice to be able to do it simply using the config.\r\n\r\nAm checking here to see if there is appetite for this feature.  If so, I will formalize a PR.\r\n\r\n### Basic example\r\n\r\nSee this draft pr [#20491](https://github.com/gatsbyjs/gatsby/pull/20491).  \r\n\r\n### Motivation\r\n\r\nOur use case - one theme which adds an authentication middleware, and another which adds a proxy.\r\n"},{"labels":[null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nThe [Content Indexing API](https://web.dev/content-indexing-api/) is an experimental web platform feature, currently undergoing an [Origin Trial](https://github.com/GoogleChrome/OriginTrials/blob/gh-pages/developer-guide.md) in Chrome 80+.\r\n\r\nDevelopers who already ship offline-capable web apps can use this API to tell the local browser about URLs which will work offline, and then the browser can choose to surface those URLs, potentially with high prominence, when it detects that there's no Internet connection available.\r\n\r\nSince using `gatsby-plugin-offline` means that your web app already has good offline support, adding in calls to the Content Indexing API (either as part of the plugin, or as a separate, standalone plugin) should be a straightforward integration.\r\n\r\n### Basic example\r\n\r\nThe specifics of the integration would depend on how `gatsby-plugin-offline` keeps track of its offline content (which I'm not 100% up to date on), but here are a few examples of code changes needed to enable the Content Indexing API in other web apps:\r\n\r\n- https://github.com/jeffposnick/jeffposnick.github.io/compare/fedbdf87dc8ee26b66f0e12e2649d92b7a853d79...jeffposnick:b10addb50d4d3b664e3b348c1c336988fe7d3bdf\r\n- https://github.com/GoogleChromeLabs/so-pwa/commit/8531758b0e294bc6e3478f57e3b5a88c02d63d97\r\n\r\n### Motivation\r\n\r\nIf a developer has gone through the trouble of making their content available offline, shouldn't users of their web app be told about that content when they're most likely to appreciate that effort?"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nCurrently one can't test pages with graphql queries. It would have been great if they would be testable in isolation.\r\n\r\n### Basic example\r\n\r\nThere are two main ways to do it. Either we add a programmatic way to create \"gatsby context\", which is basically all that is needed to execute Gatsby GraphQL and then pass that to the page component so that it's rendered. Second way would be to add and/or document way to mock graphql calls in Gatsby pages.\r\n\r\n"},{"labels":[null,null,null,"enhancement"],"text":"## Summary\r\n\r\nWe are creating **fluid** images with gatsby-image/sharp with original images of dimension 1440x700. We configured `maxWidth: 800` and `maxHeight: 640`, and a single `srcSetBreakpoint: [800]`.\r\n\r\nWhen gatsby runs, it creates an 800x640 image as requested, but also a 1440x1152 image. This does not make sense to me as it's larger than the requested `maxWidth`.\r\n\r\nThe comment in https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sharp/src/index.js#L387 says that it's there to \"to ensure the largest image possible is available for small images\". I don't understand - if I specifically set `maxWidth`, why does gatsby create a larger one?\r\n\r\nThanks!\r\n"},{"labels":[null,"enhancement"],"text":"## Description\r\n\r\nGatsby does not support using functions in its config, but it does not complain if you do. This can result in silent failures that are difficult to debug.\r\n\r\nPossibly related PR: https://github.com/gatsbyjs/gatsby/pull/16027\r\n\r\n### Steps to reproduce\r\n\r\ncc @sidharthachatterjee do you have an example that can go here?\r\n\r\n### Expected result\r\n\r\nGatsby should complain that your config is invalid.\r\n\r\n### Actual result\r\n\r\nGatsby does not complain, instead unrelated errors appear later in the build process.\r\n\r\n### Environment\r\n\r\nn/a\r\n"},{"labels":[null,"enhancement"],"text":"Warn whenever query result is large enough to cause frontend runtime perf implications. \"large enough\" is yet to be determined - any ideas?\r\n\r\nNotes and questions:\r\n - ~We only run queries that we need to, so getting size of queries that don't need to re-run will eighter need extra I/O or we will need to cache size of queries~ We started to keep track of page-data size in https://github.com/gatsbyjs/gatsby/pull/20146\r\n - What should be default budget for query result size?\r\n - How dev can customize default budget? (maybe we don't want that?)\r\n\r\nRelated Issues:\r\n - ~[Add to telemetry how big page json & page bundle sizes](https://github.com/gatsbyjs/gatsby/issues/18819)~ Implemented in https://github.com/gatsbyjs/gatsby/pull/20146\r\n - [`gatsby/cache-dir/loader.js` eval's JSON on main thread, doesn't use `fetch()`](https://github.com/gatsbyjs/gatsby/issues/18787)"},{"labels":[null,"enhancement"],"text":"\r\n## Summary\r\n\r\nWith the Danger scripts that run against any submission to the Site / Starter showcases, it will notify if any category is invalid and then list the valid ones. That said it is a little clunky as it references the index instead of the name of what category is invalid and prints the listing over and over.\r\n\r\nI want to look into cleaning this up of having something more like the following:\r\n\r\n> There were a few categories that we found in the entry for \\<sitename\\> that are invalid:\r\n> - Category 1\r\n> - Category 2\r\n> \r\n> Here is the listing of valid categories:\r\n> [... categories ...]\r\n\r\nI chatted with @pieh about this and he also suggested to make it so this appears in the PR discussion thread as well as in the checks tab."},{"labels":[null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nI'd like to revisit [`gatsby-mdx` issue 187](https://github.com/ChristopherBiscardi/gatsby-mdx/issues/187). Would be extremely useful, if an MDX file used for programmatic page creation could export a GraphQL query.\r\n\r\n### Basic example\r\n\r\n[Just as in the docs](https://www.gatsbyjs.org/docs/mdx/writing-pages/#graphql-queries), but with an MDX file used in `gatsby-node.js` and outside `src/pages`.\r\n\r\n```mdx\r\nimport { graphql } from \"gatsby\"\r\n\r\n# My Awesome Page\r\n\r\nHere's a paragraph, followed by a paragraph with data!\r\n\r\n<p>{props.data.site.siteMetadata.description}</p>\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        description\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n```\r\n\r\n### Motivation\r\n\r\nAs @Ehesp [explained in the `gatsby-mdx` issue](https://github.com/ChristopherBiscardi/gatsby-mdx/issues/187#issuecomment-488288229):\r\n\r\n> My use-case: I'm generating a website where the mdx files from an external source. Each file creates a new page on the website (using createPage), however every single page goes through the same component (since the layout is exactly the same).<br />\r\nIn some of those pages however, I'd like to perform a custom query to extract various bits of data which are specific to that page. I can't perform the query inside of the page template since I don't know what it's going to be, and it's up the mdx file to do what it wants with the data.\r\n"},{"labels":[null,"enhancement"],"text":"<!--\r\n  To make it easier for us to help you, please include as much useful information as possible.\r\n\r\n  Useful Links:\r\n  - Documentation: https://www.gatsbyjs.org/docs/\r\n  - Contributing: https://www.gatsbyjs.org/contributing/\r\n\r\n  Gatsby has several community support channels, try asking your question on:\r\n\r\n  - Discord: https://gatsby.dev/discord\r\n  - Spectrum: https://spectrum.chat/gatsby-js\r\n  - Twitter: https://twitter.com/gatsbyjs\r\n\r\n  Before opening a new issue, please search existing issues https://github.com/gatsbyjs/gatsby/issues\r\n-->\r\n\r\n## Summary\r\n\r\nDuring recent tests of some Gatsby sites I maintain I have found that I get better rendering results by NOT going with native image lazy loading on Chrome.\r\n\r\nI have found that the current implementation in Chrome of `img` lazy is pretty inconsistent and too keen when loading images below the fold, resulting in performance degrading once the feature was GA on Chrome.\r\n\r\nWould there be appetite for adding a `forcePolyfill` or `ignoreNative` prop on `gatsby-image` to enforce that the native prop is ignored if it is supported and instead always use the polyfill.\r\n\r\nI get that this may be seen as some as sub-optimal, but the polyfill for lazy loading gives more consistent results at the moment.\r\n\r\n"},{"labels":[null,null,"enhancement"],"text":"TypeScript is fantastic and has been gaining a lot of popularity. \r\n\r\nOne _oft_ requested feature in Gatsby has been native TypeScript support<sup>1</sup>. We see no reason to _not_ support it out of the box so let's discuss how to make this happen. \r\n\r\n### Note\r\n1. This will not change current DX for non-TypeScript users. \r\n1. This will result in deprecating [gatsby-plugin-typescript](https://www.gatsbyjs.org/packages/gatsby-plugin-typescript/) and fix some of the caveats it has (documented in its README)\r\n\r\n### To do \r\n- [ ] Support TypeScript in GraphQL query results? \r\n- [x] Support ts and tsx files out of the box\r\n- [ ] Linting support in CLI (if using TypeScript)\r\n- [ ] Potentially support ts for `gatsby-*` files \r\n\r\n### Foot notes\r\n1. https://twitter.com/chatsidhartha/status/1155820333095505920\r\n\r\n### Related issues\r\nhttps://github.com/gatsbyjs/gatsby/issues/16310,https://github.com/gatsbyjs/gatsby/issues/17934, https://github.com/gatsbyjs/gatsby/issues/15277, https://github.com/gatsbyjs/gatsby/issues/14185, https://github.com/gatsbyjs/gatsby/issues/13436, https://github.com/gatsbyjs/gatsby/issues/1457, https://github.com/gatsbyjs/gatsby/issues/10452\r\n\r\n### Related PRs\r\n\r\nhttps://github.com/gatsbyjs/gatsby/pull/16952\r\nhttps://github.com/gatsbyjs/gatsby/pull/18721\r\n\r\n### Related plugins\r\n[gatsby-plugin-typescript](https://www.gatsbyjs.org/packages/gatsby-plugin-typescript/)\r\n[gatsby-plugin-typescript-checker](https://www.gatsbyjs.org/packages/gatsby-plugin-typescript-checker/)\r\n[gatsby-plugin-generate-typings](https://www.gatsbyjs.org/packages/gatsby-plugin-generate-typings/)\r\n[gatsby-plugin-typegen](https://www.gatsbyjs.org/packages/gatsby-plugin-typegen/)\r\n[gatsby-plugin-graphql-codegen](https://www.gatsbyjs.org/packages/gatsby-plugin-graphql-codegen/)"},{"labels":[null,null,"enhancement"],"text":"Currently we have non-symmetrical relation between directives `@infer`/`@dontInfer` and extensions `infer`. `@infer` maps to `infer: true`, while `@dontInfer` maps to `infer: false`. This not only breaks the convention that directives directly map onto extensions, but also the convention that extension values are objects.\r\n\r\nI propose the following changes:\r\n\r\n1. Add a parameter to `@infer` - `mode`. It accepts an enum of `ENABLED` | `DISABLED` | `DEPRECATED`\r\n2. `@infer` default becomes  `@infer(mode: 'ENABLED')` and `{ infer: { mode: 'ENABLED' } }`.\r\n3. `@dontInfer` stays the same and becomes `{ infer: { mode: 'DISABLED` } }`.\r\n4. `infer: true` and `infer: false` get converted to corresponding object and trigger a deprecation warning.\r\n5. `DEPRECATED` for infer raises a warning if declared schema doesn't match inferred schema. It is to be used, for example, by core team when we define core types like `File` or `ImageSharp`.\r\n\r\nCC @vladar @stefanprobst @ChristopherBiscardi \r\n\r\n<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n\r\n"},{"labels":[null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise, your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nAs [an RFC](https://github.com/zeit/next.js/issues/9133) about zero-config plugins has been submitted to Next.js, I thought a similar approach could be leveraged by Gatsby v3.\r\n\r\n### Motivation\r\n\r\nCurrently, some plugins should be loaded before or after specific packages (e.g. [`gatsby-plugin-offline`](https://www.gatsbyjs.org/packages/gatsby-plugin-offline/) should be listed after `gatsby-plugin manifest` in `gatsby-config.js`).\r\n\r\nZero-config plugins could define their own specificity relative to other known plugins, avoiding issues caused by a wrong loading order. For instance, `gatsby-plugin-offline` could define the following amongst its metadata:\r\n\r\n```\r\n{\r\n  loadAfter: [‘gatsby-plugin-manifest’],\r\n  // ...\r\n}\r\n```\r\n\r\nThis new approach would improve the experience for beginners and seasoned developers alike, lowering the burden caused by configuration management.\r\n"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nCurrently Gatsby only supports dynamic code-splitting (by pages). But there are situations, where this process cannot cleverly decide what is the optimal way to split code. That happens when you have to decide at gatsby's bootstrap phase what components you need. One example is, when you use a CMS that defines a Component as a \"renderer\":\r\n```javascript\r\n// exampe of a cms-entry\r\nconst content = [\r\n  {\r\n    component: 'MyCoolWidget',\r\n    props: {\r\n      title: \"Hello World\"\r\n    }\r\n  }\r\n]\r\n\r\n// later\r\nimport * as React from 'react'\r\nimport * as components from './components'\r\n\r\nexport default function CMS ({content}) {\r\n  return (\r\n    <>\r\n      {content.map(row => {\r\n        const Component = components[row.component]\r\n        return <Component {...row.props} />\r\n      })}\r\n    </>\r\n  )\r\n}\r\n```\r\nThe problem here is, that all possible components gets included into the bundle even if they are not used. The Gatsby code-splitting process cannot decide which components are used and which not (Yes, thats a very specific example but there are many more that basically have to deal with the same problem; I used this example because it's easy to understand). That's not a problem, when you have a static file-structure. But as soon as you have to decide at runtime (or at bootstrap-phase in a gatsby context) which components you want to use you have a problem. Code-Splitting does not work any longer\r\n\r\nThere are solutions to this: **react-loadable** and **loadable-components** are designed exactly for this problem. But: they do not work properly with gatsby. So I think it's time for a more gatsby-ish solution for this problem. We could use the exact same mechanism that we use for page-based code-splitting:\r\n\r\n### Basic example\r\n\r\n```javascript\r\n// gatsby-node.js\r\n\r\nexports.createPages = async ({actions}) => {\r\n  actions.createPage({\r\n    path: '/my-cms-component',\r\n    component: path.resolve(__dirname, 'src/theme/templates/cms.js'),\r\n    context: {cmsIdentifier: 'abc'},\r\n    widgets: {\r\n      MyCoolWidget: path.resolve(__dirname, 'src/theme/widgets/MyCoolWidget.js'),\r\n    }\r\n  })\r\n}\r\n\r\n// src/theme/templates/cms.js\r\n\r\nimport * as React from 'react'\r\nimport { graphql } from \"gatsby\"\r\n\r\nexport default function CMS ({data, widgets}) {\r\n  return (\r\n    <>\r\n      {data.cms.content.map(row => {\r\n        const Component = widgets[row.component]\r\n        return <Component {...row.props} />\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query($cmsIdentifier: String!) {\r\n    cms (cmsIdentifier: {eq: $cmsIdentifier}){\r\n      content\r\n    }\r\n  }\r\n`\r\n```\r\nIn the above example I add a property \"widgets\" to the createPage action. Then gatsby resolves these widgets the same way as the components gets resolved and injects these Widgets as props to the page. That way no unnecessary code can be loaded and you get all the cool stuff that gatsby gives you be default, like prefetching and code-splitting (at a widget-level). Some coole side-effect of this approach is, that page-queries could technically also be used inside widgets.\r\n\r\nI already created this feature in a fork of mine and it works really smoothly. It took only 2 hours to implement since the whole data-pipeline already exists. I just had to process the widgets the same way the page.component gets processed.\r\n\r\nSo my question is: Is this something gatsby wants to support? I do not think this feature is something a little blog needs, but for big projects this can be a really badass feature (we pushed our performance from 75 lighthouse points to 93). If so, what do you think about the above implementation? Should I change something before I make a pull-request?\r\n\r\n\r\n### Motivation\r\n\r\nMy company has really big webshop with over 1000 cms pages and over 400 000 products. I created a similar setup like gatsby (static rendering...) but now we want to move to gatsby because of the better community. We are really happy with gatsby but the above problem is really annoying. By implementing this feature we were able to precisely split our components for our needs and pushed our lighthouse performance by nearly 20 points. \r\n\r\nThis problem was originally discussed in #5995 and event @KyleAMathews said that this is something gatsby plans to support. By then nothing happens so here I come with a suggestion for an implementation\r\n"},{"labels":[null,null,null,"enhancement"],"text":"## Summary\r\n\r\nAdd a callback to Gatsby Link for preloading\r\n\r\n### Basic example\r\n\r\n```jsx\r\nconst preloadFunction = () => console.log('preloading');\r\n\r\n<Link to=\"/some-page\" onPreload={preloadFunction}>Some page</Link>\r\n```\r\n\r\n### Motivation\r\n\r\nGatsby Link uses IntersectionObserver to preload linked pages which are visible. I think it would be really useful to be able to pass a callback function to Gatsby Link which will be called when preloading has been triggered.\r\n\r\nIn my plugin `gatsby-theme-localization` I have a [wrapper for Gatsby Link](https://github.com/onestopjs/gatsby-theme-localization/blob/master/gatsby-theme-localization/src/components/Link.tsx) which preloads namespaces on hover. However, it is not sufficient as Gatsby preloads page data earlier. Having such callback would enable me to preload namespaces whenever Gatsby decides to. \r\n\r\nI am sure that there are many other use cases where this would be really valuable.\r\n\r\nI am more than willing to work on this if people agree that it would be a nice feature.\r\n"},{"labels":[null,null,"enhancement"],"text":"When i use \"gatsby plugin offline\" this work good in offline mode until user click page that he do not visit before. Then browser display no connection info and app crash. \r\n\r\nWhat is the best approach to prevent for this?\r\n\r\nFor example if client click link to the subpage that he do not have in cache i want want to display mesage \"This page is not available in offline mode\" and block moving to this location. \r\n\r\nWhere can i find sample code to do this? \r\n"},{"labels":[null,null,"enhancement"],"text":"# Description\r\nFirst, some notes on terminology: \r\n- \"Main app\" refers to the PWA created by the main manifest by default. \r\n- \"Child app\" refers to the PWA created by the additional manifests generated by the use of the `localize` option.\r\n\r\nWhen a child app in `localize` is loaded, the icon in the child manifest is not used for the favicon or apple-touch-icon links.\r\n\r\n## Conditions\r\nThe plugin options for `gatsby-plugin-manifest` include a child app via the `localize` array and it specifies a different icon.\r\n\r\n```javascript\r\n// gatsby-config.js\r\n  {\r\n      resolve: \"gatsby-plugin-manifest\",\r\n      options: {\r\n        name: \"Hello World\",\r\n        start_url: \"/\",\r\n        icon: \"src/images/gatsby-icon.png\",\r\n        localize: [\r\n          {\r\n            start_url: \"/es/\",\r\n            lang: \"es\",\r\n            name: \"Hola Mundo\",\r\n            icon: \"src/images/gatsby-icon-es.png\",\r\n          },\r\n        ],\r\n      },\r\n}\r\n```\r\n\r\n## Steps to reproduce\r\nDemo repo: https://github.com/dkthehuman/gatsby-manifest-l10n-bug-demo\r\nNetlify: https://affectionate-franklin-dc4bfb.netlify.com\r\n\r\n- Navigate to the Netlify demo (or run `gatsby build && gatsby serve` on the test repo)\r\n  - The favicon and `apple-touch-icon` links point to `gatsby-icon.png` (the purple Gatsby icon) as expected\r\n- Click on the \"Spanish\" link to navigate to /es/.\r\n  - The favicon does not update to `gatsby-icon-es.png` (a red dot) as it should"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nHey there! What does the `[gatsby-remark-code-repls](https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-remark-code-repls)` team think about giving it an embed option, courtesy of the secret sauce from [gatsby-remark-embedded-codesandbox](https://github.com/elboman/gatsby-remark-embedded-codesandbox)?\r\n\r\n### Motivation\r\n\r\nWould be cool to have this in the mainline Gatsby plugin, to get more eyes on it and potential contributors.\r\n\r\ncc @elboman"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nCurrently, once a gatsby-image is rendered as non-critical, there's no way force it to become visible.\r\n\r\n### Motivation\r\n\r\nI want to put gatsby images inside a slider, and force visibility of gatsby-images around current slide, so that the fade in animation does not kick in. The intersection observer does not work so well for that usecase in my app.\r\n\r\nHere is some pseudo code to better illustrate:\r\n\r\n```tsx\r\n\r\n  const isAlmostVisibleSlide = (imageIndex: number) => {\r\n    const isNearCurrentIndex =\r\n      imageIndex >= index - 1 && imageIndex <= index + 1;\r\n    return isNearCurrentIndex;\r\n  };\r\n\r\n      <Slider>\r\n        {fuildImages.map((fuildImage, i) => (\r\n          <GatsbyImage\r\n            key={i}\r\n            fluid={fuildImage}\r\n            critical={isAlmostVisibleSlide(i)}\r\n            loading={isAlmostVisibleSlide(i) ? 'eager' : 'lazy'}\r\n          />\r\n        ))}\r\n      </Slider>\r\n```\r\n\r\nWhen critical or loading prop changes, it does not trigger visible=true on images around current slide, which leads to a slide transitioning from left to center + transitioning its visibility at the same time, leading to a weird visual effect. User would rather expect the slides around to be loaded and just have a translateX animation to happen, but he also get the traced SVG/blur/background => visible animation at the same time. Nobody does that kind of anim imho.\r\n\r\nI would like the ability to trigger image visibility manually. Weither it's from an imperative method api, or preferable a simple props change, like \"forceVisibility\" or something?\r\n\r\nCurrently gatsby-image does not implement componentDidUpdate, which leads to changing props like \"critical\" having no effect (which I know is deprecated, while it would actually be useful).\r\n\r\n### Related note\r\n\r\nI understand there's a new native lazy image loading api that came to chrome, and also seen the closed PRs about unability to specific custom IntersectionObserver root margins.\r\n\r\nThe thing is, saying that the current logic is going to be 100% replaced by browser native image lazy loading is not true to me. It's like saying web components will replace React. There's space for both. Native platform progress is good but JS apis on top of strong primitives will always offer more. Will native APIs allow traced SVGs and decent transition from placeholder to real image? How long until all browsers implement those behaviors anyway? \r\n\r\nI suggest the Gatsby team to consider that Gatsby users will want more than what native apis will offer. I don't see in the future why I would like to enable those native apis while current gatsby-image provides me a better experience. So please, don't deprecate all the gaysby-image features in favor of native behavior, that would be a regression for many users.\r\n\r\n"},{"labels":[null,null,"enhancement"],"text":"## Description\r\n\r\nseems like --path-prefix in dev mode was broken several versions ago\r\n\r\n### Steps to reproduce\r\n\r\n- run `gatsby develop --path-prefix`\r\n- await success build\r\n- go to browser\r\n\r\n### Expected result\r\n\r\nall works\r\n\r\n### Actual result\r\n\r\nbrowser tab died after same time\r\n<img width=\"535\" alt=\"Снимок экрана 2019-07-24 в 12 17 35\" src=\"https://user-images.githubusercontent.com/6726016/61781472-0d275480-ae0d-11e9-8bb6-be680cf63194.png\">\r\n\r\n### Environment\r\n\r\n```\r\n  System:\r\n    OS: macOS 10.14.5\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz\r\n    Shell: 3.2.57 - /bin/bash\r\n  Binaries:\r\n    Node: 11.14.0 - /var/folders/yc/_z3g250s2x511_0cvdy1b6s40000gn/T/yarn--1563959887101-0.8550683899292018/node\r\n    Yarn: 1.17.3 - /var/folders/yc/_z3g250s2x511_0cvdy1b6s40000gn/T/yarn--1563959887101-0.8550683899292018/yarn\r\n    npm: 6.9.2 - /usr/local/bin/npm\r\n  Languages:\r\n    Python: 2.7.16 - /usr/local/bin/python\r\n  Browsers:\r\n    Chrome: 75.0.3770.142\r\n    Firefox: 67.0\r\n    Safari: 12.1.1\r\n```"},{"labels":["enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise your issue will be closed.\r\n\r\n  Useful Links:\r\n  - Gatsby RFCs: https://github.com/gatsbyjs/rfcs\r\n  - How to Contribute: https://www.gatsbyjs.org/contributing/how-to-contribute/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues:  https://github.com/gatsbyjs/gatsby/issues\r\n\r\n  ## A note on adding features to Gatsby and its official plugins\r\n\r\n  Every feature needs to strike a balance - complex features are less likely to be worked on, whether that complexity comes from design, implementation or ongoing   maintenance costs. On the other side, features that are useful to all (or most) of Gatsby's users are more likely to be accepted.\r\n\r\n  This means that not every feature request will be added to Gatsby, but hearing about what you want Gatsby to do is important. Don't be afraid to add a feature request!\r\n-->\r\n\r\n## Summary\r\n\r\nCurrently, Gatsby users can set the `pathPrefix` [property](https://www.gatsbyjs.org/docs/path-prefix/) in `gatsby-config.js` to enable websites to be hosted on subdirectories of the root path, eg routes built using `pathPrefix: \"my-path-prefix\"` are rendered as `/my-path-prefix/a-route/`.\r\n\r\nHowever, `pathPrefix` is taken to be a [root-relative](https://mor10.com/html-basics-hyperlink-syntax-absolute-relative-and-root-relative/) path (that is, one that starts with `/`), thus **requiring the final hosting path to be known ahead of time**.\r\n\r\nThe proposal is to enable compilation of websites with **relative** URLs to enable post-fact path composition.\r\n\r\n### Basic example\r\n\r\nOne way to enable this would be supporting something like:\r\n\r\n```javascript\r\nmodule.exports = {\r\n  pathPrefix: \"./\",\r\n  // ...\r\n}\r\n```\r\n\r\nCurrently, doing this results in root-relative URLs starting with `/./`. With support for relative paths, it would generate relative URLs starting with `./`, `../`, `../../`, etc. as appropriate.\r\n\r\n### Motivation\r\n\r\nAllowing only root-relative URLs makes it impossible to compile websites that can be served from unknown future locations, such as [elearning modules](https://github.com/gatsbyjs/gatsby/issues/2467#issue-265617871) or [IPFS](https://ipfs.io/) websites like `https://ipfs.io/ipfs/QmaR3y5xiWTD4U3zD74cn14SxXWU2Cnp4AEMGQQURXaHLh/`.\r\n\r\nIn the latter case, the fact that the prefix contains a hash of the content of the website makes it impossible to self-reference in an ahead-of-time root-relative pathPrefix (there can't be cycles in a hashlinked graph).\r\n\r\n### Proof of concept\r\n\r\n@satazor has come up with a nice hack in https://github.com/moxystudio/gatsby-plugin-ipfs/blob/master/src/gatsby-node.js where the `pathPrefix` is set to a known constant which then gets replaced post-build from the generated files.\r\n\r\nI've added some hacks on top of that hack to [account for](https://github.com/agentofuser/gatsby-plugin-ipfs/commit/23ab8f1871972aacbbff812fbd1f07fd06c3c45b) the need for [absolute URLs in RSS feeds](https://github.com/gatsbyjs/gatsby/issues/14133) and to fix the [relative depth](https://github.com/agentofuser/gatsby-plugin-ipfs/commit/22a904b3df068340c77af85c61ce23357764c1de) calculation in URLs loaded [in the browser](https://github.com/agentofuser/interplanetarygatsby.com/commit/8944c5316fd413c61df85586b4f0246daf971657#diff-0a1814b69a9ee4caa91d68d1e1cfce64R38) from gatsby-generated json files.\r\n\r\nThis hack of course probably misses many corner cases. In particular, it doesn't allow generating a resulting path prefix other than `./` like, for instance, `./my-blog/`. It would be great to have this done within Gatsby, and I'd love to work on it if there is official interest in a PR.\r\n\r\nref: #2467 "},{"labels":[null,null,null,null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise your issue will be closed. This info allows Gatsby maintainers to diagnose (and fix!) your issue as quickly as possible.\r\n\r\n  Useful Links:\r\n  - Documentation: https://www.gatsbyjs.org/docs/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues: https://github.com/gatsbyjs/gatsby/issues\r\n-->\r\n\r\n## Description\r\n\r\n* By [default](https://github.com/gatsbyjs/gatsby/blob/626cab461640bd6598806f3ec5b98e196f83dc9a/packages/gatsby-plugin-feed/src/gatsby-node.js#L27), `gatsby-plugin-feed` uses the `markdownRemark` node's **html** field as the contents of RSS entries. \r\n* That html field has internal links and asset references as [root-relative](https://mor10.com/html-basics-hyperlink-syntax-absolute-relative-and-root-relative/) paths.\r\n* The [W3C feed validator](https://validator.w3.org/feed/) complains that the feed [should not contain relative URL references](https://www.feedvalidator.org/docs/warning/ContainsRelRef.html).\r\n* The `gatsby-plugin-feed` README also [uses](https://github.com/gatsbyjs/gatsby/blame/97b8ed61983ae9d4607ad058c0c3b74c3bd63f7d/packages/gatsby-plugin-feed/README.md#L39) the html field unaltered.\r\n* Gatsby docs on [customizing the RSS](https://github.com/gatsbyjs/gatsby/blame/8a3d46431b20be989c0177a3102468dec44ff6c2/docs/docs/adding-an-rss-feed.md#L95) feed also use the html field with root-relative URLs.\r\n\r\nI found a (\"hacky\", as he himself describes it) workaround on Dan Abramov's blog:\r\n\r\nhttps://github.com/gaearon/overreacted.io/issues/65\r\n\r\nThe workaround is based on string replacement though, which would replace false-positives such as matches within code blocks. I'm also not sure whether `href` and `src` cover every use of urls in the html spec.\r\n\r\n### Steps to reproduce\r\n\r\n* Go to https://gatsby-starter-blog-demo.netlify.com/rss.xml\r\n* Search for `salty_egg`\r\n\r\n### Expected result\r\n\r\n* `href=\"https://gatsby-starter-blog-demo.netlify.com/static/8058f3f26913fea3b6a89a73344fe94a/2b40c/salty_egg.jpg\"`\r\n* `src=\"https://gatsby-starter-blog-demo.netlify.com/static/8058f3f26913fea3b6a89a73344fe94a/c739e/salty_egg.jpg\"` \r\n\r\n### Actual result\r\n\r\n* `href=\"/static/8058f3f26913fea3b6a89a73344fe94a/2b40c/salty_egg.jpg\"`\r\n* `src=\"/static/8058f3f26913fea3b6a89a73344fe94a/c739e/salty_egg.jpg\"`"},{"labels":[null,null,null,"enhancement"],"text":"### Summary\r\n\r\nCurrently, in Gatsby's GraphQL, it is possible to filter children nodes of top-level \"all-instances-of-a-type\" fileds like \"allFile\", \"allSite\", \"allPlugin\", etc.\r\n\r\nFor instance, this works:\r\n\r\n```graphql\r\nquery {\r\n  allFile (filter: { name: {eq: \"defaultIcon\") {\r\n    childImageSharp {\r\n      fluid {\r\n        ...GatsbyImageSharpFluid\r\n        src\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhat is not possible to do, that should be, is filtering children nodes of other nodes.\r\n\r\n### Basic example\r\n\r\nThe below GraphQl request uses `filter` on `childrenFile`. This is not currently possible, in `gatsby@2.4.6`.\r\n\r\n```graphql\r\nquery {\r\n  allGithubRepo {\r\n    nodes {\r\n      repo\r\n      childrenFile (filter: { name: {eq: \"defaultIcon\") {\r\n        childImageSharp {\r\n          fluid {\r\n            ...GatsbyImageSharpFluid\r\n            src\r\n          }\r\n        }\r\n      }\r\n  }\r\n}\r\n```\r\n\r\n[According to @pieh](https://github.com/gatsbyjs/gatsby/issues/8764#issuecomment-427049426), this feature would have to be implemented inside gatsby core.\r\n\r\n### Motivation\r\n\r\n(M1)\r\nIt is a bit confusing that filtering is available on on top-level \"all-instances of type\" fields, but not on node children. This lead to issue #8764 being raised.\r\n\r\n(M2)\r\nOn the project I'm working on, I use `createRemoteFileNode` from `gatsby-source-filesystem` to obtain images from github repositories, to use them in pages. The images can the default icon, some other icon, or a screenshot. All are children of the repository, but they'll be used in different component. On of the ideas behind GraphQL is that the response to a query should contain no more than the needed data. This is not possible without filtering\r\n\r\n(M3) https://github.com/gatsbyjs/gatsby/issues/8764#issuecomment-426909034 (@RIP21)\r\n> @pieh What about to add support for such filtering? Imagine you have 300 different keys under, and all of that will be fetched and added as a JSON making build of 10k pages weights around 10GB.\r\n> Or maybe any idea how to add such thing to it ourself, like a fork.\r\n\r\n"},{"labels":[null,"enhancement"],"text":"## Summary\r\n\r\nThe `critical` prop does not currently raise priority of an image asset above others such as JS or fonts. This can effectively delay an image from loading before several hundred KB of JS/JSON is loaded in the HTTP/2 stream.\r\n\r\nCurrently for Chrome users, this may be possible to resolve by using the new-ish [Priority Hint](https://developers.google.com/web/updates/2019/02/priority-hints) attribute support.\r\n\r\n### Motivation\r\n\r\n[Developers have expressed difficulty in prioritizing image assets to load ASAP](https://github.com/gatsbyjs/gatsby/issues/12047) due to the JS payload of Gatsby causing up to 5x or more load time before an image would otherwise load when JS is disabled.\r\n\r\nThere are a variety of ways Gatsby could potentially assist here, but mostly it's up to the browser to define what assets should be prioritized and the server streaming the response back with what order it decides to prioritize the responses on it's end.\r\n\r\nPriority Hints could also be used to lower the importance of `preload` tags in the head, via gatsby-config.js option? Or for additional browser support, `prefetch` might also work for users that'd prefer a working/rendered page loaded ASAP with JS progressively enhancing afterwards once it loads in. Currently Gatsby doesn't have support for this use-case as it's assumed the user either has JS disabled or expects hydration into a React app to be a priority.\r\n\r\nThe browsers NetworkInformation [Web API for saveData](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData) could potentially be queried, so that mobile devices could likewise load the site visually faster as it progressively loads into a React app?\r\n\r\n## Related issues\r\n\r\nhttps://github.com/gatsbyjs/rfcs/pull/35\r\nhttps://github.com/gatsbyjs/gatsby/issues/14043"},{"labels":[null,"enhancement",null],"text":"## Summary\r\n\r\nThe [AMP project](https://amp.dev) is being pushed hard by Google and is quite aligned with Gatsby's vision of a better web. With the [release of amp-script](https://www.youtube.com/watch?v=sYXkVOiz77I), integrating React with AMP is now possible (and [already being done by Next](https://nextjs.org/blog/next-8-1)), so we're finally in a moment where a **first-class effort** to bring this ecosystem into Gatsby can be **seriously considered**.\r\n\r\n### Basic example\r\n\r\nWe can take inspiration from [Next's implementation](https://nextjs.org/blog/next-8-1#amp-first-pages), although I doubt we'd be able to serve AMP-first pages without getting into hosting redirections 🤔\r\n\r\nBeing very honest though, **this issue is meant to spark a discussion**, not to provide a specific implementation, as I myself still don't know quite well the ins-and-outs of Gatsby, and am far from comprehending AMP in its entirety.\r\n\r\n### Motivation\r\n\r\nThe AMP Project is not what it used to be, and with Google investing so much energy, time and resources in making this a standard, I believe that, as a community, **we must board this ship** or risk losing relevancy over time... Take PWAs as an example: invented by Google, pushed by Google, and yet it's already made its way into every modern browsers, and even Apple is getting into it. I'd bet AMP'll go the same way, so Gatsby should follow 😄\r\n"},{"labels":[null,"enhancement"],"text":"<!--\r\n  Please fill out each section below, otherwise your issue will be closed. This info allows Gatsby maintainers to diagnose (and fix!) your issue as quickly as possible.\r\n\r\n  Useful Links:\r\n  - Documentation: https://www.gatsbyjs.org/docs/\r\n  - How to File an Issue: https://www.gatsbyjs.org/contributing/how-to-file-an-issue/\r\n\r\n  Before opening a new issue, please search existing issues: https://github.com/gatsbyjs/gatsby/issues\r\n-->\r\n\r\n## Description\r\n\r\nWhen I have a `page` that looks like:\r\n\r\n```js\r\n// in pages/my-page.js\r\nexport { default } from '../../components/hello-world';\r\n```\r\n\r\n`gatsby build` fails, even if that default export is a component. However, this works, even though it's functionality identical:\r\n\r\n```js\r\n// in pages/my-page.js\r\nimport HelloWorld from '../../components/hello-world';\r\n\r\nexport default HelloWorld;\r\n```\r\n\r\n### Steps to reproduce\r\n1. Add a new page to the boilerplate with just an `export { default } from ''`, \r\n2. Run `yarn gatsby build`\r\n3. You should see a build error\r\n\r\nMinimal repro repo: https://github.com/liamfd/gatsby-boilerplate/tree/export-default-minimal-repro/src. Make sure you're in the `export-default-minimal-repro` branch. Then run `yarn gatsby build`. `develop` seems to work fine.\r\n\r\n### Expected result\r\n\r\nIt should build!\r\n\r\n### Actual result\r\n\r\nThe build throws \"error [/Users/liam/fabric/test-gatsby-site/src/pages/page-4.js] The page component must export a React component for it to be valid\".\r\n\r\n### Environment\r\n\r\n(`gatsby info --clipboard` is pretty cool!)\r\n\r\n```\r\n  System:\r\n    OS: macOS High Sierra 10.13.6\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-7267U CPU @ 3.10GHz\r\n    Shell: 5.3 - /bin/zsh\r\n  Binaries:\r\n    Node: 8.10.0 - ~/.nvm/versions/node/v8.10.0/bin/node\r\n    Yarn: 1.12.1 - /usr/local/bin/yarn\r\n    npm: 5.6.0 - ~/.nvm/versions/node/v8.10.0/bin/npm\r\n  Languages:\r\n    Python: 2.7.10 - /usr/bin/python\r\n  Browsers:\r\n    Chrome: 72.0.3626.119\r\n    Firefox: 65.0.1\r\n    Safari: 12.0.3\r\n  npmPackages:\r\n    gatsby: ^2.1.23 => 2.1.23 \r\n    gatsby-image: ^2.0.31 => 2.0.31 \r\n    gatsby-plugin-manifest: ^2.0.22 => 2.0.22 \r\n    gatsby-plugin-offline: ^2.0.24 => 2.0.24 \r\n    gatsby-plugin-react-helmet: ^3.0.8 => 3.0.8 \r\n    gatsby-plugin-sharp: ^2.0.25 => 2.0.25 \r\n    gatsby-source-filesystem: ^2.0.23 => 2.0.23 \r\n    gatsby-transformer-sharp: ^2.1.15 => 2.1.15 \r\n```\r\n\r\n### Theory/Suggestion\r\nI'm guessing that [this check](https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/redux/actions.js#L302) is the problem: \r\n\r\n```js\r\n    if (\r\n      !fileContent.includes(`export default`) &&\r\n      !fileContent.includes(`module.exports`) &&\r\n      !fileContent.includes(`exports.default`) &&\r\n      // this check only applies to js and ts, not mdx\r\n      /\\.(jsx?|tsx?)/.test(path.extname(fileName))\r\n    ) {\r\n      includesDefaultExport = false\r\n    }\r\n```\r\n\r\nIt seems like the es6 default export check should be expanded to support at least the [es6 export from syntax options](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export#Syntax):\r\n\r\n```js\r\nexport { name1 as default, … };\r\nexport { default } from …;\r\n```\r\n\r\nIt might also be worth considering support for the [`export-default-from` proposal](https://github.com/tc39/proposal-export-default-from). It's stage-1, but I think a fair amount of people use it or its predecessor:\r\n\r\n```js\r\nexport default from \"mod\";\r\n```\r\n\r\nI'm happy to try my hand at a PR, assuming this behavior is not intentional. It does seem a little tricky to check this stuff robustly without using an AST."},{"labels":[null,null,"enhancement"],"text":"How can I use custom GraphQL fragments inside gatsby-node? [Here](https://github.com/gatsbyjs/gatsby/issues/12092) is more information on what I've tried so far, but it would perhaps be better if someone just provided a working example. [The example in the docs](https://www.gatsbyjs.org/docs/using-fragments/) doesn't work when applied to gatsby-node (or I'm doing something wrong)."},{"labels":[null,null,null,"enhancement"],"text":"This is related to #11747 as an isolated, reproducible case of caching issues.  cc/ @pieh @DSchau\r\n\r\n## Description\r\n\r\nNumerous plugins in the ecosystem aren't interlinking a node and the parent on `onCreateNode` which causes nodes in the cache to suddenly go missing. I stumbled across this issue working on a proof of concept with `gatsby-source-instagram-all` but I'm sure this affects plenty of other plugins.\r\n\r\nIt's not currently intuitive how to properly set up data sourcing in ways that interact well with the cache.\r\n\r\nThese issues are unfortunate because they create distrust in the cache (rightfully so). Logging warnings and helping to guide plugin authors towards the right path will help alleviate caching woes.\r\n\r\n### Steps to reproduce\r\n\r\nUse a plugin like the [reproduction](https://www.gatsbyjs.org/packages/gatsby-source-instagram-all/) and stop, then start, the server.\r\n\r\n### Expected result\r\n\r\nRestarting the server and running the build should work.\r\n\r\n### Actual result\r\n\r\nRestarting the server and running the build require clearing the cache.\r\n\r\n## Steps to fix\r\n\r\nCurrently, the steps to fix involves `rm -rf .cache` 🙀.\r\n\r\n### To solve the fundamental issue here will require two steps (I think)\r\n\r\n• We should issue a warning in `onCreateNode` if there's no node passed as a parent and link to a doc that elaborates on the issue\r\n• We should have a doc for plugin authors that describe the Gatsby caching system and how nodes need to be interlinked to be properly cached and avoid errors\r\n\r\nI'm anticipating that the doc should be in the style of a guide for plugin authors that might be sourcing nodes since the existing docs (that I can find) are more low-level but I'll defer to @marcysutton here.\r\n\r\n## Related\r\n\r\n- https://www.gatsbyjs.org/docs/node-creation/#freshstale-nodes\r\n"},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nBy default Gatsby generates a couple of inline `<script>` tags and one (or more?) inline `<style>` tags for each page. \r\n\r\nThis is problematic when creating a Content Security Policy (CSP) for your site, as the inline scripts mean `script-src 'unsafe-inline'` needs to be configured for your CSP. This in turn undoes some of the benefits of a CSP.\r\n\r\nThis issue is tracking improvements to using Gatsby with a CSP.\r\n\r\nUseful links:\r\n\r\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\r\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src\r\n- https://bitbucket.org/atlassianlabs/csp-webpack-plugin (possibly useful for reference)\r\n\r\nRelated issues:\r\n\r\n- https://github.com/gatsbyjs/gatsby/issues/3427\r\n- https://github.com/gatsbyjs/gatsby/issues/8025\r\n- https://github.com/gatsbyjs/gatsby/issues/3746\r\n- https://github.com/gatsbyjs/gatsby/issues/3758\r\n\r\n### Basic example\r\n\r\nQuoting @chuckharmston from issue #3758:\r\n\r\n>There are two ways to permit this:\r\n>\r\n>1. By allowing generated assets to be loaded as external assets, so origins can be used to control this.\r\n>2. By using `strict-dynamic` and hashes of the content of each generated file or inline resource. This provides slightly better security, but is also more complex and rigid. Ideally in this case, the generated CSP is inserted as a `<meta>` tag and the same CSP is inserted into `gatsby-plugin-netlify`'s generated `_headers` file.\r\n\r\n### Motivation\r\n\r\nAdding a Content Security Policy can be a useful safeguard for your site, Gatsby should provide options for people using CSPs."},{"labels":[null,null,"enhancement"],"text":"## Summary\r\n\r\nDon't process all images in develop mode and only do it when it's needed (requested by browser).\r\n\r\n### Motivation\r\n\r\nBooting up development server on large sites can take several minutes, because we wait for:\r\n - graphql query results\r\n - and **image processing** to finish (which usually is more time/cpu intensive task of the two).\r\n\r\nThose are needed to produce complete production builds, but we don't need all the images for development. We only need images that user is looking at and we can lazy generate them when browser requests them.\r\n\r\n### Details\r\n\r\nThis can be done by adjusting `gatsby-plugin-sharp` alone:\r\n - In development, instead of creating and running image processing job as soon as possible (during query running), push the job entry into some kind of in-memory store - we will need all the information needed to perform job and also way to find job that produces given file.\r\n - We will need to persist lazy jobs data. Because image processing would be lazy we have no guarantee that all images would be produced and we need to keep track of them.\r\n - Hook into dev express server and intercept requests for image files that are not yet produced -> trigger job processing to get that file -> respond with freshly produced image.\r\n\r\nFor reference: this is split from #7348 (running queries on demand).\r\n\r\n/cc @wardpeet "},{"labels":[null,"enhancement"],"text":"A common theme amongst several issues (https://github.com/gatsbyjs/gatsby/issues/10689, https://github.com/gatsbyjs/gatsby/issues/10370) over some time now has been \r\n> It works during develop but build breaks\r\n\r\n### Common Scenarios\r\n- Styling tends to be a common one because we use a different loader for the two environments which leads to several differences (@pieh can elaborate a lot more on this) \r\n- React helmet and gatsby-offline-plugin\r\n- Access to window (or other browser only APIs) and having it break only on build\r\n- The biggest one by far, ReactDOM hydration issues (we don't render to `html` in develop and people often see issues when they `build` because \r\n\r\n> React expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\r\n\r\nI think we need to converge the differences in behaviour between develop and build as much as possible (without breaking our great hot reloading experience) so that\r\n- issues like these can be _caught as early as possible_ \r\n- one can trust that `build` will succeed without unexpected issues if `develop` was working fine \r\n\r\nOne action point that @pieh and I found from this is \r\n- [ ] Serve static html on entry point in webpack dev server (so that hydration occurs during develop as well)\r\n\r\nPlease post more and your thoughts about this"},{"labels":[null,null,null,"enhancement"],"text":"In order to run queries for Gatsby, we have to know at build-time what the query is and any arguments.\r\n\r\nWe can do this with page queries as pages can be created with \"context\" which can be used as arguments for the GraphQL query.\r\n\r\nI didn't allow arguments with `<StaticQuery>` because there wasn't a clear way to allow people to specify build-time arguments that wouldn't confuse people into thinking that arguments would also work at runtime (explaining the distinction between build vs. run time is very hard IME).\r\n\r\nThere also wasn't need for arguments either as the query is only run once — arguments are of course for when you want to run something multiple times but vary in specified ways how the query runs.\r\n\r\nBut a recent tweet inspired a thought for how arguments could work: https://twitter.com/wesbos/status/1073338618897448960\r\n\r\nThe tweet's example was about how to create an image component that queries for image thumbnails for gatsby-image using `<StaticQuery>`. The idea is that you'd use it by passing a prop in for the image file you want to use e.g. `<MyImage src=\"kyle-mathews.jpg\" />`.\r\n\r\n`my-image.jsx` might look like:\r\n\r\n```jsx\r\nimport React from \"react\"\r\nimport Img from \"gatsby-image\"\r\nimport { StaticQuery } from \"gatsby\"\r\n\r\nexport default ({ src }) => {\r\n  <StaticQuery\r\n    query={graphql`\r\n      query HeadingQuery($src: String!) {\r\n         File(relativePath: { eq: $src }) {\r\n           childImageSharp { ...etc }\r\n         }\r\n    `}\r\n    render={data => (\r\n       <Img fixed={data.path.to.query} />\r\n    )}\r\n  />\r\n}\r\n```\r\n\r\nNow this by itself wouldn't work. At build time, we'd have no idea about how or where the component is used and what the arguments are and no way to know when and where to load in the results of the queries (how ever many there'd need to be).\r\n\r\nBut what could work is that we'd detect that a `<StaticQuery>` is taking arguments and then scan for every location that component is used. Then we'd rewrite each usage of `<MyImage>` to import a copy of `my-image.jsx` that has the arguments inserted e.g. `<MyImage src=\"kyle-mathews.jpg\" />` gets turned into `<MyImage2344324 src=\"kyle-mathews.jpg\" />`\r\n\r\n`my-image-2344324.jsx` looks like:\r\n\r\n```jsx\r\nimport React from \"react\"\r\nimport Img from \"gatsby-image\"\r\nimport { StaticQuery } from \"gatsby\"\r\n\r\nexport default ({ src }) => {\r\n  <StaticQuery\r\n    query={graphql`\r\n      query HeadingQuery {\r\n         File(relativePath: { eq: \"kyle-mathews.jpg\" }) {\r\n           childImageSharp { ...etc }\r\n         }\r\n    `}\r\n    render={data => (\r\n       <Img fixed={data.path.to.query} />\r\n    )}\r\n  />\r\n}\r\n```\r\n\r\nThe problems with this are we'd still have to enforce that only static values would be supported as args (strings/numbers) and any run-time data would be ignored. Perhaps we could lint for this.\r\n\r\nDynamic runtime lookup of query results _might_ be supportable by creating a lookup table and then running queries for all possible arguments but this obviously could lead to a crap ton of extra queries being run during builds.\r\n\r\nWe could use this to ship a nice wrapper to gatsby-image e.g. `<FixedImage>` and `<FluidImage>` that would work like: `<FixedImage src=\"kyle-mathews.jpg\" width={200} height={300} />`"},{"labels":[null,null,"enhancement"],"text":"(from a conversation with @KyleAMathews )\r\n\r\n**Problem**: People are  frustrated by long build times driven by downloading data from Wordpress\r\n\r\n**Cause**: Say gatsby-source-wordpress hits a Wordpress site and starts downloading 10,000 images. This creates problems on a number of levels. Often the receiving Wordpress site can’t deal with so many open connections. It overwhelms the Wordpress site, the server starts running out of memory, and the download slows down or fails altogether\r\n\r\n**Proposed solution**: This is a two-part solution -- (1) fundamental technical improvement (2) better UX for users.\r\n\r\n- We need more robust downloading of files (for createRemoteFileNode). \r\n\t- We need a file throttler / ConnectionHandler  to manage connections to the remote Wordpress server.\r\n\t- It would be powered by an algorithm deciding how many connections to open. The algorithm would do this by track bytes / second downloaded, and continuing to add open connections until the bytes/second rate stalls out. \r\n\t- There’s potential other, simpler, options like “don’t have more than X open connections”\r\n\t- Download manager would add new files, make sure that remote server isn’t getting overloaded.\r\n\t- Exponential backoffs.\r\n- Provide visibility of download process to user\r\n\t- Showing file download count // download progress for remote files -- “we’re downloading 250 of 500 files, eta 5:00” -- reduce user frustration\r\n\r\n**Similarity to other systems**:\r\n\r\n- @KyleAMathews has tweeted out looking at this problem, and looked for packages that handle connections in Wordpress side. So far, this search has come up blank. \r\n- Similar problem to the what rsync does -- we’re trying to sync files through smart management of server \r\n- Also similar to the strategy a lot of browsers use -- TCP --  get initial byte, doubling download speed, exponential backoff, fixed max # of simultaneous open connections….\r\n"},{"labels":[null,"enhancement"],"text":"Just wondered if there's a rationale behind having no `--https` option for `gatsby serve` analog to `gatsby develop`?"},{"labels":[null,null,"enhancement"],"text":"### Summary\r\n\r\nWhen developing a Gatsby site there's no need to run all graphql queries before serving the site. Instead Gatsby could run queries for pages as they're requested. This would avoid having to wait for slower queries (like image processing) if you're editing an unrelated part of a site.\r\n\r\nThere's an old PR investigating this at https://github.com/gatsbyjs/gatsby/pull/4775"},{"labels":[null,null,"enhancement"],"text":"The less code you load initially, the faster the page will render and become interactive (e.g. you can scroll, click on things, etc.).\r\n\r\nAnything that isn't necessary for the initial page should be lazy loaded. One chunk of code we can move off the critical path is our router + parts of our runtime used for prefetching.\r\n\r\nImplementing this is non-breaking and will have a significant impact on TTI (e.g. ~75-150ms)"},{"labels":["enhancement"],"text":"To migrate:\r\n\r\n- gatsby-source-filesystem\r\n- gatsby-source-sanity\r\n- gatsby-source-datocms\r\n- gatsby-source-contentful\r\n\r\nIf we make this migration, then we are able to call `sourceNodes` safely on any source plugin. When we do that, we'll also need to add garbage collecting for source plugins when we call them."},{"labels":[null,"enhancement"],"text":"To use Gatsby currently you need to:\r\n\r\n* Install Node.js\r\n* Install gatsby-cli\r\n* Start a new project by running `gatsby new my-project-name`\r\n* Navigate in the terminal to the correct directory\r\n* Run another command to start the gatsby develop server\r\n* Interpret & resolve the inevitable sometimes cryptic errors Node or Webpack or Babel or Gatsby or N other subsystems will throw at you\r\n\r\nGranted this is still far easier than configuring something akin to Gatsby by yourself but it still puts using Gatsby far out of reach for many potential users.\r\n\r\nSo I propose making a cross-platform Gatsby desktop app a first-class citizen of Gatsby.\r\n\r\nIt would bundle Node.js so there'd be no additional installation or setup work beyond installing Gatsby.\r\n\r\nOnce you start the app, you could browse and install [starters](https://www.gatsbyjs.org/docs/gatsby-starters/).\r\n\r\nYou'd be able to see all the projects you've started in the past.\r\n\r\nYou could click on any of them to see more info about them e.g. when you started the project, a recent screenshot, the plugins you're using, etc.\r\n\r\nYou can start the development server for any of your projects.\r\n\r\nYou can trigger a build.\r\n\r\nYou can preview locally the built site.\r\n\r\nWe don't yet have this capability but we could add \"deployment\" plugins to Gatsby to let you easily publish the new site.\r\n\r\nBasically it's the Gatsby CLI experience but with a GUI :-)\r\n\r\nWe'd also have the opportunity to go beyond the CLI and add the ability to search for plugins and then to click a button to install it. Go full WordPress basically :-)\r\n\r\nAnyways, there's a lot of potential here to vastly expand the audience for using Gatsby beyond the already terminal proficient.\r\n\r\nWould love to hear your thoughts!"},{"labels":["enhancement"],"text":"According to [this article](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/), modern browsers may profit from bundles loaded with support for the ES2015 module syntax. Using the methods described in the article may also reduce server load because of the reduced bundle sizes."},{"labels":[null,"enhancement"],"text":"Currently the project is always generating content into `public` folder. It is fine for most cases, however some people have different project structure and want to change it.\r\n\r\nHow do you think about making this configurable via CLI argument or `gatsby-config.js`? For example:\r\n```\r\ngatsby build --output-dir my-static-website\r\n```\r\n\r\n`public` will remain default, of course."},{"labels":["enhancement"],"text":"Perhaps store these by git hash so can compare sizes overtime. Also warn when a particular page grows say more than 10% over a previous commit.\n"}]