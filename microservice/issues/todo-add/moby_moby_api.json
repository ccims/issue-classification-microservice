[{"labels":["api",null],"text":"**Description**\r\nDocker (the service) accepts requests with \"Transfer-encoding: chunked\". However the authorization plugin doesn't: \r\nhttps://github.com/moby/moby/blob/master/pkg/authorization/authz.go#L58\r\nIt expects Content-Length to be set. If that header is not set (i.e. when transfer-encoding: chunked), it wrongly assumes a nil body. \r\n\r\nThis leads to issues with libraries such as docker-java and projects building on top of it such as testcontainers-java. Both supported clients in docker-java (okhttp and apache-http) are sending content with transfer-encoding: chunked. \r\n\r\n**Steps to reproduce the issue:**\r\n1. Setup an authorization plugin, e.g. https://github.com/ad-freiburg/docker-no-trivial-root \r\n2. Issue a create call with transfer-encoding: chunked (here with curl, simulating the docker-java code)\r\n```\r\ncurl -v -H 'Content-type: application/json' -H 'Transfer-encoding: chunked' localhost:2375/containers/create -d '{\"Image\": \"ubuntu:latest\"}'\r\n{\"message\":\"plugin no-trivial-root failed with error: AuthZPlugin.AuthZReq: unexpected end of JSON input\"}\r\n```\r\nAuthZ Request debug dump: \r\n``` (authorization.Request) {\r\n  User: (string) \"\",\r\n  UserAuthNMethod: (string) \"\",\r\n  RequestMethod: (string) (len=4) \"POST\",\r\n  RequestURI: (string) (len=18) \"/containers/create\",\r\n  RequestBody: ([]uint8) <nil>,\r\n  RequestHeaders: (map[string]string) (len=3) {\r\n   (string) (len=12) \"Content-Type\": (string) (len=16) \"application/json\",\r\n   (string) (len=10) \"User-Agent\": (string) (len=11) \"curl/7.47.0\",\r\n   (string) (len=6) \"Accept\": (string) (len=3) \"*/*\"\r\n  },\r\n  RequestPeerCertificates: ([]*authorization.PeerCertificate) <nil>,\r\n  ResponseStatusCode: (int) 0,\r\n  ResponseBody: ([]uint8) <nil>,\r\n  ResponseHeaders: (map[string]string) <nil>\r\n }\r\n```\r\nThe plugin failed to parse the request as it receives a nil request body (while it is not)\r\n\r\n**Expected:** \r\nIf docker is able to process a request, then the authorization plugin should be able to do so in the same way. In this case, I'd expect both calls to work equally (as they do with docker without authorization plugin: \r\n\r\n```\r\ncurl -v -H 'Content-type: application/json' -H 'Transfer-encoding: chunked' localhost:2375/containers/create -d '{\"Image\": \"ubuntu:latest\"}'\r\ncurl -v -H 'Content-type: application/json' localhost:2375/containers/create -d '{\"Image\": \"ubuntu:latest\"}'`\r\n```\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient: Docker Engine - Community\r\n Version:           19.03.8\r\n API version:       1.40\r\n Go version:        go1.12.17\r\n Git commit:        afacb8b7f0\r\n Built:             Wed Mar 11 01:25:58 2020\r\n OS/Arch:           linux/amd64\r\n Experimental:      false\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          19.03.8\r\n  API version:      1.40 (minimum version 1.12)\r\n  Go version:       go1.12.17\r\n  Git commit:       afacb8b7f0\r\n  Built:            Wed Mar 11 01:24:30 2020\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          1.2.13\r\n  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429\r\n runc:\r\n  Version:          1.0.0-rc10\r\n  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd\r\n docker-init:\r\n  Version:          0.18.0\r\n  GitCommit:        fec3683\r\n```\r\n\r\n**Output of `docker info`:**\r\n```\r\nClient:\r\n Debug Mode: false\r\n\r\nServer:\r\n Containers: 87\r\n  Running: 5\r\n  Paused: 0\r\n  Stopped: 82\r\n Images: 112\r\n Server Version: 19.03.8\r\n Storage Driver: overlay2\r\n  Backing Filesystem: <unknown>\r\n  Supports d_type: true\r\n  Native Overlay Diff: true\r\n Logging Driver: json-file\r\n Cgroup Driver: cgroupfs\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Authorization: no-trivial-root\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n Swarm: inactive\r\n Runtimes: runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: 7ad184331fa3e55e52b890ea95e65ba581ae3429\r\n runc version: dc9208a3303feef5b3839f4323d9beb36df0a9dd\r\n init version: fec3683\r\n Security Options:\r\n  apparmor\r\n  seccomp\r\n   Profile: default\r\n  userns\r\n Kernel Version: 4.4.0-187-generic\r\n Operating System: Ubuntu 16.04.7 LTS\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 2\r\n Total Memory: 3.842GiB\r\n Name: scl000102100\r\n ID: GETQ:2BEO:QTOR:FLGH:BSV4:5MTS:3LD2:7S3U:YFCW:CLIU:ZIRJ:6NLM\r\n Docker Root Dir: /var/lib/docker/16170.100000\r\n Debug Mode: true\r\n  File Descriptors: 53\r\n  Goroutines: 57\r\n  System Time: 2020-09-15T12:03:20.872834075+02:00\r\n  EventsListeners: 0\r\n HTTP Proxy: http://gate-zrh-os.swissre.com:8080/\r\n No Proxy: swissre.com\r\n Username: johannessr\r\n Registry: https://index.docker.io/v1/\r\n Labels:\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0/8\r\n Live Restore Enabled: false\r\n\r\nWARNING: API is accessible on http://0.0.0.0:2375 without encryption.\r\n         Access to the remote API is equivalent to root access on the host. Refer\r\n         to the 'Docker daemon attack surface' section in the documentation for\r\n         more information: https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface\r\nWARNING: No swap limit support\r\n\r\n```\r\n"},{"labels":["api",null,null,null],"text":"**Description**\r\n\r\nThe SwarmJoin API supports `Availability` (https://github.com/moby/moby/blob/master/daemon/cluster/swarm.go#L147-L188), which the CLI client also uses, but it is not documented in the API docs (https://github.com/moby/moby/blob/master/api/swagger.yaml#L10008).\r\n"},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\nIn api document `/version` response looks like wrong.\r\nhttps://github.com/moby/moby/blob/master/docs/api/v1.40.yaml#L7715\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. `curl --unix-socket /var/run/docker.sock localhost/version`\r\n\r\n**Describe the results you received:**\r\n```\r\n{\r\n  \"Platform\": {\r\n    \"Name\": \"Docker Engine - Community\"\r\n  },\r\n  \"Components\": [\r\n    {\r\n      \"Name\": \"Engine\",\r\n      \"Version\": \"19.03.12\",\r\n      \"Details\": {\r\n        \"ApiVersion\": \"1.40\",\r\n        \"Arch\": \"amd64\",\r\n        \"BuildTime\": \"2020-06-22T15:44:07.000000000+00:00\",\r\n        \"Experimental\": \"false\",\r\n        \"GitCommit\": \"48a66213fe\",\r\n        \"GoVersion\": \"go1.13.10\",\r\n        \"KernelVersion\": \"5.3.0-62-generic\",\r\n        \"MinAPIVersion\": \"1.12\",\r\n        \"Os\": \"linux\"\r\n      }\r\n    },\r\n    ...\r\n  ],\r\n  \"Version\": \"19.03.12\",\r\n  \"ApiVersion\": \"1.40\",\r\n  \"MinAPIVersion\": \"1.12\",\r\n  \"GitCommit\": \"48a66213fe\",\r\n  \"GoVersion\": \"go1.13.10\",\r\n  \"Os\": \"linux\",\r\n  \"Arch\": \"amd64\",\r\n  \"KernelVersion\": \"5.3.0-62-generic\",\r\n  \"BuildTime\": \"2020-06-22T15:44:07.000000000+00:00\"\r\n}\r\n```\r\n\r\n**Describe the results you expected:**\r\nLooks like document is wrong.\r\nWe should update document?\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient: Docker Engine - Community\r\n Version:           19.03.12\r\n API version:       1.40\r\n Go version:        go1.13.10\r\n Git commit:        48a66213fe\r\n Built:             Mon Jun 22 15:45:36 2020\r\n OS/Arch:           linux/amd64\r\n Experimental:      false\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          19.03.12\r\n  API version:      1.40 (minimum version 1.12)\r\n  Go version:       go1.13.10\r\n  Git commit:       48a66213fe\r\n  Built:            Mon Jun 22 15:44:07 2020\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          1.2.13\r\n  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429\r\n runc:\r\n  Version:          1.0.0-rc10\r\n  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd\r\n docker-init:\r\n  Version:          0.18.0\r\n  GitCommit:        fec3683\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nClient: Docker Engine - Community\r\n Version:           19.03.12\r\n API version:       1.40\r\n Go version:        go1.13.10\r\n Git commit:        48a66213fe\r\n Built:             Mon Jun 22 15:45:36 2020\r\n OS/Arch:           linux/amd64\r\n Experimental:      false\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          19.03.12\r\n  API version:      1.40 (minimum version 1.12)\r\n  Go version:       go1.13.10\r\n  Git commit:       48a66213fe\r\n  Built:            Mon Jun 22 15:44:07 2020\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          1.2.13\r\n  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429\r\n runc:\r\n  Version:          1.0.0-rc10\r\n  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd\r\n docker-init:\r\n  Version:          0.18.0\r\n  GitCommit:        fec3683\r\n[I] docker.vim )\r\n[I] docker.vim ) docker info\r\nClient:\r\n Debug Mode: false\r\n\r\nServer:\r\n Containers: 2\r\n  Running: 1\r\n  Paused: 0\r\n  Stopped: 1\r\n Images: 52\r\n Server Version: 19.03.12\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Native Overlay Diff: true\r\n Logging Driver: json-file\r\n Cgroup Driver: cgroupfs\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n Swarm: inactive\r\n Runtimes: runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: 7ad184331fa3e55e52b890ea95e65ba581ae3429\r\n runc version: dc9208a3303feef5b3839f4323d9beb36df0a9dd\r\n init version: fec3683\r\n Security Options:\r\n  apparmor\r\n  seccomp\r\n   Profile: default\r\n Kernel Version: 5.3.0-62-generic\r\n Operating System: Ubuntu 18.04.4 LTS\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 8\r\n Total Memory: 31.09GiB\r\n Name: thinkpad\r\n ID: EKKH:UC2C:RDMA:JDP2:KDIG:GW2W:T2H3:S3LT:MWNI:D5YG:X24P:K2DC\r\n Docker Root Dir: /var/lib/docker\r\n Debug Mode: false\r\n Username: skanehira\r\n Registry: https://index.docker.io/v1/\r\n Labels:\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0/8\r\n Live Restore Enabled: false\r\n\r\nWARNING: No swap limit support\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nOS: Ubuntu 18.04.01"},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\nHello !\r\n\r\nI have a issue with the Engine API.\r\nWhen I create a service using the API, the service label is created with weird escaped characters instead of my parenthesis. \r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a service with the API (formatted in JSON) and add parenthesis to a label.\r\n\r\n**Received result:**\r\n```\r\n \"traefik.http.routers.test.rule\": \"Headers%28`X-INSTANCE-ID`,`test`%29\",\r\n```\r\n\r\n**Expected result:**\r\n```\r\n \"traefik.http.routers.test.rule\": \"Headers(`X-INSTANCE-ID`,`test`)\",\r\n```\r\n**Additional information:**\r\nI've tried on two different servers, same bug...\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient: Docker Engine - Community\r\n Version:           19.03.3\r\n API version:       1.40\r\n Go version:        go1.12.10\r\n Git commit:        a872fc2f86\r\n Built:             Tue Oct  8 00:59:36 2019\r\n OS/Arch:           linux/amd64\r\n Experimental:      false\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          19.03.3\r\n  API version:      1.40 (minimum version 1.12)\r\n  Go version:       go1.12.10\r\n  Git commit:       a872fc2f86\r\n  Built:            Tue Oct  8 00:58:08 2019\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          1.2.10\r\n  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339\r\n runc:\r\n  Version:          1.0.0-rc8+dev\r\n  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657\r\n docker-init:\r\n  Version:          0.18.0\r\n  GitCommit:        fec3683\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nClient:\r\n Debug Mode: false\r\n\r\nServer:\r\n Containers: 2\r\n  Running: 2\r\n  Paused: 0\r\n  Stopped: 0\r\n Images: 170\r\n Server Version: 19.03.3\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Native Overlay Diff: true\r\n Logging Driver: json-file\r\n Cgroup Driver: cgroupfs\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n Swarm: active\r\n  NodeID: szgmaj5mz8l5vffvfglf7kwxi\r\n  Is Manager: true\r\n  ClusterID: gqno1oih4phd70sciix2i10t7\r\n  Managers: 1\r\n  Nodes: 1\r\n  Default Address Pool: 10.0.0.0/8\r\n  SubnetSize: 24\r\n  Data Path Port: 4789\r\n  Orchestration:\r\n   Task History Retention Limit: 5\r\n  Raft:\r\n   Snapshot Interval: 10000\r\n   Number of Old Snapshots to Retain: 0\r\n   Heartbeat Tick: 1\r\n   Election Tick: 10\r\n  Dispatcher:\r\n   Heartbeat Period: 5 seconds\r\n  CA Configuration:\r\n   Expiry Duration: 3 months\r\n   Force Rotate: 0\r\n  Autolock Managers: false\r\n  Root Rotation In Progress: false\r\n  Node Address: 192.168.152.129\r\n  Manager Addresses:\r\n   192.168.152.129:2377\r\n Runtimes: runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339\r\n runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657\r\n init version: fec3683\r\n Security Options:\r\n  seccomp\r\n   Profile: default\r\n Kernel Version: 4.9.0-7-amd64\r\n Operating System: Debian GNU/Linux 9 (stretch)\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 2\r\n Total Memory: 3.845GiB\r\n Name: bde-backoffice\r\n ID: MPE2:TUTT:TGYF:5XDK:6UQK:RJCG:E2DD:3QW6:DO5Q:UC6V:CNUV:RT6O\r\n Docker Root Dir: /var/lib/docker\r\n Debug Mode: false\r\n Registry: https://index.docker.io/v1/\r\n Labels:\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0/8\r\n Live Restore Enabled: false\r\n\r\nWARNING: No swap limit support\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nDebian 9.6 x64\r\n"},{"labels":["api",null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nDocker introduced the `--gpus` option with 19.03, which enables first class GPU support inside docker. Unfortunately this option doesn't seem to be available using the Docker API v1.40 (most likely should be located inside the HostOptions when creating the container, for reference this is what the current docs state [DOCS](https://docs.docker.com/engine/api/v1.40/#operation/ContainerCreate))\r\n\r\nAlso the changelogs for version 1.40, didnt seem to include a change supporting this case.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Try to launch a container using the new GPU option using the Docker API\r\n\r\n**Describe the results you received:**\r\nOption not available using the API\r\n\r\n**Describe the results you expected:**\r\nOption to be available using the API\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n```\r\n\r\nClient:\r\n Version:           19.03.6\r\n API version:       1.40\r\n Go version:        go1.12.17\r\n Git commit:        369ce74a3c\r\n Built:             Fri Feb 28 23:45:43 2020\r\n OS/Arch:           linux/amd64\r\n Experimental:      false\r\n\r\nServer:\r\n Engine:\r\n  Version:          19.03.6\r\n  API version:      1.40 (minimum version 1.12)\r\n  Go version:       go1.12.17\r\n  Git commit:       369ce74a3c\r\n  Built:            Wed Feb 19 01:06:16 2020\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          1.3.3-0ubuntu1~18.04.2\r\n  GitCommit:        \r\n runc:\r\n  Version:          spec: 1.0.1-dev\r\n  GitCommit:        \r\n docker-init:\r\n  Version:          0.18.0\r\n  GitCommit:   \r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nClient:\r\n Debug Mode: false\r\n\r\nServer:\r\n Containers: 12\r\n  Running: 0\r\n  Paused: 0\r\n  Stopped: 12\r\n Images: 268\r\n Server Version: 19.03.6\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Native Overlay Diff: true\r\n Logging Driver: json-file\r\n Cgroup Driver: cgroupfs\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n Swarm: inactive\r\n Runtimes: runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: \r\n runc version: \r\n init version: \r\n Security Options:\r\n  apparmor\r\n  seccomp\r\n   Profile: default\r\n Kernel Version: 5.3.0-61-generic\r\n Operating System: Ubuntu 18.04.4 LTS\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 12\r\n Total Memory: 31.29GiB\r\n Name: tanuki\r\n ID: MGDH:HBPR:BX2D:35L4:CRTC:7K34:D6QG:MCJZ:SYJC:GSBV:SWFF:NIEF\r\n Docker Root Dir: /var/lib/docker\r\n Debug Mode: false\r\n Registry: https://index.docker.io/v1/\r\n Labels:\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0/8\r\n Live Restore Enabled: false\r\n\r\nWARNING: No swap limit support\r\n```\r\n"},{"labels":["api"],"text":"Currently API routers are responsible for transforming requests based upon API version, however this has lead to host specific details leaking into the http router.\r\nWe also don't really want API version specific details leaking into the implementation.\r\n\r\nI propose that we add a shim here so that transformations can be made after the request is routed.\r\nThis could look something like:\r\n\r\n```go\r\n// the API router\r\nfunc(r *fooRouter) createFoo(ctx context.Context, w http.Response, req *http.Request) {\r\n  // make a fooConfig from the reuqest\r\n  r.backend.Create(ctx, fooConfig)\r\n}\r\n```\r\n\r\n```go\r\nfunc(b *fooBackend) Create(ctx context.Context, fooConfig Config) {\r\n    b.transform.Create(ctx, &fooConfig)\r\n}\r\n```\r\n\r\n```go\r\nfunc(t *fooTransformer) Create(ctx context.Context, fooConfig) {\r\n  ver := getApiVersion(ctx)\r\n  if ver.LessThan(\"1.2\") {\r\n      // set some value\r\n  }\r\n}\r\n```\r\n\r\nThen the transformer can be configured with host specific details rather than relying on the HTTP router to have these details.\r\nIt also seems like it makes it easier to unit test such transformations."},{"labels":["api",null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nDocker is expected to unshare cgroup namespace by default on cgroup v2 hosts.\r\nHowever, the cgroup namespace is not unshared when a container was created by an older API client.\r\n\r\n\r\n**Steps to reproduce the issue:**\r\nInspect the host cgroup namespace (4026531835):\r\n```console\r\n$ sudo ls -l /proc/1/ns/cgroup\r\nlrwxrwxrwx 1 root root 0 Jun  5 16:36 /proc/1/ns/cgroup -> 'cgroup:[4026531835]'\r\n```\r\n\r\nAPI 1.41 creates a container with a new namespace (4026533000) as expected:\r\n```console\r\n$ DOCKER_API_VERSION=1.41 docker run --rm alpine ls -l /proc/1/ns/cgroup\r\nlrwxrwxrwx    1 root     root             0 Jun  5 07:36 /proc/1/ns/cgroup -> cgroup:[4026533000]\r\n```\r\n\r\nOTOH API 1.40 creates a container with the host cgroup namespace (4026531835):\r\n```console\r\n$ DOCKER_API_VERSION=1.40 docker run --rm alpine ls -l /proc/1/ns/cgroup\r\nlrwxrwxrwx    1 root     root             0 Jun  5 07:36 /proc/1/ns/cgroup -> cgroup:[4026531835]\r\n```\r\n\r\n**Describe the results you received:**\r\nAPI 1.40 creates a container with the host cgroup namespace (4026531835).\r\n\r\n**Describe the results you expected:**\r\nA new cgroup namespace should be always created by default on cgroup v2 hosts..\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:           20.03.0-dev\r\n API version:       1.41\r\n Go version:        go1.13.11\r\n Git commit:        8f14db8df\r\n Built:             Fri Jun  5 07:30:25 2020\r\n OS/Arch:           linux/amd64\r\n Context:           default\r\n Experimental:      true\r\n\r\nServer:\r\n Engine:\r\n  Version:          dev\r\n  API version:      1.41 (minimum version 1.12)\r\n  Go version:       go1.13.11\r\n  Git commit:       fa38a6cd21\r\n  Built:            Fri Jun  5 07:28:36 2020\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     true\r\n containerd:\r\n  Version:          v1.4.0-beta.1-18-g38cb1c1a\r\n  GitCommit:        38cb1c1a54e3180edd29933974d715b69334f0f1\r\n runc:\r\n  Version:          1.0.0-rc10+dev\r\n  GitCommit:        2a0466958d9af23af2ad12bd79d06ed0af4091e2\r\n docker-init:\r\n  Version:          0.18.0\r\n  GitCommit:        fec3683\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nClient:\r\n Context:    default\r\n Debug Mode: false\r\n Plugins:\r\n  buildx: Build with BuildKit (Docker Inc., v0.4.1)\r\n\r\nServer:\r\n Containers: 1\r\n  Running: 1\r\n  Paused: 0\r\n  Stopped: 0\r\n Images: 4\r\n Server Version: dev\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Native Overlay Diff: true\r\n Logging Driver: json-file\r\n Cgroup Driver: systemd\r\n Cgroup Version: 2\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n Swarm: inactive\r\n Runtimes: runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: 38cb1c1a54e3180edd29933974d715b69334f0f1\r\n runc version: 2a0466958d9af23af2ad12bd79d06ed0af4091e2\r\n init version: fec3683\r\n Security Options:\r\n  apparmor\r\n  seccomp\r\n   Profile: default\r\n  cgroupns\r\n Kernel Version: 5.4.0-33-generic\r\n Operating System: Ubuntu 20.04 LTS\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 2\r\n Total Memory: 7.748GiB\r\n Name: suda-ws01\r\n ID: E2YB:EGZO:6BNW:EPHS:4WFQ:EIDV:ZZ6D:QBZK:6673:CIOR:DLZ6:SI3D\r\n Docker Root Dir: /var/lib/docker\r\n Debug Mode: true\r\n  File Descriptors: 32\r\n  Goroutines: 56\r\n  System Time: 2020-06-05T16:42:51.430978282+09:00\r\n  EventsListeners: 0\r\n Username: akihirosuda\r\n Registry: https://index.docker.io/v1/\r\n Labels:\r\n Experimental: true\r\n Insecure Registries:\r\n  127.0.0.0/8\r\n Live Restore Enabled: false\r\n\r\nWARNING: No kernel memory limit support\r\nWARNING: No kernel memory TCP limit support\r\nWARNING: No oom kill disable support\r\nWARNING: Support for cgroup v2 is experimental\r\n```\r\n\r\n"},{"labels":["api",null],"text":"https://docs.docker.com/engine/api/v1.40/#operation/ContainerStats\r\n\"read\": \"2015-01-08T22:57:31.547920715Z\"\r\nIn fact: \"read\":\"2020-03-04T14:59:28.0520539+03:00\".\r\n![image](https://user-images.githubusercontent.com/47747798/82048203-e3515e00-96bc-11ea-999d-65ebbdfb1bba.png)\r\n\r\nHost - Windows Server 2019\r\nhttps://github.com/docker/for-win/issues/5942"},{"labels":["api",null,null],"text":"---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\n**Description**\r\nCurrently using the Docker SDK for GO to build and push images to ECR on Amazon. Whenever i call ImagePush, if i don't take io.ReadCloser and read from it to the end, my images will not appear on ECR. If i do something simple as:\r\n\r\n```go\r\nio.Copy(ioutil.Discard, imagePushResult)\r\n```\r\nit works. \r\n\r\n**Steps to reproduce the issue:**\r\n1. Call ImagePush to push image to ECR repo (have not tried with other repos)\r\n2. Return after the call and don't bother with the io.ReadCloser returned by ImagePush\r\n3. The image will not appear on the repository\r\n\r\n**Describe the results you received:**\r\n\r\n\r\n**Describe the results you expected:**\r\nI expected the image to be on the repo regardless of how i handle the retured io.ReasCloser. \r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient: Docker Engine - Community\r\n Version:           19.03.5\r\n API version:       1.40\r\n Go version:        go1.12.12\r\n Git commit:        633a0ea\r\n Built:             Wed Nov 13 07:22:34 2019\r\n OS/Arch:           darwin/amd64\r\n Experimental:      false\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          19.03.5\r\n  API version:      1.40 (minimum version 1.12)\r\n  Go version:       go1.12.12\r\n  Git commit:       633a0ea\r\n  Built:            Wed Nov 13 07:29:19 2019\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          v1.2.10\r\n  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339\r\n runc:\r\n  Version:          1.0.0-rc8+dev\r\n  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657\r\n docker-init:\r\n  Version:          0.18.0\r\n  GitCommit:        fec3683\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nClient:\r\n Debug Mode: false\r\n\r\nServer:\r\n Containers: 19\r\n  Running: 0\r\n  Paused: 0\r\n  Stopped: 19\r\n Images: 5\r\n Server Version: 19.03.5\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Native Overlay Diff: true\r\n Logging Driver: json-file\r\n Cgroup Driver: cgroupfs\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n Swarm: inactive\r\n Runtimes: runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339\r\n runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657\r\n init version: fec3683\r\n Security Options:\r\n  seccomp\r\n   Profile: default\r\n Kernel Version: 4.19.76-linuxkit\r\n Operating System: Docker Desktop\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 4\r\n Total Memory: 1.943GiB\r\n Name: docker-desktop\r\n ID: SGU4:RG3S:FZPA:P67C:J3PQ:3WV5:T522:DART:YO5Y:J2VI:MSLA:JY7V\r\n Docker Root Dir: /var/lib/docker\r\n Debug Mode: true\r\n  File Descriptors: 33\r\n  Goroutines: 60\r\n  System Time: 2020-02-22T19:29:09.8248016Z\r\n  EventsListeners: 3\r\n HTTP Proxy: gateway.docker.internal:3128\r\n HTTPS Proxy: gateway.docker.internal:3129\r\n Registry: https://index.docker.io/v1/\r\n Labels:\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0/8\r\n Live Restore Enabled: false\r\n Product License: Community Engine\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nPushing the images to AWS.\r\n"},{"labels":["api",null],"text":"A long long time ago (in this galaxy, though), we added support for container stats.\r\nThe API was designed to just push stats at an interval until the client disconnects.\r\n\r\nNot too much later, people were wanting to be able to just fetch a single set of stats and be done with it, so we added a query param `stream=false`, which makes dockerd hang up after a single stat is sent. Not the best naming but it did what it needed to do.\r\n\r\nBut then, oh no... now the docker CLI, when using `--no-stream`, always shows 0% CPU usage because there was only 1 CPU stat and nothing compare CPU usage with. It was decided to collect 2 stats instead of just 1 so that the client can calculate the usage.\r\n\r\nFast forward to where we are now....\r\n\r\nHere we have a problem. Any tool wanting to sample docker takes 2x as long (nearly 2 seconds) to collect per container than before the mentioned change (which admittedly was years ago).\r\nMeanwhile every sampling tool is just going to sample as often as it needs to and calculate usage from there and does not care about the primed stats.\r\n\r\nIt would have been nice if we changed the CLI to make 2 collections rather than expecting the engine to do this for them. It wasn't a breaking change to make the engine do 2 collections, but certainly seems (or at least requiring an API bump) to backtrack and only take 1 collection.\r\n\r\nI was hoping to make a patch to work around this problem but I can't really think of one that doesn't involve bumping the API... save for probably a long shot where we could change the engine to accept more than just true/false from the query param (`?stream=`)... but even this could only be taken advantage of by a custom client lib, not the official one because that is accepting a bool in the function arguments.\r\n\r\nSo opening this as an intention to fix this, and also to solicit feedback for ideas we could do possibly as a back-portable patch."},{"labels":["api",null,null,null,null],"text":"The `publish` filter looks to be filtering on the wrong values (and the `TestPsListContainersFilterPorts ` is incorrect); see https://github.com/moby/moby/pull/27557#issuecomment-578016663\r\n\r\nCreate some containers;\r\n\r\n\r\n```bash\r\ndocker run -d --name test_no_ports nginx:alpine\r\ndocker run -d --name test_port_1080 -p 1080:80 nginx:alpine\r\ndocker run -d --name test_port_1090 -p 1090:80 nginx:alpine\r\ndocker run -d --name test_port_80_random -p 80 nginx:alpine\r\ndocker run -d --name test_port_all_random -P nginx:alpine\r\n\r\n\r\ndocker ps --filter name=test_\r\n\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES\r\n3ce8232cdd04        nginx:alpine        \"nginx -g 'daemon of…\"   6 seconds ago       Up 6 seconds        0.0.0.0:32775->80/tcp   test_port_all_random\r\n7f8fad7a0eb9        nginx:alpine        \"nginx -g 'daemon of…\"   7 seconds ago       Up 6 seconds        0.0.0.0:32774->80/tcp   test_port_80_random\r\n3870ccc2f8f7        nginx:alpine        \"nginx -g 'daemon of…\"   7 seconds ago       Up 6 seconds        0.0.0.0:1090->80/tcp    test_port_1090\r\naa565211513e        nginx:alpine        \"nginx -g 'daemon of…\"   8 seconds ago       Up 7 seconds        0.0.0.0:1080->80/tcp    test_port_1080\r\nc4a1c6e0e99b        nginx:alpine        \"nginx -g 'daemon of…\"   8 seconds ago       Up 7 seconds        80/tcp                  test_no_ports\r\n```\r\n\r\nFiltering on the \"exposed\" port works:\r\n\r\n```bash\r\ndocker ps --filter name=test_ --filter expose=80\r\n\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES\r\n3ce8232cdd04        nginx:alpine        \"nginx -g 'daemon of…\"   20 seconds ago      Up 19 seconds       0.0.0.0:32775->80/tcp   test_port_all_random\r\n7f8fad7a0eb9        nginx:alpine        \"nginx -g 'daemon of…\"   21 seconds ago      Up 20 seconds       0.0.0.0:32774->80/tcp   test_port_80_random\r\n3870ccc2f8f7        nginx:alpine        \"nginx -g 'daemon of…\"   21 seconds ago      Up 20 seconds       0.0.0.0:1090->80/tcp    test_port_1090\r\naa565211513e        nginx:alpine        \"nginx -g 'daemon of…\"   22 seconds ago      Up 20 seconds       0.0.0.0:1080->80/tcp    test_port_1080\r\nc4a1c6e0e99b        nginx:alpine        \"nginx -g 'daemon of…\"   22 seconds ago      Up 21 seconds       80/tcp                  test_no_ports\r\n\r\ndocker ps --filter name=test_ --filter expose=90\r\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\r\n```\r\n\r\nFiltering on the \"published\" port doesn't (trying some variations below):\r\n\r\n```bash\r\ndocker ps --filter name=test_ --filter publish=1080\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                 NAME\r\n\r\n\r\ndocker ps --filter name=test_ --filter publish=1080/tcp\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                 NAMES\r\n\r\ndocker ps --filter name=test_ --filter publish=1080/udp\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                 NAMES\r\n```\r\n\r\nHowever, using the \"exposed\" port number instead of the \"published\" port shows _some_ results:\r\n\r\n\r\n```bash\r\ndocker ps --filter name=test_ --filter publish=80\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                   NAMES\r\n7f8fad7a0eb9        nginx:alpine        \"nginx -g 'daemon of…\"   About a minute ago   Up About a minute   0.0.0.0:32774->80/tcp   test_port_80_random\r\n3870ccc2f8f7        nginx:alpine        \"nginx -g 'daemon of…\"   About a minute ago   Up About a minute   0.0.0.0:1090->80/tcp    test_port_1090\r\naa565211513e        nginx:alpine        \"nginx -g 'daemon of…\"   About a minute ago   Up About a minute   0.0.0.0:1080->80/tcp    test_port_1080\r\n```\r\n\r\nIt appears it's filtering on the wrong value; also, the container with \"random\" port-mapping for all ports is missing in this case (perhaps it's filtering on ports that were _explicitly_ configured to be published?)\r\n\r\n\r\nNote that the `TestPsListContainersFilterPorts` test-case doesn't appear to catch this issue because it appears to be filtering on port `80` (which is published to a _random_ port);\r\n\r\nhttps://github.com/moby/moby/blob/b95fad8e51bd064be4f4e58a996924f343846c85/integration-cli/docker_cli_ps_test.go#L809-L832\r\n\r\n\r\n```bash\r\ndocker run -d --publish 80 busybox top\r\n537c87330e660cc4d7a7426dcddd771a3b1bb3f7c21c7750a4b1a3358e976b1c\r\n\r\ndocker ps --filter publish=80\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES\r\n537c87330e66        busybox             \"top\"                    19 seconds ago      Up 18 seconds       0.0.0.0:32776->80/tcp   sleepy_khorana\r\n...\r\n```"},{"labels":["api"],"text":"<!-- Download Docker Desktop 'Edge' (latest build) here: https://hub.docker.com/editions/community/docker-ce-desktop-windows -->\r\n  - [x] I have tried with the latest version of my channel (Stable or Edge)\r\n  - [x] I have uploaded Diagnostics\r\n  - Diagnostics ID: 17E86123-291D-4E3C-8572-433BD0017ADA/20200108195342\r\n\r\n### Expected behavior\r\nchunk contains CRLF at the end of stream\r\n\r\n### Actual behavior\r\nthere is only LF on windows\r\n\r\n### Steps to reproduce the behavior\r\nsee https://github.com/docker-java/docker-java/issues/698#issuecomment-572228590 for steps to reproduce\r\n\r\nEDIT: I have updated original \"docker-java\" issue, seems no problem anymore. Sorry for that."},{"labels":["api",null,null,null],"text":"I noticed that we still have some old release branches in this repository. Some of those branches have changes that never made it into a release (or documentation cherry-picks that were published in the documentation, but not tagged as a release)\r\n\r\n\r\nBranch                                               | Changes not in a release\r\n-----------------------------------------------------|--------------------------------------------------------------\r\n[1.12.x](https://github.com/moby/moby/tree/1.12.x)   | https://github.com/moby/moby/compare/v1.12.6...1.12.x\r\n[1.13.x](https://github.com/moby/moby/tree/1.13.x)   | https://github.com/moby/moby/compare/v1.13.1...1.13.x\r\n[17.03.x](https://github.com/moby/moby/tree/17.03.x) | https://github.com/moby/moby/compare/v17.03.2-ce...17.03.x\r\n[17.04.x](https://github.com/moby/moby/tree/17.04.x) | https://github.com/moby/moby/compare/v17.04.0-ce...17.04.x\r\n[17.05.x](https://github.com/moby/moby/tree/17.05.x) | https://github.com/moby/moby/compare/v17.05.0-ce...17.05.x (no diff)\r\n[docs](https://github.com/moby/moby/tree/docs)       | documentation-only changes\r\n\r\n\r\nSome care should be taken when removing these branches, because the docker documentation fetches some resources from some of these branches; https://github.com/docker/docker.github.io/blob/ec57364ede82a135021e2e762bd0833d92a0cc0f/_scripts/fetch-upstream-resources.sh#L74 https://github.com/docker/docker.github.io/blob/ec57364ede82a135021e2e762bd0833d92a0cc0f/_scripts/fetch-upstream-resources.sh#L89-L95\r\n\r\n\r\nIn addition, with the introduction of the Swagger file (which is used to document current versions of the API), this repository only has a definition of the _current_ version of the API. Older versions of the API need to be fetched from either tags in various repositories, or from release-branches in those repositories. Having those files spread in various locations makes building the docs complicated, but also makes it more difficult to _compare_ changes between API versions, or to make fixes to the API documentation (if there's a bug or missing documentation in existing API versions).\r\n\r\nI'm planning to add copies of the swagger.yml for each API version. in this repository to address that.\r\n\r\n- [x] update docker-ce-packaging to build from upstream repositories instead of the mono-repo; https://github.com/docker/docker-ce-packaging/pull/449\r\n    - note: more changes needed in the private release packaging repositories, but those are tracked separately\r\n- [x] update fetch-upstream-resources.sh script in documentation repository to not depend on these branches (https://github.com/docker/docker.github.io/pull/10101)\r\n    - [x] https://github.com/docker/docker.github.io/pull/10343 Engine API: use template for API reference pages\r\n    - [x] https://github.com/docker/docker.github.io/pull/10348 Simplify use of \"ENGINE_BRANCH\" and \"DISTRIBUTION_BRANCH\"\r\n    - [x] https://github.com/docker/docker.github.io/pull/10344 [WIP] simplify fetching API versions\r\n    - [x] https://github.com/docker/docker.github.io/pull/10578 Engine API: remove per-branch fetching of API docs\r\n- [x] backport fetch-upstream-resources.sh changes to documentation archive branches\r\n    - [x] v18.09 archive branch https://github.com/docker/docker.github.io/pull/10196\r\n    - [x] v18.03 archive branch https://github.com/docker/docker.github.io/pull/10349\r\n    - [x] ~v17.12 archive branch~ won't fix\r\n    - [x] ~v17.09 archive branch~ won't fix\r\n    - [x] ~v17.06 archive branch~ won't fix\r\n    - [x] ~v17.03 archive branch~ won't fix\r\n    - [x] ~v1.13 archive branch~ won't fix\r\n- [x] add a copy of the swagger.yml for each released version of the API\r\n    - [x] v1.40 - docker v19.03 https://github.com/moby/moby/pull/40570 \r\n    - [x] v1.39 - docker v18.09 https://github.com/moby/moby/pull/40570 \r\n    - [x] v1.38 - docker v18.06 https://github.com/moby/moby/pull/40570 \r\n    - [x] v1.37 - docker v18.03 - v18.05 https://github.com/moby/moby/pull/40778\r\n    - [x] v1.36 - docker v18.02 https://github.com/moby/moby/pull/40778\r\n    - [x] v1.35 - docker v17.12 - v18.01 https://github.com/moby/moby/pull/40778\r\n    - [x] v1.34 - docker v17.11 https://github.com/moby/moby/pull/40778\r\n    - [x] v1.33 - docker v17.10 https://github.com/moby/moby/pull/40778\r\n    - [x] v1.32 - docker v17.09 https://github.com/moby/moby/pull/40778\r\n    - [x] v1.31 - docker v17.07 https://github.com/moby/moby/pull/40778\r\n    - [x] v1.30 - docker v17.06 https://github.com/moby/moby/pull/40778\r\n    - [x] v1.29 - docker v17.05 https://github.com/moby/moby/pull/40570 \r\n    - [x] v1.28 - docker v17.04 https://github.com/moby/moby/pull/40570 \r\n    - [x] v1.27 - docker v17.03 https://github.com/moby/moby/pull/40570 \r\n    - [x] v1.26 - docker v1.13.1 https://github.com/moby/moby/pull/40570 \r\n    - [x] v1.25 - docker v1.13.0 https://github.com/moby/moby/pull/40570 \r\n- [x] cherry-pick copy of swagger.yaml to current release branch\r\n    - [x] https://github.com/moby/moby/pull/40575 [19.03 backport] docs: add API versions v1.25 - v1.29, v1.38 - v1.40\r\n    - [x] https://github.com/moby/moby/pull/40779 [19.03 backport] docs: add API versions v1.30 - v1.37\r\n- [x] ~remove unused release-branches~ we can't update all archives, so we may want to keep the old branches (but eventually, \"archive\" the docker/docker-ce repository once it's no longer used in the build pipeline\r\n"},{"labels":["api",null],"text":"The `docker inspect` documentation doesn't describe the `Health` object being returned once healthchecks are configured.\r\n\r\n\r\n**Steps to reproduce the issue:**\r\n1. `docker run -it --rm nginx`\r\n2. _docker inspect_ the container: `docker inspect --format '{{json .State.Health }}' ` and observe `null` according to the documentation (since the field doesn't exist). \r\n3. `docker run -it --rm --health-cmd=\"exit 0\" nginx`\r\n4. _docker inspect_ the container: `docker inspect --format '{{json .State.Health }}' ` and observe a valid JSON:\r\n\r\n `{\"Status\":\"healthy\",\"FailingStreak\":0,\"Log\":[{\"Start\":\"2019-12-22T10:59:05.6385933Z\",\"End\":\"2019-12-22T10:59:05.8078452Z\",\"ExitCode\":0,\"Output\":\"\"}]}`\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient: Docker Engine - Community\r\n Version:           19.03.5\r\n API version:       1.40\r\n Go version:        go1.12.12\r\n Git commit:        633a0ea\r\n Built:             Wed Nov 13 07:22:34 2019\r\n OS/Arch:           darwin/amd64\r\n Experimental:      false\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          19.03.5\r\n  API version:      1.40 (minimum version 1.12)\r\n  Go version:       go1.12.12\r\n  Git commit:       633a0ea\r\n  Built:            Wed Nov 13 07:29:19 2019\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          v1.2.10\r\n  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339\r\n runc:\r\n  Version:          1.0.0-rc8+dev\r\n  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657\r\n docker-init:\r\n  Version:          0.18.0\r\n  GitCommit:        fec3683\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nClient:\r\n Debug Mode: false\r\n\r\nServer:\r\n Containers: 2\r\n  Running: 2\r\n  Paused: 0\r\n  Stopped: 0\r\n Images: 51\r\n Server Version: 19.03.5\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Native Overlay Diff: true\r\n Logging Driver: json-file\r\n Cgroup Driver: cgroupfs\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n Swarm: inactive\r\n Runtimes: runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339\r\n runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657\r\n init version: fec3683\r\n Security Options:\r\n  seccomp\r\n   Profile: default\r\n Kernel Version: 4.9.184-linuxkit\r\n Operating System: Docker Desktop\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 4\r\n Total Memory: 4.833GiB\r\n Name: docker-desktop\r\n ID: CBCJ:MNIU:ICXC:77PL:YXBA:K5EF:NE3L:5OHR:BIE4:TFOW:G4BB:2A2N\r\n Docker Root Dir: /var/lib/docker\r\n Debug Mode: false\r\n HTTP Proxy: gateway.docker.internal:3128\r\n HTTPS Proxy: gateway.docker.internal:3129\r\n Registry: https://index.docker.io/v1/\r\n Labels:\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0/8\r\n Live Restore Enabled: false\r\n Product License: Community Engine\r\n```\r\n"},{"labels":["api",null,null],"text":"I found this issue(https://github.com/docker/cli/issues/2071) in the cli repository but tracked the source of the issue here. I'm just going to copy/paste the original issue description as its still relevant. \r\n\r\n> **Description**\r\n> \r\n> The [documentation for `docker system prune` on 19.03](https://docs.docker.com/engine/reference/commandline/system_prune/) states that the `until` filter supports timestamps, but it doesn't work.\r\n> \r\n> **Steps to reproduce the issue:**\r\n> \r\n>     1. Run `docker system prune --force --all --filter \"until=2006-01-02T15:04:05\"`\r\n> \r\n> \r\n> **Describe the results you received:**\r\n> \r\n> ```\r\n> Error response from daemon: failed to prune build cache: \"until\" filter expects a duration (e.g., '24h'): time: unknown unit - in duration 2006-01-02T15:04:05\r\n> ```\r\n> \r\n> **Describe the results you expected:**\r\n> The prune to work with the timestamp.\r\n> \r\n> **Output of `docker version`:**\r\n> \r\n> ```\r\n> Client: Docker Engine - Community\r\n>  Version:           19.03.1\r\n>  API version:       1.40\r\n>  Go version:        go1.12.5\r\n>  Git commit:        74b1e89\r\n>  Built:             Thu Jul 25 21:22:03 2019\r\n>  OS/Arch:           linux/amd64\r\n>  Experimental:      false\r\n> \r\n> Server: Docker Engine - Community\r\n>  Engine:\r\n>   Version:          19.03.1\r\n>   API version:      1.40 (minimum version 1.12)\r\n>   Go version:       go1.12.5\r\n>   Git commit:       74b1e89\r\n>   Built:            Thu Jul 25 21:20:35 2019\r\n>   OS/Arch:          linux/amd64\r\n>   Experimental:     false\r\n>  containerd:\r\n>   Version:          1.2.6\r\n>   GitCommit:        894b81a4b802e4eb2a91d1ce216b8817763c29fb\r\n>  runc:\r\n>   Version:          1.0.0-rc8\r\n>   GitCommit:        425e105d5a03fabd737a126ad93d62a9eeede87f\r\n>  docker-init:\r\n>   Version:          0.18.0\r\n>   GitCommit:        fec3683\r\n> ```\r\n> \r\n> **Output of `docker info`:**\r\n> \r\n> ```\r\n> Client:\r\n>  Debug Mode: false\r\n> \r\n> Server:\r\n>  Containers: 42\r\n>   Running: 0\r\n>   Paused: 0\r\n>   Stopped: 42\r\n>  Images: 144\r\n>  Server Version: 19.03.1\r\n>  Storage Driver: aufs\r\n>   Root Dir: /var/lib/docker/aufs\r\n>   Backing Filesystem: extfs\r\n>   Dirs: 611\r\n>   Dirperm1 Supported: true\r\n>  Logging Driver: json-file\r\n>  Cgroup Driver: cgroupfs\r\n>  Plugins:\r\n>   Volume: local\r\n>   Network: bridge host ipvlan macvlan null overlay\r\n>   Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n>  Swarm: inactive\r\n>  Runtimes: runc\r\n>  Default Runtime: runc\r\n>  Init Binary: docker-init\r\n>  containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb\r\n>  runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f\r\n>  init version: fec3683\r\n>  Security Options:\r\n>   apparmor\r\n>   seccomp\r\n>    Profile: default\r\n>  Kernel Version: 4.19.0-5-amd64\r\n>  Operating System: Debian GNU/Linux 10 (buster)\r\n>  OSType: linux\r\n>  Architecture: x86_64\r\n>  CPUs: 12\r\n>  Total Memory: 15.62GiB\r\n>  Name: server123\r\n>  ID: ZSS4:GQ3D:IWCX:FTWI:WBPU:7X4W:AMW7:6JWJ:ISPK:PSBG:HZXH:J6MU\r\n>  Docker Root Dir: /var/lib/docker\r\n>  Debug Mode: false\r\n>  Registry: https://index.docker.io/v1/\r\n>  Labels:\r\n>  Experimental: false\r\n>  Insecure Registries:\r\n>   127.0.0.0/8\r\n>  Live Restore Enabled: false\r\n> \r\n> WARNING: the aufs storage-driver is deprecated, and will be removed in a future release.\r\n> ```\r\n"},{"labels":["api",null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\nCurrently attempting to use ansibles [`docker_image` module](https://docs.ansible.com/ansible/latest/modules/docker_image_module.html#requirements) (which in turn uses do [Docker SDK for python](https://github.com/docker/docker-py)) and was was seeing success in our log, but the image never got updated.  After much digging, we finally discovered the cause was that the [Docker API call](https://docs.docker.com/engine/api/v1.30/#operation/ImageLoad) is supposed to return a 500 on failure, but instead returns a 200.  Details are described in [this other issue](https://github.com/docker/docker-py/issues/1488#issuecomment-554666565).\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. Fill up filesystem \r\n2. Invoke the [ImageLoad](https://docs.docker.com/engine/api/v1.30/#operation/ImageLoad) endpoint\r\n3. See HTTP 200\r\n\r\n**Describe the results you received:**\r\nHTTP 200\r\n\r\n**Describe the results you expected:**\r\nHTTP 500\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:         1.13.1\r\n API version:     1.26\r\n Package version: docker-1.13.1-103.git7f2769b.el7.centos.x86_64\r\n Go version:      go1.10.3\r\n Git commit:      7f2769b/1.13.1\r\n Built:           Sun Sep 15 14:06:47 2019\r\n OS/Arch:         linux/amd64\r\n\r\nServer:\r\n Version:         1.13.1\r\n API version:     1.26 (minimum version 1.12)\r\n Package version: docker-1.13.1-103.git7f2769b.el7.centos.x86_64\r\n Go version:      go1.10.3\r\n Git commit:      7f2769b/1.13.1\r\n Built:           Sun Sep 15 14:06:47 2019\r\n OS/Arch:         linux/amd64\r\n Experimental:    false\r\n\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 1\r\n Running: 1\r\n Paused: 0\r\n Stopped: 0\r\nImages: 1\r\nServer Version: 1.13.1\r\nStorage Driver: overlay2\r\n Backing Filesystem: xfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: journald\r\nCgroup Driver: systemd\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: docker-runc runc\r\nDefault Runtime: docker-runc\r\nInit Binary: /usr/libexec/docker/docker-init-current\r\ncontainerd version:  (expected: aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1)\r\nrunc version: 9c3c5f853ebf0ffac0d087e94daef462133b69c7 (expected: 9df8b306d01f59d3a8029be411de015b7304dd8f)\r\ninit version: fec3683b971d9c3ef73f284f176672c44b448662 (expected: 949e6facb77383876aeff8a6944dde66b3089574)\r\nSecurity Options:\r\n seccomp\r\n  WARNING: You're not using the default seccomp profile\r\n  Profile: /etc/docker/seccomp.json\r\n selinux\r\nKernel Version: 3.10.0-957.27.2.el7.x86_64\r\nOperating System: CentOS Linux 7 (Core)\r\nOSType: linux\r\nArchitecture: x86_64\r\nNumber of Docker Hooks: 3\r\nCPUs: 2\r\nTotal Memory: 3.699 GiB\r\nName: example.local\r\nID: 2UGF:JTKQ:JC6Y:5YIB:NGUF:ESNS:RWQQ:MPIY:3S4S:WHU5:7MPB:EHLR\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\nRegistries: docker.io (secure)\r\n\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null,null,null,null,null],"text":"**Description**\r\n\r\nVolume create event is emitted on `docker create` independently if volume already exists. I would expect a single volume create event since I 've created the volume myself prior to creating the container.\r\n\r\nAccording to my tests, this started happening after 18.03.1 (excluding) and 18.06.3 (including) and it is reproducible up to and including 19.03.2.\r\n\r\n**Steps to reproduce the issue:**\r\n1. `docker events` (on another terminal)\r\n2. `docker create volume foo`\r\n3. `docker run -v foo:/bar busybox` \r\n\r\n**Describe the results you received:**\r\n\r\n```\r\n2019-10-06T17:33:50.529598724+03:00 volume create foo (driver=local)\r\n2019-10-06T17:34:06.642690750+03:00 volume create foo (driver=local)\r\n2019-10-06T17:34:06.673619523+03:00 container create 0a24e7e48aa1b71dfebf73696101e010bf6407b87fca1a0b949acf00cfd34358 (image=busybox, name=great_poitras)\r\n2019-10-06T17:34:06.678983859+03:00 container attach 0a24e7e48aa1b71dfebf73696101e010bf6407b87fca1a0b949acf00cfd34358 (image=busybox, name=great_poitras)\r\n2019-10-06T17:34:06.732641855+03:00 network connect 92b1bfd9f57ce29a27127d07ee8268a04b2ce5c35b3472960f73858fa0642c4b (container=0a24e7e48aa1b71dfebf73696101e010bf6407b87fca1a0b949acf00cfd34358, name=bridge, type=bridge)\r\n2019-10-06T17:34:06.741265314+03:00 volume mount foo (container=0a24e7e48aa1b71dfebf73696101e010bf6407b87fca1a0b949acf00cfd34358, destination=/bar, driver=local, propagation=, read/write=true)\r\n```\r\n\r\n**Describe the results you expected:**\r\n```\r\n2019-10-06T17:33:50.529598724+03:00 volume create foo (driver=local)\r\n2019-10-06T17:34:06.673619523+03:00 container create 0a24e7e48aa1b71dfebf73696101e010bf6407b87fca1a0b949acf00cfd34358 (image=busybox, name=great_poitras)\r\n2019-10-06T17:34:06.678983859+03:00 container attach 0a24e7e48aa1b71dfebf73696101e010bf6407b87fca1a0b949acf00cfd34358 (image=busybox, name=great_poitras)\r\n2019-10-06T17:34:06.732641855+03:00 network connect 92b1bfd9f57ce29a27127d07ee8268a04b2ce5c35b3472960f73858fa0642c4b (container=0a24e7e48aa1b71dfebf73696101e010bf6407b87fca1a0b949acf00cfd34358, name=bridge, type=bridge)\r\n2019-10-06T17:34:06.741265314+03:00 volume mount foo (container=0a24e7e48aa1b71dfebf73696101e010bf6407b87fca1a0b949acf00cfd34358, destination=/bar, driver=local, propagation=, read/write=true)\r\n```\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:           18.06.3-ce\r\n API version:       1.38\r\n Go version:        go1.10.3\r\n Git commit:        d7080c1\r\n Built:             Wed Feb 20 02:27:18 2019\r\n OS/Arch:           linux/amd64\r\n Experimental:      false\r\nServer:\r\n Engine:\r\n  Version:          18.06.3-ce\r\n  API version:      1.38 (minimum version 1.12)\r\n  Go version:       go1.10.3\r\n  Git commit:       d7080c1\r\n  Built:            Wed Feb 20 02:26:20 2019\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 0\r\n Running: 0\r\n Paused: 0\r\n Stopped: 0\r\nImages: 0\r\nServer Version: 18.06.3-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: active\r\n NodeID: f9bd8fw4occfpqwk6fccpgy1y\r\n Is Manager: true\r\n ClusterID: p5akkh9kxo9zlt7tmziyv6mu1\r\n Managers: 1\r\n Nodes: 1\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 10\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n  Force Rotate: 0\r\n Autolock Managers: false\r\n Root Rotation In Progress: false\r\n Node Address: 127.0.0.1\r\n Manager Addresses:\r\n  127.0.0.1:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 468a545b9edcd5932818eb9de8e72413e616e86e\r\nrunc version: a592beb5bc4c4092b1b1bac971afed27687340c5\r\ninit version: fec3683\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.15.0-1037-gcp\r\nOperating System: Ubuntu 16.04.6 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 7.298GiB\r\nName: travis-job-ca6d6f0b-880f-450b-9a4a-5d10e659112b\r\nID: BYBT:L62W:A24Q:UNFC:SG5Q:Z47D:C5QK:DXTM:44FB:QYIO:5IDE:7VLA\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nLabels:\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nRegistry Mirrors:\r\n https://mirror.gcr.io/\r\nLive Restore Enabled: false\r\n```"},{"labels":["api",null,null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\nIf you use --link and the linked image isn't running, the top level image you're trying to run reports as not found. \r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n\r\n**Steps to reproduce the issue:**\r\n1. docker run --link thisdoesntexist python\r\n2. Unable to find image 'python:latest' locally\r\n\r\n**Describe the results you received:**\r\n\r\nThe image to run has to already have been built. It is noticed if you run \r\ndocker run --link thisdoesntexist python\r\nit first downloads python, then correctly says \"unable to find thisdoesntexist\" only if python hasn't downloaded before\r\n\r\n**Describe the results you expected:**\r\nCorrectly report the linked image name that's missing\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```λ docker version\r\nClient: Docker Engine - Community\r\n Version:           19.03.1\r\n API version:       1.40\r\n Go version:        go1.12.5\r\n Git commit:        74b1e89\r\n Built:             Thu Jul 25 21:21:05 2019\r\n OS/Arch:           linux/amd64\r\n Experimental:      false\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          19.03.1\r\n  API version:      1.40 (minimum version 1.12)\r\n  Go version:       go1.12.5\r\n  Git commit:       74b1e89\r\n  Built:            Thu Jul 25 21:19:41 2019\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n containerd:\r\n  Version:          1.2.6\r\n  GitCommit:        894b81a4b802e4eb2a91d1ce216b8817763c29fb\r\n runc:\r\n  Version:          1.0.0-rc8\r\n  GitCommit:        425e105d5a03fabd737a126ad93d62a9eeede87f\r\n docker-init:\r\n  Version:          0.18.0\r\n  GitCommit:        fec3683\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```λ docker info\r\nClient:\r\n Debug Mode: false\r\n\r\nServer:\r\n Containers: 11\r\n  Running: 4\r\n  Paused: 0\r\n  Stopped: 7\r\n Images: 89\r\n Server Version: 19.03.1\r\n Storage Driver: overlay2\r\n  Backing Filesystem: extfs\r\n  Supports d_type: true\r\n  Native Overlay Diff: true\r\n Logging Driver: json-file\r\n Cgroup Driver: cgroupfs\r\n Plugins:\r\n  Volume: local\r\n  Network: bridge host ipvlan macvlan null overlay\r\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\n Swarm: inactive\r\n Runtimes: runc\r\n Default Runtime: runc\r\n Init Binary: docker-init\r\n containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb\r\n runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f\r\n init version: fec3683\r\n Security Options:\r\n  apparmor\r\n  seccomp\r\n   Profile: default\r\n Kernel Version: 4.15.0-55-generic\r\n Operating System: Ubuntu 18.04.2 LTS\r\n OSType: linux\r\n Architecture: x86_64\r\n CPUs: 2\r\n Total Memory: 3.852GiB\r\n Name: kross\r\n ID: EPUW:J7KX:4IAV:MMOT:MWDW:GPIT:O32V:U4AO:WQSC:FF53:ZT6K:PLQN\r\n Docker Root Dir: /var/lib/docker\r\n Debug Mode: false\r\n Registry: https://index.docker.io/v1/\r\n Labels:\r\n Experimental: false\r\n Insecure Registries:\r\n  127.0.0.0/8\r\n Live Restore Enabled: false\r\n\r\nWARNING: No swap limit support\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null,null],"text":"It's unfortunately common for projects to mount the docker socket into (privileged) containers. A configuration option for specifying additional sockets with limited privileges would be fairly simple and would make it easier to do it easily without doing it wrong.\r\n\r\nEssentially, in the docker configuration, users would be able to specify the path of an additional socket with a limited set of permissions:\r\n\r\n`[(socket_path, [permissions,]),]`\r\n\r\nOr maybe also able to specify read-only access:\r\n\r\n`[(socket_path, {principal: 'rw', principal2: 'r'},]`\r\n\r\nI am aware that there are a number of far more complete RBAC solutions to limiting privileges; but I think creating said additional socket(s) with limited docker API privileges would be a fairly simple improvement that could help avoid granting unnecessarily broad privileges (e.g for easy ACME cert reloads and load balancing).\r\n\r\nAn example use case: securing the Traefik docker driver:\r\n\r\n- \"Docker integration: Exposing Docker socket to Traefik container is a serious security risk\" https://github.com/containous/traefik/issues/4174#issuecomment-446600393\r\n  > It seems it only require (read) operations : ServerVersion, ContainerList, ContainerInspect, ServiceList, NetworkList, TaskList & Events. \r\n  - https://github.com/liquidat/ansible-role-traefik\r\n    > This role does exactly that: it launches two containers, a traefik one and another to securely provide limited access to the docker socket. It also provides the necessary configuration.\r\n    - https://github.com/Tecnativa/docker-socket-proxy/issues/13\r\n      - Creates a HAproxy container that proxies limited access to the docket socket\r\n \r\nWith such a proposed configuration option for additional docker sockets with limited privileges, such an additional docker socket proxy container would be unnecessary."},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nDocker API v1.37 \"auth\" endpoint return an empty `IdentityToken`\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\nI'm calling the Docker API `auth` endpoint from the local host\r\n\r\n`curl -X POST http://localhost:2375/v1.37/auth -H \"Content-Type: application/json\" -d '{\"username\":\"AWS\", \"password\": \"'$password'\", \"serveraddress\": \"https://<account ID>.dkr.ecr.us-east-2.amazonaws.com/\"}'`\r\nI'm getting the following output back:\r\n\r\n`{\"IdentityToken\":\"\",\"Status\":\"Login Succeeded\"}`\r\n\r\n**Steps to reproduce the issue:**\r\n1.\r\n2.\r\n3.\r\n\r\n**Describe the results you received:**\r\nI'm getting back `{\"IdentityToken\":\"\",\"Status\":\"Login Succeeded\"}`\r\n\r\n**Describe the results you expected:**\r\nI'm expecting to receive back an identity `IdentityToken`\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:           18.09.3\r\n API version:       1.39\r\n Go version:        go1.10.8\r\n Git commit:        774a1f4\r\n Built:             Thu Feb 28 06:40:58 2019\r\n OS/Arch:           linux/amd64\r\n Experimental:      false\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          18.09.3\r\n  API version:      1.39 (minimum version 1.12)\r\n  Go version:       go1.10.8\r\n  Git commit:       774a1f4\r\n  Built:            Thu Feb 28 05:59:55 2019\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 1\r\n Running: 0\r\n Paused: 0\r\n Stopped: 1\r\nImages: 2\r\nServer Version: 18.09.3\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\nSwarm: inactive\r\nRuntimes: nvidia runc\r\nDefault Runtime: nvidia\r\nInit Binary: docker-init\r\ncontainerd version: e6b3f5632f50dbc4e9cb6288d911bf4f5e95b18e\r\nrunc version: 12f6a991201fdb8f82579582d5e00e28fba06d0a-dirty\r\ninit version: fec3683\r\nSecurity Options:\r\n apparmor\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.4.0-1060-aws\r\nOperating System: Ubuntu 16.04.4 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 7.795GiB\r\nName: ip-10-220-3-78\r\nID: YZ6T:HXM4:XJNW:GUDY:XA6J:U2KX:R7CJ:TQHE:TPXY:HCNA:R4VL:M3AZ\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nLabels:\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\nProduct License: Community Engine\r\n\r\nWARNING: API is accessible on http://0.0.0.0:2375 without encryption.\r\n         Access to the remote API is equivalent to root access on the host. Refer\r\n         to the 'Docker daemon attack surface' section in the documentation for\r\n         more information: https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface\r\nWARNING: No swap limit support\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nI'm running on an AWS EC2 instance which has full access to ECR repos through an instance profile"},{"labels":["api",null],"text":"There were two process running. They all used docker python SDK to connect to the local docker engine(18.03). One process would to remove a container which met an error cause the container was running ( this is another issue), almost at the same time, another process would to create a container.  Configs of these two container do not conflict . Then I get an error like this:\r\n\r\n```\r\n Traceback (most recent call last):\r\n  File \"/usr/local/lib/python3.5/dist-packages/docker/api/client.py\", line 229, in _raise_for_status\r\n    response.raise_for_status()\r\n  File \"/usr/local/lib/python3.5/dist-packages/requests/models.py\", line 939, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 409 Client Error: Conflict for url: http://192.168.1.120:2375/v1.35/containers/create\r\n```\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"worker.py\", line 205, in process_job\r\n    **job.get('other', {}) \r\n  File \"/usr/local/lib/python3.5/dist-packages/docker/api/container.py\", line 411, in create_container\r\n    return self.create_container_from_config(config, name)\r\n  File \"/usr/local/lib/python3.5/dist-packages/docker/api/container.py\", line 422, in create_container_from_config\r\n    return self._result(res, True)\r\n  File \"/usr/local/lib/python3.5/dist-packages/docker/api/client.py\", line 235, in _result\r\n    self._raise_for_status(response)\r\n  File \"/usr/local/lib/python3.5/dist-packages/docker/api/client.py\", line 231, in _raise_for_status\r\n    raise create_api_error_from_http_exception(e)\r\n  File \"/usr/local/lib/python3.5/dist-packages/docker/errors.py\", line 31, in create_api_error_from_http_exception\r\n    raise cls(e, response=response, explanation=explanation)\r\ndocker.errors.APIError: 409 Client Error: Conflict (\"You cannot remove a running container 9c31e308532433a712e9e56792726678ca78ff32e7de116097d27c243ed018a0. Stop the container before attempting removal or force remove\")\r\n```\r\n\r\n It is normal to perform these two operations at different times which only got  an 409 error when to  remove a running container. Looks like the docker engine or the API server doesn't support concurrency, does it?"},{"labels":["api",null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nWhen attempting to build images using the docker engine API (API v1.39, Docker v18.09.1), I am greeted with a 404 page not found response.\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. Make an API request to POST `/build` or POST `/v1.39/build`\r\n\r\n**Describe the results you received:**\r\n\r\nI received a 404 status code and a `{ \"message\": \"page not found\" }` response body.\r\n\r\n**Describe the results you expected:**\r\n\r\nI expected docker to start building the image I provided.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n```\r\nClient:\r\n Version:           18.09.1\r\n API version:       1.39\r\n Go version:        go1.10.6\r\n Git commit:        4c52b90\r\n Built:             Wed Jan  9 19:35:31 2019\r\n OS/Arch:           linux/amd64\r\n Experimental:      false\r\n\r\nServer: Docker Engine - Community\r\n Engine:\r\n  Version:          18.09.1\r\n  API version:      1.39 (minimum version 1.12)\r\n  Go version:       go1.10.6\r\n  Git commit:       4c52b90\r\n  Built:            Wed Jan  9 19:02:44 2019\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 2\r\n Running: 0\r\n Paused: 0\r\n Stopped: 2\r\nImages: 25\r\nServer Version: 18.09.1\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 9754871865f7fe2f4e74d43e2fc7ccd237edcbce\r\nrunc version: 96ec2177ae841256168fcf76954f7177af9446eb\r\ninit version: fec3683\r\nSecurity Options:\r\n apparmor\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.15.0-43-generic\r\nOperating System: Ubuntu 18.04.1 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 8\r\nTotal Memory: 15.62GiB\r\nName: printer-MS-7A59\r\nID: VKKZ:CZRV:W4G4:63AX:DQH4:UVIT:GOXU:RCJQ:UTRD:EWZ4:4ILG:Y42I\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nLabels:\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\nProduct License: Community Engine\r\n\r\nWARNING: API is accessible on http://0.0.0.0:4243 without encryption.\r\n         Access to the remote API is equivalent to root access on the host. Refer\r\n         to the 'Docker daemon attack surface' section in the documentation for\r\n         more information: https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface\r\nWARNING: No swap limit support\r\n\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nphysical"},{"labels":["api",null],"text":"**Description**\r\n\r\nDocker API returns null value for Warnings field.\r\n\r\nAccording to a definition it probably should never be null. It has `x-nullable: false\r\n\r\nhttps://github.com/moby/moby/blob/master/api/swagger.yaml#L4659-L4676\r\n\r\n**Steps to reproduce the issue:**\r\n\r\n1. Send correct, /containers/create request to API https://docs.docker.com/engine/api/v1.37/#operation/ContainerCreate\r\n2. Check response\r\n\r\n\r\nExample response's body:\r\n```json\r\n{\r\n    \"Id\": \"6ce9cb39c1d6a905c0fc7909235b74491d5a0f184ff097bb73ffe9a30cd7743a\",\r\n    \"Warnings\": null\r\n}\r\n```\r\n\r\ninstead of:\r\n```json\r\n{\r\n    \"Id\": \"6ce9cb39c1d6a905c0fc7909235b74491d5a0f184ff097bb73ffe9a30cd7743a\",\r\n    \"Warnings\": []\r\n}\r\n```\r\n"},{"labels":["api",null,null],"text":"I'd like to propose eventually adding a new Engine REST API which exposes buildkit's `Solve` more directly than `/build` which is focused around the dockerfile frontend specific use case and has some quirks due to that (and for legacy/historical reasons).\r\n\r\nI've prototyped running a custom frontend via the `/build` API but it's a bit hacky and not terribly satisfactory (injecting a stub `Dockerfile` with a `syntax` directive in it, passing options by mapping to various `Dockerfile`-ish options etc). \r\n\r\nOther potentially interesting things  to expose are local exporter, debugger, shared session, multiple local sources and the ability to run a frontend client side (cf `Build` rather than `Solve` in the buildkit control API).\r\n\r\nIt's possible we could just extend on the current `/build` API to cover more underlying functionality (e.g. add a `Frontend` field to it), enhance the format of the returned body to remove the legacy framing etc.\r\n\r\nOr we could perhaps expose a new endpoint mapping the underlying `Solve` call a little more directly that the `/build` endpoint, with most of the options passed through or lightly adjusted/filtered (e.g maybe the full set of `Exporter`/`ExporterAttrs` flexibility shouldn't be exposed?). The `Session` side would be the same as with `/build` (an upgraded conn to `/session`). The body returned would be the Status stream, I guess as a direct JSON stream of `StatusResponse` rather than wrapping in a `JSONMessage` like `/build` had to do (for compat reasons I suppose). I'm not entirely sure about `SolveResponse`, so I guess maybe there needs to be a little more structure to the body stream, but ideally not `JSONMessage`, just a simple union type map.\r\n\r\nA possibly simple (but IMHO not at all ideal) would be a simple API end point which opens the entire control API gRPC via a /session-like endpoint. I don't think that is really what we want though (control API is not considered stable, might be too much low level power being exposed).\r\n\r\n/cc @tonistiigi @tiborvass "},{"labels":["api",null,null,null,null],"text":"(as reported by @waseemshahwan in https://github.com/moby/moby/issues/31909#issuecomment-435742609)\r\n\r\nLooks like a regression was introduced somewhere between Docker 17.07 and 17.09.1, causing the status code for a \"conflict\" to change from a 409 to a 500;\r\n\r\n\r\nTo reproduce; run a \"service create\" request _twice_ (second time should return a \"conflict\";\r\n\r\n```bash\r\ncurl -v \\\r\n  --unix-socket /var/run/docker.sock \\\r\n  -X POST \\\r\n  \"http://localhost/v1.30/services/create\" \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\"EndpointSpec\":{\"Mode\":\"vip\"},\"Labels\":{},\"Mode\":{\"Replicated\":{}},\"Name\":\"testing\",\"TaskTemplate\":{\"ContainerSpec\":{\"DNSConfig\":{},\"Image\":\"nginx:alpine@sha256:ae5da813f8ad7fa785d7668f0b018ecc8c3a87331527a61d83b3b5e816a0f03c\",\"Init\":false},\"ForceUpdate\":0,\"Placement\":{\"Platforms\":[{\"Architecture\":\"amd64\",\"OS\":\"linux\"},{\"OS\":\"linux\"},{\"Architecture\":\"arm64\",\"OS\":\"linux\"},{\"Architecture\":\"386\",\"OS\":\"linux\"},{\"Architecture\":\"ppc64le\",\"OS\":\"linux\"},{\"Architecture\":\"s390x\",\"OS\":\"linux\"}]},\"Resources\":{\"Limits\":{},\"Reservations\":{}}}}'\r\n```\r\n\r\n\r\nOn Docker 17.07.0-ce\r\n\r\n```\r\n> POST /v1.30/services/create HTTP/1.1\r\n> Host: localhost\r\n> User-Agent: curl/7.61.1\r\n> Accept: */*\r\n> Content-Type: application/json\r\n> Content-Length: 536\r\n> \r\n* upload completely sent off: 536 out of 536 bytes\r\n< HTTP/1.1 409 Conflict\r\n< Api-Version: 1.31\r\n< Content-Type: application/json\r\n< Docker-Experimental: false\r\n< Ostype: linux\r\n< Server: Docker/17.07.0-ce (linux)\r\n< Date: Mon, 05 Nov 2018 16:10:58 GMT\r\n< Content-Length: 86\r\n< \r\n{\"message\":\"rpc error: code = Unknown desc = name conflicts with an existing object\"}\r\n```\r\n\r\nOn Docker 17.09.1-ce\r\n\r\n```\r\n> POST /v1.30/services/create HTTP/1.1\r\n> Host: localhost\r\n> User-Agent: curl/7.61.1\r\n> Accept: */*\r\n> Content-Type: application/json\r\n> Content-Length: 536\r\n> \r\n* upload completely sent off: 536 out of 536 bytes\r\n< HTTP/1.1 500 Internal Server Error\r\n< Api-Version: 1.32\r\n< Content-Type: application/json\r\n< Docker-Experimental: false\r\n< Ostype: linux\r\n< Server: Docker/17.09.1-ce (linux)\r\n< Date: Mon, 05 Nov 2018 16:11:59 GMT\r\n< Content-Length: 86\r\n< \r\n{\"message\":\"rpc error: code = Unknown desc = name conflicts with an existing object\"}\r\n```\r\n\r\nOn 18.06.1-ce (still reproduces)\r\n\r\n```\r\n*   Trying /var/run/docker.sock...\r\n* Connected to localhost (/var/run/docker.sock) port 80 (#0)\r\n> POST /v1.30/services/create HTTP/1.1\r\n> Host: localhost\r\n> User-Agent: curl/7.61.1\r\n> Accept: */*\r\n> Content-Type: application/json\r\n> Content-Length: 536\r\n> \r\n* upload completely sent off: 536 out of 536 bytes\r\n< HTTP/1.1 500 Internal Server Error\r\n< Api-Version: 1.38\r\n< Content-Type: application/json\r\n< Docker-Experimental: false\r\n< Ostype: linux\r\n< Server: Docker/18.06.1-ce (linux)\r\n< Date: Mon, 05 Nov 2018 10:31:29 GMT\r\n< Content-Length: 86\r\n< \r\n{\"message\":\"rpc error: code = Unknown desc = name conflicts with an existing object\"}\r\n* Connection #0 to host localhost left intact\r\n```\r\n\r\n"},{"labels":["api",null,null,null],"text":"There are a HostConfig.DiskQuota option with description \"Disk limit (in bytes).\" on https://docs.docker.com/engine/api/v1.37/#operation/ContainerCreate.\r\n\r\nBut, unfortunately, I can't find any other information about what does it mean. What constrains of use does it have? Is it can be used on all platfroms/storage drivers? What would be if this limit will be exceeded?"},{"labels":["api",null],"text":"**Description**\r\n\r\nWhen volume inspect command is fired by the user and the volume plugin fails for some reason and tries to report the error by setting \"Err\" in the response, the error message is not displayed by Docker CLI. Instead, it always displays\r\n\r\n```sh\r\n[]\r\nError: No such volume: xxx\r\n```\r\n\r\nAs per the documentation for Docker REST API [/VolumeDriver.Get](https://docs.docker.com/engine/extend/plugins_volume/#volumedriverget), the response can contain error as below:\r\n\r\n```sh\r\n{\r\n  \"Volume\": {\r\n    \"Name\": \"volume_name\",\r\n    \"Mountpoint\": \"/path/under/PropagatedMount\",\r\n    \"Status\": {}\r\n  },\r\n  \"Err\": \"\"\r\n}\r\n```\r\n\r\n**Steps to reproduce the issue:**\r\n1. In the implementation of [/VolumeDriver.Get](https://docs.docker.com/engine/extend/plugins_volume/#volumedriverget), return error message in the response.\r\n\r\n**Describe the results you received:**\r\n```sh\r\n[]\r\nError: No such volume: xxx\r\n```\r\n\r\n**Describe the results you expected:**\r\nError message set by the volume plugin within the response is expected to be displayed by the Docker CLI\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nDocker version 17.06.2-ee-16, build 9ef4f0a\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 14\r\n Running: 1\r\n Paused: 0\r\n Stopped: 13\r\nImages: 1247\r\nServer Version: 17.06.2-ee-16\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 786\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 6e23458c129b551d5c9871e5174f6b1b7f6d1170\r\nrunc version: 462c82662200a17ee39e74692f536067a3576a50\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.4.0-21-generic\r\nOperating System: Ubuntu 16.04.5 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 40\r\nTotal Memory: 62.79GiB\r\nName: xxxxxxxxxxxxx\r\nID: OWR5:HJYY:KAO5:H6GT:2NEU:JHHQ:YZ3G:67GJ:BKRV:SZ4P:Q3WJ:FDXS\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nUsername: xxxxxxxxx\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n\r\nWARNING: No swap limit support\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null,null],"text":"**Description**\r\n\r\nI have noticed that, while a service has a task that is running, that task has a status with `ContainerStatus.ExitCode: 0`. That is a misleading value. \r\n\r\nI believe `0` is being used here as a stand-in for `null` (or `nil`). But those values are distinct. A `null` value (or `nil`, or no value at all) should mean \"the container has not yet reported an exit value\". Any non-`null` value should mean \"the container *has* exited, and its process has reported this exit code\". `0` in particular is a special value because it is the only value indicating success.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a service with a command that will continue running for at least a few seconds.\r\n```\r\n$ docker service create --name service_name busybox:latest sleep 120\r\neeest5s97viw1qzoy8pvllbkm\r\noverall progress: 1 out of 1 tasks\r\n1/1: running   [==================================================>]\r\nverify: Service converged\r\n```\r\n2. Get the task status. I am not aware of a way to do this with the CLI, so I use the API.\r\n```\r\n$ curl -s --unix-socket /var/run/docker.sock http://localhost/tasks?filters%3D%5B%22service%22%3A%22service_name%22%5D | jq '.[].Status'\r\n{\r\n  \"Timestamp\": \"2018-08-01T15:41:54.007243253Z\",\r\n  \"State\": \"running\",\r\n  \"Message\": \"started\",\r\n  \"ContainerStatus\": {\r\n    \"ContainerID\": \"a14116edc1b8e8222efde70af7b7531bb71c702b813e5a8d81f848b8dfa1013c\",\r\n    \"PID\": 6947,\r\n    \"ExitCode\": 0\r\n  },\r\n  \"PortStatus\": {}\r\n}\r\n```\r\n\r\n**Describe the results you received:**\r\nThe task is in `\"State\": \"running\"` but the `\"ContainerStatus.ExitCode\"` value is `0`.\r\n\r\n**Describe the results you expected:**\r\nEither no `\"ExitCode\"` property within `\"ContainerStatus\"`, or one with a `null` value.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:           18.06.0-ce\r\n API version:       1.38\r\n Go version:        go1.10.3\r\n Git commit:        0ffa825\r\n Built:             Wed Jul 18 19:11:02 2018\r\n OS/Arch:           linux/amd64\r\n Experimental:      false\r\n\r\nServer:\r\n Engine:\r\n  Version:          18.06.0-ce\r\n  API version:      1.38 (minimum version 1.12)\r\n  Go version:       go1.10.3\r\n  Git commit:       0ffa825\r\n  Built:            Wed Jul 18 19:09:05 2018\r\n  OS/Arch:          linux/amd64\r\n  Experimental:     false\r\n```"},{"labels":["api"],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\nIn my golang project, I used moby/client package. It build failed, because:\r\n\r\n```golang\r\nvar _ APIClient = &Client{}\r\n```\r\nClient BuildCancel use golang.org/x/net/context\r\n```golang\r\npackage client // import \"github.com/docker/docker/client\"\r\n\r\nimport (\r\n\t\"net/url\"\r\n\r\n\t\"golang.org/x/net/context\"\r\n)\r\n\r\n// BuildCancel requests the daemon to cancel ongoing build request\r\nfunc (cli *Client) BuildCancel(ctx context.Context, id string) error {\r\n\tquery := url.Values{}\r\n\tquery.Set(\"id\", id)\r\n\r\n\tserverResp, err := cli.post(ctx, \"/build/cancel\", query, nil, nil)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tdefer ensureReaderClosed(serverResp)\r\n\r\n\treturn nil\r\n}\r\n```\r\nAPIClient BuildCancel use standard context package in client/interface.go\r\n\r\nso ... \r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1.\r\n2.\r\n3.\r\n\r\n**Describe the results you received:**\r\n\r\n\r\n**Describe the results you expected:**\r\n\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\n(paste your output here)\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\n(paste your output here)\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null,null,null],"text":"https://github.com/opencontainers/runtime-spec/blob/master/config-linux.md#memory\r\n\r\n`.linux.resources.memory.kernelTCP` is defined in runtime spec and supported by runc.\r\n\r\nHowever, Docker/Moby does not expose API/CLI for setting this value currently, unlike [`.linux.resources.memory.kernel`](https://github.com/moby/moby/blob/3a633a712c8bbb863fe7e57ec132dd87a9c4eff7/api/types/container/host_config.go#L331).\r\n"},{"labels":["api",null],"text":"**Description**\r\nfilters api does not support exclude syntax， but api doc imply they are supported.\r\nsource code: https://github.com/moby/moby/blob/master/api/types/filters/parse.go,\r\nand the api doc: https://docs.docker.com/engine/api/v1.34/#operation/NetworkPrune.\r\n\r\n**Steps to reproduce the issue:**\r\nEMPTY\r\n\r\n**Describe the results you received:**\r\nEMPTY\r\n\r\n**Describe the results you expected:**\r\nEMPTY\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nEMPTY\r\n\r\n**Output of `docker version`:**\r\nEMPTY\r\n\r\n\r\n**Output of `docker info`:**\r\nEMPTY\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null],"text":"The `api/types` package should only contain the types used to serialize/deserialize requests and responses for the HTTP API. This is the case for most of the types in this package and sub packages.\r\n\r\nThere are two exceptions:\r\n* `api/types/client.go` contains types that are used by `APIClient` interface in the `client` package\r\n* `api/types/backend` contains types that are used by the backend interfaces between the API routers and the server implementation\r\n\r\nThese two categories of types are never used for serialization/deserialization.\r\n\r\nI propose we move these types to a more appropriate place:\r\n* `api/types/client.go` should move to `client/types`\r\n* `api/types/backend` could be split up and moved to `api/server/router/<component>` or moved to `api/server/backend/types`\r\n\r\ncc @tiborvass @vdemeester @cpuguy83 "},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\nPulling private image from docker hub or from a private docker registry doesn't return `http.StatusUnauthorized` or an error.\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n- Using golang SDK\r\n- Call `client.ImagePull()`\r\n- Using a private docker registry and/or private image on docker hub.\r\n- `ImagePull()` should fail to auth on the first attempt and fall back to call `ImagePullOptions.PrivilegeFunc` or exit with `err != nil`. \r\n\r\nIt doesn't, `imagePull()` doesn't call `ImagePullOptions.PrivilegeFunc` and doesn't return any errors. The only error is sent to the returned `io.ReaderCloser` and it says image not found.\r\n\r\nThe exact behavior is seen when trying to pull a private image from docker hub.\r\n**Steps to reproduce the issue:**\r\nhttps://github.com/rancher/rke/blob/185534a07f1e986c7c0427c8a05b341dd3467425/docker/docker.go#L161\r\n```\r\n// simplified code, actual code in the link above\r\nfunc pullImage( dClient *client.Client, privateRegistry v3.PrivateRegistry) error {\r\n\r\n\tpullOptions := types.ImagePullOptions{}\r\n\tpullOptions.PrivilegeFunc = tryRegistryAuth(privateRegistry)\r\n\t\t\r\n\tout, err := dClient.ImagePull(ctx, containerImage, pullOptions)\r\n\tif err != nil {\r\n\t\treturn fmt.Errorf(\"Can't pull Docker image [%s] for host [%s]: %v\", containerImage, hostname, err)\r\n\t}\r\n\tdefer out.Close()\r\n\tif logrus.GetLevel() == logrus.DebugLevel {\r\n\t\tio.Copy(os.Stdout, out)\r\n\t} else {\r\n\t\tio.Copy(ioutil.Discard, out)\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n\r\nfunc tryRegistryAuth(pr v3.PrivateRegistry) types.RequestPrivilegeFunc {\r\n\treturn func() (string, error) {\r\n\t\tauthConfig := types.AuthConfig{\r\n\t\tUsername: pr.User,\r\n\t\tPassword: pr.Password,\r\n\t}\r\n\tencodedJSON, _ := json.Marshal(authConfig)\r\n\treturn base64.URLEncoding.EncodeToString(encodedJSON), nil\r\n\t}\r\n}\r\n\r\n```\r\n**Describe the results you received:**\r\nI should be able to get the image pulled after authentication, or an error.\r\n\r\n**Describe the results you expected:**\r\n`client.ImagePull()` doesn't return an error and doesn't try to authenticate to the registry, instead, returned io.ReaderCloser shows:\r\n```\r\n{\"status\":\"Pulling repository private-registry.test:5000/alpine\"}\r\n{\"errorDetail\":{\"message\":\"Error: image alpine:latest not found\"},\"error\":\"Error: image alpine:latest not found\"}\r\n```\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nroot@ip-10-0-1-142:~#  docker version\r\nClient:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Tue Jan 10 20:38:45 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Tue Jan 10 20:38:45 2017\r\n OS/Arch:      linux/amd64\r\n\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 0\r\n Running: 0\r\n Paused: 0\r\n Stopped: 0\r\nImages: 1\r\nServer Version: 1.12.6\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 1\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: host overlay bridge null\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: apparmor seccomp\r\nKernel Version: 4.4.0-1049-aws\r\nOperating System: Ubuntu 16.04.3 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 1\r\nTotal Memory: 1.952 GiB\r\nName: ip-10-0-1-142\r\nID: 5GAW:FRVA:BFZC:BR4H:V335:COAX:HNL7:VGXJ:27EA:N3KP:IHZL:TN7N\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No swap limit support\r\nInsecure Registries:\r\nprivate-registry.test:5000\r\n 127.0.0.0/8\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nAWS. "},{"labels":["api",null],"text":"You have probably seen this before, but just in case\r\n\r\nI run this:\r\n`$docker ps -a`\r\n\r\nand I see this:\r\n\r\n```bash\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES\r\nef71b9269e92        cdt-prod            \"/bin/bash /home/new…\"   15 seconds ago      Up 34 seconds       0.0.0.0:3055->3055/tcp     cdt-prod-container\r\n282d1f0d0f5a        mongo:2.4           \"/entrypoint.sh mong…\"   20 seconds ago      Up 39 seconds       0.0.0.0:27017->27017/tcp   cdt-mongo\r\n```\r\n\r\nseems wrong - the status column has bigger numbers than created column?"},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\nI'd appreciate the API endpoint for `/stack` at the Docker API in order to deploy a composition of service in a `docker-compose.yml` file like it is possible on the command line\r\n```sh\r\n$ docker stack deploy -c my-compose.file.yml myStack\r\n```\r\n\r\nKubernetes support this feature with a POD spec. See [here](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#pod-v1-core) for details.\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n\r\n\r\n**Steps to reproduce the issue:**\r\n1.\r\n2.\r\n3.\r\n\r\n**Describe the results you received:**\r\n\r\n\r\n**Describe the results you expected:**\r\n\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n-->\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.09.1-ce\r\n API version:  1.32\r\n Go version:   go1.8.3\r\n Git commit:   19e2cf6\r\n Built:        Thu Dec  7 22:22:25 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      17.09.1-ce\r\n API version:  1.32 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   19e2cf6\r\n Built:        Thu Dec  7 22:28:28 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n<!--\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n-->"},{"labels":["api",null,null,null],"text":"While attaching a a container to an overlay network I get the following logs. There are two distinct issues here:\r\n- an error isn't handled properly which causes a FIXME to trigger\r\n- there is an error attempting to connect a task to an overlay network using API version 1.24\r\n\r\nUsing API 1.34 it works.\r\n\r\nThe logs for API 1.24 (generated using the docker-py python package):\r\n```\r\nDec 28 11:14:35 swarm-1 dockerd[588]: time=\"2017-12-28T11:14:35.145284405+01:00\" level=debug msg=\"Calling POST /v1.24/networks/testnet/connect\"\r\nDec 28 11:14:35 swarm-1 dockerd[588]: time=\"2017-12-28T11:14:35.145510531+01:00\" level=debug msg=\"form data: {\\\"Container\\\":\\\"65caedc6bf67\\\",\\\"EndpointConfig\\\":{}}\"\r\nDec 28 11:14:35 swarm-1 dockerd[588]: time=\"2017-12-28T11:14:35.174343060+01:00\" level=debug msg=\"RequestAddress(GlobalDefault/10.0.0.0/24, <nil>, map[com.docker.network.ipam.serial:true])\"\r\nDec 28 11:14:35 swarm-1 dockerd[588]: time=\"2017-12-28T11:14:35.177173023+01:00\" level=debug msg=\"Successfully attached to network testnet with task id yaciegbxsj47ntrqym2r9mcsm\"\r\nDec 28 11:14:35 swarm-1 ntpd[595]: Listen normally on 54 vethd3fa572 fe80::f4cc:73ff:fe5a:b1fc UDP 123\r\nDec 28 11:14:35 swarm-1 ntpd[595]: peers refreshed\r\nDec 28 11:14:38 swarm-1 dockerd[588]: time=\"2017-12-28T11:14:38.766448656+01:00\" level=debug msg=\"memberlist: Stream connection from=10.1.54.13:52630\"\r\nDec 28 11:14:38 swarm-1 dockerd[588]: time=\"2017-12-28T11:14:38.769253102+01:00\" level=info msg=\"Node join event for 41aeb0ed7cf7/10.1.54.13\"\r\nDec 28 11:14:55 swarm-1 dockerd[588]: time=\"2017-12-28T11:14:55.157261962+01:00\" level=debug msg=\"ReleaseAddress(GlobalDefault/10.0.0.0/24, 10.0.0.35)\"\r\nDec 28 11:14:55 swarm-1 dockerd[588]: time=\"2017-12-28T11:14:55.159347612+01:00\" level=debug msg=\"FIXME: Got an API for which error does not match any expected type!!!: attaching to network \r\nfailed, make sure your network options are correct and check manager logs: context deadline exceeded\" error_type=\"*errors.errorString\" module=api\r\nDec 28 11:14:55 swarm-1 dockerd[588]: time=\"2017-12-28T11:14:55.160099338+01:00\" level=error msg=\"Handler for POST /v1.24/networks/testnet/connect returned error: attaching to network failed\r\n, make sure your network options are correct and check manager logs: context deadline exceeded\"\r\nDec 28 11:14:55 swarm-1 dockerd[588]: time=\"2017-12-28T11:14:55.161338714+01:00\" level=debug msg=\"FIXME: Got an API for which error does not match any expected type!!!: attaching to network \r\nfailed, make sure your network options are correct and check manager logs: context deadline exceeded\" error_type=\"*errors.errorString\" module=api\r\nDec 28 11:15:02 swarm-1 dockerd[588]: time=\"2017-12-28T11:15:02.512053576+01:00\" level=debug msg=\"memberlist: Stream connection from=10.1.54.13:52634\"\r\n```\r\n\r\nWhen using the docker command tool you get the following logs (it works):\r\n```\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.115209171+01:00\" level=debug msg=\"Calling POST /v1.34/networks/testnet/connect\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.115456767+01:00\" level=debug msg=\"form data: {\\\"Container\\\":\\\"65caedc6bf67\\\",\\\"EndpointConfig\\\":{\\\"Aliases\\\":[],\\\"DriverOpts\\\":null,\\\"EndpointID\\\":\\\"\\\",\\\"Gateway\\\":\\\"\\\",\\\"GlobalIPv6Address\\\":\\\"\\\",\\\"GlobalIPv6PrefixLen\\\":0,\\\"IPAMConfig\\\":{},\\\"IPAddress\\\":\\\"\\\",\\\"IPPrefixLen\\\":0,\\\"IPv6Gateway\\\":\\\"\\\",\\\"Links\\\":null,\\\"MacAddress\\\":\\\"\\\",\\\"NetworkID\\\":\\\"\\\"}}\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.119363648+01:00\" level=debug msg=\"Assigning addresses for endpoint cranky_booth's interface on network testnet\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.121522694+01:00\" level=debug msg=\"RequestAddress(LocalDefault/10.0.0.0/24, <nil>, map[])\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.147177068+01:00\" level=debug msg=\"Assigning addresses for endpoint cranky_booth's interface on network testnet\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.199794382+01:00\" level=debug msg=\"checkEncryption(bfg309z, <nil>, 4096, true)\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.334967494+01:00\" level=debug msg=\"Creating service for vip 10.0.0.13 fwMark 262 ingressPorts []*libnetwork.PortConfig(nil) in sbox 9027cf8 (65caedc)\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.462069418+01:00\" level=debug msg=\"EnableService 65caedc6bf673cd1773d123d84752d4eff7ad8439d50c2b78d2b5d19d9bfe525 START\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.463087411+01:00\" level=debug msg=\"addServiceInfoToCluster START for  b92fb52f32575289b8b925e6f5f99b0672907067d75531525f7abeb065389cb1\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.463963840+01:00\" level=debug msg=\"addContainerNameResolution b92fb52f32575289b8b925e6f5f99b0672907067d75531525f7abeb065389cb1 65caedc6bf67\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.464915615+01:00\" level=debug msg=\"b92fb52f32575289b8b925e6f5f99b0672907067d75531525f7abeb065389cb1 (bfg309z).addSvcRecords(65caedc6bf67, 10.0.0.2, <nil>, true) addServiceInfoToCluster sid:b92fb52f32575289b8b925e6f5f99b0672907067d75531525f7abeb065389cb1\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.465904144+01:00\" level=debug msg=\"b92fb52f32575289b8b925e6f5f99b0672907067d75531525f7abeb065389cb1 (bfg309z).addSvcRecords(65caedc6bf67, 10.0.0.2, <nil>, true) addServiceInfoToCluster sid:b92fb52f32575289b8b925e6f5f99b0672907067d75531525f7abeb065389cb1\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.467076144+01:00\" level=debug msg=\"addServiceInfoToCluster END for  b92fb52f32575289b8b925e6f5f99b0672907067d75531525f7abeb065389cb1\"\r\nDec 28 11:31:00 swarm-1 dockerd[588]: time=\"2017-12-28T11:31:00.467121412+01:00\" level=debug msg=\"EnableService 65caedc6bf673cd1773d123d84752d4eff7ad8439d50c2b78d2b5d19d9bfe525 DONE\"\r\n```\r\n\r\nSituation:\r\n- \r\n- Normal container on the first node, trying to attach to an overlay network\r\n\r\n**Steps to reproduce the issue:**\r\n1. Swarm with three nodes: manager with availability drain, worker, normal manager\r\n2. Normal container on the first node, trying to attach to an overlay network\r\n3. Use docker-py 2.0.2 to attach container to network.\r\n\r\n**Describe the results you received:**\r\n\r\nTimeout plus failure\r\n\r\n**Describe the results you expected:**\r\n\r\nContainer attached to network\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.11.0-ce\r\n API version:  1.34\r\n Go version:   go1.8.3\r\n Git commit:   1caf76c\r\n Built:        Mon Nov 20 18:36:33 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.11.0-ce\r\n API version:  1.34 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   1caf76c\r\n Built:        Mon Nov 20 18:35:05 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 34\r\n Running: 5\r\n Paused: 0\r\n Stopped: 29\r\nImages: 20\r\nServer Version: 17.11.0-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: active\r\n NodeID: 2hpr816nia1fi7afdkq6135ti\r\n Is Manager: true\r\n ClusterID: ciep4cws4f9al3i8dxvosidkm\r\n Managers: 2\r\n Nodes: 3\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n  Force Rotate: 0\r\n Autolock Managers: false\r\n Root Rotation In Progress: false\r\n Node Address: 10.1.54.13\r\n Manager Addresses:\r\n  10.1.54.11:2377\r\n  10.1.54.13:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 992280e8e265f491f7a624ab82f3e238be086e49\r\nrunc version: 0351df1c5a66838d0c392b4ac4cf9450de844e2d\r\ninit version: 949e6fa\r\nKernel Version: 4.9.0-0.bpo.4-amd64\r\nOperating System: Debian GNU/Linux 8 (jessie)\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 1\r\nTotal Memory: 1.957GiB\r\nName: swarm-3\r\nID: SGID:6EJY:JKNE:F4LM:R434:4EB6:IMXC:PV5O:77LI:6MAR:S3DO:AD6J\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 119\r\n Goroutines: 261\r\n System Time: 2017-12-28T11:38:41.64341161+01:00\r\n EventsListeners: 5\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null],"text":"**Description**\r\n\r\nDocker attach API do use `application/vnd.docker.raw-stream` content type, which has two implementations:\r\n- multiplexed stdout/stderr streams\r\n- raw tty output\r\n\r\nfrom API response there's no way (afaict) to determine which one is used\r\nI suggest a header is introduced to document which mode is being used\r\n\r\n**Steps to reproduce the issue:**\r\n1. ask a friend to create a container, setting tty= to a random value kept secret\r\n2. invoke containers/{id}/attach\r\n3. try to guess the raw.stream format in use\r\n\r\n**Describe the results you received:**\r\n\r\nhave to try parsing a multiplexed frame, then admit I was wrong.\r\n\r\n**Describe the results you expected:**\r\n\r\nsimple way to determine the parsing logic to use\r\n"},{"labels":["api",null,null],"text":"Originally filed in https://github.com/docker/for-mac/issues/2300, but moved to here as it's a problem within Moby.\r\n\r\n**Description**\r\n\r\nWhen a container creation request provides an `EndpointSettings` value of nil in the `NetworkConfig.EndpointConfig`, the API will respond with `bad response from Docker engine`. Either this error should not be happening in the first place, or an error that is more clear should be returned.\r\n\r\n**Steps to reproduce the issue:**\r\n\r\nA minimum example that will exhibit the problem is the following client code:\r\n\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"log\"\r\n\r\n\t\"github.com/moby/moby/client\"\r\n\r\n\t\"github.com/docker/docker/api/types\"\r\n\t\"github.com/docker/docker/api/types/container\"\r\n\t\"github.com/docker/docker/api/types/network\"\r\n)\r\n\r\nfunc main() {\r\n\tclient, err := client.NewEnvClient()\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tnetworkName := \"mynetwork\"\r\n\tendpoints := make(map[string]*network.EndpointSettings, 1)\r\n\tendpoints[networkName] = nil\r\n\t// If the above line is replaced with the following line, everything works fine.\r\n\t// endpoints[networkName] = &network.EndpointSettings{}\r\n\tresp, err := client.ContainerCreate(\r\n\t\tcontext.TODO(),\r\n\t\t&container.Config{\r\n\t\t\tImage: \"myimage\",\r\n\t\t},\r\n\t\tnil,\r\n\t\t&network.NetworkingConfig{\r\n\t\t\tEndpointsConfig: endpoints,\r\n\t\t},\r\n\t\t\"\",\r\n\t)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tif err := client.ContainerStart(context.TODO(), resp.ID, types.ContainerStartOptions{}); err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n}\r\n```\r\n\r\n**Describe the results you received:**\r\n- A container is created, and when attempting to start it an engine error is returned.\r\n\r\n**Describe the results you expected:**\r\n- A container is created and started.\r\n\r\n**Output of `docker version`:** \r\n\r\n```\r\nlient:\r\n Version:      17.09.0-ce\r\n API version:  1.32\r\n Go version:   go1.8.3\r\n Git commit:   afdb6d4\r\n Built:        Tue Sep 26 22:40:09 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      17.09.0-ce\r\n API version:  1.32 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   afdb6d4\r\n Built:        Tue Sep 26 22:45:38 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 2\r\n Running: 0\r\n Paused: 0\r\n Stopped: 2\r\nImages: 9\r\nServer Version: 17.09.0-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host ipvlan macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 06b9cb35161009dcb7123345749fef02f7cea8e0\r\nrunc version: 3f2f8b84a77f73d38244dd690525642a72156c64\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.9.49-moby\r\nOperating System: Alpine Linux v3.5\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 1.952GiB\r\nName: moby\r\nID: Z6L4:JUOG:LGE3:VTWQ:TXTA:545D:33JF:R4EQ:NIN5:NVXF:FLDM:NWMG\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 19\r\n Goroutines: 32\r\n System Time: 2017-12-09T01:38:05.1673997Z\r\n EventsListeners: 1\r\nNo Proxy: *.local, 169.254/16\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: true\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```"},{"labels":["api",null],"text":"**Description**\r\n\r\n`HostConfig` in swagger spec declares PortBindings as an object with Map/Dictionary properties https://github.com/moby/moby/blob/master/api/swagger.yaml#L608\r\nNested tuple object (HostIp, HostPort) is declared here as an Object, but the API actually returns an array (see https://groups.google.com/forum/#!topic/docker-dev/Ydz6-YcaSG0 if you wonder why)\r\n\r\n**Steps to reproduce the issue:**\r\n1. generate model form swagger spec.\r\n2. use it to inspect a container\r\n3. \r\n\r\n**Describe the results you received:**\r\n\r\n`Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 column 1402 path $.HostConfig.PortBindings.`\r\n\r\n**Describe the results you expected:**\r\n\r\ninspect response object mapped\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nServer:\r\n Version:      17.11.0-ce-rc3\r\n API version:  1.34 (minimum version 1.12)\r\n Go version:   go1.8.5\r\n Git commit:   5b4af4f\r\n Built:        Wed Nov  8 03:09:46 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nI'm using swagger-codegen to generate java model : https://github.com/Dockins/jocker/blob/master/pom.xml#L55\r\n"},{"labels":["api",null,null],"text":"**Description**\r\n\r\nRemote API: rename container responds with HTTP 400, should be HTTP 409. This happens on both 17.10 and 17.09.\r\n\r\n**Steps to reproduce the issue:**\r\nCreate two containers.\r\nRename one container. (For example, to \"foo\".)\r\nUsing the remote API, POST to /containers/(id or name)/rename?name=foo, i.e. rename the second container to the same name as the first.\r\n\r\n**Describe the results you received:**\r\nThe request fails with HTTP 400 bad request.\r\n\r\n{\"message\":\"Error when allocating new name: Conflict. The container name \\\"/1afabc65711aace8-6bf9bc24d807db13\\\" is already in use by container \\\"ca4a1c2132f5debe445c791216bae7c7d0ecacee62b1f5393df2ec21501b37e5\\\". You have to remove (or rename) that container to be able to reuse that name.\"}\r\n\r\n\r\n**Describe the results you expected:**\r\nThe request fails with HTTP 409 Conflict, message name already assigned, as described in the [remote API docs][api-doc].\r\n\r\n  [api-doc]: https://docs.docker.com/engine/api/v1.33/#operation/ContainerRename\r\n\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.10.0-ce\r\n API version:  1.33\r\n Go version:   go1.8.3\r\n Git commit:   f4ffd25\r\n Built:        Tue Oct 17 19:00:43 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      17.10.0-ce\r\n API version:  1.33 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   f4ffd25\r\n Built:        Tue Oct 17 19:05:23 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 288\r\n Running: 1\r\n Paused: 0\r\n Stopped: 287\r\nImages: 121\r\nServer Version: 17.10.0-ce\r\nStorage Driver: aufs\r\n Root Dir: /mnt/sda1/var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 729\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: active\r\n NodeID: lpzh1yir70ysu8q5y5h1pzug1\r\n Is Manager: true\r\n ClusterID: rxvk8l7smfzkcfy99g03q91ce\r\n Managers: 1\r\n Nodes: 1\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n  Force Rotate: 0\r\n Autolock Managers: true\r\n Root Rotation In Progress: false\r\n Node Address: 127.0.0.1\r\n Manager Addresses:\r\n  127.0.0.1:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 06b9cb35161009dcb7123345749fef02f7cea8e0\r\nrunc version: 0351df1c5a66838d0c392b4ac4cf9450de844e2d\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.4.93-boot2docker\r\nOperating System: Boot2Docker 17.10.0-ce (TCL 7.2); HEAD : 34fe485 - Wed Oct 18 17:16:34 UTC 2017\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 1.955GiB\r\nName: 17.10.0\r\nID: ORAB:O2DJ:HFXW:BCAA:RCAU:3UTJ:JTY2:3G4Z:VMQJ:4DY3:425W:HM5A\r\nDocker Root Dir: /mnt/sda1/var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 216\r\n Goroutines: 331\r\n System Time: 2017-11-13T01:24:12.130585157Z\r\n EventsListeners: 0\r\nRegistry: https://index.docker.io/v1/\r\nLabels:\r\n provider=virtualbox\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\nA similar issue was [reported here ](https://github.com/moby/moby/issues/21016) before."},{"labels":["api"],"text":"The [Swagger spec](https://github.com/moby/moby/blob/a21654c/api/swagger.yaml) for endpoints like [`/images/create`](https://github.com/moby/moby/blob/a21654c/api/swagger.yaml#L6246) advertise a `produces` MIME type of `\"application/json\"`. In reality, the endpoint produces line delimited JSON, which is not valid JSON per se, and for which an appropriate MIME type might be [`\"application/x-ndjson\"`](http://ndjson.org/).\r\n\r\nDifferentiating such endpoints from regular `application/json` endpoints will allow consumers such as codegenerators to generate suitable client implementations for handling the streaming output, instead of just trying to parse the response as JSON and exploding."},{"labels":["api",null,null],"text":"There is already a websocket endpoint to attach to a container.\r\nNow that service logs are available in the API, I'd be happy to be able to use websocket to fetch them.\r\nHijacking a TCP connection is not something we can easily do in a browser.\r\n\r\n"},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/moby/moby/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support for **docker** can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- Slack - community.docker.com #general channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\nGeneral support for **moby** can be found at the following locations:\r\n\r\n- Moby Project Forums - https://forums.mobyproject.org\r\n- Slack - community.docker.com #moby-project channel\r\n- Post a question on StackOverflow, using the Moby tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n`docker top <containerID>` should by default return same result as if you are doing `ps -ef` in the container. This is documented, say V1.24 docker API.\r\nhttps://docs.docker.com/engine/api/v1.24/\r\n\"Query parameters:\r\n\r\nps_args – ps arguments to use (e.g., aux), defaults to -ef\"\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. download minishift and start minishift\r\n2. minishift ssh to VM\r\n3. docker top on any runnning container\r\n\r\n**Describe the results you received:**\r\n\r\n```docker@minishift:~$ docker top c37\r\nPID                 USER                COMMAND\r\n6475                tc                  {standalone.sh} /bin/sh /wildfly/bin/standalone.sh -b 0.0.0.0 -bmanagement 0.0.0.0\r\n6647                tc                  java -D[Standalone] -server -XX:+UseParallelGC -Xms40m -Xmx256m -XX:+AggressiveOpts -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dorg.apache.tomcat.util.LOW_MEMORY=true -DOPENSHIFT_APP_UUID= -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true -Dorg.jboss.resolver.warning=true -Djava.net.preferIPv4Stack=true -Dfile.encoding=UTF-8 -Djboss.node.name=fan-wildfly-2-twhnd -Djgroups.bind_addr=0.0.0.0 -Dorg.apache.coyote.http11.Http11Protocol.COMPRESSION=on -Dorg.jboss.boot.log.file=/wildfly/standalone/log/server.log -Dlogging.configuration=file:/wildfly/standalone/configuration/logging.properties -jar /wildfly/jboss-modules.jar -mp /wildfly/provided_modules:/wildfly/modules org.jboss.as.standalone -Djboss.home.dir=/wildfly -Djboss.server.base.dir=/wildfly/standalone -b 0.0.0.0 -bmanagement 0.0.0.0\r\n```\r\n\r\n\r\n**Describe the results you expected:**\r\n\r\n```\r\nbash-4.2$ ps -ef\r\nUID        PID  PPID  C STIME TTY          TIME CMD\r\ndefault      1     0  0 16:14 ?        00:00:00 /bin/sh /wildfly/bin/standalone.sh -b 0.0.0.0 -bmanagement 0.0.0.0\r\ndefault    163     1  4 16:14 ?        00:09:44 java -D[Standalone] -server -XX:+UseParallelGC -Xms40m -Xmx256m -XX:+AggressiveOpts -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -XX:GCTimeRatio=4 -XX:Ad\r\n```\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nalways reproducible\r\n**Output of `docker version`:**\r\n\r\n```\r\ndocker@minishift:~$ docker version\r\nClient:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Wed Jan 11 00:23:16 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Wed Jan 11 00:23:16 2017\r\n OS/Arch:      linux/amd64\r\n\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\ndocker@minishift:~$ docker version\r\nClient:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Wed Jan 11 00:23:16 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Wed Jan 11 00:23:16 2017\r\n OS/Arch:      linux/amd64\r\ndocker@minishift:~$ docker info\r\nContainers: 28\r\n Running: 11\r\n Paused: 0\r\n Stopped: 17\r\nImages: 14\r\nServer Version: 1.12.6\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 104\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: null host overlay bridge\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: seccomp\r\nKernel Version: 4.4.41-boot2docker\r\nOperating System: Minishift Boot2Docker ISO Version: 1.2.0\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 1.955 GiB\r\nName: minishift\r\nID: W6TJ:ZWT4:ZPGW:AMOZ:QN3G:OLO5:S566:CGEZ:ZVFP:XRXM:EZXZ:ALUR\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 95\r\n Goroutines: 86\r\n System Time: 2017-10-27T20:10:00.566488403Z\r\n EventsListeners: 0\r\nRegistry: https://index.docker.io/v1/\r\nLabels:\r\n provider=kvm\r\nInsecure Registries:\r\n 172.30.0.0/16\r\n 127.0.0.0/8\r\n\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nopenshift(minishift)"},{"labels":["api",null,null],"text":"Hi\r\n\r\nMaybe it has been asked before, but I haven't been able to find it.\r\n\r\nActually docker inspect on an exited container returns:\r\n```\r\n        ...\r\n        \"State\": {\r\n            \"Status\": \"exited\",\r\n            \"Running\": false,\r\n            \"Paused\": false,\r\n            \"Restarting\": false,\r\n            \"OOMKilled\": true,\r\n            \"Dead\": false,\r\n            \"Pid\": 0,\r\n            \"ExitCode\": 137,\r\n            \"Error\": \"\",\r\n            \"StartedAt\": \"2017-10-12T05:50:23.819164201Z\",\r\n            \"FinishedAt\": \"2017-10-12T06:45:33.520387397Z\"\r\n        },\r\n        ...\r\n```\r\n\r\nIt would be possible to preserve the PID after container exited, in order to easily match logs with atop/kernel OOM and so?\r\n\r\nThanks."},{"labels":["api",null,null,null],"text":"**Description**\r\n\r\nDocker stopped rejecting API requests with version numbers greater than the maximum version supported by the daemon. This happened in https://github.com/moby/moby/commit/e98e4a71110fd33852bb755a9b8b4ebc9df904db#diff-14051df1b5de1608aaba3a983f2a87e3 as part of https://github.com/moby/moby/pull/27745 and has affected every version of Docker since 1.13.0.\r\n\r\nThis change breaks the capability detection logic used by the Amazon ECS agent. The Amazon ECS agent is designed to work with all Docker versions >= 1.5.0, and we enable or disable features depending on the capabilities of the Docker version used. We use Remote API version as we expected this to be more stable than the daemon version; the daemon version has gone through a few changes since we started (roughly semver-like to year-month plus edition). We currently call the `/_ping` API with a range of different versions to discover which API versions are supported by the Docker daemon, but this change makes it so that every request with an API version >= 1.12 will result in success. This is causing incorrect behavior where features are being enabled with incompatible Docker versions; see https://github.com/aws/amazon-ecs-agent/issues/1008 .\r\n\r\nIn https://docs.docker.com/engine/api/version-history/#v125-api-changes , I see a note about a new header returned that specifies the maximum API version of the daemon. However, I do not see a note about the change in behavior to start accepting requests that have a specified version greater than the maximum.\r\n\r\n**Steps to reproduce the issue:**\r\nRun `curl --verbose --unix-socket /var/run/docker.sock http://localhost/v9999.9999/_ping`\r\n\r\n**Describe the results you received:**\r\nOn Docker versions prior to 1.13.0, you'll see an HTTP 400 with an error message \"client is newer than server\"\r\nOn Docker versions 1.13.0 or greater, you'll see an HTTP 200 OK.\r\n\r\n**Describe the results you expected:**\r\nI expected all versions of Docker to reject the API call because the specified API version was too new."},{"labels":["api",null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nFor programmatically checking whether a container is running, I would expect\r\n\r\n```\r\ndocker ps -q -f name=foobar\r\n```\r\n\r\nto return a nonzero exit status if no running container matching the filter was found.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Run a container, say `docker run --name foobar --rm mycontainer`\r\n2. Check for its existence with `docker ps -q -f name=foobar && echo yes`\r\n3. Stop the container\r\n4 Check for its existence again; observe that exit status is still zero, in spite of no output\r\n\r\n**Describe the results you received:**\r\n\r\nCommand exit status is zero, indicating success.\r\n\r\n**Describe the results you expected:**\r\n\r\nCommand exit status should be nonzero to indicate failure to match.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\n$ docker --version\r\nDocker version 17.06.2-ce, build cec0b72\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 12\r\n Running: 0\r\n Paused: 0\r\n Stopped: 12\r\nImages: 139\r\nServer Version: 17.06.2-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host ipvlan macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 6e23458c129b551d5c9871e5174f6b1b7f6d1170\r\nrunc version: 810190ceaa507aa2727d7ae6f4790c76ec150bd2\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.9.41-moby\r\nOperating System: Alpine Linux v3.5\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 1.952GiB\r\nName: moby\r\nID: IWAM:QARS:YQWX:F7HX:KZSD:7HFN:UDTG:ZLF4:LSX7:CGPD:ZEQN:ZSKP\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 18\r\n Goroutines: 31\r\n System Time: 2017-10-02T08:50:24.949181594Z\r\n EventsListeners: 1\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: true\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nThis is on a Mac, but the behavior should obviosly be platform-independent.\r\n\r\nThere are probably many other Docker commands which should be properly scriptable.\r\n\r\nI was surprised that I could not find an open duplicate of this bug; sorry if this has already been requested."},{"labels":["api",null],"text":"**Description**\r\nCreating containers with duplicated name used to return a 409 HTTP response, however, since 17.09 release it now returns a 400 response breaking compatibility for API users. \r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a container `docker create --name c1 busybox`\r\n2. Run `curl -v -XPOST -H\"Content-Type: application/json\" -d'{\"Image\":\"busybox\"}' http://localhost:2375/containers/create?name=c1`\r\n\r\n**Describe the results you received:**\r\n\r\nThe HTTP response will be 400 Bad Request.\r\n\r\n**Describe the results you expected:**\r\n\r\nPrior to 17.09 the response would be 409 Conflict\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.09.0-ce\r\n API version:  1.32\r\n Go version:   go1.8.3\r\n Git commit:   afdb6d4\r\n Built:        Tue Sep 26 22:42:18 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.09.0-ce\r\n API version:  1.32 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   afdb6d4\r\n Built:        Tue Sep 26 22:40:56 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 7\r\n Running: 6\r\n Paused: 0\r\n Stopped: 1\r\nImages: 18\r\nServer Version: 17.09.0-ce\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 55\r\n Dirperm1 Supported: true\r\nLogging Driver: syslog\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: active\r\n NodeID: ug3ojsrrreyxeq63nbwyikv3f\r\n Is Manager: true\r\n ClusterID: n2efj7ylwed1onrdxy0sp4dp1\r\n Managers: 1\r\n Nodes: 1\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n  Force Rotate: 0\r\n Autolock Managers: false\r\n Root Rotation In Progress: false\r\n Node Address: 192.168.50.4\r\n Manager Addresses:\r\n  192.168.50.4:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 06b9cb35161009dcb7123345749fef02f7cea8e0\r\nrunc version: 3f2f8b84a77f73d38244dd690525642a72156c64\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.4.0-31-generic\r\nOperating System: Ubuntu 16.04.2 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 1\r\nTotal Memory: 2.915GiB\r\nName: vagrant\r\nID: QCSK:UDNT:AMC2:P6TV:M4LV:UZQE:7Z2W:TEHN:VJ75:YQTG:QIBD:TYJC\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 85\r\n Goroutines: 180\r\n System Time: 2017-09-28T14:10:12.894604072Z\r\n EventsListeners: 1\r\nUsername: cezarsa\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.1:5000\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nVirtualbox"},{"labels":["api",null,null,null],"text":"If the base64url or json decoding of the X-Registry-Auth header fails, the error is swallowed and the credentials are taken as empty.\r\nhttps://github.com/moby/moby/blob/4bf8714fac11e95e835cf78eb15ba5a518c67c4b/api/server/router/image/image_routes.go#L98-L107\r\n\r\nThe code comments states:\r\n```\r\n\t// for a pull it is not an error if no auth was given\r\n\t// to increase compatibility with the existing api it is defaulting to be empty\r\n```\r\n\r\nBut this situation is not that no auth was given, but that it was badly encoded. If there is a backward compatibility issue, there should be a better way to tackle it than ignoring the header entirely on error."},{"labels":["api",null,null],"text":"**Description**\r\n\r\nWhile calling `docker volume prune`, the pruning of a volume doesn't create an event entry.\r\n\r\n**Steps to reproduce the issue:**\r\n1. `docker events > events.log &` to listen docker events\r\n2. `docker volume create chazam` to create a test volume\r\n3. `docker volume prune` to delete volumes\r\n\r\n**Describe the results you received:**\r\nOn the events.log file you should, only, see the creation event:\r\n`2017-09-23T07:10:44.965370986Z volume create chazam (driver=local)`\r\n\r\n**Describe the results you expected:**\r\nI should expect to have an event entry on the volume deletion.\r\n\r\n**Problem localisation**\r\nThe problem is on the `daemon/prune.go` file. More precisely the `VolumesPrune` function, line `143`.\r\nWe should call `err = daemon.VolumeRm(v.Name(), false)` instead of the actual `err = daemon.volumes.Remove(v)`.\r\n\r\n**Output of `docker version`:**\r\n```\r\nClient:\r\n Version:      17.06.0-ce\r\n API version:  1.30\r\n Go version:   go1.8.3\r\n Git commit:   02c1d87\r\n Built:        Fri Jun 23 21:15:15 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.06.0-dev\r\n API version:  1.32 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   c982ee8\r\n Built:        Sat Sep 23 07:09:43 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 0\r\n Running: 0\r\n Paused: 0\r\n Stopped: 0\r\nImages: 0\r\nServer Version: 17.06.0-dev\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 06b9cb35161009dcb7123345749fef02f7cea8e0\r\nrunc version: 1c81e2a794c6e26a4c650142ae8893c47f619764\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.9.41-moby\r\nOperating System: Debian GNU/Linux 9 (stretch) (containerized)\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 1.952GiB\r\nName: 977aaa405be0\r\nID: K6M2:ALHJ:AVJ5:XVW7:E4X5:W34D:35XQ:K6HK:YVOF:EA2N:U4BO:6QRT\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 17\r\n Goroutines: 28\r\n System Time: 2017-09-23T07:12:39.720242284Z\r\n EventsListeners: 1\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n"},{"labels":["api",null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\nDocker container start API used to return 500 status code when the mounting share/file of container not exists. But now, I'm using docker API 1.29 and found that it returns 404, which means no such container in Document (https://docs.docker.com/engine/api/v1.29/#operation/ContainerStart). I wonder it's by design or a bug. Thanks.\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. docker run -it --name test -v /volume1/abc:/test ubuntu\r\n2. rm /volume1/abc\r\n3. curl --unix-socket /var/run/docker.sock -X POST http:/v1.29/containers/test/start -v\r\n\r\n**Describe the results you received:**\r\nstatus code 404\r\n\r\n**Describe the results you expected:**\r\nstatus code 500\r\n\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n```\r\nClient:\r\n Version:      17.05.0-ce\r\n API version:  1.29\r\n Go version:   go1.8\r\n Git commit:   5259590\r\n Built:        Thu Aug  3 17:53:06 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.05.0-ce\r\n API version:  1.29 (minimum version 1.12)\r\n Go version:   go1.8\r\n Git commit:   5259590\r\n Built:        Thu Aug  3 17:53:06 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 16\r\n Running: 6\r\n Paused: 0\r\n Stopped: 10\r\nImages: 21\r\nServer Version: 17.05.0-ce\r\nStorage Driver: btrfs\r\nLogging Driver: db\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: fd189da3e13a3ef3d6d9eb73c5cd4697b4536cdd (expected: 9048e5e50717ea4497b757314bad98ea3763c145)\r\nrunc version: a2d6e07aab95ff37fb63cf5dec3c40d29940194f (expected: 9c2d8d184e5da67c95d601382adf14862e4f2228)\r\ninit version: 7a83305 (expected: 949e6fa)\r\nSecurity Options:\r\n apparmor\r\nKernel Version: 3.10.105\r\nOperating System: <unknown>\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 988.7MiB\r\nName: tricia713p-2\r\nID: N44J:NJHE:EQG2:TY6P:QYPH:DXP5:2X2G:F5C2:2ONN:OGTF:J45U:LCVG\r\nDocker Root Dir: /volume1/@docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 56\r\n Goroutines: 74\r\n System Time: 2017-08-23T18:21:30.329449102+08:00\r\n EventsListeners: 0\r\nUsername: \r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null,null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\nI wonder how to create services with yml files using remote api.\r\n'docker stack deploy' is dedicated with docker cli and there is no api to call  with yml file.\r\nI knew docker-compose is another option to launch containers with yml file.\r\nHowever, I don't want to take care docker-compose dependency.(I know libcompose)\r\n'docker stack deploy' will create services by swarm, it would be easier to manage for me.\r\nAlso, DOCKER_HOST is set in my remote side and I can use remoe api all to request for dockerd.\r\nIs there a way how to use docker stack deploy without cli, should I develope yml parser in my client?\r\n\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. \r\n2.\r\n3.\r\n\r\n**Describe the results you received:**\r\n\r\n\r\n**Describe the results you expected:**\r\n\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.05.0-ce\r\n API version:  1.29\r\n Go version:   go1.7.5\r\n Git commit:   89658be\r\n Built:        Thu May  4 22:10:54 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.05.0-ce\r\n API version:  1.29 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   89658be\r\n Built:        Thu May  4 22:10:54 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 2\r\n Running: 2\r\n Paused: 0\r\n Stopped: 0\r\nImages: 14\r\nServer Version: 17.05.0-ce\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 35\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins: \r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: active\r\n NodeID: ij7fc2f203vddkjy7ob4q9esp\r\n Is Manager: true\r\n ClusterID: fp4p2rdim6mmlrey1hhfybm77\r\n Managers: 1\r\n Nodes: 1\r\n Orchestration:\r\n  Task History Retention Limit: 1\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n Node Address: 127.0.0.1\r\n Manager Addresses:\r\n  127.0.0.1:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 9048e5e50717ea4497b757314bad98ea3763c145\r\nrunc version: 9c2d8d184e5da67c95d601382adf14862e4f2228\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.4.0-89-generic\r\nOperating System: Ubuntu 16.04.2 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 8\r\nTotal Memory: 7.708GiB\r\nName: namsulee\r\nID: 3VEC:YWEK:CJVK:ABOZ:N2MK:X2X4:3XPC:RJ3R:MDNL:WCWW:JCOD:6AFM\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nHttp Proxy: http://10.112.1.184:8080/\r\nHttps Proxy: http://10.112.1.184:8080/\r\nNo Proxy: localhost,127.0.0.1,docker-registry.your.corp\r\nUsername: namsulee\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 10.113.62.204:443\r\n 13.124.64.10:443\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null,null,null],"text":"Hi !\r\n\r\nI'm writing a tool (in Python) to get the logs from any containers through the Docker Engine's HTTP API.\r\n\r\nAfter reading [the doc](https://docs.docker.com/engine/api/v1.30/), and trying to implement something, I founded that the protocol used seems to be different from the one for Attach, it seems to be :\r\n\r\n```{\\xFF}\\r\\n{\\xFF}{datas}```\r\n\r\nWhere the first hex number is the size of the message, and the second one seems to be (empirical deduction) the number of bytes that are supposed to be ignored before the start of the actual payload (so the log).\r\nAnd it seems to work, for some containers at least ...\r\n\r\n**EDIT** : The second seems to be the number of bytes that are supposed to be ignored IF the container has ```tty: false```, otherwise, it seems to be the start of the log **END of the edit**\r\n\r\nWith one strange deduction : if ```\\x07``` is found, then it overrides the second {\\xFF} size, and the message starts after this value...\r\n\r\nAm I missing a part of the documentation, or am I not using the HTTP API in a wrong way ?\r\n\r\nThanks for your time,\r\n\r\n**NB** : The protocol above seems to be specific for the logs endpoint, it's not working for the events' endpoint.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.05.0-ce\r\n API version:  1.29\r\n Go version:   go1.7.5\r\n Git commit:   89658be\r\n Built:        Thu May  4 22:10:54 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.05.0-ce\r\n API version:  1.29 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   89658be\r\n Built:        Thu May  4 22:10:54 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n"},{"labels":["api",null,null,null,null],"text":"\r\n**Description**\r\n\r\nWhen create a network with name already existed using docker-py, and set arg `check_duplicated=True`, the error should be `409 Conflict`, but `500 Internal Server Error` returns.\r\n\r\n**Steps to reproduce the issue:**\r\nIn python console\r\n```\r\n>>> import docker\r\n>>> c = docker.from_env()\r\n>>> c.networks.create('net1')\r\n<Network: 4c7d2d08e3>\r\n>>> c.networks.create('net1', check_duplicate=True)\r\n```\r\n\r\n**Describe the results you received:**\r\n\r\n```\r\n>>> c.networks.create('net1', check_duplicate=True)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/site-packages/docker/models/networks.py\", line 144, in create\r\n    resp = self.client.api.create_network(name, *args, **kwargs)\r\n  File \"/usr/lib/python2.7/site-packages/docker/utils/decorators.py\", line 35, in wrapper\r\n    return f(self, *args, **kwargs)\r\n  File \"/usr/lib/python2.7/site-packages/docker/api/network.py\", line 134, in create_network\r\n    return self._result(res, json=True)\r\n  File \"/usr/lib/python2.7/site-packages/docker/api/client.py\", line 220, in _result\r\n    self._raise_for_status(response)\r\n  File \"/usr/lib/python2.7/site-packages/docker/api/client.py\", line 216, in _raise_for_status\r\n    raise create_api_error_from_http_exception(e)\r\n  File \"/usr/lib/python2.7/site-packages/docker/errors.py\", line 30, in create_api_error_from_http_exception\r\n    raise cls(e, response=response, explanation=explanation)\r\ndocker.errors.APIError: 500 Server Error: Internal Server Error for url: http+docker://localunixsocket/v1.24/networks/create (\"network with name net1 already exists\")\r\n>>> \r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\n```\r\n>>> c.networks.create('net1', check_duplicate=True)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/site-packages/docker/models/networks.py\", line 144, in create\r\n    resp = self.client.api.create_network(name, *args, **kwargs)\r\n  File \"/usr/lib/python2.7/site-packages/docker/utils/decorators.py\", line 35, in wrapper\r\n    return f(self, *args, **kwargs)\r\n  File \"/usr/lib/python2.7/site-packages/docker/api/network.py\", line 134, in create_network\r\n    return self._result(res, json=True)\r\n  File \"/usr/lib/python2.7/site-packages/docker/api/client.py\", line 220, in _result\r\n    self._raise_for_status(response)\r\n  File \"/usr/lib/python2.7/site-packages/docker/api/client.py\", line 216, in _raise_for_status\r\n    raise create_api_error_from_http_exception(e)\r\n  File \"/usr/lib/python2.7/site-packages/docker/errors.py\", line 30, in create_api_error_from_http_exception\r\n    raise cls(e, response=response, explanation=explanation)\r\ndocker.errors.APIError: 409 Client Error: Conflict for url: http+docker://localunixsocket/v1.24/networks/create (\"network with name net1 already exists\")\r\n>>> \r\n```\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.06.0-ce\r\n API version:  1.30\r\n Go version:   go1.8.3\r\n Git commit:   02c1d87\r\n Built:        Fri Jun 23 21:20:36 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.06.0-ce\r\n API version:  1.30 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   02c1d87\r\n Built:        Fri Jun 23 21:21:56 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 0\r\n Running: 0\r\n Paused: 0\r\n Stopped: 0\r\nImages: 1\r\nServer Version: 17.06.0-ce\r\nStorage Driver: overlay\r\n Backing Filesystem: xfs\r\n Supports d_type: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins: \r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: active\r\n NodeID: 7ty93f9vgo9gb2nmwk4km10hb\r\n Is Manager: true\r\n ClusterID: fofqp1rgom60nftnc5fwkz1st\r\n Managers: 1\r\n Nodes: 1\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n  Force Rotate: 0\r\n Root Rotation In Progress: false\r\n Node Address: 192.168.249.129\r\n Manager Addresses:\r\n  192.168.249.129:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: cfb82a876ecc11b5ca0977d1733adbe58599088a\r\nrunc version: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 3.10.0-514.el7.x86_64\r\nOperating System: CentOS Linux 7 (Core)\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 472.5MiB\r\nName: swarm_manager\r\nID: YRD2:DTIW:AKEF:RXJY:RKXM:OJU2:N7B6:K7JK:XDOG:4E5S:NWFU:SGWY\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 40\r\n Goroutines: 184\r\n System Time: 2017-08-08T14:20:57.288514678+08:00\r\n EventsListeners: 0\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 10.27.37.40:5000\r\n 10.37.210.125:5001\r\n 127.0.0.0/8\r\nRegistry Mirrors:\r\n https://2h3po24q.mirror.aliyuncs.com/\r\nLive Restore Enabled: false\r\n\r\nWARNING: bridge-nf-call-ip6tables is disabled\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n```\r\ndocker-py version 2.1.0\r\n```"},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\nDocker images load API return `200` status code when it actually failed. I wonder it's by design or a bug.\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n\r\n```bash\r\ncat /mychai/PACKAGE_ICON.PNG |curl -v --unix-socket  /var/run/docker.sock -H \"Content-Type: application/x-tar\"  --data-binary @- -X POST http:/v1.29/images/load\r\n```\r\n\r\n**Describe the results you received:**\r\n\r\n```\r\n> POST /images/load HTTP/1.1\r\n> Host: v1.29\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n> Content-Type: application/x-tar\r\n> Content-Length: 7164\r\n> Expect: 100-continue\r\n>\r\n< HTTP/1.1 100 Continue\r\n< HTTP/1.1 200 OK\r\n< Api-Version: 1.29\r\n< Content-Type: application/json\r\n< Docker-Experimental: false\r\n< Ostype: linux\r\n< Server: Docker/17.05.0-ce (linux)\r\n< Date: Mon, 07 Aug 2017 05:48:35 GMT\r\n< Transfer-Encoding: chunked\r\n<\r\n{\"errorDetail\":{\"message\":\"Error processing tar file(exit status 1): archive/tar: invalid tar header\"},\"error\":\"Error processing tar file(exit status 1): archive/tar: invalid tar header\"}\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\n```\r\n< HTTP/1.1 500 \r\n```\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.05.0-ce\r\n API version:  1.29\r\n Go version:   go1.8\r\n Git commit:   54e4c6c-synology\r\n Built:        Fri Aug  4 22:43:08 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.05.0-ce\r\n API version:  1.29 (minimum version 1.12)\r\n Go version:   go1.8\r\n Git commit:   54e4c6c-synology\r\n Built:        Fri Aug  4 22:43:08 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 12\r\n Running: 1\r\n Paused: 0\r\n Stopped: 11\r\nImages: 27\r\nServer Version: 17.05.0-ce\r\nStorage Driver: btrfs\r\nLogging Driver: db\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: fd189da3e13a3ef3d6d9eb73c5cd4697b4536cdd (expected: 9048e5e50717ea4497b757314bad98ea3763c145)\r\nrunc version: a2d6e07aab95ff37fb63cf5dec3c40d29940194f (expected: 9c2d8d184e5da67c95d601382adf14862e4f2228)\r\ninit version: 7a83305 (expected: 949e6fa)\r\nSecurity Options:\r\n apparmor\r\nKernel Version: 3.10.105\r\nOperating System: <unknown>\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 988.7MiB\r\nName: tricia713p-2\r\nID: N44J:NJHE:EQG2:TY6P:QYPH:DXP5:2X2G:F5C2:2ONN:OGTF:J45U:LCVG\r\nDocker Root Dir: /volume1/@docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 20\r\n Goroutines: 29\r\n System Time: 2017-08-07T13:53:50.426017437+08:00\r\n EventsListeners: 0\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n\r\nWARNING: No kernel memory limit support\r\nWARNING: No cpu cfs quota support\r\nWARNING: No cpu cfs period support\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nLinux "},{"labels":["api",null,null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1.docker run -tid --name=test0 ubuntu bash\r\n2.docker run -tid --name=test1 --net=container:test0 ubuntu bash\r\n3.docker rename test0 test2\r\n4.docker restart test1\r\n\r\n**Describe the results you received:**\r\nError response from daemon: Cannot restart container test1: No such container: test0\r\n\r\nWhen replace the \"--net\" to \"--pid\" or \"--ipc\" will get :\r\nPost http://%2Fvar%2Frun%2Fdocker.sock/v1.29/containers/test3/restart: EOF\r\n\r\n**Describe the results you expected:**\r\ntest1 restart succuss\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n```\r\nClient:\r\n Version:      17.05.0-ce\r\n API version:  1.29\r\n Go version:   go1.7.5\r\n Git commit:   89658be\r\n Built:        Fri May  5 15:36:11 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.05.0-ce\r\n API version:  1.29 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   89658be\r\n Built:        Fri May  5 15:36:11 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n\r\n```\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 15\r\n Running: 13\r\n Paused: 0\r\n Stopped: 2\r\nImages: 60\r\nServer Version: 17.05.0-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: xfs\r\n Supports d_type: false\r\n Native Overlay Diff: false\r\nLogging Driver: journald\r\nCgroup Driver: cgroupfs\r\nPlugins: \r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 9048e5e50717ea4497b757314bad98ea3763c145\r\nrunc version: 9c2d8d184e5da67c95d601382adf14862e4f2228\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 3.10.0-514.21.2.el7.x86_64\r\nOperating System: CentOS Linux 7 (Core)\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 8\r\nTotal Memory: 7.639GiB\r\nName: 16\r\nID: 5PRJ:JAJY:H6IP:OBMF:7QQ6:AQJ2:JHGD:KOHN:K4PZ:ETTR:JPUA:KZ2P\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 95\r\n Goroutines: 128\r\n System Time: 2017-07-30T02:26:57.040522467+08:00\r\n EventsListeners: 0\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n demoregistry.dataman-inc.com\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**"},{"labels":["api",null,null],"text":"The responsible of the `client` package is to transform a go struct into an HTTP request, perform the HTTP request, and convert the HTTP response into a go struct + error.\r\n\r\n`client/service_update.go` and `client/service_create.go` have a bunch of application logic that does not belong in this package. We should remove it and move it into a separate package.\r\n\r\nIt looks like this logic was first introduced in #32388 and subsequently updated in #33239, and #33575.\r\n\r\nThis is related to #34242 and https://github.com/docker/cli/pull/386 \r\n\r\ncc @thaJeztah @nishanttotla @aaronlehmann "},{"labels":["api",null],"text":"Docker API documentation needs to be updated.\r\n\r\nThe `/plugins` endpoint returns the following response: https://github.com/moby/moby/blob/0ac25dfc751fa4304ab45afd5cd8705c2235d101/api/types/plugin_responses.go#L1\r\n\r\nBased on https://github.com/moby/moby/blob/0ac25dfc751fa4304ab45afd5cd8705c2235d101/api/types/plugin.go#L8-L31\r\n\r\nThe plugin object is quite different from the one documented in the 200 response sample at https://docs.docker.com/engine/api/v1.30/#operation/PluginList\r\n"},{"labels":["api",null,null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\nI'm using the API to consume container stats streams.\r\n\r\nContainer stat streams for containers that are being removed sporadically contain samples that are partial or contain empty or null data. This has only appeared after upgrading from docker:1.13 to docker-ce:17.06.\r\n\r\nHere is an example of what I would consider bad data.\r\n- read timestamp is \"0001-01-01T00:00:00Z\"\r\n- blkio_stats are all set to null\r\n- cpu_stats are all set to zero and percpu_usage and throttling_data is missing\r\n- memory stats is completely empty\r\n- networks list is missing\r\n```\r\n{\r\n   \"read\":\"0001-01-01T00:00:00Z\",\r\n   \"preread\":\"0001-01-01T00:00:00Z\",\r\n   \"pids_stats\":{\r\n\r\n   },\r\n   \"blkio_stats\":{\r\n      \"io_service_bytes_recursive\":null,\r\n      \"io_serviced_recursive\":null,\r\n      \"io_queue_recursive\":null,\r\n      \"io_service_time_recursive\":null,\r\n      \"io_wait_time_recursive\":null,\r\n      \"io_merged_recursive\":null,\r\n      \"io_time_recursive\":null,\r\n      \"sectors_recursive\":null\r\n   },\r\n   \"num_procs\":0,\r\n   \"storage_stats\":{\r\n\r\n   },\r\n   \"cpu_stats\":{\r\n      \"cpu_usage\":{\r\n         \"total_usage\":0,\r\n         \"usage_in_kernelmode\":0,\r\n         \"usage_in_usermode\":0\r\n      },\r\n      \"throttling_data\":{\r\n         \"periods\":0,\r\n         \"throttled_periods\":0,\r\n         \"throttled_time\":0\r\n      }\r\n   },\r\n   \"precpu_stats\":{\r\n      \"cpu_usage\":{\r\n         \"total_usage\":0,\r\n         \"usage_in_kernelmode\":0,\r\n         \"usage_in_usermode\":0\r\n      },\r\n      \"throttling_data\":{\r\n         \"periods\":0,\r\n         \"throttled_periods\":0,\r\n         \"throttled_time\":0\r\n      }\r\n   },\r\n   \"memory_stats\":{\r\n\r\n   },\r\n   \"name\":\"/test-coffeescript-5-coffeescript-1676635391\",\r\n   \"id\":\"fe236c2e2d8d8c7db08a6049d61b2903b850f0a39fc4e70c8483cdb8f9f3d334\"\r\n}\r\n```\r\n\r\nHere is an example of what I would consider good data.\r\n```\r\n{\r\n   \"read\":\"2017-07-20T00:31:05.56000684Z\",\r\n   \"preread\":\"0001-01-01T00:00:00Z\",\r\n   \"pids_stats\":{\r\n\r\n   },\r\n   \"blkio_stats\":{\r\n      \"io_service_bytes_recursive\":[\r\n         {\r\n            \"major\":8,\r\n            \"minor\":0,\r\n            \"op\":\"Read\",\r\n            \"value\":18477056\r\n         },\r\n         {\r\n            \"major\":8,\r\n            \"minor\":0,\r\n            \"op\":\"Write\",\r\n            \"value\":0\r\n         },\r\n         {\r\n            \"major\":8,\r\n            \"minor\":0,\r\n            \"op\":\"Sync\",\r\n            \"value\":0\r\n         },\r\n         {\r\n            \"major\":8,\r\n            \"minor\":0,\r\n            \"op\":\"Async\",\r\n            \"value\":18477056\r\n         },\r\n         {\r\n            \"major\":8,\r\n            \"minor\":0,\r\n            \"op\":\"Total\",\r\n            \"value\":18477056\r\n         },\r\n         {\r\n            \"major\":252,\r\n            \"minor\":0,\r\n            \"op\":\"Read\",\r\n            \"value\":18477056\r\n         },\r\n         {\r\n            \"major\":252,\r\n            \"minor\":0,\r\n            \"op\":\"Write\",\r\n            \"value\":0\r\n         },\r\n         {\r\n            \"major\":252,\r\n            \"minor\":0,\r\n            \"op\":\"Sync\",\r\n            \"value\":0\r\n         },\r\n         {\r\n            \"major\":252,\r\n            \"minor\":0,\r\n            \"op\":\"Async\",\r\n            \"value\":18477056\r\n         },\r\n         {\r\n            \"major\":252,\r\n            \"minor\":0,\r\n            \"op\":\"Total\",\r\n            \"value\":18477056\r\n         }\r\n      ],\r\n      \"io_serviced_recursive\":[\r\n         {\r\n            \"major\":8,\r\n            \"minor\":0,\r\n            \"op\":\"Read\",\r\n            \"value\":371\r\n         },\r\n         {\r\n            \"major\":8,\r\n            \"minor\":0,\r\n            \"op\":\"Write\",\r\n            \"value\":0\r\n         },\r\n         {\r\n            \"major\":8,\r\n            \"minor\":0,\r\n            \"op\":\"Sync\",\r\n            \"value\":0\r\n         },\r\n         {\r\n            \"major\":8,\r\n            \"minor\":0,\r\n            \"op\":\"Async\",\r\n            \"value\":371\r\n         },\r\n         {\r\n            \"major\":8,\r\n            \"minor\":0,\r\n            \"op\":\"Total\",\r\n            \"value\":371\r\n         },\r\n         {\r\n            \"major\":252,\r\n            \"minor\":0,\r\n            \"op\":\"Read\",\r\n            \"value\":371\r\n         },\r\n         {\r\n            \"major\":252,\r\n            \"minor\":0,\r\n            \"op\":\"Write\",\r\n            \"value\":0\r\n         },\r\n         {\r\n            \"major\":252,\r\n            \"minor\":0,\r\n            \"op\":\"Sync\",\r\n            \"value\":0\r\n         },\r\n         {\r\n            \"major\":252,\r\n            \"minor\":0,\r\n            \"op\":\"Async\",\r\n            \"value\":371\r\n         },\r\n         {\r\n            \"major\":252,\r\n            \"minor\":0,\r\n            \"op\":\"Total\",\r\n            \"value\":371\r\n         }\r\n      ],\r\n      \"io_queue_recursive\":[\r\n\r\n      ],\r\n      \"io_service_time_recursive\":[\r\n\r\n      ],\r\n      \"io_wait_time_recursive\":[\r\n\r\n      ],\r\n      \"io_merged_recursive\":[\r\n\r\n      ],\r\n      \"io_time_recursive\":[\r\n\r\n      ],\r\n      \"sectors_recursive\":[\r\n\r\n      ]\r\n   },\r\n   \"num_procs\":0,\r\n   \"storage_stats\":{\r\n\r\n   },\r\n   \"cpu_stats\":{\r\n      \"cpu_usage\":{\r\n         \"total_usage\":153445917,\r\n         \"percpu_usage\":[\r\n            75907230,\r\n            54946048,\r\n            20596622,\r\n            1996017\r\n         ],\r\n         \"usage_in_kernelmode\":30000000,\r\n         \"usage_in_usermode\":100000000\r\n      },\r\n      \"system_cpu_usage\":36458710000000,\r\n      \"online_cpus\":4,\r\n      \"throttling_data\":{\r\n         \"periods\":8,\r\n         \"throttled_periods\":0,\r\n         \"throttled_time\":0\r\n      }\r\n   },\r\n   \"precpu_stats\":{\r\n      \"cpu_usage\":{\r\n         \"total_usage\":0,\r\n         \"usage_in_kernelmode\":0,\r\n         \"usage_in_usermode\":0\r\n      },\r\n      \"throttling_data\":{\r\n         \"periods\":0,\r\n         \"throttled_periods\":0,\r\n         \"throttled_time\":0\r\n      }\r\n   },\r\n   \"memory_stats\":{\r\n      \"usage\":32563200,\r\n      \"max_usage\":34340864,\r\n      \"stats\":{\r\n         \"active_anon\":11812864,\r\n         \"active_file\":1028096,\r\n         \"cache\":18497536,\r\n         \"dirty\":4096,\r\n         \"hierarchical_memory_limit\":419430400,\r\n         \"inactive_anon\":0,\r\n         \"inactive_file\":17469440,\r\n         \"mapped_file\":14819328,\r\n         \"pgfault\":6767,\r\n         \"pgmajfault\":155,\r\n         \"pgpgin\":10252,\r\n         \"pgpgout\":2852,\r\n         \"rss\":11812864,\r\n         \"rss_huge\":0,\r\n         \"total_active_anon\":11812864,\r\n         \"total_active_file\":1028096,\r\n         \"total_cache\":18497536,\r\n         \"total_dirty\":4096,\r\n         \"total_inactive_anon\":0,\r\n         \"total_inactive_file\":17469440,\r\n         \"total_mapped_file\":14819328,\r\n         \"total_pgfault\":6767,\r\n         \"total_pgmajfault\":155,\r\n         \"total_pgpgin\":10252,\r\n         \"total_pgpgout\":2852,\r\n         \"total_rss\":11812864,\r\n         \"total_rss_huge\":0,\r\n         \"total_unevictable\":0,\r\n         \"total_writeback\":0,\r\n         \"unevictable\":0,\r\n         \"writeback\":0\r\n      },\r\n      \"limit\":419430400\r\n   },\r\n   \"name\":\"/test-coffeescript-0-coffeescript-7120097801\",\r\n   \"id\":\"b45e7064834ba64acd2bda01cc533345b2b3ec06fca2c173eac1ac9d433f0721\",\r\n   \"networks\":{\r\n      \"eth0\":{\r\n         \"rx_bytes\":168,\r\n         \"rx_packets\":2,\r\n         \"rx_errors\":0,\r\n         \"rx_dropped\":0,\r\n         \"tx_bytes\":0,\r\n         \"tx_packets\":0,\r\n         \"tx_errors\":0,\r\n         \"tx_dropped\":0\r\n      }\r\n   }\r\n}\r\n```\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a large number of containers\r\n2. Subscribe to each container's stats. Validate that each stats sample contains networks.\r\n3. Remove the large number of containers so that removal is slowed down allowing race condition to occur.\r\n\r\n**Describe the results you received:**\r\n- json stats samples missing the networks property\r\n- json stats samples with cpu and other values set to zero or null\r\n\r\n**Describe the results you expected:**\r\nI expect to not receive any stats samples after a container starts to be removed.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nThis only seems to happen as a race condition when removal takes longer than normal.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.06.0-ce\r\n API version:  1.30\r\n Go version:   go1.8.3\r\n Git commit:   02c1d87\r\n Built:        Fri Jun 23 21:19:16 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.06.0-ce\r\n API version:  1.30 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   02c1d87\r\n Built:        Fri Jun 23 21:17:13 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 134\r\n Paused: 0\r\n Stopped: 0\r\nImages: 33\r\nServer Version: 17.06.0-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: false\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: cfb82a876ecc11b5ca0977d1733adbe58599088a\r\n:WARNING: No swap limit support\r\nrunc version: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\nKernel Version: 4.2.0-27-generic\r\nOperating System: Ubuntu 14.04.4 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 2.922GiB\r\nName: ubuntu\r\nID: V75U:CH5I:M2Q6:2C7F:CYWI:2THL:SXX3:3AV5:PNVA:7PVS:SXY4:6RAS\r\nDocker Root Dir: /data/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n- Running in production on Ubuntu 14.04 gce instance.\r\n- Running in test on a Ubuntu 14.04 VM running locally on macOS Sierra."},{"labels":["api",null,null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nThe API returns a `500 Internal Server Error` if the body is empty when creating a volume.\r\n\r\n\r\n**Steps to reproduce the issue:**\r\n\r\n```bash\r\n$ curl --unix-socket /var/run/docker.sock -v -X POST http://localhost/volumes/create\r\n\r\n*   Trying /var/run/docker.sock...\r\n* Connected to localhost (/Users/sebastiaan/Library/Containers/com.dock) port 80 (#0)\r\n> POST /volumes/create HTTP/1.1\r\n> Host: localhost\r\n> User-Agent: curl/7.51.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 500 Internal Server Error\r\n< Api-Version: 1.30\r\n< Content-Length: 18\r\n< Content-Type: application/json\r\n< Date: Wed, 19 Jul 2017 11:29:26 GMT\r\n< Docker-Experimental: true\r\n< Ostype: linux\r\n< Server: Docker/17.06.0-ce (linux)\r\n<\r\n{\"message\":\"EOF\"}\r\n* Curl_http_done: called premature == 0\r\n* Connection #0 to host localhost left intact\r\n```\r\n\r\n**Describe the results you received:**\r\n\r\nThe API returns a `500 Internal Server Error`\r\n\r\n**Describe the results you expected:**\r\n\r\nhe API handles the error, and returns a 4xx error code (`400 Bad Request`)\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.06.0-ce\r\n API version:  1.30\r\n Go version:   go1.8.3\r\n Git commit:   02c1d87\r\n Built:        Fri Jun 23 21:31:53 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      17.06.0-ce\r\n API version:  1.30 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   02c1d87\r\n Built:        Fri Jun 23 21:51:55 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\nnot relevant\r\n\r\n"},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nOn querying images list each image list will be having `Containers` property with value -1 regardless of amount of containers using this image.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Run container from the image(for example `docker run -ti ubuntu bash`)\r\n2. Get list of images from the API(`curl --unix-socket /var/run/docker.sock \"http:/v1.30/images/json\"`)\r\n\r\n**Describe the results you received:**\r\n\r\n\"ubuntu\" image has `Containers` property with value -1.\r\n\r\n**Describe the results you expected:**\r\n\r\n`Containers` property with value 1\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.06.0-ce\r\n API version:  1.30\r\n Go version:   go1.8.3\r\n Git commit:   02c1d87\r\n Built:        Fri Jun 23 21:31:53 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      17.06.0-ce\r\n API version:  1.30 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   02c1d87\r\n Built:        Fri Jun 23 21:51:55 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 4\r\n Running: 2\r\n Paused: 0\r\n Stopped: 2\r\nImages: 40\r\nServer Version: 17.06.0-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host ipvlan macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: cfb82a876ecc11b5ca0977d1733adbe58599088a\r\nrunc version: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.9.31-moby\r\nOperating System: Alpine Linux v3.5\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 1.952GiB\r\nName: moby\r\nID: QN2D:44BC:EQ5U:GCN2:Z2XT:DSNU:GGTI:FNKB:MHAJ:3I7E:ASHB:RJTT\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 34\r\n Goroutines: 48\r\n System Time: 2017-07-07T10:18:20.598658487Z\r\n EventsListeners: 1\r\nNo Proxy: *.local, 169.254/16\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: true\r\nInsecure Registries:\r\n jenkin-registry.gsintlab.com\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n"},{"labels":["api",null,null,null,null],"text":"**Description**\r\nAfter updating to Docker 17.06.0-ce, there is a functionality change in the `docker wait` command compared to 17.05, when issued against a container name that doesn't exist. I can't seem to find any documentation on this change, and am unsure if it's a bug (it appears to be).\r\n\r\n**Steps to reproduce the issue:**\r\n1. Upgrade to Docker 17.06.0-ce\r\n2. Issue `docker wait` for a container that doesn't exist\r\n3. Docker will hang.\r\n\r\n**Describe the results you received:**\r\nIn 17.06, if you issue a `docker wait` for a container name that doesn't exist, the docker command will hang indefinitely.\r\n\r\n**Describe the results you expected:**\r\nIn 17.05, if you issue a `docker wait` for a container name that doesn't exist, you get a non-zero exit with the following error:\r\n```\r\n$ docker wait kube-rsync-5095346036-5-v1.8.3-2\r\nError response from daemon: No such container: kube-rsync-5095346036-5-v1.8.3-2\r\n```\r\n\r\nSimilarly, if you issue a `docker kill` in either 17.06 or 17.05, you get a similar error (what I expect to be desired functionality):\r\n```\r\ndocker kill kube-rsync-5095346036-5-v1.8.3-2\r\nError response from daemon: Cannot kill container kube-rsync-5095346036-5-v1.8.3-2: No such container: kube-rsync-5095346036-5-v1.8.3-2\r\n```\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.06.0-ce\r\n API version:  1.30\r\n Go version:   go1.8.3\r\n Git commit:   02c1d87\r\n Built:        Fri Jun 23 21:31:53 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      17.06.0-ce\r\n API version:  1.30 (minimum version 1.12)\r\n Go version:   go1.8.3\r\n Git commit:   02c1d87\r\n Built:        Fri Jun 23 21:51:55 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 0\r\n Running: 0\r\n Paused: 0\r\n Stopped: 0\r\nImages: 0\r\nServer Version: 17.06.0-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins: \r\n Volume: local\r\n Network: bridge host ipvlan macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: cfb82a876ecc11b5ca0977d1733adbe58599088a\r\nrunc version: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.9.31-moby\r\nOperating System: Alpine Linux v3.5\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 1.952GiB\r\nName: moby\r\nID: ZV2V:GX2D:5RZF:47YT:NFFB:TPFP:6KBC:QFF3:QJSN:EUAK:PKOP:3NVP\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 17\r\n Goroutines: 28\r\n System Time: 2017-07-04T20:07:55.056942415Z\r\n EventsListeners: 1\r\nNo Proxy: *.local, 169.254/16\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: true\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null],"text":"**Description**\r\n\r\nLooking at the [Docker Engine API docs](https://docs.docker.com/engine/api/v1.26/#operation/ContainerCreate) (scroll down and expand HostConfig, then scroll down to find the Binds documentation), I don't see anything related to the SELinux Context, which is mentioned in the docker documentation [here](https://docs.docker.com/engine/tutorials/dockervolumes/#volume-labels).\r\n\r\nHowever, it seems that the `:Z` or `:z` which are SELinux flags are accepted as I'm able to pass them (See reproduction of the issue).\r\n\r\n\r\n**Steps to reproduce the issue:**\r\n\r\nIf you have vagrant : \r\n1. create a `Vagrantfile` containing \r\n\r\n```\r\n# -*- mode: ruby -*-\r\n# vi: set ft=ruby :\r\n\r\nVagrant.configure(\"2\") do |config|\r\n  config.vm.box = \"fedora/25-cloud-base\"\r\n\r\n  config.vm.provision \"shell\", inline: <<-SHELL\r\n    set -eux\r\n\r\n    # prepare the system and install dependencies\r\n    dnf install -q -y docker\r\n    systemctl start docker\r\n    docker pull alpine:latest\r\n    \r\n    # Sanity check, to make sure unwanted argument do not pass\r\n    curl -s --unix-socket /var/run/docker.sock -H \"Content-Type: application/json\" \\\r\n    -d '{\"Image\": \"alpine\", \"Binds\": [\"/vagrant/Vagrantfile:/Vagrantfile:a\"]}' \\\r\n    -X POST http:/v1.24/containers/create\r\n\r\n    curl -s --unix-socket /var/run/docker.sock -H \"Content-Type: application/json\" \\\r\n    -d '{\"Image\": \"alpine\", \"Binds\": [\"/vagrant/Vagrantfile:/Vagrantfile:Z\"]}' \\\r\n    -X POST http:/v1.24/containers/create\r\n  SHELL\r\nend\r\n```\r\n2. run `vagrant up` in the same directory\r\n\r\nIf you don't use vagrant, make sure you have docker installed and run the two curl commands manually.\r\n\r\n**Describe the results you received:**\r\n\r\nThe first curl command failed which is normal, the api shouldn't accept invalid specifications, but the second succeeds, which is also normal as it is SELinux related. However, it is not specified in the documentation.\r\n\r\nI will work on a fix in the documentation as soon as possible. However, I have a question about it, should we add a link to the [documentation](https://docs.docker.com/engine/tutorials/dockervolumes/#volume-labels) for reference or should we just specify more examples ?\r\n\r\nThank you."},{"labels":["api",null],"text":"**Motivation:**\r\nCurrently an application that would like to integrate with Docker by calling it's APIs has to either rely on docker listening on the default socket or be (manually) configured with the socket in case it differs from the default. \r\n\r\nSuch an application can try detecting the socket by parsing a running Docker process command line parameters and might need to parse the Docker configuration file. However, this duplicates Docker's logic inside the application and it's very brittle. Inspecting Docker's open file descriptors (e.g. through /proc) is not optimal either as file descriptors other than the API socket/s are held open. \r\n\r\nExposing the API sockets may also facilitate Docker CLI such that it will be able to communicate with a Docker host that is not listening on the default socket (changes to Docker CLI will go into a separate issue).\r\n\r\n**Implementation:**\r\nThe idea is to publish the socket info into a file, say similar to publishing the Docker PID through the docker.pid file.\r\n"},{"labels":["api",null,null],"text":"**Description**\r\n\r\n`NetworkSettings.Networks[*].Aliases` content is shown with `docker inspect` but not with `moby/client.`\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create the following `docker-compose.yml`:\r\n```\r\nversion: '2'\r\n\r\nservices:\r\n  compcont:\r\n    image: friendlyhello\r\n    networks:\r\n      default:\r\n      builds:\r\n        aliases: [ \"mycompcont\" ]\r\n\r\nnetworks:\r\n  default:\r\n    external:\r\n      name: othernet\r\n  builds:\r\n    external:\r\n      name: mynet\r\n```\r\n2. Create both networks and bring compose up:\r\n```\r\n$ docker network create mynet\r\n$ docker network create othernet\r\n$ docker-compose up\r\n```\r\n3. Inspect the container:\r\n```\r\n$ docker inspect test_compcont_1\r\n...\r\n        \"NetworkSettings\": {\r\n...\r\n            \"Networks\": {\r\n                \"mynet\": {\r\n...\r\n                    \"Aliases\": [\r\n                        \"compcont\",\r\n                        \"b41fa65b66dc\",\r\n                        \"mycompcont\"\r\n                    ],\r\n...\r\n                    \"Gateway\": \"172.18.0.1\",\r\n                    \"IPAddress\": \"172.18.0.2\",\r\n                },\r\n                \"othernet\": {\r\n...\r\n                    \"Aliases\": [\r\n                        \"compcont\",\r\n                        \"b41fa65b66dc\"\r\n                    ],\r\n...\r\n                    \"Gateway\": \"172.19.0.1\",\r\n                    \"IPAddress\": \"172.19.0.2\",\r\n                }\r\n            }\r\n        }\r\n...\r\n```\r\n4. Write a simple app with the client library:\r\n```\r\npackage main\r\n\r\nimport (\r\n  \"context\"\r\n  \"fmt\"\r\n  \"github.com/docker/docker/api/types\"\r\n  \"github.com/docker/docker/client\"\r\n)\r\n\r\nfunc main() {\r\n  cli, err := client.NewEnvClient()\r\n  if err != nil { panic(err) }\r\n\t\r\n  conts, err := cli.ContainerList(context.Background(), types.ContainerListOptions{All:true})\r\n  if err != nil { panic(err) }\r\n\t\r\n  for _, cont := range conts {\r\n    fmt.Println(cont.Names)\r\n    for k, n := range cont.NetworkSettings.Networks {\r\n      fmt.Println(\"\\t\", k, \"\\t\", n.Gateway, \"\\t\", n.IPAddress, \"\\t\", n.Aliases)\r\n    }\r\n  }\r\n}\r\n```\r\n5. `go run main.go`\r\n\r\n**Describe the results you received:**\r\n\r\n```\r\n$ go run main.go\r\n[/test_compcont_1]\r\n         othernet   172.19.0.1  172.19.0.2   []\r\n         mynet       172.18.0.1  172.18.0.2  []\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\n```\r\n$ go run main.go\r\n[/test_compcont_1]\r\n         othernet   172.19.0.1  172.19.0.2   [\"compcont\", \"b41fa65b66dc\"]\r\n         mynet       172.18.0.1  172.18.0.2  [\"compcont\", \"b41fa65b66dc\", \"mycompcont\"]\r\n```\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nI cannot switch from `docker/docker/client` to `moby/moby/client`:\r\n\r\n```\r\n$ go get github.com/moby/moby/client\r\n# github.com/moby/moby/client\r\nC:\\Users\\eine\\go\\src\\github.com\\moby\\moby\\client\\service_create.go:38: cannot use distributionInspect.Descriptor.Digest (type \"github.com/docker/docker/vendor/github.com/opencontainers/go-digest\".Digest) as type \"github.com/moby/moby/vendor/github.com/opencontainers/go-digest\".Digest in argument to imageWithDigestString\r\nC:\\Users\\eine\\go\\src\\github.com\\moby\\moby\\client\\service_update.go:50: cannot use distributionInspect.Descriptor.Digest (type \"github.com/docker/docker/vendor/github.com/opencontainers/go-digest\".Digest) as type \"github.com/moby/moby/vendor/github.com/opencontainers/go-digest\".Digest in argument to imageWithDigestString\r\n```\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.03.1-ce\r\n API version:  1.27\r\n Go version:   go1.7.5\r\n Git commit:   c6d412e\r\n Built:        Tue Mar 28 00:40:02 2017\r\n OS/Arch:      windows/amd64\r\n\r\nServer:\r\n Version:      17.03.1-ce\r\n API version:  1.27 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   c6d412e\r\n Built:        Fri Mar 24 00:00:50 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 1\r\n Running: 1\r\n Paused: 0\r\n Stopped: 0\r\nImages: 22\r\nServer Version: 17.03.1-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host ipvlan macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 4ab9917febca54791c5f071a9d1f404867857fcc\r\nrunc version: 54296cf40ad8143b62dbcaa1d90e520a2136ddfe\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.9.27-moby\r\nOperating System: Alpine Linux v3.5\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 1.934 GiB\r\nName: moby\r\nID: LDKB:3CJT:OB3Q:KFV3:5VPW:P63T:KGBQ:CWKE:O2AU:5Q54:7N2Y:DJA7\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 26\r\n Goroutines: 51\r\n System Time: 2017-06-22T06:24:06.3841556Z\r\n EventsListeners: 1\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: true\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n"},{"labels":["api",null],"text":"As seen there: https://github.com/moby/moby/blob/df4ca50805baa1d1488d811e82125f607c8daa09/integration-cli/docker_api_swarm_service_test.go#L63,\r\nthere is an `insertDefaults` query parameter not stated in the docs."},{"labels":["api",null],"text":"Using Docker version 17.05.0-ce, build 89658be, I can see the new service spec UpdateConfig and RollbackConfig using `docker service inpspect`.\r\nHowever, despite what is stated in the API docs, those objects are not present in the json returned by the GET /v1.28/service/{id} endpoint.\r\n\r\nBelow are the different output for the same service:\r\n<details><summary>docker inspect output</summary>\r\n<pre>\r\nroot@hosta:/home/cghislai# docker inspect slwksjopffpyist8s6377ptis\r\n[\r\n    {\r\n        \"ID\": \"slwksjopffpyist8s6377ptis\",\r\n        \"Version\": {\r\n            \"Index\": 415670\r\n        },\r\n        \"CreatedAt\": \"2017-04-11T22:50:08.710756004Z\",\r\n        \"UpdatedAt\": \"2017-06-03T14:40:58.679541888Z\",\r\n        \"Spec\": {\r\n            \"Name\": \"proxy_apache2\",\r\n            \"Labels\": {\r\n                \"com.docker.stack.namespace\": \"proxy\"\r\n            },\r\n            \"TaskTemplate\": {\r\n                \"ContainerSpec\": {\r\n                    \"Image\": \"hosta:5000/valuya/proxy:swarm-merge-2@sha256:055b78822db9b3c119a0705e594d4d692583a46cbfd455b4d3d568feabf8015d\",\r\n                    \"Labels\": {\r\n                        \"com.docker.stack.namespace\": \"proxy\"\r\n                    },\r\n                    \"Mounts\": [\r\n                        {\r\n                            \"Type\": \"volume\",\r\n                            \"Source\": \"proxy_config\",\r\n                            \"Target\": \"/etc/apache2\",\r\n                            \"VolumeOptions\": {\r\n                                \"Labels\": {\r\n                                    \"com.docker.stack.namespace\": \"proxy\"\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            \"Type\": \"volume\",\r\n                            \"Source\": \"proxy_logs\",\r\n                            \"Target\": \"/var/log\",\r\n                            \"VolumeOptions\": {\r\n                                \"Labels\": {\r\n                                    \"com.docker.stack.namespace\": \"proxy\"\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            \"Type\": \"volume\",\r\n                            \"Source\": \"proxy_webroot\",\r\n                            \"Target\": \"/var/www/html\",\r\n                            \"VolumeOptions\": {\r\n                                \"Labels\": {\r\n                                    \"com.docker.stack.namespace\": \"proxy\"\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            \"Type\": \"volume\",\r\n                            \"Source\": \"letsencrypt-certificates\",\r\n                            \"Target\": \"/etc/letsencrypt\",\r\n                            \"VolumeOptions\": {}\r\n                        }\r\n                    ],\r\n                    \"StopGracePeriod\": 10000000000,\r\n                    \"DNSConfig\": {}\r\n                },\r\n                \"Resources\": {\r\n                    \"Limits\": {\r\n                        \"MemoryBytes\": 1073741824\r\n                    }\r\n                },\r\n                \"RestartPolicy\": {\r\n                    \"Condition\": \"on-failure\",\r\n                    \"Delay\": 5000000000,\r\n                    \"MaxAttempts\": 0\r\n                },\r\n                \"Placement\": {\r\n                    \"Constraints\": [\r\n                        \"node.labels.role.proxy == true\"\r\n                    ]\r\n                },\r\n                \"ForceUpdate\": 0\r\n            },\r\n            \"Mode\": {\r\n                \"Replicated\": {\r\n                    \"Replicas\": 1\r\n                }\r\n            },\r\n            \"UpdateConfig\": {\r\n                \"Parallelism\": 1,\r\n                \"FailureAction\": \"pause\",\r\n                \"Monitor\": 5000000000,\r\n                \"MaxFailureRatio\": 0,\r\n                \"Order\": \"stop-first\"\r\n            },\r\n            \"RollbackConfig\": {\r\n                \"Parallelism\": 1,\r\n                \"FailureAction\": \"pause\",\r\n                \"Monitor\": 5000000000,\r\n                \"MaxFailureRatio\": 0,\r\n                \"Order\": \"stop-first\"\r\n            },\r\n            \"Networks\": [\r\n                {\r\n                    \"Target\": \"jqij1df2j8ouj9vbxonssp5a3\",\r\n                    \"Aliases\": [\r\n                        \"apache2\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"EndpointSpec\": {\r\n                \"Mode\": \"vip\",\r\n                \"Ports\": [\r\n                    {\r\n                        \"Protocol\": \"tcp\",\r\n                        \"TargetPort\": 80,\r\n                        \"PublishedPort\": 80,\r\n                        \"PublishMode\": \"ingress\"\r\n                    },\r\n                    {\r\n                        \"Protocol\": \"tcp\",\r\n                        \"TargetPort\": 443,\r\n                        \"PublishedPort\": 443,\r\n                        \"PublishMode\": \"ingress\"\r\n                    },\r\n                    {\r\n                        \"Protocol\": \"tcp\",\r\n                        \"TargetPort\": 5000,\r\n                        \"PublishedPort\": 5000,\r\n                        \"PublishMode\": \"ingress\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        \"PreviousSpec\": {\r\n            \"Name\": \"proxy_apache2\",\r\n            \"Labels\": {\r\n                \"com.docker.stack.namespace\": \"proxy\"\r\n            },\r\n            \"TaskTemplate\": {\r\n                \"ContainerSpec\": {\r\n                    \"Image\": \"hosta:5000/valuya/proxy:swarm-merge-2@sha256:055b78822db9b3c119a0705e594d4d692583a46cbfd455b4d3d568feabf8015d\",\r\n                    \"Labels\": {\r\n                        \"com.docker.stack.namespace\": \"proxy\"\r\n                    },\r\n                    \"Mounts\": [\r\n                        {\r\n                            \"Type\": \"volume\",\r\n                            \"Source\": \"proxy_config\",\r\n                            \"Target\": \"/etc/apache2\",\r\n                            \"VolumeOptions\": {\r\n                                \"Labels\": {\r\n                                    \"com.docker.stack.namespace\": \"proxy\"\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            \"Type\": \"volume\",\r\n                            \"Source\": \"proxy_logs\",\r\n                            \"Target\": \"/var/log\",\r\n                            \"VolumeOptions\": {\r\n                                \"Labels\": {\r\n                                    \"com.docker.stack.namespace\": \"proxy\"\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            \"Type\": \"volume\",\r\n                            \"Source\": \"proxy_webroot\",\r\n                            \"Target\": \"/var/www/html\",\r\n                            \"VolumeOptions\": {\r\n                                \"Labels\": {\r\n                                    \"com.docker.stack.namespace\": \"proxy\"\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            \"Type\": \"volume\",\r\n                            \"Source\": \"letsencrypt-certificates\",\r\n                            \"Target\": \"/etc/letsencrypt\",\r\n                            \"VolumeOptions\": {}\r\n                        }\r\n                    ]\r\n                },\r\n                \"Resources\": {\r\n                    \"Limits\": {\r\n                        \"MemoryBytes\": 1073741824\r\n                    }\r\n                },\r\n                \"RestartPolicy\": {\r\n                    \"Condition\": \"on-failure\",\r\n                    \"MaxAttempts\": 0\r\n                },\r\n                \"Placement\": {\r\n                    \"Constraints\": [\r\n                        \"node.labels.role.proxy == true\"\r\n                    ]\r\n                },\r\n                \"ForceUpdate\": 0\r\n            },\r\n            \"Mode\": {\r\n                \"Replicated\": {\r\n                    \"Replicas\": 1\r\n                }\r\n            },\r\n            \"Networks\": [\r\n                {\r\n                    \"Target\": \"jqij1df2j8ouj9vbxonssp5a3\",\r\n                    \"Aliases\": [\r\n                        \"apache2\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"EndpointSpec\": {\r\n                \"Mode\": \"vip\",\r\n                \"Ports\": [\r\n                    {\r\n                        \"Protocol\": \"tcp\",\r\n                        \"TargetPort\": 80,\r\n                        \"PublishedPort\": 80,\r\n                        \"PublishMode\": \"ingress\"\r\n                    },\r\n                    {\r\n                        \"Protocol\": \"tcp\",\r\n                        \"TargetPort\": 443,\r\n                        \"PublishedPort\": 443,\r\n                        \"PublishMode\": \"ingress\"\r\n                    },\r\n                    {\r\n                        \"Protocol\": \"tcp\",\r\n                        \"TargetPort\": 5000,\r\n                        \"PublishedPort\": 5000,\r\n                        \"PublishMode\": \"ingress\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        \"Endpoint\": {\r\n            \"Spec\": {\r\n                \"Mode\": \"vip\",\r\n                \"Ports\": [\r\n                    {\r\n                        \"Protocol\": \"tcp\",\r\n                        \"TargetPort\": 80,\r\n                        \"PublishedPort\": 80,\r\n                        \"PublishMode\": \"ingress\"\r\n                    },\r\n                    {\r\n                        \"Protocol\": \"tcp\",\r\n                        \"TargetPort\": 443,\r\n                        \"PublishedPort\": 443,\r\n                        \"PublishMode\": \"ingress\"\r\n                    },\r\n                    {\r\n                        \"Protocol\": \"tcp\",\r\n                        \"TargetPort\": 5000,\r\n                        \"PublishedPort\": 5000,\r\n                        \"PublishMode\": \"ingress\"\r\n                    }\r\n                ]\r\n            },\r\n            \"Ports\": [\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"TargetPort\": 80,\r\n                    \"PublishedPort\": 80,\r\n                    \"PublishMode\": \"ingress\"\r\n                },\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"TargetPort\": 443,\r\n                    \"PublishedPort\": 443,\r\n                    \"PublishMode\": \"ingress\"\r\n                },\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"TargetPort\": 5000,\r\n                    \"PublishedPort\": 5000,\r\n                    \"PublishMode\": \"ingress\"\r\n                }\r\n            ],\r\n            \"VirtualIPs\": [\r\n                {\r\n                    \"NetworkID\": \"wyzjnl9m9atethbyevoiynxuj\",\r\n                    \"Addr\": \"10.255.0.4/16\"\r\n                },\r\n                {\r\n                    \"NetworkID\": \"jqij1df2j8ouj9vbxonssp5a3\",\r\n                    \"Addr\": \"10.0.0.2/24\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n]\r\n</pre>\r\n</details>\r\n\r\n<details><summary>API response body</summary>\r\n<pre>\r\nroot@hosta:/home/cghislai# curl -sG http://localhost:4242/v1.28/services/slwksjopffpyist8s6377ptis | python -m json.tool\r\n{\r\n    \"CreatedAt\": \"2017-04-11T22:50:08.710756004Z\",\r\n    \"Endpoint\": {\r\n        \"Ports\": [\r\n            {\r\n                \"Protocol\": \"tcp\",\r\n                \"PublishMode\": \"ingress\",\r\n                \"PublishedPort\": 80,\r\n                \"TargetPort\": 80\r\n            },\r\n            {\r\n                \"Protocol\": \"tcp\",\r\n                \"PublishMode\": \"ingress\",\r\n                \"PublishedPort\": 443,\r\n                \"TargetPort\": 443\r\n            },\r\n            {\r\n                \"Protocol\": \"tcp\",\r\n                \"PublishMode\": \"ingress\",\r\n                \"PublishedPort\": 5000,\r\n                \"TargetPort\": 5000\r\n            }\r\n        ],\r\n        \"Spec\": {\r\n            \"Mode\": \"vip\",\r\n            \"Ports\": [\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"PublishMode\": \"ingress\",\r\n                    \"PublishedPort\": 80,\r\n                    \"TargetPort\": 80\r\n                },\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"PublishMode\": \"ingress\",\r\n                    \"PublishedPort\": 443,\r\n                    \"TargetPort\": 443\r\n                },\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"PublishMode\": \"ingress\",\r\n                    \"PublishedPort\": 5000,\r\n                    \"TargetPort\": 5000\r\n                }\r\n            ]\r\n        },\r\n        \"VirtualIPs\": [\r\n            {\r\n                \"Addr\": \"10.255.0.4/16\",\r\n                \"NetworkID\": \"wyzjnl9m9atethbyevoiynxuj\"\r\n            },\r\n            {\r\n                \"Addr\": \"10.0.0.2/24\",\r\n                \"NetworkID\": \"jqij1df2j8ouj9vbxonssp5a3\"\r\n            }\r\n        ]\r\n    },\r\n    \"ID\": \"slwksjopffpyist8s6377ptis\",\r\n    \"PreviousSpec\": {\r\n        \"EndpointSpec\": {\r\n            \"Mode\": \"vip\",\r\n            \"Ports\": [\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"PublishMode\": \"ingress\",\r\n                    \"PublishedPort\": 80,\r\n                    \"TargetPort\": 80\r\n                },\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"PublishMode\": \"ingress\",\r\n                    \"PublishedPort\": 443,\r\n                    \"TargetPort\": 443\r\n                },\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"PublishMode\": \"ingress\",\r\n                    \"PublishedPort\": 5000,\r\n                    \"TargetPort\": 5000\r\n                }\r\n            ]\r\n        },\r\n        \"Labels\": {\r\n            \"com.docker.stack.namespace\": \"proxy\"\r\n        },\r\n        \"Mode\": {\r\n            \"Replicated\": {\r\n                \"Replicas\": 1\r\n            }\r\n        },\r\n        \"Name\": \"proxy_apache2\",\r\n        \"Networks\": [\r\n            {\r\n                \"Aliases\": [\r\n                    \"apache2\"\r\n                ],\r\n                \"Target\": \"jqij1df2j8ouj9vbxonssp5a3\"\r\n            }\r\n        ],\r\n        \"TaskTemplate\": {\r\n            \"ContainerSpec\": {\r\n                \"Image\": \"hosta:5000/valuya/proxy:swarm-merge-2@sha256:055b78822db9b3c119a0705e594d4d692583a46cbfd455b4d3d568feabf8015d\",\r\n                \"Labels\": {\r\n                    \"com.docker.stack.namespace\": \"proxy\"\r\n                },\r\n                \"Mounts\": [\r\n                    {\r\n                        \"Source\": \"proxy_config\",\r\n                        \"Target\": \"/etc/apache2\",\r\n                        \"Type\": \"volume\",\r\n                        \"VolumeOptions\": {\r\n                            \"Labels\": {\r\n                                \"com.docker.stack.namespace\": \"proxy\"\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Source\": \"proxy_logs\",\r\n                        \"Target\": \"/var/log\",\r\n                        \"Type\": \"volume\",\r\n                        \"VolumeOptions\": {\r\n                            \"Labels\": {\r\n                                \"com.docker.stack.namespace\": \"proxy\"\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Source\": \"proxy_webroot\",\r\n                        \"Target\": \"/var/www/html\",\r\n                        \"Type\": \"volume\",\r\n                        \"VolumeOptions\": {\r\n                            \"Labels\": {\r\n                                \"com.docker.stack.namespace\": \"proxy\"\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Source\": \"letsencrypt-certificates\",\r\n                        \"Target\": \"/etc/letsencrypt\",\r\n                        \"Type\": \"volume\",\r\n                        \"VolumeOptions\": {}\r\n                    }\r\n                ]\r\n            },\r\n            \"ForceUpdate\": 0,\r\n            \"Placement\": {\r\n                \"Constraints\": [\r\n                    \"node.labels.role.proxy == true\"\r\n                ]\r\n            },\r\n            \"Resources\": {\r\n                \"Limits\": {\r\n                    \"MemoryBytes\": 1073741824\r\n                }\r\n            },\r\n            \"RestartPolicy\": {\r\n                \"Condition\": \"on-failure\",\r\n                \"MaxAttempts\": 0\r\n            }\r\n        }\r\n    },\r\n    \"Spec\": {\r\n        \"EndpointSpec\": {\r\n            \"Mode\": \"vip\",\r\n            \"Ports\": [\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"PublishMode\": \"ingress\",\r\n                    \"PublishedPort\": 80,\r\n                    \"TargetPort\": 80\r\n                },\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"PublishMode\": \"ingress\",\r\n                    \"PublishedPort\": 443,\r\n                    \"TargetPort\": 443\r\n                },\r\n                {\r\n                    \"Protocol\": \"tcp\",\r\n                    \"PublishMode\": \"ingress\",\r\n                    \"PublishedPort\": 5000,\r\n                    \"TargetPort\": 5000\r\n                }\r\n            ]\r\n        },\r\n        \"Labels\": {\r\n            \"com.docker.stack.namespace\": \"proxy\"\r\n        },\r\n        \"Mode\": {\r\n            \"Replicated\": {\r\n                \"Replicas\": 1\r\n            }\r\n        },\r\n        \"Name\": \"proxy_apache2\",\r\n        \"Networks\": [\r\n            {\r\n                \"Aliases\": [\r\n                    \"apache2\"\r\n                ],\r\n                \"Target\": \"jqij1df2j8ouj9vbxonssp5a3\"\r\n            }\r\n        ],\r\n        \"TaskTemplate\": {\r\n            \"ContainerSpec\": {\r\n                \"Image\": \"hosta:5000/valuya/proxy:swarm-merge-2@sha256:055b78822db9b3c119a0705e594d4d692583a46cbfd455b4d3d568feabf8015d\",\r\n                \"Labels\": {\r\n                    \"com.docker.stack.namespace\": \"proxy\"\r\n                },\r\n                \"Mounts\": [\r\n                    {\r\n                        \"Source\": \"proxy_config\",\r\n                        \"Target\": \"/etc/apache2\",\r\n                        \"Type\": \"volume\",\r\n                        \"VolumeOptions\": {\r\n                            \"Labels\": {\r\n                                \"com.docker.stack.namespace\": \"proxy\"\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Source\": \"proxy_logs\",\r\n                        \"Target\": \"/var/log\",\r\n                        \"Type\": \"volume\",\r\n                        \"VolumeOptions\": {\r\n                            \"Labels\": {\r\n                                \"com.docker.stack.namespace\": \"proxy\"\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Source\": \"proxy_webroot\",\r\n                        \"Target\": \"/var/www/html\",\r\n                        \"Type\": \"volume\",\r\n                        \"VolumeOptions\": {\r\n                            \"Labels\": {\r\n                                \"com.docker.stack.namespace\": \"proxy\"\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        \"Source\": \"letsencrypt-certificates\",\r\n                        \"Target\": \"/etc/letsencrypt\",\r\n                        \"Type\": \"volume\",\r\n                        \"VolumeOptions\": {}\r\n                    }\r\n                ]\r\n            },\r\n            \"ForceUpdate\": 0,\r\n            \"Placement\": {\r\n                \"Constraints\": [\r\n                    \"node.labels.role.proxy == true\"\r\n                ]\r\n            },\r\n            \"Resources\": {\r\n                \"Limits\": {\r\n                    \"MemoryBytes\": 1073741824\r\n                }\r\n            },\r\n            \"RestartPolicy\": {\r\n                \"Condition\": \"on-failure\",\r\n                \"MaxAttempts\": 0\r\n            }\r\n        }\r\n    },\r\n    \"UpdatedAt\": \"2017-06-03T14:40:58.679541888Z\",\r\n    \"Version\": {\r\n        \"Index\": 415670\r\n    }\r\n}\r\n</pre>\r\n</details>"},{"labels":["api",null],"text":"Now that the websocket endpoint is returning binary frames, it should include an header to differentiate the different streams, similarly to what is done for the /attach endpoint when tty is disabled.\r\nAs frames are atomic and contain a whole log line, a single byte header would probably be sufficient (ie no need to get the frame length, it is already known)\r\n\r\nUnless Im missing something, there is currently no way to differentiate stderr from stdout."},{"labels":["api",null,null,null,null],"text":"**Description**\r\n\r\nMaking an API request to start a container with an empty JSON string in the body will return the following error:\r\n`{\"message\":\"starting container with non-empty request body was deprecated since v1.10 and removed in v1.12\"}`\r\n\r\nThis functionality worked in all previous versions of docker but is now broken in 17.06.0-rc1\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a container\r\n2. Send a request to start the container via the API and an empty JSON string `{}`\r\n3. Get the above error\r\n\r\n```\r\n$ docker create --name my-test alpine top\r\n$ curl -vvv --unix-socket /var/run/docker.sock -X POST -H 'Content-Type: application/json' -d '{}' http://1.29/containers/my-test/start\r\nNote: Unnecessary use of -X or --request, POST is already inferred.\r\n*   Trying /var/run/docker.sock...\r\n...\r\n> POST /containers/my-test/start HTTP/1.1\r\n> Host: 1.29\r\n> User-Agent: curl/7.51.0\r\n> Accept: */*\r\n> Content-Type: application/json\r\n> Content-Length: 2\r\n>\r\n* upload completely sent off: 2 out of 2 bytes\r\n< HTTP/1.1 400 Bad Request\r\n< Api-Version: 1.30\r\n< Content-Length: 109\r\n< Content-Type: application/json\r\n< Date: Fri, 02 Jun 2017 21:57:20 GMT\r\n< Docker-Experimental: true\r\n< Ostype: linux\r\n< Server: Docker/17.06.0-ce-rc1 (linux)\r\n<\r\n{\"message\":\"starting container with non-empty request body was deprecated since v1.10 and removed in v1.12\"}\r\n* Curl_http_done: called premature == 0\r\n* Connection #0 to host 1.29 left intact\r\n```\r\nTo make it work:\r\n```\r\n$ curl --unix-socket /var/run/docker.sock -X POST -H 'Content-Type: application/json' -d '' http://1.29/containers/my-test/start\r\n```\r\n\r\n**Describe the results you received:**\r\n`{\"message\":\"starting container with non-empty request body was deprecated since v1.10 and removed in v1.12\"}`\r\n\r\n**Describe the results you expected:**\r\nFor the container to start\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nhttps://github.com/moby/moby/blob/master/api/server/router/container/container_routes.go#L144\r\n\r\n\r\n\r\n**Output of `docker version`:**\r\n\r\n```                                                                                                                                          \r\nClient:\r\n Version:      17.06.0-ce-rc1\r\n API version:  1.30\r\n Go version:   go1.8.1\r\n Git commit:   7f8486a\r\n Built:        Wed May 31 02:56:01 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      17.06.0-ce-rc1\r\n API version:  1.30 (minimum version 1.12)\r\n Go version:   go1.8.1\r\n Git commit:   7f8486a\r\n Built:        Wed May 31 03:00:14 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nVersion 17.06.0-rc1-ce-mac13 (18169)\r\n"},{"labels":["api",null,null,null],"text":"While discussing https://github.com/moby/moby/issues/31115 with @aaronlehmann, it came to light that the service inspect API may not expose all properties of services. As a result, changes in service-specs may not be visible when doing `docker service inspect` (and thus hide _what_ changed in a service, causing the tasks to be re-deployed).\r\n\r\nOpening this issue for discussion / tracking\r\n\r\nAlso ping @aluzzardi - possibly for e2e testing"},{"labels":["api",null,null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\nWhen trying to authenticate through the API via cURL request, calling /auth returns `Status: Login Succeeded` and an empty `IdentityToken`.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Call this:\r\n```\r\ncurl --unix-socket /var/run/docker.sock -X POST http:/auth --data '{\"username\": \"my_username\", \"password\": \"my_secret_password\", \"serveraddress\": \"myserver.dockeraddress.com\"}'\r\n```\r\n\r\n**Describe the results you received:**\r\n`{\"IdentityToken\":\"\",\"Status\":\"Login Succeeded\"}`\r\n\r\n**Describe the results you expected:**\r\n`{\"IdentityToken\":\"someIdentityToken\",\"Status\":\"Login Succeeded\"}`\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nHappens every time. Can't get it working.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.05.0-ce\r\n API version:  1.29\r\n Go version:   go1.7.5\r\n Git commit:   89658be\r\n Built:        Thu May  4 22:10:54 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.05.0-ce\r\n API version:  1.29 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   89658be\r\n Built:        Thu May  4 22:10:54 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 3\r\n Running: 2\r\n Paused: 0\r\n Stopped: 1\r\nImages: 53\r\nServer Version: 17.05.0-ce\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 92\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins: \r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 9048e5e50717ea4497b757314bad98ea3763c145\r\nrunc version: 9c2d8d184e5da67c95d601382adf14862e4f2228\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.4.0-78-generic\r\nOperating System: Ubuntu 16.04.2 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 8\r\nTotal Memory: 7.609GiB\r\nName: hans\r\nID: AIQ4:OYGK:GH5C:TRQI:34ZC:DMGO:HTII:EDOY:F65B:RAVX:EHHB:OLW7\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nPhysical personal machine"},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\nThe current `swagger.yaml` file on the master branch, when rendered, causes some fields to not render, and the page then hangs.\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. `make swagger-docs`\r\n2. Go to `localhost:9000` in your browser\r\n3. Go to `/services/create`, click on `TaskTemplate`\r\n4. Try clicking anywhere else on the page\r\n\r\n**Describe the results you received:**\r\nThe page hangs\r\n\r\n**Describe the results you expected:**\r\nThe page shouldn't hang, and it should be possible to continue viewing fields."},{"labels":["api",null,null],"text":"**Description**\r\n\r\nDocker prune commands are not taking `reference` into account when filtering.  I have tested with the volume and image subcommands, there may be others.\r\n\r\n**Steps to reproduce the issue:**\r\n\r\n1. Run a prune command\r\n\r\n`docker pull alpine`\r\n`docker image prune --filter reference=alpine`\r\n`docker image ls`\r\n\r\n**Describe the results you received:**\r\n\r\nThe filter isn't picking up the reference specified.\r\n\r\n**Describe the results you expected:**\r\n\r\nExpect the prune command to remove only the alpine image, but it doesn't remove any.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nHere's the full output of the image prune command:\r\n\r\n```\r\ndocker image prune --filter reference=alpine\r\nWARNING! This will remove all dangling images.\r\nAre you sure you want to continue? [y/N] y\r\nTotal reclaimed space: 0B\r\n```\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\n docker version                                                                                                                                                                                      joshuareichardt@Joshuas-MacBook-Pro\r\nClient:\r\n Version:      17.05.0-ce-rc1\r\n API version:  1.29\r\n Go version:   go1.7.5\r\n Git commit:   2878a85\r\n Built:        Tue Apr 11 20:55:05 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      17.05.0-ce-rc1\r\n API version:  1.29 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   2878a85\r\n Built:        Tue Apr 11 20:55:05 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\ndocker info                                                                                                                                                                                         joshuareichardt@Joshuas-MacBook-Pro\r\nContainers: 0\r\n Running: 0\r\n Paused: 0\r\n Stopped: 0\r\nImages: 11\r\nServer Version: 17.05.0-ce-rc1\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host ipvlan macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 9048e5e50717ea4497b757314bad98ea3763c145\r\nrunc version: 9c2d8d184e5da67c95d601382adf14862e4f2228\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.9.21-moby\r\nOperating System: Alpine Linux v3.5\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 1.952GiB\r\nName: moby\r\nID: R663:ASEF:JLSY:ZWUY:D46M:3X47:K4SY:67GO:2QGQ:NML4:JKEW:XIJV\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 19\r\n Goroutines: 29\r\n System Time: 2017-05-10T17:14:49.298869229Z\r\n EventsListeners: 1\r\nNo Proxy: *.local, 169.254/16\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: true\r\nInsecure Registries:\r\n localhost:5000\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):** Docker for mac (17.05.0-ce-rc1-mac8)\r\n"},{"labels":["api",null,null,null],"text":"Some error messages returned by the daemon / API are referring to CLI flags not being valid, for example;\r\n\r\n- [runconfig/hostconfig_windows.go#L34](https://github.com/moby/moby/blob/4af3389d43d93f50d9b4fa217de148ec45abf8cb/runconfig/hostconfig_windows.go#L34)\r\n- [hostconfig_windows.go#L49](https://github.com/moby/moby/blob/4af3389d43d93f50d9b4fa217de148ec45abf8cb/runconfig/hostconfig_windows.go#L49)\r\n\r\nGiven that these are returned by the API, not the CLI, and we cannot assume that the _docker_ CLI is used as a client (it can be any (API) client), we should make these messages more generic and have them refer to the API-option that is not supported, not the CLI flag."},{"labels":["api",null],"text":"**Description**\r\n\r\nI'm in the process of interfacing with the Docker Engine API. I'm using the json-output of `/events`, and I noticed the exec-related events are a bit strange. I'm not sure I should call it a bug or a feature request, but I'm leaning towards the former.\r\n\r\nIn the docs at https://docs.docker.com/engine/api/v1.28/#operation/SystemEvents it states that it can report certain container events: `attach, ... exec_create, exec_detach, exec_start, ..., update`.\r\nThe example json response shows these values are being returned in the `Action`-field at the root of the json-object. \r\n\r\nFor the exec-related events, the value in that Action field is suffixed with the command being executed, which makes it harder to parse. For example, `docker exec [container] touch /tmp/foobar` will result in `{ ..., \"Action\":\"exec_create: touch /tmp/foobar\", ...}` and `{..., \"Action\":\"exec_start: touch /tmp/foobar\", ...}`. The `status`-field shows the same data.\r\n\r\n**Steps to reproduce the issue:**\r\n\r\nThis works with every image / exec-command, as far as I know:\r\n\r\n1. Run `docker run --name eventstuff -d phusion/baseimage`\r\n2. In a second terminal run `curl --no-buffer --unix-socket /var/run/docker.sock http:/v1.28/events`\r\n3. In the first terminal run `docker exec eventstuff touch /tmp/foobar`\r\n\r\n**Describe the results you received:**\r\n\r\n```\r\n{\"status\":\"exec_create: touch /tmp/foobar\",\"id\":\"[...]\",\"from\":\"phusion/baseimage\",\"Type\":\"container\",\"Action\":\"exec_create: touch /tmp/foobar\",\"Actor\":{\"ID\":\"[...]\",\"Attributes\":{\"image\":\"phusion/baseimage\",\"name\":\"eventstuff\"}},\"time\":1493976336,\"timeNano\":1493976336680190415}\r\n{\"status\":\"exec_start: touch /tmp/foobar\",\"id\":\"[...]\",\"from\":\"phusion/baseimage\",\"Type\":\"container\",\"Action\":\"exec_start: touch /tmp/foobar\",\"Actor\":{\"ID\":\"[...]\",\"Attributes\":{\"image\":\"phusion/baseimage\",\"name\":\"eventstuff\"}},\"time\":1493976336,\"timeNano\":1493976336680626546}\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\n```\r\n{\"status\":\"exec_create\",\"id\":\"[...]\",\"from\":\"phusion/baseimage\",\"Type\":\"container\",\"Action\":\"exec_create\",\"Actor\":{\"ID\":\"[...]\",\"Attributes\":{\"image\":\"phusion/baseimage\",\"name\":\"eventstuff\"}},\"time\":1493976336,\"timeNano\":1493976336680190415}\r\n{\"status\":\"exec_start\",\"id\":\"[...]\",\"from\":\"phusion/baseimage\",\"Type\":\"container\",\"Action\":\"exec_start\",\"Actor\":{\"ID\":\"[...]\",\"Attributes\":{\"image\":\"phusion/baseimage\",\"name\":\"eventstuff\"}},\"time\":1493976336,\"timeNano\":1493976336680626546}\r\n```\r\n\r\nThe main problem is that the suffixed command should not be in the `Action`-field. There are a few other remarks I have about the exec-events:\r\n\r\n- the exec events could have their own type, so they can return their instance-id (to be used with `GET /exec/[id]/json`) and the container-id.\r\n- the exec events could also include an event for when the exec-instance has died, so the full lifecycle is covered. Ideally, this event will also return the exit-code of the instance.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.04.0-ce\r\n API version:  1.28\r\n Go version:   go1.8\r\n Git commit:   4845c567eb\r\n Built:        Sat Apr  8 18:55:45 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.04.0-ce\r\n API version:  1.28 (minimum version 1.12)\r\n Go version:   go1.8\r\n Git commit:   4845c567eb\r\n Built:        Sat Apr  8 18:55:45 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 36\r\n Running: 28\r\n Paused: 0\r\n Stopped: 8\r\nImages: 17\r\nServer Version: 17.04.0-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins: \r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: \r\ncontainerd version: 422e31ce907fd9c3833a38d7b8fdd023e5a76e73\r\nrunc version: 9c2d8d184e5da67c95d601382adf14862e4f2228\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.10.13-1-ARCH\r\nOperating System: Arch Linux\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 8\r\nTotal Memory: 15.56GiB\r\nName: thebringeroflight\r\nID: M552:GIKC:2YPD:PVD2:GRRY:QFCA:6XPE:FXHB:6JYK:N4NN:BCBI:JWAL\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nProbably not relevant, but I'm running this on my development workstation, a physical machine.\r\n"},{"labels":["api",null],"text":"### Documentation Problem Description\r\n\r\nPer @gdevillele , the API reference topic [Delete unused volumes](https://docs.docker.com/engine/api/v1.28/#operation/VolumePrune) mentions a `filters` query parameter, but doesn’t mention any supported argument (because there isn’t any). This doesn’t make sense, we should not mention this “filters” parameter.\r\n\r\n### Where Found\r\n\r\n[Delete unused volumes](https://docs.docker.com/engine/api/v1.28/#operation/VolumePrune) in the API reference docs. \r\n\r\n### About the docs\r\n\r\nCurrently, the  API docs source lives here in the `moby/moby` codebase, not in the docs repository https://github.com/docker/docker.github.io. \r\n\r\n@thaJeztah need guidance on how we will deal with the relationship between `moby/moby` and the docs repository going forward. I don't have permissions to assign issues, but I suggest assigning to @mstanleyjones ?\r\n\r\n### Reviewers\r\n\r\n@gdevillele @johndmulhausen @thaJeztah \r\n\r\n"},{"labels":["api",null],"text":"A couple of metrics we have are not following Prometheus naming conventions.\r\n\r\nSince they're still experimental, we can fix those:\r\n```\r\n$ curl http://localhost:3000/metrics | promtool check-metrics\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100  155k  100  155k    0     0  9472k      0 --:--:-- --:--:-- --:--:-- 9692k\r\nengine_daemon_events_subscribers_total: non-counter metrics should not have \"_total\" suffix\r\nhttp_request_duration_microseconds: use base unit \"seconds\" instead of \"microseconds\"\r\n```\r\n\r\n/cc @crosbymichael  @juliusv @thaJeztah "},{"labels":["api",null,null,null],"text":"Hello,\r\n\r\ni have an error using this page (click into \"Labels\" menù):\r\n\r\nhttps://docs.docker.com/engine/api/v1.28/#operation/ServiceCreate\r\n\r\nJS Console stacktrace:\r\n\r\nError: Can't load component schema at /paths/~1services~1create/post/parameters/0/schema/properties/Labels\r\n    at d (redoc.1.11.0.min.js:43)\r\n    at e.init (redoc.1.11.0.min.js:17)\r\n    at e.t.preinit (redoc.1.11.0.min.js:9)\r\n    at e.preinit (redoc.1.11.0.min.js:9)\r\n    at e.ngOnInit (redoc.1.11.0.min.js:17)\r\n    at t.ngDoCheck (redoc.1.11.0.min.js:15)\r\n    at e.detectChangesInternal (redoc.1.11.0.min.js:15)\r\n    at e.t.detectChanges (redoc.1.11.0.min.js:7)\r\n    at t.detectChangesInNestedViews (redoc.1.11.0.min.js:7)\r\n    at e.detectChangesInternal (redoc.1.11.0.min.js:16)\r\n    at e.t.detectChanges (redoc.1.11.0.min.js:7)\r\n    at t.detectChangesInNestedViews (redoc.1.11.0.min.js:7)\r\n    at e.detectChangesInternal (redoc.1.11.0.min.js:16)\r\n    at e.t.detectChanges (redoc.1.11.0.min.js:7)\r\n    at t.detectChangesInNestedViews (redoc.1.11.0.min.js:7)"},{"labels":["api",null,null,null],"text":"The docker CLI is moving to it's own repository, `docker/cli` See https://github.com/moby/moby/pull/32694\r\n\r\nThe current plan is to leave the HTTP engine API in the moby repo. It will work for now because \"docker engine\" is still a monolith, but it will get problematic as soon as we start splitting it into components.\r\n\r\nWe need a plan moving forward. Suggestions welcome :D"},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\nThe http endpoint `GET /networks` always returns an empty containers list. If requesting a single network, with `GET /networks/<network>` the containers are shown. \r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. Run `curl --unix-socket /var/run/docker.sock http:/v1.28/networks`\r\n\r\n**Describe the results you received:**\r\nReturns the following output: https://gist.github.com/Grisu118/1a15ea9a2abb6b04f45eb911a2f1c7f7#file-networks-json\r\n\r\n**Describe the results you expected:**\r\nI expect the output contains a container list like the /networks/development request:\r\nhttps://gist.github.com/Grisu118/1a15ea9a2abb6b04f45eb911a2f1c7f7#file-networks_development-json\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nWorked in 13.x (don't know the exact version which was running before reboot)\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.04.0-ce\r\n API version:  1.28\r\n Go version:   go1.7.3\r\n Git commit:   4845c56\r\n Built:        Wed Apr 12 22:57:26 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.04.0-ce\r\n API version:  1.28 (minimum version 1.12)\r\n Go version:   go1.7.3\r\n Git commit:   4845c56\r\n Built:        Wed Apr 12 22:57:26 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 28\r\n Running: 25\r\n Paused: 0\r\n Stopped: 3\r\nImages: 37\r\nServer Version: 17.04.0-ce\r\nStorage Driver: overlay\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary:\r\ncontainerd version: 422e31ce907fd9c3833a38d7b8fdd023e5a76e73\r\nrunc version: 9c2d8d184e5da67c95d601382adf14862e4f2228\r\ninit version: N/A (expected: 949e6facb77383876aeff8a6944dde66b3089574)\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.10.9-coreos\r\nOperating System: Container Linux by CoreOS 1381.0.0 (Ladybug)\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 15.68GiB\r\nName: test01\r\nID: NDXW:B2RO:4U2N:CQRG:P7QK:DT53:DNTE:GH3A:N7IZ:2MSK:HHXC:MRTU\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n\r\nWARNING: bridge-nf-call-iptables is disabled\r\nWARNING: bridge-nf-call-ip6tables is disabled\r\n```\r\n"},{"labels":["api",null],"text":"Docker REST API 1.27 cannot be loaded with the SwaggerUI. It gives the error:\r\n\r\n```\r\n{\r\n\"messages\": [\r\n\"attribute definitions.RestartPolicy.default is not of type `string`\"\r\n]\r\n}\r\n```\r\n\r\nThe error can be seen at https://online.swagger.io/validator/debug?url=https://docs.docker.com/engine/api/v1.27/swagger.yaml.\r\n"},{"labels":["api"],"text":"Saw this in `UpdateStatus`:\r\n\r\n```\r\n        \"UpdateStatus\": {\r\n            \"State\": \"updating\",\r\n            \"StartedAt\": \"2017-04-14T17:10:03.226607162Z\",\r\n            \"CompletedAt\": \"1970-01-01T00:00:00Z\",\r\n            \"Message\": \"update in progress\"\r\n        }\r\n```\r\n\r\n#29041 was supposed to prevent this. It seems not to be working properly."},{"labels":["api",null,null],"text":"I've looked through tickets, code, google, but do not see any procedure for calling dockerd through the latest API and running a similar command as:\r\n```\r\ndocker stack deploy -c docker-compose-stack.yml foo\r\n```\r\n\r\nI'd like to be able to build my own service running in a container then call the hosts docker service (if appropriate) to deploy into swarm mode. I'd like to do this without something hacky like SSHing back into the host and running a shell. That would unnecessary require additional pem and account configuration on the host.\r\n\r\nIf you know a work around or a best practice, please advise. Else this should be added as a feature to the API."},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nLinks property always is null, even whether the container has links.\r\n\r\n**Steps to reproduce the issue:**\r\n1. `docker run --net=dore-network -d --name node1 busybox tail -f /dev/null`\r\n2. `docker run --net=dore-network --link node1 -d --name node2 busybox tail -f /dev/null`\r\n3. `docker inspect node2`\r\n4. `curl --unix-socket /var/run/docker.sock http:/v1.26/containers/json | grep Links`\r\n\r\n**Describe the results you received:**\r\n\r\ninspect command:\r\n\r\n```\r\n...\r\n\"Networks\": {\r\n  \"dore-network\": {\r\n    ....\r\n    \"Links\": [\r\n      \"node1\"\r\n    ],\r\n    ...\r\n    }\r\n  }\r\n....\r\n```\r\n\r\nwith cURL command:\r\n\r\n```\r\n[{\"Id\":\"a43c96d41cacad628b5a51860650aa123c25416e16c563790a8eb76001d1b86f\",\"Names\":[\"/node2\"],\"Image\":\"busybox\",\"ImageID\":\"sha256:00f017a8c2a6e1fe2ffd05c281f27d069d2a99323a8cd514dd35f228ba26d2ff\",\"Command\":\"tail -f /dev/null\",\"Created\":1491275358,\"Ports\":[],\"Labels\":{},\"State\":\"running\",\"Status\":\"Up About a minute\",\"HostConfig\":{\"NetworkMode\":\"dore-network\"},\"NetworkSettings\":{\"Networks\":{\"dore-network\":{\"IPAMConfig\":null,\"Links\":null,\"Aliases\":null,\"NetworkID\":\"0c312941cff131e01bc038a9e7d196a0faf77c03ed38c365715755dc3c61b2ae\",\"EndpointID\":\"62df24f75be4a2b47eba58802c76417dc4cc6bb0a8b07c5908e2269e6bc0aa8a\",\"Gateway\":\"172.18.0.1\",\"IPAddress\":\"172.18.0.3\",\"IPPrefixLen\":16,\"IPv6Gateway\":\"\",\"GlobalIPv6Address\":\"\",\"GlobalIPv6PrefixLen\":0,\"MacAddress\":\"02:42:ac:12:00:03\"}}},\"Mounts\":[]},{\"Id\":\"3640df7f388ee551cb00b8c9040cca240e89891b2f11235943567e533b1f013e\",\"Names\":[\"/node1\"],\"Image\":\"busybox\",\"ImageID\":\"sha256:00f017a8c2a6e1fe2ffd05c281f27d069d2a99323a8cd514dd35f228ba26d2ff\",\"Command\":\"tail -f /dev/null\",\"Created\":1491275350,\"Ports\":[],\"Labels\":{},\"State\":\"running\",\"Status\":\"Up About a minute\",\"HostConfig\":{\"NetworkMode\":\"dore-network\"},\"NetworkSettings\":{\"Networks\":{\"dore-network\":{\"IPAMConfig\":null,\"Links\":null,\"Aliases\":null,\"NetworkID\":\"0c312941cff131e01bc038a9e7d196a0faf77c03ed38c365715755dc3c61b2ae\",\"EndpointID\":\"164c2b50d545660089b0eacb98a90e7334ebdbeca7cc16ce4448d283e644b076\",\"Gateway\":\"172.18.0.1\",\"IPAddress\":\"172.18.0.2\",\"IPPrefixLen\":16,\"IPv6Gateway\":\"\",\"GlobalIPv6Address\":\"\",\"GlobalIPv6PrefixLen\":0,\"MacAddress\":\"02:42:ac:12:00:02\"}}},\"Mounts\":[]}]\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nInspect and Curl must be consistent. Curl response should have the Links information.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.13.1\r\n API version:  1.26\r\n Go version:   go1.7.5\r\n Git commit:   092cba3\r\n Built:        Wed Feb  8 06:50:14 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.13.1\r\n API version:  1.26 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   092cba3\r\n Built:        Wed Feb  8 06:50:14 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 2\r\n Running: 2\r\n Paused: 0\r\n Stopped: 0\r\nImages: 33\r\nServer Version: 1.13.1\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 171\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins: \r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1\r\nrunc version: 9df8b306d01f59d3a8029be411de015b7304dd8f\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.4.0-71-generic\r\nOperating System: Ubuntu 16.04.2 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 7.75 GiB\r\nName: my name\r\nID: Y4B7:ICGF:AXJG:HHJT:6LUD:W3IA:FUAY:TZNX:LYXF:U3V3:VI2R:5UF6\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No swap limit support\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n"},{"labels":["api",null,null,null,null],"text":"**Description**\r\n\r\nI foundt that SwarmKit in docker does not validate health check parameters in a service create request.\r\n\r\n**Steps to reproduce the issue:**\r\n1. use api to create a service, in the service spec, we add parameter of HealthCheck.\r\n2. in parameter, we add an invalid value, like `timeout -1s, retries -1`, valid timeout should be larger than 1s, and valid retires should be a positive integer.\r\n3. send the request to create this service\r\n\r\nrequest like the following pic:\r\n![wechatimg8](https://cloud.githubusercontent.com/assets/9465626/24639949/eb42ecb8-1925-11e7-8154-6f05a47ad069.jpeg)\r\n\r\n\r\n\r\n**Describe the results you received:**\r\nService created OK\r\n\r\n**Describe the results you expected:**\r\nparameter invalid\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nroot@ubuntu:~# docker version\r\nClient:\r\n Version:      17.03.0-ce\r\n API version:  1.26\r\n Go version:   go1.7.5\r\n Git commit:   60ccb22\r\n Built:        Thu Feb 23 10:57:47 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.03.0-ce\r\n API version:  1.26 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   60ccb22\r\n Built:        Thu Feb 23 10:57:47 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nroot@ubuntu:~# docker info\r\nContainers: 3\r\n Running: 3\r\n Paused: 0\r\n Stopped: 0\r\nImages: 116\r\nServer Version: 17.03.0-ce\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 148\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: active\r\n NodeID: vfb7vr7wp1dirmop8fbvmmgh7\r\n Is Manager: true\r\n ClusterID: mzzbi2s44h4vesargizzywryz\r\n Managers: 1\r\n Nodes: 2\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n Node Address: 192.168.59.103\r\n Manager Addresses:\r\n  192.168.59.103:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 977c511eda0925a723debdc94d09459af49d082a\r\nrunc version: a01dafd48bc1c7cc12bdb01206f9fea7dd6feb70\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\nKernel Version: 3.19.0-25-generic\r\nOperating System: Ubuntu 14.04.3 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 1\r\nTotal Memory: 1.954 GiB\r\nName: ubuntu\r\nID: FXOY:JCOY:HKDI:VO5U:FYDM:UEXV:YIFN:AISM:NR6U:VMW5:V4MZ:RQWF\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 52\r\n Goroutines: 154\r\n System Time: 2017-03-27T14:28:38.061668428+08:00\r\n EventsListeners: 3\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No swap limit support\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null,null,null],"text":"---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\n**Description**\r\nUsing the `--since` and `--tail` flags with the command line tool, or the `since` or `tail` parameters via the API, does not yield expected results.\r\n\r\n**Steps to reproduce the issue:**\r\nThe following is true for either the cli or the API, but I'll describe it for the cli to keep things simple:\r\n\r\n1. Run `docker service logs --tail 1 [SERVICE]` or `docker service logs [1491249483 || 1m10s etc.] [SERVICE]`\r\n\r\n**Describe the results you received:**\r\nMany lines returned, and in the case of failing services which are retrying every n seconds, this is _thousands_ of lines.\r\n\r\n**Describe the results you expected:**\r\nWith `--tail 1`, only 1 line returned. With `--since [TIMESTAMP]` only lines returned since that timestamp.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nIt seems that the extra lines are the result of grabbing logs from all service tasks, though I could be wrong.\r\n\r\nQuerying the individual containers created by the `docker service` command, the `--tail` and `--since` options work as expected.\r\n\r\n**Output of `docker version`:**\r\n\r\nOutput is from my Mac, but the same thing happens for the same version on Linux:\r\n```\r\nClient:\r\n Version:      17.03.1-ce\r\n API version:  1.27\r\n Go version:   go1.7.5\r\n Git commit:   c6d412e\r\n Built:        Tue Mar 28 00:40:02 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      17.03.1-ce\r\n API version:  1.27 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   c6d412e\r\n Built:        Fri Mar 24 00:00:50 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\nAgain this is from my Mac, but the tests were also performed on Linux with a proper swarm, with the same results:\r\n```\r\nContainers: 6                                                                                                                                                             [25/4682]\r\n Running: 1\r\n Paused: 0\r\n Stopped: 5\r\nImages: 350\r\nServer Version: 17.03.1-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins: \r\n Volume: local\r\n Network: bridge host ipvlan macvlan null overlay\r\nSwarm: active\r\n NodeID: mp9up3hu4ik275i4nl23hx1zv\r\n Is Manager: true\r\n ClusterID: flbky82mvb51ngvbmb3a0pvqn\r\n Managers: 1\r\n Nodes: 1\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n Node Address: 192.168.65.2\r\n Manager Addresses:\r\n  192.168.65.2:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 4ab9917febca54791c5f071a9d1f404867857fcc\r\nrunc version: 54296cf40ad8143b62dbcaa1d90e520a2136ddfe\r\ninit version: N/A (expected: 949e6facb77383876aeff8a6944dde66b3089574)\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.9.13-moby\r\nOperating System: Alpine Linux v3.5\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 1.952 GiB\r\nName: moby\r\nID: IJXO:PQVJ:Z5IQ:AV2T:PNJX:B5IK:L3FW:EOFM:TLUX:WM56:GTBA:GH4W\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 39\r\n Goroutines: 143\r\n System Time: 2017-04-03T19:46:12.33482745Z\r\n EventsListeners: 2\r\nNo Proxy: *.local, 169.254/16\r\nUsername: afrazkhan\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: true\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n"},{"labels":["api",null,null,null],"text":"**Description**\r\n\r\nWhen using the format string on `docker inspect`, `.Size` and `.VirtualSize` are an int64, except if you use `.Id` somewhere, in which case they become a float64.   This is specific to images, since container inspect does not have `Size` or `VirtualSize`. \r\n\r\n**Steps to reproduce the issue:**\r\n1. `docker inspect -f '{{printf \"%d\" .Size}} {{.Id}}' alpine`\r\n2. while this works: `docker inspect -f '{{printf \"%d\" .Size}}' alpine`\r\n\r\n**Describe the results you received:**\r\n```console\r\n$ docker inspect -f '{{.VirtualSize}}' alpine\r\n3983636\r\n$ docker inspect -f '{{.VirtualSize}} {{.Id}}' alpine\r\n3.983636e+06 sha256:651aa95985aa4a17a38ffcf71f598ec461924ca96865facc2c5782ef2d2be07f\r\n$ docker inspect -f '{{printf \"%d\" .VirtualSize}}' alpine\r\n3983636\r\n$ docker inspect -f '{{printf \"%d\" .VirtualSize}} {{.Id}}' alpine\r\n%!d(float64=3.983636e+06) sha256:651aa95985aa4a17a38ffcf71f598ec461924ca96865facc2c5782ef2d2be07f\r\n```\r\n\r\n**Describe the results you expected:**\r\n```console\r\n$ docker inspect -f '{{.VirtualSize}}' alpine\r\n3983636\r\n$ docker inspect -f '{{.VirtualSize}} {{.Id}}' alpine\r\n3983636 sha256:651aa95985aa4a17a38ffcf71f598ec461924ca96865facc2c5782ef2d2be07f\r\n$ docker inspect -f '{{printf \"%d\" .VirtualSize}}' alpine\r\n3983636\r\n$ docker inspect -f '{{printf \"%d\" .VirtualSize}} {{.Id}}' alpine\r\n3983636 sha256:651aa95985aa4a17a38ffcf71f598ec461924ca96865facc2c5782ef2d2be07f\r\n```\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nRan a test of all other keys when output with `.Size`. `.VirtualSize` behaves in the same way.\r\n```console\r\n$ for key in $(docker inspect -f '{{ range $k, $v := . }}{{ $k }}{{ \" \" }}{{ end }}' bash); do docker inspect -f '{{ printf \"Size: %d\" .Size }} '\"$key: \"'{{ .'\"$key\"' }}' bash; done\r\nSize: 12156318 Architecture: amd64\r\nSize: 12156318 Author: \r\nSize: 12156318 Comment: \r\nSize: 12156318 Config: {f78b191c4c87   false false false map[] false false false [PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin _BASH_GPG_KEY=7C0135FB088AAF6C66C650B9BB5869F064EA74AB _BASH_VERSION=4.4 _BASH_PATCH_LEVEL=0 _BASH_LATEST_PATCH=12] [bash] <nil> true sha256:d96e9ab22a9f45a482d1015781dfe702ef9a0497395506872f2d20981e6f53ac map[]  [docker-entrypoint.sh] false  [] map[]  <nil> []}\r\nSize: 12156318 Container: 81f48c4148367410a39fe784fa97ee1a7c23800f23da2c5fa17d8e53db2be560\r\nSize: 12156318 ContainerConfig: {f78b191c4c87   false false false map[] false false false [PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin _BASH_GPG_KEY=7C0135FB088AAF6C66C650B9BB5869F064EA74AB _BASH_VERSION=4.4 _BASH_PATCH_LEVEL=0 _BASH_LATEST_PATCH=12] [/bin/sh -c #(nop)  CMD [\"bash\"]] <nil> true sha256:d96e9ab22a9f45a482d1015781dfe702ef9a0497395506872f2d20981e6f53ac map[]  [docker-entrypoint.sh] false  [] map[]  <nil> []}\r\nSize: 12156318 Created: 2017-03-29T22:37:00.2132178Z\r\nSize: 12156318 DockerVersion: 1.13.1\r\nSize: 12156318 GraphDriver: {overlay map[RootDir:/mnt/spare/docker/overlay/1e17e7a5f76a4bc369a5b73a738d61559ff25f55726fee4d8b0192248da6b3be/root]}\r\nSize: %!d(float64=1.2156318e+07) Id: sha256:c60747d6e1cf2cd4e37d83bc015eb0d5d1be6f49b657c974bad9a6b42b6437b9\r\nSize: 12156318 Os: linux\r\nSize: 12156318 Parent: sha256:d96e9ab22a9f45a482d1015781dfe702ef9a0497395506872f2d20981e6f53ac\r\nSize: 12156318 RepoDigests: []\r\nSize: 12156318 RepoTags: [bash:4 bash:4.4 bash:4.4.12 bash:latest bashbrew/cache:d09e0f0d3ce02d3af7f8bd1148fe6f91f84a50016aa3243b484d799a4c1eb7d1]\r\nSize: 12156318 RootFS: {layers [sha256:9c833b2fdbc966e83b07fdee671b4112949cec9fc34ba84f4444e072de0604c7 sha256:2c03c42f290e3df0cf51b65aa06942024b2496c543d402068c63a0260b6c5ec8 sha256:12953c9fc8d81952ddc76dc592bca6b413d6075783856a94f9bc1e380d3ebbd1] }\r\nSize: 12156318 Size: 12156318\r\nSize: 12156318 VirtualSize: 12156318\r\n```\r\n**Output of `docker version`:**\r\n\r\n```console\r\n$ docker version\r\nClient:\r\n Version:      17.03.1-ce\r\n API version:  1.27\r\n Go version:   go1.8\r\n Git commit:   c6d412e\r\n Built:        Thu Mar 30 12:57:47 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.03.1-ce\r\n API version:  1.27 (minimum version 1.12)\r\n Go version:   go1.8\r\n Git commit:   c6d412e\r\n Built:        Thu Mar 30 12:57:47 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```console\r\n$ docker info\r\nContainers: 4\r\n Running: 4\r\n Paused: 0\r\n Stopped: 0\r\nImages: 9137\r\nServer Version: 17.03.1-ce\r\nStorage Driver: overlay\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins: \r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: v0.2.5 (expected: 4ab9917febca54791c5f071a9d1f404867857fcc)\r\nrunc version: c91b5be (expected: 54296cf40ad8143b62dbcaa1d90e520a2136ddfe)\r\ninit version: N/A (expected: 949e6facb77383876aeff8a6944dde66b3089574)\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.10.2-gentoo\r\nOperating System: Gentoo/Linux\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 8\r\nTotal Memory: 30.87 GiB\r\nName: isengard\r\nID: UOCM:3F65:5FZC:6H5L:W3HY:34G4:A5XZ:SUOV:S2D4:XQTO:4KGA:6XSE\r\nDocker Root Dir: /mnt/spare/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nNot that this should matter: physical box, Gentoo\r\n\r\n**Cute Animal:**\r\n![](http://wallpaper-gallery.net/images/cute-animal-desktop-wallpaper/cute-animal-desktop-wallpaper-27.jpg)"},{"labels":["api",null,null,null],"text":"Hello,\r\n\r\nI have a service with secret parameters and i cannot create it using docker swarm API\r\n\r\nCan you expose secret params into docker swarm API (POST /services/create)?\r\n\r\nThanks\r\n\r\n"},{"labels":["api",null],"text":"Basically https://github.com/docker/docker/blob/master/api/server/httputils/errors.go#L52 has gone on far too long.\r\n\r\nTo replace this, we've tried a couple of different approaches which were pretty disastrous:\r\n\r\n- errcode, which while there's nothing wrong with the errcode package, we used it horribly wrong and for the wrong reasons.\r\n- HTTP errors package - https://github.com/docker/docker/blob/master/api/errors/errors.go#L13\r\n\r\nerrcode was a neat concept but in practice was misused and made the entire codebase just became absolutely horrible to work on where as before the horribleness was contained to just the API layer.\r\n\r\nThis lead to the http errors package currently in use for certain cases. This also seems like an \"ok\" thing, but in practice is also not really used correctly and generally more of a shortcut to correct error handling. We end up with low-level bits worried about HTTP status codes.\r\n\r\nWe need to standardize on a way to handle errors in the API. This potentially needs to be regardless of how the request came in (HTTP, GRPC, or even a direct function call...e.g. cluster->daemon).\r\n\r\nThe goal of good error handling is that the caller knows, or at least knows how to find out, the class of error that occurred so that the error can be dealt with appropriately. This is true of function calls and it is true across the \"remote\" API barrier.\r\n\r\n### Goals\r\n\r\n- API backends (e.g. `daemon`) should ideally not be concerned with HTTP.\r\n- API clients should be able to read a returned error and be able to know *what* an error is.\r\n- Reduce the cognitive overhead in trying to determine how to return an error\r\ni. Example, what status code? (400, 409, 422, 412)\r\nii. How do I get the API to produce that status code I expect?\r\niii. How would non-remote API callers handle my error?\r\n- Ensure status codes don't change because of either a change to the error text, or hopefully even a change to the low-level error type.\r\n\r\nThe way I see it there are really two ways to deal with this (in no particular order):\r\n\r\n### Error class defined in common API package\r\n\r\nThis means in the API package we define several error classes like so (psuedo-code):\r\n\r\n```go\r\npackage api\r\n\r\ntype Error interface {\r\n    error\r\n    NotFound() bool\r\n    // other fn's for conflict, invalid arg, etc\r\n}\r\n\r\ntype apiError struct { \r\n    err error\r\n    notFound bool\r\n    conflict bool\r\n    invalidArg bool\r\n}\r\n\r\nfunc (e *apiError) Error() string { return e.err.Error() }\r\nfunc (e *apiError) NotFound() bool { return e.notFound }\r\n\r\nfunc NewNotFoundError(err error) Error {\r\n    return &apiError{err: err, notFound: true}\r\n}\r\n```\r\n\r\nFrom here the HTTP layer can determine both the error message and the class of error (not found) and the status code to return.\r\n\r\nThis approach is similar to the current approach we have except it's moving the http handling to the http layer and non-http code can just deal with this error type.\r\n\r\nAnother slight alternative but generally the same thing to this would be to use the well defined grpc error codes instead of defining our own. This could fit in well since part of the daemon is already using grpc anyway.\r\n\r\n### Define error handling interfaces on backends\r\n\r\nIn this method, backends would be required to define a set of functions for error handling:\r\n\r\nExample:\r\n\r\n```go\r\npackage api\r\n\r\ntype ErrorInspector interface {\r\n    IsNotFound(error) bool\r\n    IsConflict(error) bool\r\n    IsInvalidArgument(error) bool\r\n}\r\n```\r\n\r\n```go\r\npackage container // container router\r\n\r\nimport \"github.com/docker/docker/api\"\r\n\r\ntype ContainerBackend interface {\r\n    CreateContainer(...) error\r\n    DeleteContainer(...) error\r\n    api.ErrorInspector\r\n}\r\n\r\nfunc(r *containerRouter) getContainer(w http.ResponseWriter, req *http.Request) error {\r\n    err := r.backend.DeleteContainer(...)\r\n    if err != nil {\r\n        if r.backend.IsNotFound(err) {\r\n           // make an HTTP 404\r\n       }\r\n       // make an HTTP 500 probably\r\n    }\r\n\r\n    // normal\r\n}\r\n```\r\n\r\nWriting out the above it seems a little risky since it requires the router to know the failure-modes of the backend. Maybe could be cleaned up a bit.\r\n\r\n\r\nInterested in your thoughts, other alternatives, etc.\r\n\r\nping @docker/core-engine-maintainers "},{"labels":["api",null],"text":"**Description**\r\n\r\nI foundt that SwarmKit in docker does not validate hosts parameters in a service create request.\r\n\r\n**Steps to reproduce the issue:**\r\n1. use api to create a service, in the service spec, we add parameter of Hosts.\r\n2. in parameter, we add an invalid value, like `aaaa`, valid value should has a format of `name:ip`\r\n3. send the request to create this service\r\n\r\nrequest like the following pic:\r\n![wechatimg1](https://cloud.githubusercontent.com/assets/9465626/24343493/57225ae6-12f9-11e7-803e-6d6a9cada977.jpeg)\r\n\r\n\r\n**Describe the results you received:**\r\nService created OK\r\n\r\n**Describe the results you expected:**\r\nparameter invalid\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nroot@ubuntu:~# docker version\r\nClient:\r\n Version:      17.03.0-ce\r\n API version:  1.26\r\n Go version:   go1.7.5\r\n Git commit:   60ccb22\r\n Built:        Thu Feb 23 10:57:47 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      17.03.0-ce\r\n API version:  1.26 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   60ccb22\r\n Built:        Thu Feb 23 10:57:47 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nroot@ubuntu:~# docker info\r\nContainers: 3\r\n Running: 3\r\n Paused: 0\r\n Stopped: 0\r\nImages: 116\r\nServer Version: 17.03.0-ce\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 148\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: active\r\n NodeID: vfb7vr7wp1dirmop8fbvmmgh7\r\n Is Manager: true\r\n ClusterID: mzzbi2s44h4vesargizzywryz\r\n Managers: 1\r\n Nodes: 2\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n Node Address: 192.168.59.103\r\n Manager Addresses:\r\n  192.168.59.103:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 977c511eda0925a723debdc94d09459af49d082a\r\nrunc version: a01dafd48bc1c7cc12bdb01206f9fea7dd6feb70\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\nKernel Version: 3.19.0-25-generic\r\nOperating System: Ubuntu 14.04.3 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 1\r\nTotal Memory: 1.954 GiB\r\nName: ubuntu\r\nID: FXOY:JCOY:HKDI:VO5U:FYDM:UEXV:YIFN:AISM:NR6U:VMW5:V4MZ:RQWF\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 52\r\n Goroutines: 154\r\n System Time: 2017-03-27T14:28:38.061668428+08:00\r\n EventsListeners: 3\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No swap limit support\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api"],"text":"In the gRPC API, `NetworkAttachmentConfig.Target` is always a network ID. In the REST API, the client inserts network names in this field, and they are converted in the daemon before submitting the spec over gRPC.\r\n\r\nI thought this should be filed as an issue because differences between the two APIs are very confusing and lead to bugs. Ideally, we should not be mutating the spec inside the daemon, because that hacks around the declarative nature of the API. The client should be resolving the network IDs and inserting them in the spec."},{"labels":["api",null,null,null],"text":"**Description**\r\n\r\nThe `DiskUsage` call (which backs `docker system df`) can take an extremely long time to finish, since it walks through every container and volume's filesystem. In cases where you have lots of containers or volumes with lots of files, we've seen `DiskUsage` take minutes or even hours to complete, chewing up CPU and disk I/O the whole time. This isn't necessarily incorrect behavior, per se, but it is at least very surprising, especially since `ContainerStats` isn't expensive at all.\r\n\r\nI'm not sure how feasible it would be to improve the performance of `DiskUsage`, but if that's not possible, there should be more messaging around the costs of this API call.\r\n\r\nAlso, is there any way to get the size of an individual volume, or can you only get the size of every volume at once with `DiskUsage`?"},{"labels":["api",null,null],"text":"Debugging the daemon can be quite gruesome work.\r\nEven one of the simplest things like collecting a goroutine stack dump (most common request) is difficult to explain and even more difficult to collect.\r\n\r\nWe already have some API endpoints to aid in debugging but it's only available if debug mode is actually enabled.... forcing a daemon reload (also difficult to explain and perform) to enable it can even mess up the results.\r\n\r\nI propose:\r\n\r\n1. Enable debug endpoints (namely `/debug/pprof/*`) by default.\r\n2. Add a new CLI subcommand `docker debug` which includes a suite of subcommands for pulling the desired information\r\ni. `docker debug stack` -> generates a goroutine stack dump\r\nii. `docker debug profile <blah>` -> generates pprof formatted reports (whatever happens to be supported by the language runtime)\r\nii. `docker debug profile ls` -> List available profiles (this requires a call to the daemon, otherwise would include in `--help` output)\r\n\r\nThese commands either send output directly to stdout or optionally to an output file.\r\n\r\nPotentially also interesting is grabbing a trace or a cpu profile (explicitly not supported above), perhaps by adding a `--trace` or `--cpu-profile` to a `docker` command.... but this may be left as another exercise.\r\n\r\n**note**: not tied to the layout/naming of those commands\r\n\r\nAnything under `/debug` or `docker debug` should be considered non-formal API that is subject to change outside the scope of API versioning.\r\n\r\nIn the future these endpoints can be used to generate something like a support tarball via `docker debug support`."},{"labels":["api",null,null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nWhen I create a secret, then try to create a new secret with the same name, the HTTP error code I get back is wrong.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a secret (either through the command line or the REST API).\r\n```bash\r\n$ echo \"secrets\" | docker secret create my-secret -\r\n```\r\n2. Attempt to create another secret with the same name (this time using the REST API, so you can see the HTTP status you get back.)\r\n```bash\r\n$ curl -i --unix-socket /var/run/docker.sock -X POST -H 'content-type: application/json' -d '{\"Name\": \"my-secret\", \"Data\": \"c2VjcmV0cwo=\"}' http://localhost/secrets/create\r\n```\r\n\r\n**Describe the results you received:**\r\nHTTP 500\r\n```\r\nHTTP/1.1 500 Internal Server Error\r\nApi-Version: 1.26\r\nContent-Length: 73\r\nContent-Type: application/json\r\nDate: Fri, 17 Mar 2017 03:04:56 GMT\r\nDocker-Experimental: true\r\nServer: Docker/17.03.0-ce (linux)\r\n\r\n{\"message\":\"rpc error: code = 6 desc = secret my-secret already exists\"}\r\n```\r\n\r\n**Describe the results you expected:**\r\nHTTP 409 conflict, [as stated in the swagger spec](https://github.com/docker/docker/blob/master/api/swagger.yaml#L7982).\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.03.0-ce\r\n API version:  1.26\r\n Go version:   go1.7.5\r\n Git commit:   60ccb22\r\n Built:        Thu Feb 23 10:40:59 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      17.03.0-ce\r\n API version:  1.26 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   3a232c8\r\n Built:        Tue Feb 28 07:52:04 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 2\r\n Running: 0\r\n Paused: 0\r\n Stopped: 2\r\nImages: 20\r\nServer Version: 17.03.0-ce\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 34\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host ipvlan macvlan null overlay\r\nSwarm: active\r\n NodeID: 2n2g46cvu27nk0yuoowhe1t8b\r\n Is Manager: true\r\n ClusterID: 3j26e6low77hibavv55u87hvp\r\n Managers: 1\r\n Nodes: 1\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n Node Address: 192.168.65.2\r\n Manager Addresses:\r\n  192.168.65.2:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 977c511eda0925a723debdc94d09459af49d082a\r\nrunc version: a01dafd48bc1c7cc12bdb01206f9fea7dd6feb70\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.9.12-moby\r\nOperating System: Alpine Linux v3.5\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 1.952 GiB\r\nName: moby\r\nID: 3NXV:6OUU:O7VQ:BPBV:XDC2:ZPMT:IRSG:VJ3I:SL2H:ZWC2:ECT6:7X4R\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 33\r\n Goroutines: 131\r\n System Time: 2017-03-17T03:11:47.838534917Z\r\n EventsListeners: 1\r\nNo Proxy: *.local, 169.254/16\r\nUsername: xnat\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: true\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nI have seen this on Docker for Mac and Ubuntu 14.04, the latter using docker versions [1.13.1](https://travis-ci.org/spotify/docker-client/jobs/211952225#L3753) and [17.03.0-ce](https://travis-ci.org/spotify/docker-client/jobs/211952226#L3762)."},{"labels":["api",null,null,null],"text":"When we changed the Docker release versioning in #31075 there were a lot of complaints that we were not using semver http://semver.org/ for the release numbers, or that we had stopped using semver (which was not the case, we have never used it). The part of Docker that is most important for compatibility is the API not the release number, so I want to open a discussion about using semver for that. I have looked at the major points of the semver spec and discussed how they would apply to our release process.\r\n\r\nNote this proposal in no way changes the fact that the daemon supports multiple API versions simultaneously. We would continue to support the current 1.x versions as before. We would bump the API to 2.0.0 when Semver is introduced. In addition to all the pre-semver API versions we currently support, each new release will support older minor versions, at some patch version level.\r\n\r\nFor future backward compatibility, we would need to decide which patch versions we support. For example if the 17.06 release ships with 2.0.0 API, and then we find a bug and we release 17.06.1 with 2.0.1 after 17.07 has shipped with 2.1.0, in most cases we might not forward port the patch bump to the old API support, so 17.07 might just support the original 2.0.0. Alternatively, if the patch was something that also affected 17.07, we could patch bump it to 2.1.1 and patch bump its backport to 2.0.1 at the same time if this was convenient. In general clients SHOULD be written to support any server with the same major version, but if they need particular functionality they MAY require that the server also has a particular minor version. You cannot use the protocol negotiation to request a particular minor version.\r\n\r\nThis proposal only directly affects the Docker HTTP-JSON API, ie the API from the Docker socket. Other deprecations such as changes in the `Dockerfile` MUST also be included as sending a Dockerfile is part of the supported client communication with the daemon. The Prometheus endpoint is not currently included, but could be added later, or versioned seperately, when it leaves experimental.\r\n\r\nLooking at the key points from the semver spec:\r\n\r\n_Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior._\r\n\r\n- These changes would be introduced in major or minor releases as often as needed when bugs are fixed that affect the API.\r\n- Addition of a new field in JSON could be a bug fix if it can be safely ignored, such as the recent case with the stats API, if it is needed to fix a bug. Clients SHOULD ignore unknown fields. If they cannot they will be tied to specific patch releases.\r\n- Changes in http return codes would be a common reason for patch version changes, as now we have a schema for the API rather than just saying it is REST so we should increment if new return codes are introduced.\r\n- If we are currently supporting two releases with the same minor version, we should always increment their patch versions in lockstep by cherry picking the same fixes.\r\n- Once a version of Docker is released we MUST only make patch version changes to its API, not minor or major version changes, as new versions of a release are only bugfixes.\r\n- non semantic changes, such as JSON field ordering or encoding, or informational http headers do not require a patch release change.\r\n\r\n_Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards compatible functionality is introduced to the public API. It MUST be incremented if any public API functionality is marked as deprecated. It MAY be incremented if substantial new functionality or improvements are introduced within the private code. It MAY include patch level changes. Patch version MUST be reset to 0 when minor version is incremented._\r\n\r\n- We MAY increment this at the three monthly release for the \"substantial new functionality\" reason. This allows each long term support release to have its own API patch versions, rather than the current interleaving that we have, in case of bug fixes in the API of patch versions. We could increment it more often if needed, if for example a security release causes addition of a new backwards compatible change. We could instead increment the minor version in the monthly after the LTS release to get out of its way, if we have made API changes in the monthly.\r\n- Note the minor version is incremented when a deprecation is announced, so this will be marked in the API docs for that release, even though the functionality cannot be removed until the next major version increment.\r\n- Addition of new http endpoints and methods, and new JSON values are examples of fully compatible changes that do not need a major bump.\r\n\r\n_Major version X (X.y.z | X > 0) MUST be incremented if any backwards incompatible changes are introduced to the public API. It MAY include minor and patch level changes. Patch and minor version MUST be reset to 0 when major version is incremented._\r\n\r\n- This would happen when we deprecate functionality, or when functionality is changed in a backward incompatible way, such as changing the types of a field.\r\n- Previously we would deprecate functionality on a rolling basis, around nine months after the deprecation announcement. As this now involves a major version change, it would make sense to bunch these, as generally the number of inccompatible changes is small, and deprecation would be the main reason for bumps.\r\n- I suggest bunching deprecations at suitable intervals of no less than one year. When a deprecation is announced, rather than an exact date, we should announce a \"no earlier than date\" corresponding to the current deprecation period of around nine months, but to decide when to actually deprecate we should look at the urgency, if there are other reasons for a major bump such as incompatible changes, and decide when to increment based on the context.\r\n\r\ncc @docker/maintainers @friism @shykes "},{"labels":["api",null],"text":"(Note that the title is a joke, referring to [swagger.yaml line 818](https://github.com/docker/docker/blob/master/api/swagger.yaml#L818): `\"TODO check is correct\"`.)\r\n\r\nIn the swagger spec for inspecting a container (`operationId: \"ContainerInspect\"`), one of the object properties is `NetworkSettings`. For that value, the spec refers to the object definition at `#/definitions/NetworkConfig`. However, that definition is not complete.\r\n\r\nHere is the incomplete `NetworkConfig` swagger spec:\r\n```yaml\r\nNetworkConfig:\r\n  description: \"TODO: check is correct\"\r\n  type: \"object\"\r\n  properties:\r\n    Bridge:\r\n      type: \"string\"\r\n    Gateway:\r\n      type: \"string\"\r\n    Address:\r\n      type: \"string\"\r\n    IPPrefixLen:\r\n      type: \"integer\"\r\n    MacAddress:\r\n      type: \"string\"\r\n    PortMapping:\r\n      type: \"string\"\r\n    Ports:\r\n      type: \"array\"\r\n      items:\r\n        $ref: \"#/definitions/Port\"\r\n```\r\n\r\nThe spec for inspecting a container gives an example `NetworkSettings` with many more properties than are defined in the `NetworkConfig` spec that supposedly defines it:\r\n```yaml\r\nNetworkSettings:\r\n  Bridge: \"\"\r\n  SandboxID: \"\"\r\n  HairpinMode: false\r\n  LinkLocalIPv6Address: \"\"\r\n  LinkLocalIPv6PrefixLen: 0\r\n  SandboxKey: \"\"\r\n  SecondaryIPAddresses: null\r\n  SecondaryIPv6Addresses: null\r\n  EndpointID: \"\"\r\n  Gateway: \"\"\r\n  GlobalIPv6Address: \"\"\r\n  GlobalIPv6PrefixLen: 0\r\n  IPAddress: \"\"\r\n  IPPrefixLen: 0\r\n  IPv6Gateway: \"\"\r\n  MacAddress: \"\"\r\n  Networks:\r\n    bridge:\r\n      NetworkID: \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\"\r\n      EndpointID: \"7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d\"\r\n      Gateway: \"172.17.0.1\"\r\n      IPAddress: \"172.17.0.2\"\r\n      IPPrefixLen: 16\r\n      IPv6Gateway: \"\"\r\n      GlobalIPv6Address: \"\"\r\n      GlobalIPv6PrefixLen: 0\r\n      MacAddress: \"02:42:ac:12:00:02\"\r\n```\r\n\r\nThe properties in the example should be added to the `NetworkConfig` definition. This should be mostly straightforward, with a couple exceptions. The `Networks` property will follow the same spec from `ContainerSummary`:\r\n```yaml\r\nNetworks:\r\n  type: \"object\"\r\n  additionalProperties:\r\n    $ref: \"#/definitions/EndpointSettings\"\r\n```\r\n\r\nI'm not sure about the two `null` properties from the example: `SecondaryIPAddresses` and `SecondaryIPv6Addresses`. Are they lists of strings? Some object?"},{"labels":["api",null,null,null,null],"text":"The markdown API docs are missing any description for the `NetworkingConfig` object that is included in the config to create a container. This object is included in the example JSON that gets POSTed to `/containers/create` in the 1.22, 1.23, and 1.24 docs, but is not mentioned in the following \"JSON Parameters\" section. In particular, its child object `EndpointsConfig` is not fully defined.\r\n\r\nThis issue only affects the older markdown API docs. The objects mentioned above are defined in more detail in `api/swagger.yaml`. For the most part, the various places in the swagger description of the API that accept or produce information about networks refer to `#/definitions/EndpointSettings`.\r\n\r\n"},{"labels":["api",null,null,null],"text":"**Description**\r\nOur monitoring detected docker performance problems rising slowly - checked with `docker ps`, `docker info` and `docker run` calls. At the same time about 100 processes with \"D\" state were detected in the system. Increasing number of \"D\" processes eventually renders docker daemon unresponsive. This was confirmed on multiple occasions (at least 5 times).\r\n\r\n**Steps to reproduce the issue:**\r\n1. Make some processes running within container stuck in \"D\" (like on a read from failed remote file system)\r\n2. Observe docker API performance as the number of \"D\" processes increases.\r\n\r\n**Describe the results you received:**\r\nDocker API response time grow and eventually render the whole daemon unresponsive.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nIs repeatable, happens every time the number of \"D\" processes on the host rises.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.12.3-cs4\r\n API version:  1.24\r\n Go version:   go1.6.3\r\n Git commit:   65c6c4c\r\n Built:        Fri Nov 11 16:23:03 2016\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.12.3-cs4\r\n API version:  1.24\r\n Go version:   go1.6.3\r\n Git commit:   65c6c4c\r\n Built:        Fri Nov 11 16:23:03 2016\r\n OS/Arch:      linux/amd64\r\n\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 464\r\n Running: 363\r\n Paused: 0\r\n Stopped: 101\r\nImages: 761\r\nServer Version: 1.12.3-cs4\r\nStorage Driver: aufs\r\n Root Dir: /opt/io1/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 3837\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge null host overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: apparmor seccomp\r\nKernel Version: 4.4.0-62-generic\r\nOperating System: Ubuntu 16.04.2 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 128\r\nTotal Memory: 1.876 TiB\r\nName: ip-10-69-11-89\r\nID: UGZS:UFD3:GB4C:W5MX:JU2L:K7PH:6ZWS:4GPM:27Q5:UNNN:X3DC:YDT7\r\nDocker Root Dir: /opt/io1/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 2410\r\n Goroutines: 2766\r\n System Time: 2017-02-22T13:10:59.794584753Z\r\n EventsListeners: 1\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No swap limit support\r\nInsecure Registries:\r\n 127.0.0.0/8\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n* instance type: x1.32\r\n* host: docker-linux-1\r\n* OS: ubuntu 16.04 LTS\r\n* kernel version: `Linux ip-10-69-11-89 4.4.0-59-generic #80-Ubuntu SMP Fri Jan 6 17:47:47 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux`"},{"labels":["api",null,null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\nAfter a fresh installation of docker and pulling the container I cannot copy any file into the container\r\nI get the following:\r\n```\r\ndocker run -it microsoft/dotnet-framwork cmd\r\ndocker cp D:\\x\\1.txt <container_name>:c:\\1.txt\r\n\r\nError response from daemon: hcsshim::ActivateLayer failed in Win32: \r\nThe process cannot access the file because it is being used by another process. (0x20) id=d1ad2f812e3b7a37da79538611d7fb4496b0a89369b2ba430e08a28d73f1ab50 flavour=1\r\n```\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      17.03.0-ce\r\n API version:  1.26\r\n Go version:   go1.7.5\r\n Git commit:   60ccb22\r\n Built:        Thu Feb 23 10:40:59 2017\r\n OS/Arch:      windows/amd64\r\n\r\nServer:\r\n Version:      17.03.0-ce\r\n API version:  1.26 (minimum version 1.24)\r\n Go version:   go1.7.5\r\n Git commit:   60ccb22\r\n Built:        Thu Feb 23 10:40:59 2017\r\n OS/Arch:      windows/amd64\r\n Experimental: true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 5\r\n Running: 1\r\n Paused: 0\r\n Stopped: 4\r\nImages: 2\r\nServer Version: 17.03.0-ce\r\nStorage Driver: windowsfilter\r\n Windows:\r\nLogging Driver: json-file\r\nPlugins:\r\n Volume: local\r\n Network: l2bridge l2tunnel nat null overlay transparent\r\nSwarm: inactive\r\nDefault Isolation: hyperv\r\nKernel Version: 10.0 14393 (14393.206.amd64fre.rs1_release.160915-0644)\r\nOperating System: Windows 10 Pro\r\nOSType: windows\r\nArchitecture: x86_64\r\nCPUs: 8\r\nTotal Memory: 31.91 GiB\r\nName: wk-ofir\r\nID: PKF6:LKFA:ROVD:X2LP:I2NL:HJZF:NSGN:BLOM:JDBH:RXA7:F3HQ:B3TK\r\nDocker Root Dir: C:\\ProgramData\\Docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: -1\r\n Goroutines: 33\r\n System Time: 2017-03-07T15:19:34.6735797+02:00\r\n EventsListeners: 1\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: true\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n\r\n"},{"labels":["api",null,null,null],"text":"Currently, dockerd itself supports a \"single\" and \"static\" way to protect /run/docker.sock using a tlskey file. But it is not suitable for swarm.\r\n\r\nJust like swarm token has its expired time, tlskey should also have, especially when the key has been exposed to public.\r\n\r\n\"single\" means the key takes effect for only 1 node, thus, swarm cluster requires people to update key on each of active swarm nodes once the key is changed.\r\n\r\n\"static\" indicates we have to restart all daemons once the key is changed to apply for changes.\r\n\r\nTaking advantage of built-in etcd storage, Swarm node should record a key-value pair in it which enables a \"non-single\" way to solve the problem. For example, assume there are 5 swarm nodes, post a request to 1 node about to change the password, swarm stores the new password, and then all other swarm nodes will get the updated automatically. Besides, all swarm nodes needn't restart to apply for changes if we provide standard WWW-Auth like Basic-Auth.\r\n\r\n\r\n"},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\n<!--\r\ndocker volume inspect doesn't show connected containers.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. docker volume -d local local-100\r\n2. docker run -d -v local-100:/opt/ nginx:latest\r\n3. docker volume inspect local-100\r\n\r\n**Describe the results you received:**\r\nmissing attached containers.\r\n[\r\n    {\r\n        \"Driver\": \"local\",\r\n        \"Labels\": {},\r\n        \"Mountpoint\": \"/var/lib/docker/volumes/local-100/_data\",\r\n        \"Name\": \"local-100\",\r\n        \"Options\": {},\r\n        \"Scope\": \"local\"\r\n    }\r\n]\r\n\r\n**Describe the results you expected:**\r\n[\r\n    {\r\n        \"Driver\": \"local\",\r\n        \"Labels\": {},\r\n        \"Mountpoint\": \"/var/lib/docker/volumes/local-100/_data\",\r\n        \"Name\": \"local-100\",\r\n        \"Containers\": []\r\n        \"Options\": {},\r\n        \"Scope\": \"local\"\r\n    }\r\n]\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.13.1\r\n API version:  1.26\r\n Go version:   go1.7.5\r\n Git commit:   092cba3\r\n Built:        Wed Feb  8 06:42:29 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.13.1\r\n API version:  1.26 (minimum version 1.12)\r\n Go version:   go1.7.5\r\n Git commit:   092cba3\r\n Built:        Wed Feb  8 06:42:29 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 6\r\n Running: 5\r\n Paused: 0\r\n Stopped: 1\r\nImages: 62\r\nServer Version: 1.13.1\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 315\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1\r\nrunc version: 9df8b306d01f59d3a8029be411de015b7304dd8f\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\nKernel Version: 4.4.0-51-generic\r\nOperating System: Ubuntu 14.04.5 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 1\r\nTotal Memory: 1.945 GiB\r\nName: dchq-gak\r\nID: 2MMO:IKKV:QTKW:SS3E:E5MY:7IIV:PBAV:PWDE:BMV5:FMG5:PG44:AQ2S\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nUsername: hypergrid\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No swap limit support\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null,null],"text":"Working with the API and Swarm, inspecting a service or listing services on a swarm does not include the node that the service is currently running on.\r\n\r\nCould this be included in a future update? Or is there already a mechanism for that, besides just running through all nodes and listing containers?"},{"labels":["api",null,null,null],"text":"**Description**\r\n\r\nThe `ContainerStatPath` method in the client library returns different errors than the error reported by the API.\r\nThe first case is when running the method on a container ID that doesn't exist, the other one if the container ID does exist, but the path does not exist.\r\n\r\n**Steps to reproduce the issue:**\r\n_case 1_\r\n\r\nCompile and run the following program:\r\n\r\n```go\r\nfunc TestContainerStatPathIssue(t *testing.T) {\r\n\tcli, err := client.NewEnvClient()\r\n\tif err != nil {\r\n\t\tt.Fatal(err)\r\n\t}\r\n\t_, err = cli.ContainerStatPath(context.TODO(), \"foo\", \"bar\")\r\n\tif err != nil {\r\n\t\tt.Fatal(err)\r\n\t}\r\n}\r\n```\r\n\r\n_case 2_\r\nRun command `docker create --name=foo alpine:latest /bin/sh` and run the program from case 1 again.\r\n\r\n**Describe the results you received:**\r\nCase 1 returns:\r\n> Error: request returned Not Found for API route and version http://<ip>:4243/v1.24/containers/foo/archive?path=bar, check if the server supports the requested API version\r\n\r\nRunning `curl` on that URL returns:\r\n```json\r\n{\"message\":\"No such container: foo\"}\r\n```\r\n\r\nCase 2 returns:\r\n> Error: request returned Not Found for API route and version http://<ip>:4243/v1.24/containers/foo/archive?path=bar, check if the server supports the requested API version\r\n\r\nRunning `curl` on that URL returns:\r\n```json\r\n{\"message\":\"lstat /var/lib/docker/overlay/116c08d9b5aedea0fa868effeaa4562ed28cc8f8d2e06dcd1e557fca48815026/merged/bar: no such file or directory\"}\r\n```\r\n\r\n**Describe the results you expected:**\r\nIn both cases I expect an error that is more in line with the error returned from the API.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nThe docker version I'm running supports API version `1.25`, setting `DOCKER_API_VERSION=1.25` results in the same behavior as above.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.13.0\r\n API version:  1.25\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Tue Jan 17 09:55:28 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.13.0\r\n API version:  1.25 (minimum version 1.12)\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Tue Jan 17 09:55:28 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 3\r\n Running: 0\r\n Paused: 0\r\n Stopped: 3\r\nImages: 9\r\nServer Version: 1.13.0\r\nStorage Driver: overlay\r\n Backing Filesystem: xfs\r\n Supports d_type: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 03e5862ec0d8d3b3f750e19fca3ee367e13c090e\r\nrunc version: 2f7393a47307a16f8cee44a37b262e8b81021e3e\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\n  Profile: default\r\nKernel Version: 3.10.0-514.6.1.el7.x86_64\r\nOperating System: CentOS Linux 7 (Core)\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 1\r\nTotal Memory: 992.7 MiB\r\nName: localhost.localdomain\r\nID: MFQW:WT3K:SL5H:LVNK:NCRK:MMAV:YLUG:XCCG:LTO6:KXMN:2GBN:52TN\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nRunning on VirtualBox."},{"labels":["api",null,null],"text":"It appears some code was written with the assumption that API version 1.26 corresponds to Docker 1.14. When 1.13.1 was released, it took over that version number, and 1.14 is now supposed to be 1.27. We need to check the code and make sure 1.14-specific features and changes aren't gated on API version 1.26.\r\n\r\nGrepping, here are a few spots that may be affected:\r\n\r\n```\r\napi/server/router/container/container_routes.go:                // In case version is higher than 1.26,\r\n a binary frame will be sent.\r\napi/server/router/container/container_routes.go:                if versions.GreaterThanOrEqualTo(versio\r\nn, \"1.26\") {\r\n```\r\n\r\n```\r\napi/server/router/network/network_routes.go:            // Versions < 1.26 fetches all the containers a\r\nttached to a network\r\napi/server/router/network/network_routes.go:            // run across all the networks. Starting API ve\r\nrsion 1.26, this detailed\r\napi/server/router/network/network_routes.go:            if versions.LessThan(httputils.VersionFromConte\r\nxt(ctx), \"1.26\") {\r\n```\r\n\r\ncc @thaJeztah @vdemeester"},{"labels":["api",null,null],"text":"I'd like to print image name from my current running containers, while showing statistics. The issue si similar to https://github.com/docker/docker/issues/20973, but referring to image name:\r\n\r\ndocker stats --format \"table {{.Container}}\\t{{.Name}}\\t{{**.ImageName**}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.BlockIO}}\\t{{.NetIO}}\"\r\n\r\nRequest is: property .ImageName should be available to format shown statistics\r\n"},{"labels":["api"],"text":"#25820 added metrics to the engine (great).\r\n\r\nAt that point it was decided to expose metrics on an entirely different endpoint, controlled via `--metrics-addr` (an experimental flag).\r\n\r\nThis raises a few concerns regarding exposing an unprotected port. For some exposing a plain text port is fine, for others leaking container IDs etc is bad.\r\n\r\nThere are a few ways to get around that, one would be to use the TLS configuration but it feels pretty meh to me.\r\n\r\nWhat I'd suggest is to expose the `/metrics` endpoint on the regular Docker API. One can easily achieve the `--metrics-addr` behavior by running a container on the machine that listens to a port and exposes just the `/metrics` endpoint of the API (by querying the local daemon).\r\n\r\nOne could also chose to deploy this same service with an overlay network, thus not requiring to bind the external port.\r\n\r\nLong story short: I believe exposing metrics under the same API server leads to a more consistent exposure level (TLS, authentication, ...) while enabling the same use case as `--metrics-addr` and then some.\r\n\r\nThoughts?\r\n\r\n/cc @crosbymichael @stevvooe @dhiltgen @vieux @icecrime "},{"labels":["api"],"text":"In this issue, we are proposing a simple pagination system for the Docker remote API. The need for pagination of resource collection responses is growing as the Docker API expands from being a single-node API to a cluster-wide API where the number of objects in a collection may increase by many orders of magnitude depending on the size of the cluster.\r\n\r\nThe current List APIs include:\r\n\r\n- Containers\r\n- Images\r\n- Networks\r\n- Volumes\r\n- Secrets\r\n- Nodes\r\n- Services\r\n- Tasks\r\n- Plugins\r\n\r\nThe proposed method of pagination is mostly server-driven:\r\n\r\n- The set of resources to be listed should have a stable ordering. For most resources in Docker, this would either be the resource name or ID.\r\n- The server may decide on a default page size (number of records to return) if the client does not specify a `pageSize` query parameter. The server should also impose a max page size.\r\n- If there are additional pages of results available, the server should return a `X-Next-Page-Start` response header indicating the point in the stable ordering of resources where the next page begins. The absence of this header indicates that no additional pages are available.\r\n- If the client wishes to fetch the next page of results, it need only set a `pageStart` query parameter to the value in the returned `X-Next-Page-Start` header. This instructs the server to skip to the first value in the stable ordering of resources where the ordering key (either name or ID) is greater than or equal to the  `nextPageStart` value.\r\n\r\nConsiderations:\r\n\r\n- Any filtering parameters should not affect the ordering of results.\r\n- If multiple orderings of the result set are available, the API should use an `orderBy` query parameter to specify the desired ordering. Pagination of results is consistent as long as the desired ordering is also consistent between successive page requests.\r\n- If the client would like to know the size of the entire resource collection, the client should specify a `count=true` query parameter to indicate to the server that it should return the entire size of the resource set in the response. This MAY be done in either a `X-Resource-Count` response header or as a `resourceCount` field in the response payload itself (many of the existing Docker API endpoints return a JSON array and would use the response header). The server may also simply choose to always return the resource count regardless of whether the client specified a `count=true` query parameter. The returned resource collection count should *not* consider any filtering parameters in the request as doing so may be an expensive operation."},{"labels":["api",null,null,null],"text":"\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nWhen using docker-compose up with the yml file below, container will run in priviledged mode.\r\n\r\n```\r\nversion: \"2.1\"\r\n\r\nservices:\r\n  web:\r\n    build: .\r\n    command: nodemon -L --debug=5858\r\n\r\n    privileged: true\r\n    tty: true\r\n    ports:\r\n      - \"3000:3000\"\r\n      - \"5858:5858\"\r\nnetworks:\r\n  default:\r\n    external:\r\n      name: nat\r\n```\r\n\r\n\r\ndockerfile for base node image\r\n\r\n```\r\nFROM microsoft/windowsservercore\r\n\r\nENV NPM_CONFIG_LOGLEVEL info  \r\n\r\nRUN powershell -Command \"wget -Uri https://nodejs.org/dist/v6.9.5/node-v6.9.5-x64.msi -OutFile node.msi -UseBasicParsing\"\r\n\r\nRUN msiexec.exe /q /i node.msi\r\n\r\nCMD [ \"node\" ]  \r\n```\r\n\r\ndockerfile for hapi server with serialport\r\n\r\n```\r\nFROM node:695\r\n\r\nWORKDIR /app\r\n\r\nRUN npm install --silent --progress=false -g nodemon@1.10.2\r\n\r\nCOPY package.json /app/package.json\r\nRUN npm install \r\n\r\n\r\nCOPY . /app\r\n\r\nCMD [\"npm.cmd\", \"start\"]\r\n```\r\n\r\n\r\nSteps to reproduce the behavior\r\n\r\n1. docker build -t node . (the first dockerfile from above)\r\n2. docker tag node:latest node:695\r\n3. docker-compose build\r\n4. docker-compose up\r\n\r\n**Describe the results you received:**\r\n\r\n```\r\nWhen docker-compose up is run the initialization fails with the following error\r\n\r\nPS C:\\Users\\honeyws\\Documents\\ComApiNodeWindows> docker-compose up\r\nRemoving comapinodewindows_web_1\r\nRecreating f8442170a78f_comapinodewindows_web_1\r\n\r\nERROR: for web  Cannot start service web: container c1e3bd481a189a4f68566e4dd470af1ef385288ec7e831633e39363809358613 enc\r\nountered an error during CreateProcess: failure in a Windows system call: The system cannot find the file specified. (0x\r\n2) extra info: {\"ApplicationName\":\"\",\"CommandLine\":\"nodemon -L --debug=5858\",\"User\":\"\",\"WorkingDirectory\":\"C:\\\\app\",\"Env\r\nironment\":{\"NPM_CONFIG_LOGLEVEL\":\"info\"},\"EmulateConsole\":true,\"CreateStdInPipe\":true,\"CreateStdOutPipe\":true,\"CreateStd\r\nErrPipe\":false,\"ConsoleSize\":[0,0]}\r\nERROR: Encountered errors while bringing up the project.\r\nPS C:\\Users\\honeyws\\Documents\\ComApiNodeWindows>\r\n```\r\n\r\n**Describe the results you expected:**\r\n Container should start in priviledged mode\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nDiagnostic id:  ID 097756B2-58F4-436C-901D-FFC79D6EA8B6/2017-02-15_15-24-44\r\n\r\noriginally reported:\r\nhttps://github.com/docker/for-win/issues/501\r\n\r\n**Output of `docker version`:**\r\n```\r\nPS C:\\Users\\honeyws\\Documents\\ComApiNodeWindows> docker version\r\nClient:\r\n Version:      1.13.1\r\n API version:  1.26\r\n Go version:   go1.7.5\r\n Git commit:   092cba3\r\n Built:        Wed Feb  8 08:47:51 2017\r\n OS/Arch:      windows/amd64\r\n\r\nServer:\r\n Version:      1.13.1\r\n API version:  1.26 (minimum version 1.24)\r\n Go version:   go1.7.5\r\n Git commit:   092cba3\r\n Built:        Wed Feb  8 08:47:51 2017\r\n OS/Arch:      windows/amd64\r\n Experimental: true\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nWindows 10 pro\r\n"},{"labels":["api",null,null,null],"text":"**Description**\r\n\r\nRepeatedly calling `docker service update` may trigger an `update out of sequence` error. This seems to happen because the api call to service inspect (`GET /services/{id}`) returns an old `Version.Index` even after the successful return of previous a call to service update (`POST /services/{id}/update`).\r\n\r\n**Steps to reproduce the issue:**\r\n```\r\ndocker swarm init\r\ndocker service create --name test busybox tail -f /dev/null\r\nwhile docker service update test --constraint-add \"node.labels.a != b\"; do true; done\r\n```\r\n\r\n**Describe the results you received:**\r\n\r\nAfter some time repeatedly updating the service (~30s on my machine) the last command will fail with the error `Error response from daemon: rpc error: code = 2 desc = update out of sequence`.\r\n\r\n**Describe the results you expected:**\r\n\r\nI expected that successful calls to `POST /service/{id}/update` would guarantee that subsequent calls to `GET /service/{id}` returned an updated `Version.Index`. This seems not to be the case. I'm not sure if this behavior is intended or not, if this is working as expected I think a clarification in the API documentation would be nice.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\n$ docker version\r\nClient:\r\n Version:      1.13.1-rc1\r\n API version:  1.25\r\n Go version:   go1.7.4\r\n Git commit:   2527cfc\r\n Built:        Fri Jan 27 21:54:54 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.13.1-rc1\r\n API version:  1.25 (minimum version 1.12)\r\n Go version:   go1.7.4\r\n Git commit:   2527cfc\r\n Built:        Fri Jan 27 21:54:54 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\nThe problem also happens with `1.13.0` and `1.12.6`\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\n$ docker info\r\nContainers: 26\r\n Running: 4\r\n Paused: 0\r\n Stopped: 22\r\nImages: 264\r\nServer Version: 1.13.1-rc1\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 397\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: active\r\n NodeID: n2osx48m66gag48ggoyg1w1pc\r\n Is Manager: true\r\n ClusterID: 66490aoqoo9cdx00t5n95hw34\r\n Managers: 1\r\n Nodes: 1\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n Node Address: 192.168.50.4\r\n Manager Addresses:\r\n  192.168.50.4:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 03e5862ec0d8d3b3f750e19fca3ee367e13c090e\r\nrunc version: 2f7393a47307a16f8cee44a37b262e8b81021e3e\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.4.0-31-generic\r\nOperating System: Ubuntu 16.04.1 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 1\r\nTotal Memory: 2.915 GiB\r\nName: vagrant\r\nID: XXOL:4PPB:VZV3:W7ZD:QRDT:FY6D:L2WN:OI5T:3Z3I:HZS5:TI6Z:BXJN\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 58\r\n Goroutines: 153\r\n System Time: 2017-02-07T17:31:31.46294919Z\r\n EventsListeners: 1\r\nUsername: cezarsa\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No swap limit support\r\nExperimental: false\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nTested on Vagrant + Virtualbox and also on Ubuntu 14.04 on private Cloudstack."},{"labels":["api",null,null],"text":"**docker run --rm reports an error when attempting to remove container in version 1.13 with 1.24 API**\r\n\r\nThis appears to be a side effect of [PR #20848](https://github.com/docker/docker/pull/20848). When using a newer client and server, but reverting the API to something before 1.25, I'm seeing an error from a failed attempt to remove a container. This is generating nuisance errors with the classic swarm as seen in [issue #2620](https://github.com/docker/swarm/issues/2620).\r\n\r\n**Steps to reproduce the issue:**\r\n```\r\n$ # normal result\r\n$ docker run -it --rm busybox echo hello\r\nhello\r\n\r\n$ # error when using an older api version\r\n$ DOCKER_API_VERSION=1.24 docker run -it --rm busybox echo hello\r\nhello\r\nERRO[0002] error removing container: Error response from daemon: removal of container dc8b9e47ddfdea3c8d5c6abfd5b6fd4d703a5aa43fd5a712be3dcc8d730a163c is already in progress\r\n```\r\n\r\n**Describe the results you received:**\r\nThe container is removed by the docker daemon and then the docker client attempts to also remove the container, resulting in the error message.\r\n\r\n**Describe the results you expected:**\r\nWhen using an API before 1.25, the docker server should not perform the auto remove, it should instead be performed by the client. I'm not sure if this change needs to be made as part of the client request or the daemon processing of the request.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nI've reproduced this issue in multiple environments\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.13.0\r\n API version:  1.25\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Tue Jan 17 09:44:08 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.13.0\r\n API version:  1.25 (minimum version 1.12)\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Tue Jan 17 09:44:08 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 4\r\n Running: 3\r\n Paused: 0\r\n Stopped: 1\r\nImages: 233\r\nServer Version: 1.13.0\r\nStorage Driver: aufs\r\n Root Dir: /home/var-docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 578\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: active\r\n NodeID: w4dwja2i927qhe4tbuuirwhkg\r\n Is Manager: true\r\n ClusterID: am788rn0mc5vdqtqna79g237a\r\n Managers: 1\r\n Nodes: 1\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Number of Old Snapshots to Retain: 0\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n Node Address: 192.168.234.174\r\n Manager Addresses:\r\n  192.168.234.174:2377\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 03e5862ec0d8d3b3f750e19fca3ee367e13c090e\r\nrunc version: 2f7393a47307a16f8cee44a37b262e8b81021e3e\r\ninit version: 949e6fa\r\nKernel Version: 3.16.0-4-amd64\r\nOperating System: Debian GNU/Linux 8 (jessie)\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 5.75 GiB\r\nName: bmitch-asusr556l\r\nID: LTRH:V6W7:3UHO:4AV2:OSYM:6G4R:WKJR:2BRK:MGCO:Z4KJ:UPTF:LTRU\r\nDocker Root Dir: /home/var-docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nUsername: bmitch3020\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No kernel memory limit support\r\nWARNING: No cpu cfs quota support\r\nWARNING: No cpu cfs period support\r\nLabels:\r\n foo=bar\r\n env=laptop\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nSeen on physical and virtual machines, Debian and RHEL."},{"labels":["api",null],"text":"**Description**\r\n\r\nincorrect images/create API call returns response 200 OK and 2 json messages, one of them is error description\r\n\r\n**Steps to reproduce the issue:**\r\n`$ curl -v --unix-socket /var/run/docker.sock -X POST \"http:/v1.25/images/create?repo=acme.com%2Ftest&fromSrc=%2Fdata%2Ffile.tar\"`\r\nor\r\n```\r\nimport docker\r\nd = docker.from_env()\r\nprint(d.images.client.api.import_image(\"/data/file.tar\", \"acme.com/test\"))\r\n```\r\n\r\n**Describe the results you received:**\r\n```\r\n*   Trying /var/run/docker.sock...\r\n* Connected to http (/var/run/docker.sock) port 80 (#0)\r\n> POST /v1.25/images/create?repo=acme.com%2Ftest&fromSrc=%2Fdata%2Ffile.tar HTTP/1.1\r\n> Host: http\r\n> User-Agent: curl/7.47.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 200 OK\r\n< Api-Version: 1.25\r\n< Content-Type: application/json\r\n< Docker-Experimental: true\r\n< Server: Docker/1.13.0 (linux)\r\n< Date: Fri, 03 Feb 2017 15:03:38 GMT\r\n< Transfer-Encoding: chunked\r\n<\r\n{\"status\":\"Downloading from http://%2Fdata%2Ffile.tar\"}\r\n{\"errorDetail\":{\"message\":\"parse http://%2Fdata%2Ffile.tar: invalid URL escape \\\"%2F\\\"\"},\"error\":\"parse http://%2Fdata%2Ffile.tar: invalid URL escape \\\"%2F\\\"\"}\r\n* Connection #0 to host http left intact\r\n```\r\nor\r\n```\r\n{\"status\":\"Downloading from http://%2Fdata%2Ffile.tar\"}\r\n{\"errorDetail\":{\"message\":\"parse http://%2Fdata%2Ffile.tar: invalid URL escape \\\"%2F\\\"\"},\"error\":\"parse http://%2Fdata%2Ffile.tar: invalid URL escape \\\"%2F\\\"\"}\r\n```\r\n\r\n**Describe the results you expected:**\r\nI would expect non 200 response and single json message, so response could be parsed.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nI'm using python docker API which does not raise exception on this incorrect request, as response code is 200. Also python API returns response as text and could not parse response if I specify json response type as there are 2 messages in response.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.13.0\r\n API version:  1.25\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Tue Jan 17 09:58:26 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.13.0\r\n API version:  1.25 (minimum version 1.12)\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Tue Jan 17 09:58:26 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 19\r\n Running: 14\r\n Paused: 0\r\n Stopped: 5\r\nImages: 102\r\nServer Version: 1.13.0\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 110\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host ipvlan macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 03e5862ec0d8d3b3f750e19fca3ee367e13c090e\r\nrunc version: 2f7393a47307a16f8cee44a37b262e8b81021e3e\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.4.0-59-generic\r\nOperating System: Ubuntu 16.04.1 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 30\r\nTotal Memory: 31.42 GiB\r\nName: jbuild\r\nID: TNIU:DAHP:PAIG:EGPV:HVX4:E4P6:KENQ:TOAX:QDEP:A3VD:JSPL:JQME\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No swap limit support\r\nExperimental: true\r\nInsecure Registries:\r\n docker.acme.com\r\n registry-proxy.acme.com\r\n 127.0.0.0/8\r\nRegistry Mirrors:\r\n registry-proxy.acme.com\r\nLive Restore Enabled: true\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nDocker daemon running in Ubuntu 16.04 VM on ESXi 6 host. Client is docker python API 2.0.2 running on physical Windows 10 host."},{"labels":["api",null,null],"text":"I read the v1.25 document, but I can't find any related information.  I was wondering if \"docker stack deploy\" api was the on roadmap.  "},{"labels":["api",null,null],"text":"**Description**\r\ndocker build fails of content of file hosted on remote http server and golang is not able to detect content length.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Host file on github with content ```FROM codenvy/ubuntu_jdk8:latest```\r\n2. Run docker build ```curl -X POST --unix-socket /var/run/docker.sock http://v1.25/build?remote=https://raw.githubusercontent.com/mkuznyetsov/dockerfiles/master/Dockerfile```\r\n\r\n**Describe the results you received:**\r\nBuild fails\r\n\r\n```\r\n{\"stream\":\"Step 1 : FROM codenvy/ubuntu_jdk8:latest\\n\"}\r\n{\"stream\":\" ---\\u003e 4074bfc5705b\\n\"}\r\n{\"stream\":\"Step 2 : \\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000 \\n\"}\r\n{\"errorDetail\":{\"message\":\"Unknown instruction: \\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\"},\"error\":\"Unknown instruction: \\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\"}\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nBuild completed successful \r\n\r\n**Additional information you deem important :**\r\nIt happens because for some unknown to me reason golang can't see ContentLength \r\n\r\n```\r\ncurl -v https://raw.githubusercontent.com/mkuznyetsov/dockerfiles/master/Dockerfile\r\n*   Trying 151.101.192.133...\r\n* TCP_NODELAY set\r\n* Connected to raw.githubusercontent.com (151.101.192.133) port 443 (#0)\r\n* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\r\n* Server certificate: www.github.com\r\n* Server certificate: DigiCert SHA2 High Assurance Server CA\r\n* Server certificate: DigiCert High Assurance EV Root CA\r\n> GET /mkuznyetsov/dockerfiles/master/Dockerfile HTTP/1.1\r\n> Host: raw.githubusercontent.com\r\n> User-Agent: curl/7.51.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 200 OK\r\n< Content-Security-Policy: default-src 'none'; style-src 'unsafe-inline'\r\n< Strict-Transport-Security: max-age=31536000\r\n< X-Content-Type-Options: nosniff\r\n< X-Frame-Options: deny\r\n< X-XSS-Protection: 1; mode=block\r\n< ETag: \"7f1a7fe71285bcb07dd7103e1707a4ee82640e2e\"\r\n< Content-Type: text/plain; charset=utf-8\r\n< Cache-Control: max-age=300\r\n< X-Geo-Block-List:\r\n< X-GitHub-Request-Id: 0D88:11B40:3AD930:3CB1C8:588B1267\r\n< Content-Length: 32\r\n< Accept-Ranges: bytes\r\n< Date: Fri, 27 Jan 2017 09:29:09 GMT\r\n< Via: 1.1 varnish\r\n< Connection: keep-alive\r\n< X-Served-By: cache-ams4139-AMS\r\n< X-Cache: HIT\r\n< X-Cache-Hits: 1\r\n< X-Timer: S1485509349.879799,VS0,VE0\r\n< Vary: Authorization,Accept-Encoding\r\n< Access-Control-Allow-Origin: *\r\n< X-Fastly-Request-ID: fd7175b3069b69290632cc1eb14efa97a9a0a1e3\r\n< Expires: Fri, 27 Jan 2017 09:34:09 GMT\r\n< Source-Age: 126\r\n<\r\nFROM codenvy/ubuntu_jdk8:latest\r\n* Curl_http_done: called premature == 0\r\n* Connection #0 to host raw.githubusercontent.com left intact\r\n````\r\n\r\n\r\nMethod https://github.com/docker/docker/blob/master/builder/remote.go#L132 incorrectly behavies in case of  ContentLength = -1\r\n\r\nI assume that insted of \r\n```\r\n\tpreambleR := bytes.NewReader(preamble)\r\n```\t\r\n\r\nshould be \r\n```\r\n\tpreambleR := bytes.NewReader(preamble[:rlen])\r\n```\t\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Wed Jan 11 00:23:16 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Wed Jan 11 00:23:16 2017\r\n OS/Arch:      linux/amd64\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 32\r\n Running: 0\r\n Paused: 0\r\n Stopped: 32\r\nImages: 147\r\nServer Version: 1.12.6\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 431\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge null host overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: seccomp\r\nKernel Version: 4.4.41-moby\r\nOperating System: Alpine Linux v3.4\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 3\r\nTotal Memory: 3.854 GiB\r\nName: moby\r\nID: WK3O:EPUK:PUBI:P7CQ:X35H:FERW:QGNO:7G3N:7PIP:BHZL:7Y66:IAHX\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 20\r\n Goroutines: 33\r\n System Time: 2017-01-27T09:39:47.432783198Z\r\n EventsListeners: 1\r\nNo Proxy: *.local, 169.254/16\r\nUsername: ksmster\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No kernel memory limit support\r\nInsecure Registries:\r\n 127.0.0.0/8\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null,null,null],"text":"**Description**\r\nI am trying to invoke Docker Remote API using Elixirl as explained at:\r\nhttps://docs.docker.com/engine/reference/api/docker_remote_api/\r\n\r\nHere is the exact command used:\r\n\r\n```\r\n$ curl https://188.166.86.204:2376/_ping \\\r\n  --cert ~/docker_workspaces/certs/cert.pem \\\r\n  --key ~/docker_workspaces/certs/key.pem \\\r\n  --cacert ~/docker_workspaces/certs/ca.pem\r\n\r\nOK\r\n\r\niex>\r\noptions = [] \\\r\n  |> Keyword.merge([\r\n  hackney: [\r\n    ssl_options: [\r\n      certfile: \"~/docker_workspaces/certs/cert.pem\",\r\n      keyfile: \"~/docker_workspaces/certs/key.pem\",\r\n      cacertfile: \"~/docker_workspaces/certs/ca.pem\"\r\n    ]\r\n  ]\r\n])\r\nHTTPoison.request(:get, \"https://188.166.86.204:2376/_ping\", \"\", [], options)\r\n\r\n[error] SSL: :certify: tls_connection.erl:619:Fatal error: handshake failure - malformed_handshake\r\n{:error, %HTTPoison.Error{id: nil, reason: {:tls_alert, 'handshake failure'}}}\r\n```\r\nThis works fine when I connect to v1.12.5, but for some reason v1.13.0 is not working.\r\n\r\n\r\n**Relevant versions:**\r\n```\r\n$ curl -v\r\ncurl 7.52.1 (x86_64-apple-darwin16.1.0) libcurl/7.52.1 OpenSSL/1.0.2j zlib/1.2.8\r\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp \r\nFeatures: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets HTTPS-proxy \r\n```\r\n\r\n```\r\n$ erl --version\r\nErlang/OTP 19 [erts-8.2] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false] \r\n```\r\n\r\n```\r\n$ elixir --version\r\nErlang/OTP 19 [erts-8.2] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]\r\n\r\nElixir 1.4.0\r\n```\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a new docker machine using the cli\r\n2. curl the rest-api with the correct certs (should return ok)\r\n3. Use Hackey/HTTPoison and the same certs to query the rest api.\r\n\r\n**Output of `docker version`:**\r\nWorking:\r\n```\r\nroot@7396d938:~# docker version\r\nClient:\r\n Version:      1.12.5\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   7392c3b\r\n Built:        Fri Dec 16 02:42:17 2016\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.12.5\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   7392c3b\r\n Built:        Fri Dec 16 02:42:17 2016\r\n OS/Arch:      linux/amd64\r\n```\r\n\r\nNot working:\r\n```\r\nroot@6f3778bf:~# docker version\r\nClient:\r\n Version:      1.13.0\r\n API version:  1.25\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Tue Jan 17 09:58:26 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.13.0\r\n API version:  1.25 (minimum version 1.12)\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Tue Jan 17 09:58:26 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\nroot@6f3778bf:~#\r\n```\r\n"},{"labels":["api",null,null],"text":"The docs at https://docs.docker.com/engine/reference/commandline/version/ say to get the template fields for `docker version` output, use `docker version --format '{{json .}}'` which gives me:\r\n\r\n```\r\n{\"Client\":{\"Version\":\"1.13.0\",\"ApiVersion\":\"1.25\",\"GitCommit\":\"49bf474\",\"GoVersion\":\"go1.7.3\",\"Os\":\"darwin\",\"Arch\":\"amd64\",\"BuildTime\":\"Wed Jan 18 16:20:26 2017\"},\"Server\":{\"Version\":\"1.13.0\",\"ApiVersion\":\"1.25\",\"MinAPIVersion\":\"1.12\",\"GitCommit\":\"49bf474\",\"GoVersion\":\"go1.7.3\",\"Os\":\"linux\",\"Arch\":\"amd64\",\"KernelVersion\":\"4.9.5-moby\",\"Experimental\":true,\"BuildTime\":\"Wed Jan 18 16:20:26 2017\"}}\r\n```\r\n\r\nSo I try\r\n```\r\ndocker version --format '{{.Server.ApiVersion}}'\r\n\r\ntemplate: :1:9: executing \"\" at <.Server.ApiVersion>: can't evaluate field ApiVersion in type *types.Version\r\n```\r\n\r\nEventually I guess and try\r\n```\r\ndocker version --format '{{.Server.APIVersion}}'\r\n1.25\r\n```\r\n\r\nSo the output on the JSON list has a different casing, making it hard to work out what the Go names are. I blame Go's weird JSON handling, but I wonder if it can be fixed? Or maybe the docs just could add a note?\r\n\r\nActually the JSON has the same name\r\n```\r\ndocker version --format '{{json .Server.ApiVersion}}'\r\n\r\ntemplate: :1:14: executing \"\" at <.Server.ApiVersion>: can't evaluate field ApiVersion in type *types.Version\r\ndocker version --format '{{json .Server.APIVersion}}'\r\n\"1.25\"\r\n```\r\n\r\n```\r\nClient:\r\n Version:      1.13.0\r\n API version:  1.25\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Wed Jan 18 16:20:26 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      1.13.0\r\n API version:  1.25 (minimum version 1.12)\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Wed Jan 18 16:20:26 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\ncc @thaJeztah "},{"labels":["api",null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. Restart Docker\r\n\r\n**Describe the results you received:**\r\n\r\nDocker can't boot up after a restart. An error from journal:\r\n\r\n```\r\ndockerd[30701]: time=\"2017-01-22T08:38:55.077780858Z\" level=fatal msg=\"can't create unix socket /var/run/docker.sock: is a directory\"\r\n```\r\n\r\nAt this point `/var/run/docker.sock` is indeed, a directory. (wut?)\r\n\r\n```\r\n$ ls -lah /var/run/docker.sock\r\ntotal 0\r\ndrwxr-xr-x  2 root root   40 Jan 22 08:37 .\r\ndrwxr-xr-x 30 root root 1.2K Jan 22 08:38 ..\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nTo restart Docker without an error\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThis happened from time to time upon restart of `dockerd` daemon. After I removed this directory manually, Docker boots up easily creating a socket, but after several restarts, this issue came back.  \r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Wed Jan 11 00:23:16 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Wed Jan 11 00:23:16 2017\r\n OS/Arch:      linux/amd64\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 42\r\n Running: 20\r\n Paused: 0\r\n Stopped: 22\r\nImages: 14\r\nServer Version: 1.12.6\r\nStorage Driver: overlay\r\n Backing Filesystem: xfs\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: overlay bridge null host\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: apparmor seccomp\r\nKernel Version: 4.4.0-57-generic\r\nOperating System: Ubuntu 16.04.1 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 7.795 GiB\r\nName: <node-name>\r\nID: <id>\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No swap limit support\r\nInsecure Registries:\r\n 127.0.0.0/8\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nAWS EC2 instance"},{"labels":["api",null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nDocker stats doesn't output memory stats fail count\r\n\r\n**Steps to reproduce the issue:**\r\n\r\n```\r\ncurl -sSL --unix-socket /var/run/docker.sock http://localhost/containers/220353af852e/stats?stream=False|jq -r .memory_stats.failcnt\r\n```\r\n\r\n**Describe the results you received:**\r\n\r\nnull\r\n\r\n**Describe the results you expected:**\r\n\r\n0\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.13.0\r\n API version:  1.25\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Tue Jan 17 09:44:08 2017\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.13.0\r\n API version:  1.25 (minimum version 1.12)\r\n Go version:   go1.7.3\r\n Git commit:   49bf474\r\n Built:        Tue Jan 17 09:44:08 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 19\r\n Running: 17\r\n Paused: 0\r\n Stopped: 2\r\nImages: 1025\r\nServer Version: 1.13.0\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins: \r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 03e5862ec0d8d3b3f750e19fca3ee367e13c090e\r\nrunc version: 2f7393a47307a16f8cee44a37b262e8b81021e3e\r\ninit version: 949e6fa\r\nKernel Version: 4.9.0-1-amd64\r\nOperating System: Debian GNU/Linux 9 (stretch)\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 15.4 GiB\r\nName: debian\r\nID: D6YZ:RQ4R:GATU:BDEN:2BMU:YHSC:BUUD:VEI7:S252:OZ2J:4GTM:BDLQ\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: bridge-nf-call-iptables is disabled\r\nWARNING: bridge-nf-call-ip6tables is disabled\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\n\r\n"},{"labels":["api",null,null],"text":"**Description**\r\n\r\nSometimes he delete container API returns a 400. Retrying the same request after waiting for 2 seconds fixes the issue. The same code that was running for a month all of a sudden started having this error show up fairly frequently.\r\n\r\nHere is a log of the behavior from my client code.\r\n\r\n```\r\n2017-01-12T20:29:00.344289890+00:00 DEBUG volcano_agent - Removing container 491f5859c671db6d809a46c54631ef7b3ef207126b2a530ce361b534d905fa7c\r\n2017-01-12T20:29:00.344489346+00:00 DEBUG hyper::http::h1 - request line: Delete \"/containers/491f5859c671db6d809a46c54631ef7b3ef207126b2a530ce361b534d905fa7c?v=false\" Http11\r\n2017-01-12T20:29:00.344534623+00:00 DEBUG hyper::http::h1 - headers=Headers { Content-Length: 0, Host: ///var/run/docker.sock:0, }\r\n2017-01-12T20:29:00.344782407+00:00 DEBUG hyper::client::response - version=Http11, status=BadRequest\r\n2017-01-12T20:29:00.344804377+00:00 DEBUG hyper::client::response - headers=Headers { Content-Type: text/plain, Connection: close, }\r\n2017-01-12T20:29:00.344851455+00:00 DEBUG volcano_agent - remove container error 1\r\n2017-01-12T20:29:01.345225504+00:00 DEBUG hyper::http::h1 - request line: Delete \"/containers/491f5859c671db6d809a46c54631ef7b3ef207126b2a530ce361b534d905fa7c?v=false\" Http11\r\n2017-01-12T20:29:01.345325732+00:00 DEBUG hyper::http::h1 - headers=Headers { Content-Length: 0, Host: ///var/run/docker.sock:0, }\r\n2017-01-12T20:29:01.345600473+00:00 DEBUG hyper::client::response - version=Http11, status=BadRequest\r\n2017-01-12T20:29:01.345634780+00:00 DEBUG hyper::client::response - headers=Headers { Content-Type: text/plain, Connection: close, }\r\n2017-01-12T20:29:01.345682352+00:00 DEBUG volcano_agent - remove container error 2\r\n2017-01-12T20:29:02.346634708+00:00 DEBUG hyper::http::h1 - request line: Delete \"/containers/491f5859c671db6d809a46c54631ef7b3ef207126b2a530ce361b534d905fa7c?v=false\" Http11\r\n2017-01-12T20:29:02.346882532+00:00 DEBUG hyper::http::h1 - headers=Headers { Host: ///var/run/docker.sock:0, Content-Length: 0, }\r\n2017-01-12T20:29:02.357925431+00:00 DEBUG hyper::client::response - version=Http11, status=NoContent\r\n2017-01-12T20:29:02.358021182+00:00 DEBUG hyper::client::response - headers=Headers { Date: Thu, 12 Jan 2017 20:29:02 GMT, Server: Docker/1.12.3 (linux), Connection: close, }\r\n```\r\n\r\nI would show the docker log, but even though I turned on `--debug` and I could see detail on all other API requests, nothing showed up in the docker logs!\r\n\r\nI am just using the docker socket.\r\n\r\n\r\n**Describe the results you received:**\r\n\r\nThe delete container API returns a 400. Waiting for more than 1 second and retrying fixes the issue. \r\n\r\n**Describe the results you expected:**\r\n\r\nEither a 50x HTTP error code or a successful delete\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nDocker version 1.12.6, build 7392c3b/1.12.6\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 10\r\n Running: 6\r\n Paused: 0\r\n Stopped: 4\r\nImages: 6\r\nServer Version: 1.12.6\r\nStorage Driver: overlay\r\n Backing Filesystem: extfs\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: null host overlay bridge\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options:\r\nKernel Version: 4.4.41-35.53.amzn1.x86_64\r\nOperating System: Amazon Linux AMI 2016.09\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 32\r\nTotal Memory: 58.97 GiB\r\nName: ip-10-40-4-50\r\nID: XUZT:PPPI:W7PD:ENFJ:NKSX:M63C:F4DT:FRJG:MZOB:VUA4:IIEW:EVXR\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nInsecure Registries:\r\n 127.0.0.0/8\r\n```\r\n\r\nAbove information is a production system on AWS. I have also re-produced this behavior on my Local LInux computer, information below:\r\n\r\n```\r\nDocker version 1.12.3, build 6b644ec\r\n```\r\n\r\n```\r\nContainers: 4\r\n Running: 2\r\n Paused: 0\r\n Stopped: 2\r\nImages: 397\r\nServer Version: 1.12.3\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 594\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge null overlay host\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: apparmor seccomp\r\nKernel Version: 4.4.0-57-generic\r\nOperating System: Ubuntu 16.04.1 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 8\r\nTotal Memory: 15.6 GiB\r\nName: greg-Galago-UltraPro\r\nID: 3IGP:EOTD:QI7P:YIK5:RFY7:UE7S:HNEC:7ZVB:5ITE:AFWR:PETC:P3RG\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 24\r\n Goroutines: 38\r\n System Time: 2017-01-13T21:16:20.300684426-08:00\r\n EventsListeners: 1\r\nUsername: gregweber\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No swap limit support\r\nInsecure Registries:\r\n 127.0.0.0/8\r\n```"},{"labels":["api"],"text":"Hello, in preparation for Go1.8, I detected this misuse of the `http.Hijacker` API.\r\n\r\nThe following uses of `Hijack`:\r\n* [api/server/router/container/container_routes.go](https://github.com/docker/docker/blob/a6be56b54e871c4e7a6e72881770a64676c27c3c/api/server/router/container/container_routes.go#L440)\r\n* [api/server/httputils/httputils.go](https://github.com/docker/docker/blob/64981b9f095459ae65954ca80a86c8f4a735ef24/api/server/httputils/httputils.go#L24)\r\n\r\nmake calls to `Hijack`, but ignores the returned `bufio.ReadWriter` and proceeds to directly use the connection. In Go1.8, the probability that data is buffered in the `bufio.Reader` is increased, such that there is a higher change that this logic fails. The proper fix is probably to handle the data in the read buffer (accessed via `brw.Reader.Peek(brw.Reader.Buffered())`) and create a wrapped `net.Conn` that reads the buffered data before calling `net.Conn.Read`.\r\n\r\n```go\r\ntype rbufConn struct {\r\n\tnet.Conn\r\n\trbuf []byte\r\n}\r\n\r\nfunc (c *rbufConn) Read(p []byte) (int, error) {\r\n\tif len(c.rbuf) > 0 {\r\n\t\tn := copy(p, c.rbuf)\r\n\t\tc.rbuf = c.rbuf[n:]\r\n\t\treturn n, nil\r\n\t}\r\n\treturn c.Conn.Read(p)\r\n}\r\n\r\nfunc (c *rbufConn) Close() error {\r\n\tc.rbuf = nil\r\n\treturn c.Conn.Close()\r\n}\r\n```"},{"labels":["api",null],"text":"I'm using Docker v1.3, I want to pass secret on `POST /services/create` remote API.\r\n\r\nIn docker command line, it will be equal to `docker service create --secret login-password  ubuntu`.\r\n\r\nHowever [documentation on the website](https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/) is only showing for v1.2. \r\n\r\nSo how to pass secret on  `POST /services/create` remote API?"},{"labels":["api",null,null],"text":"---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\n\r\n**Description**\r\n\r\nSendging a GET to the endpoint `/containers/[CONTAINER_ID OR NAME]/stats` never gets a response (hangs).\r\n\r\n**Steps to reproduce the issue:**\r\nSend a call like `GET /containers/[CONTAINER_NAME or ID]/stats`\r\n\r\nAlso tested with the raw socket:\r\n```\r\ncurl --unix-socket /var/run/docker.sock http://localhost/containers/[CONTAINER_ID]/stats\r\n```\r\n\r\n**Describe the results you received:**\r\nDocker daemon logs show:\r\n```\r\nlevel=debug msg=\"Calling GET /containers/f32f765cf23c1e56900460807f7c482aa988d37648e28d50875151322df6885f/stats\"\r\n```\r\nSo the request is received, but never gets a response.\r\n\r\n**Describe the results you expected:**\r\nhttps://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/#/get-container-stats-based-on-resource-usage\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Wed Jan 11 00:23:16 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      1.12.6\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   78d1802\r\n Built:        Wed Jan 11 00:23:16 2017\r\n OS/Arch:      linux/amd64\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 15\r\n Running: 3\r\n Paused: 0\r\n Stopped: 12\r\nImages: 162\r\nServer Version: 1.12.6\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 420\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host null overlay\r\nSwarm: active\r\n NodeID: 4oh2xqqiexi4rk8julf5o9rj6\r\n Is Manager: true\r\n ClusterID: a6h0antslmorusyo7dx1z3fph\r\n Managers: 1\r\n Nodes: 1\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n Node Address: 192.168.65.2\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: seccomp\r\nKernel Version: 4.4.41-moby\r\nOperating System: Alpine Linux v3.4\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 1.951 GiB\r\nName: moby\r\nID: 4TDG:QGRX:JGMX:TP4V:KZQ4:W2A4:DY4X:SYQY:E7PK:KNTI:WS77:IAYI\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 66\r\n Goroutines: 176\r\n System Time: 2017-01-13T10:50:53.415533429Z\r\n EventsListeners: 4\r\nNo Proxy: *.local, 169.254/16\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No kernel memory limit support\r\nInsecure Registries:\r\n 0.0.0.0:5000\r\n 127.0.0.0/8\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nTested on Mac only."},{"labels":["api",null],"text":"https://github.com/docker/docker/blob/313502488e8809910127891d8923672baf43a742/api/types/plugin.go#L31 has the `Tag` separated out. We have been slowly undoing this separation to avoid having to parse image references on the client-side.\r\n\r\nHaving a separate field here is a _massive_ step back. We'll need to deprecate this field."},{"labels":["api",null,null],"text":"When the server is running Docker 1.13.0-rc5, when the client runs `docker images` the sizes will be reported as -1\r\n\r\n```\r\n$ docker version\r\nClient:\r\n Version:      1.11.1\r\n API version:  1.23\r\n Go version:   go1.5.4\r\n Git commit:   5604cbe\r\n Built:        Wed Apr 27 00:34:20 2016\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      1.13.0-rc5\r\n API version:  1.25\r\n Go version:   go1.7.3\r\n Git commit:   43cc971\r\n Built:        Thu Jan  5 03:07:30 2017\r\n OS/Arch:      linux/amd64\r\n```\r\n\r\n```\r\n$ docker images\r\nREPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE\r\nkatacoda/docker-http-server       large               1e023cfd8ba8        18 hours ago        -1 B\r\nkatacoda/docker-http-server       latest              c6dfc1d5003f        18 hours ago        -1 B\r\nkatacoda/docker-http-server       v1                  c6dfc1d5003f        18 hours ago        -1 B\r\n```\r\n\r\nUpgrading the client to Docker 1.13 fixes the issue.\r\n\r\n```\r\n$ docker version\r\nClient:\r\n Version:      1.13.0-rc5\r\n API version:  1.25\r\n Go version:   go1.7.3\r\n Git commit:   43cc971\r\n Built:        Thu Jan  5 03:07:30 2017\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      1.13.0-rc5\r\n API version:  1.25 (minimum version 1.12)\r\n Go version:   go1.7.3\r\n Git commit:   43cc971\r\n Built:        Thu Jan  5 03:07:30 2017\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n```\r\n$ docker images\r\nREPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE\r\nkatacoda/docker-http-server       large               1e023cfd8ba8        18 hours ago        771 MB\r\nkatacoda/docker-http-server       latest              c6dfc1d5003f        18 hours ago        7.59 MB\r\nkatacoda/docker-http-server       v1                  c6dfc1d5003f        18 hours ago        7.59 MB\r\n```"},{"labels":["api",null,null],"text":"**Description**\r\n\r\nWhen I call networks API with filter type=custom docker API returns response 200 with body null.\r\nIt happens when no custom networks exist.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Ensure no custom networks exist in a system. E.g. **docker network ls** returns bridge, host, none only.\r\n2. Execute \r\n```\r\ncurl localhost:2375/v1.20/networks?filters=%7B%22type%22:%5B%22custom%22%5D%7D\r\n```\r\n\r\n**Describe the results you received:**\r\nDocker returns response 200 with body\r\n```\r\nnull\\n\r\n```\r\n\r\n**Describe the results you expected:**\r\nDocker returns response 200 with body\r\n```\r\n[]\r\n```\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\nVersion:      1.12.1\r\nAPI version:  1.24\r\nGo version:   go1.6.3\r\nGit commit:   23cf638\r\nBuilt:        \r\nOS/Arch:      linux/amd64\r\n\r\nServer:\r\nVersion:      1.12.1\r\nAPI version:  1.24\r\nGo version:   go1.6.3\r\nGit commit:   23cf638\r\nBuilt:        \r\nOS/Arch:      linux/amd64\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 6\r\nRunning: 3\r\nPaused: 0\r\nStopped: 3\r\nImages: 9\r\nServer Version: 1.12.1\r\nStorage Driver: devicemapper\r\nPool Name: docker-253:0-2097431-pool\r\nPool Blocksize: 65.54 kB\r\nBase Device Size: 10.74 GB\r\nBacking Filesystem: xfs\r\nData file: /dev/loop0\r\nMetadata file: /dev/loop1\r\nData Space Used: 2.911 GB\r\nData Space Total: 107.4 GB\r\nData Space Available: 85.6 GB\r\nMetadata Space Used: 4.801 MB\r\nMetadata Space Total: 2.147 GB\r\nMetadata Space Available: 2.143 GB\r\nThin Pool Minimum Free Space: 10.74 GB\r\nUdev Sync Supported: true\r\nDeferred Removal Enabled: false\r\nDeferred Deletion Enabled: false\r\nDeferred Deleted Device Count: 0\r\nData loop file: /var/lib/docker/devicemapper/devicemapper/data\r\nWARNING: Usage of loopback devices is strongly discouraged for production use. Use `--storage-opt dm.thinpooldev` to specify a custom block storage device.\r\nMetadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata\r\nLibrary Version: 1.02.122 (2016-04-09)\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\nVolume: local\r\nNetwork: null bridge host overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: seccomp\r\nKernel Version: 4.7.6-200.fc24.x86_64\r\nOperating System: Fedora 24 (Workstation Edition)\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 31.39 GiB\r\nName: *******************************************\r\nID: XZ57:ZSSX:MXN6:OX6H:WM54:BL5T:46ZT:OOFV:2FCP:CWF2:HAQ2:ZBFY\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nInsecure Registries:\r\n127.0.0.0/8\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nphysical\r\nReproduced on several distributions, such as CentOS, Fedora, Ubuntu.\r\nReproduced on Docker 1.12.1, 1.12.5."},{"labels":["api",null,null],"text":"---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nWhen using the `/services/[SERVICE_NAME]/update` endpoint, it fails with \"changing network in service is not supported\" if the service being updated is using a custom network. If the service was created without specifying the `--network` option however, it succeeds.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Create a service with the option `--network` set to a user created overlay network\r\n2. Try to send a POST to change something about the service. e.g.\r\n```\r\n{\r\n  \"TaskTemplate\": {\r\n    \"ContainerSpec\": {\r\n      \"Image\": \"busybox\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n**Describe the results you received:**\r\n`{\"message\":\"rpc error: code = 2 desc = changing network in service is not supported\"}`\r\n\r\n**Describe the results you expected:**\r\nSame as when the service is created without specifying `--network`: 200 response, and service update successful.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nThe endpoint works correctly if the service is not using a custom network.\r\n\r\n**Output of `docker version`:**\r\n```\r\nClient:\r\n Version:      1.12.5\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   7392c3b\r\n Built:        Fri Dec 16 06:14:34 2016\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:      1.12.5\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   7392c3b\r\n Built:        Fri Dec 16 06:14:34 2016\r\n OS/Arch:      linux/amd64\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 11\r\n Running: 1\r\n Paused: 0\r\n Stopped: 10\r\nImages: 160\r\nServer Version: 1.12.5\r\nStorage Driver: aufs\r\n Root Dir: /var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 394\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: host null overlay bridge\r\nSwarm: active\r\n NodeID: 4oh2xqqiexi4rk8julf5o9rj6\r\n Is Manager: true\r\n ClusterID: a6h0antslmorusyo7dx1z3fph\r\n Managers: 1\r\n Nodes: 1\r\n Orchestration:\r\n  Task History Retention Limit: 5\r\n Raft:\r\n  Snapshot Interval: 10000\r\n  Heartbeat Tick: 1\r\n  Election Tick: 3\r\n Dispatcher:\r\n  Heartbeat Period: 5 seconds\r\n CA Configuration:\r\n  Expiry Duration: 3 months\r\n Node Address: 192.168.65.2\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: seccomp\r\nKernel Version: 4.4.39-moby\r\nOperating System: Alpine Linux v3.4\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 1.951 GiB\r\nName: moby\r\nID: HC4B:YUGH:5UQ2:C2C3:O6BD:PH5P:MVDJ:UFCC:OA3S:VZUS:R4EX:F7WX\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 51\r\n Goroutines: 195\r\n System Time: 2017-01-04T13:30:39.75392208Z\r\n EventsListeners: 2\r\nNo Proxy: *.local, 169.254/16\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No kernel memory limit support\r\nInsecure Registries:\r\n 0.0.0.0:5000\r\n 127.0.0.0/8\r\n```\r\n"},{"labels":["api",null,null,null],"text":"I have the same issu like #28528 but with1.13.0-rc4:\r\nError response from daemon: rpc error: code = 3 desc = driver name: if driver is specified name is required.\r\nI get the error when i'm trying to define a static IP address for a container.\r\n**My version is:**\r\nClient:\r\nVersion: 1.13.0-rc4\r\nAPI version: 1.25\r\nGo version: go1.7.3\r\nGit commit: 88862e7\r\nBuilt: Fri Dec 16 22:55:47 2016\r\nOS/Arch: linux/amd64\r\n\r\nServer:\r\nVersion: 1.13.0-rc4\r\nAPI version: 1.25 (minimum version 1.12)\r\nGo version: go1.7.3\r\nGit commit: 88862e7\r\nBuilt: Fri Dec 16 22:55:47 2016\r\nOS/Arch: linux/amd64\r\nExperimental: true\r\n\r\n**My compose file is (i'm using docker stacks):**\r\n```yaml\r\nnetworks:\r\ndefault_network:\r\ndriver: overlay\r\nipam:\r\nconfig:\r\n- subnet: 10.5.0.0/16\r\ngateway: 10.5.0.1\r\n```"},{"labels":["api",null],"text":"---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\n\r\n**Description**\r\n\r\nCreating volumes with the Remote API doesn't support properly support **DriverOptions**\r\n\r\n**Steps to reproduce the issue:**\r\n1.  Create a volume \r\n```json\r\n{ \"Name\":\"curl-aserver\", \"Driver\":\"local\", \"DriverOpts\": { \"o\": \"uid=1000,gid=1000,gripid=1000\" } }\r\n```\r\n2.  run `docker volume inspect curl-aserver`\r\n3.  run `sudo ls -la` on the directory just about _data for the volume\r\n4.  see that _data is root:root instead of whatever user has uid 100 and whatever group is gid:1000\r\n\r\n**Describe the results you received:**\r\nSee Step 4 above.\r\n\r\n**Describe the results you expected:**\r\nwhen you run:\r\n```shell\r\ndocker volume create --name shell-aserver --driver local --opts o=uid=1000,gid=1000,grpid=1000\r\n````\r\n\r\nand then check the permissions of the _data dir it has the user with UID 1000 and the group with GID 1000 listed as the file system permissions.  I expect the remote API to match.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.12.5\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   7392c3b\r\n Built:        Fri Dec 16 02:23:59 2016\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.12.5\r\n API version:  1.24\r\n Go version:   go1.6.4\r\n Git commit:   7392c3b\r\n Built:        Fri Dec 16 02:23:59 2016\r\n OS/Arch:      linux/amd64\r\n\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 0\r\n Running: 0\r\n Paused: 0\r\n Stopped: 0\r\nImages: 68\r\nServer Version: 1.12.5\r\nStorage Driver: devicemapper\r\n Pool Name: docker-253:2-274722043-pool\r\n Pool Blocksize: 65.54 kB\r\n Base Device Size: 107.4 GB\r\n Backing Filesystem: xfs\r\n Data file: /dev/loop0\r\n Metadata file: /dev/loop1\r\n Data Space Used: 60 GB\r\n Data Space Total: 107.4 GB\r\n Data Space Available: 47.38 GB\r\n Metadata Space Used: 34.69 MB\r\n Metadata Space Total: 2.147 GB\r\n Metadata Space Available: 2.113 GB\r\n Thin Pool Minimum Free Space: 10.74 GB\r\n Udev Sync Supported: true\r\n Deferred Removal Enabled: false\r\n Deferred Deletion Enabled: false\r\n Deferred Deleted Device Count: 0\r\n Data loop file: /home/lib/docker/devicemapper/devicemapper/data\r\n WARNING: Usage of loopback devices is strongly discouraged for production use. Use `--storage-opt dm.thinpooldev` to specify a custom block storage device.\r\n Metadata loop file: /home/lib/docker/devicemapper/devicemapper/metadata\r\n Library Version: 1.02.107-RHEL7 (2015-12-01)\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: overlay bridge null host\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: seccomp\r\nKernel Version: 3.10.0-327.18.2.el7.x86_64\r\nOperating System: CentOS Linux 7 (Core)\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 4\r\nTotal Memory: 15.5 GiB\r\nName: labip1128.lab.lowes.com\r\nID: QZ46:IC4D:B4E5:IDCN:SPU7:4YKP:UYWS:ZQ3I:UQA5:HLHN:LHRG:RV6O\r\nDocker Root Dir: /home/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: bridge-nf-call-iptables is disabled\r\nWARNING: bridge-nf-call-ip6tables is disabled\r\nInsecure Registries:\r\n 127.0.0.0/8\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nThis client is running inside of a virtual machine, VMWare I think. I don't know the details. "},{"labels":["api",null,null],"text":"I spent a bunch of time debugging a [bearer token](https://github.com/docker/docker/issues/29257) issue.  A lot of it was wasted because I hadn't introspected the bearer token to discover that my `access` section was empty.  Perhaps there's an easier way, but I ended up downloading the [JWT Debugger](https://jwt.io/) and manually copying the long tokens.\r\n\r\nTo reduce the complexity of debugging, it'd be nice if there was an API endpoint that returned a simple JSON structure showing the access rights granted by the request."},{"labels":["api"],"text":"Pull request https://github.com/docker/docker/pull/28532 changed the status code for Swarm API endpoints from `406 Not Acceptable` to `503 Service Unavailable`\r\n\r\nThere are two issues with this change currently, that **must** be addressed / decided on before 1.13 GA\r\n\r\n\r\n1. **The change in status code must be versioned**\r\n\r\n    (see https://github.com/docker/docker/pull/28349#issuecomment-262236124); currently, a docker 1.13 daemon returns status `503 Service Unavailable` for all API versions, including for API 1.24, whereas a docker 1.12 daemon returns status `406`. Given that we cannot change a versioned API, we should update the code to return `406` for API 1.24, and `503` (or what we decide on, see `2.`) for API 1.25 and up\r\n\r\n    I don't think there are discussions about this change, it just needs to be implemented.\r\n\r\n2. **We must decide on the correct status code**\r\n\r\n     See https://github.com/docker/docker/pull/28532#issuecomment-265839863; it is disputed that a `5xx` status code is correct; reasoning there is that if Swarm mode is inactive, the Swarm API endpoints are not implemented, hence \"not available\". For that reason a `404` status code is suggested. \r\n\r\n    w.r.t. https://github.com/docker/docker/pull/28532#issuecomment-265868008;\r\n    > \"It also allows a client to differentiate between missing and not part of the server at all.\" \r\n\r\n   we should look if there _are_ other actions to be taken by the client; what other actions do we expect the client to take if swarm mode is not enabled; if it's just \"print the error message\", then this may not be a problem.\r\n\r\n\r\nping @stevvooe @justincormack @vieux @bfirsh PTAL. I made this a P0 so that we make the required changes before GA"},{"labels":["api",null],"text":"Hi. I use the \"/containers/(id)/stats\" API to collect the information of a container.\r\nWhat I get is as below:\r\n```\r\n{\"read\":\"2016-12-11T02:18:01.857174651Z\",\"preread\":\"0001-01-01T00:00:00Z\",\"pids_stats\":{},\"blkio_stats\":{\"io_service_bytes_recursive\":[],\"io_serviced_recursive\":[],\"io_queue_recursive\":[],\"io_service_time_recursive\":[],\"io_wait_time_recursive\":[],\"io_merged_recursive\":[],\"io_time_recursive\":[],\"sectors_recursive\":[]},\"num_procs\":0,\"storage_stats\":{},\"cpu_stats\":{\"cpu_usage\":{\"total_usage\":723671739199,\"percpu_usage\":[158849409169,105266278971,265007316045,194548735014],\"usage_in_kernelmode\":1360000000,\"usage_in_usermode\":724010000000},\"system_cpu_usage\":23733220000000,\"throttling_data\":{\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}},\"precpu_stats\":{\"cpu_usage\":{\"total_usage\":0,\"usage_in_kernelmode\":0,\"usage_in_usermode\":0},\"throttling_data\":{\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}},\"memory_stats\":{\"usage\":856064,\"max_usage\":2486272,\"stats\":{\"active_anon\":610304,\"active_file\":0,\"cache\":0,\"dirty\":0,\"hierarchical_memory_limit\":8796093018112,\"inactive_anon\":0,\"inactive_file\":0,\"mapped_file\":0,\"pgfault\":1700,\"pgmajfault\":0,\"pgpgin\":836,\"pgpgout\":687,\"rss\":610304,\"rss_huge\":0,\"total_active_anon\":610304,\"total_active_file\":0,\"total_cache\":0,\"total_dirty\":0,\"total_inactive_anon\":0,\"total_inactive_file\":0,\"total_mapped_file\":0,\"total_pgfault\":1700,\"total_pgmajfault\":0,\"total_pgpgin\":836,\"total_pgpgout\":687,\"total_rss\":610304,\"total_rss_huge\":0,\"total_unevictable\":0,\"total_writeback\":0,\"unevictable\":0,\"writeback\":0},\"limit\":970485760},\"name\":\"/ser2.1.8be6xmrx7mshozj5suaxdzl7a\",\"id\":\"9e84fd9c570c2952f6ef272e20af1d639a8e0cb80ca33c6679a42b9cf59d9a4d\",\"networks\":{\"eth0\":{\"rx_bytes\":30954,\"rx_packets\":120,\"rx_errors\":0,\"rx_dropped\":2,\"tx_bytes\":906,\"tx_packets\":11,\"tx_errors\":0,\"tx_dropped\":0}}}\r\n```\r\n\r\nBy the command \"docker stats\", what I get is as below:\r\n```\r\nCONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS\r\n9e84fd9c570c        57.69%              836 KiB / 925.5 MiB   0.09%               31.7 kB / 906 B     0 B / 0 B           0\r\n```\r\n\r\nI wonder how to calculate the CPU usage in percentage based on the above information.\r\n\r\nThanks a lot."},{"labels":["api",null,null,null,null],"text":"Currently, `docker service logs` expects a service name or ID and will stream the combined output of every task that is part of the service.\r\n\r\nIt would be neat to support `docker service logs <task ID>`.\r\n\r\nThis is already implemented in the SwarmKit backend, so it's really a matter of plumbing it into the API/CLI.\r\n\r\nRelevant bits: In `daemon/cluster/cluster.go` there is:\r\n```go\r\n\tstream, err := state.logsClient.SubscribeLogs(ctx, &swarmapi.SubscribeLogsRequest{\r\n\t\tSelector: &swarmapi.LogSelector{\r\n\t\t\tServiceIDs: []string{service.ID},\r\n\t\t},\r\n\t\tOptions: &swarmapi.LogSubscriptionOptions{\r\n\t\t\tFollow: config.Follow,\r\n\t\t},\r\n\t})\r\n```\r\n\r\nIn order to stream logs for a task using SwarmKit, one would need to use the exact same code, using a different selector: `TaskIDs: []string{task.ID}`.\r\n\r\nI think the workflow would look like:\r\n1) The user calls `docker service logs <something>`\r\n2) The CLI attempts to call `/services/<something>/inspect`\r\n3) If that succeeds, then it continues with `/services/<something>/logs`, and the rest of the code is the same\r\n4) If it fails, then it attempts to call `/tasks/<something>/inspect`\r\n5) If that works, it calls `/tasks/<something>/logs` and continues with the rest of the code\r\n6) if that also fails, the CLI errors out saying <something> is neither a service nor a task\r\n\r\n/cc @thaJeztah @aaronlehmann "},{"labels":["api",null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\nDocker Repository API to get images with filter returns \"RepoDigests\" as null.\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n1. Call Docker API on a repository without a filter (i.e. `.../images/json`)\r\n2. Call Docker API on a repository with a filter (e.g. `.../images/json?filter=<anImageName>`)\r\n3. Compare the returned \"RepoDigests\" fields of the first response with that of the second response\r\n\r\n**Describe the results you received:**\r\nThe API responds with a null \"RepoDigests\" when a filter is used\r\n\r\n**Describe the results you expected:**\r\nI expect the API to return the same response whether I use the filter or not\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\nN/A\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.12.3\r\n API version:  1.24\r\n Go version:   go1.6.3\r\n Git commit:   6b644ec\r\n Built:        Thu Oct 27 00:09:21 2016\r\n OS/Arch:      windows/amd64\r\n Experimental: true\r\n\r\nServer:\r\n Version:      1.12.3\r\n API version:  1.24\r\n Go version:   go1.6.3\r\n Git commit:   6b644ec\r\n Built:        Thu Oct 27 00:09:21 2016\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 26\r\n Running: 25\r\n Paused: 0\r\n Stopped: 1\r\nImages: 26\r\nServer Version: 1.12.3\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge overlay null host\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: seccomp\r\nKernel Version: 4.4.27-moby\r\nOperating System: Alpine Linux v3.4\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 6\r\nTotal Memory: 7.775 GiB\r\nName: moby\r\nID: Z26R:GZO7:W4TE:77XS:6XQT:XS7R:ABTC:DFAA:LJLL:AR7W:QIPL:HBK6\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nRegistry: https://index.docker.io/v1/\r\nWARNING: No kernel memory limit support\r\nExperimental: true\r\nInsecure Registries:\r\n md1drepo01.lnx.ix.com:5000\r\n 127.0.0.0/8\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\nNone"},{"labels":["api",null,null],"text":"**Description**\r\n\r\nIn Docker 1.12, making a POST request to the `/v1.24/swarm/leave` endpoint to an engine not part of a Swarm would respond with status code `406 (NOT ACCEPTABLE)`. \r\nIn Docker 1.13, the same POST request now responds with status code `503 (SERVICE UNAVAILABLE)`.\r\n\r\nThis is a breaking change for this endpoint at a pre-existing API version.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Set up a Docker engine node that is not part of a Swarm and exposes the API over HTTP (e.g. `sudo docker -H 127.0.0.1:2375 daemon`)\r\n2. Make a POST request to the `/v1.24/swarm/leave` endpoint:\r\n```\r\ncurl -v -d '' http://127.0.0.1:2375/v1.24/swarm/leave\r\n```\r\n\r\n**Describe the results you received:**\r\n\r\n```\r\n$ curl -v -d '' http://127.0.0.1:2375/v1.24/swarm/leave\r\n*   Trying 127.0.0.1...\r\n* Connected to 127.0.0.1 (127.0.0.1) port 2375 (#0)\r\n> POST /v1.24/swarm/leave HTTP/1.1\r\n> Host: 127.0.0.1:2375\r\n> User-Agent: curl/7.47.0\r\n> Accept: */*\r\n> Content-Length: 0\r\n> Content-Type: application/x-www-form-urlencoded\r\n> \r\n< HTTP/1.1 503 Service Unavailable\r\n< Api-Version: 1.25\r\n< Content-Type: application/json\r\n< Docker-Experimental: false\r\n< Server: Docker/1.13.0-rc3 (linux)\r\n< Date: Tue, 06 Dec 2016 20:07:31 GMT\r\n< Content-Length: 47\r\n* HTTP error before end of send, stop sending\r\n< \r\n{\"message\":\"This node is not part of a swarm\"}\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\n`HTTP/1.1 406 Not Acceptable`, as indicated in the [Remote API 1.24 reference](https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/#leave-a-swarm)\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.13.0-rc3\r\n API version:  1.25\r\n Go version:   go1.7.3\r\n Git commit:   4d92237\r\n Built:        Mon Dec  5 19:05:57 2016\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.13.0-rc3\r\n API version:  1.25 (minimum version 1.12)\r\n Go version:   go1.7.3\r\n Git commit:   4d92237\r\n Built:        Mon Dec  5 19:05:57 2016\r\n OS/Arch:      linux/amd64\r\n Experimental: false\r\n```\r\n\r\n"},{"labels":["api",null,null,null],"text":"While discussing https://github.com/docker/docker/issues/26714, it was reported that tmpfs options are not working for services.\r\n\r\nhttps://github.com/docker/docker/pull/26837 added these options to the \"Mount\" type, https://github.com/docker/docker/pull/26833 changed the service API to use these types, and https://github.com/docker/docker/pull/28150 added tmpfs specific options (for docker run)\r\n\r\nIt looks like something was not wired through, though;\r\n\r\nRunning this on https://github.com/docker/docker/commit/45ed6a75795918d466054e63c462a1a8b553c8c0 (https://github.com/docker/docker/pull/28150)\r\n\r\n    docker service create --name test --mount type=tmpfs,target=/foo,tmpfs-size=4194304 nginx:alpine\r\n\r\nThe container has;\r\n\r\n`HostConfig`:\r\n\r\n    \"Tmpfs\": {\r\n      \"/foo\": \"\"\r\n    },\r\n\r\n`Mounts`:\r\n\r\n     \"Mounts\": [],\r\n\r\n\r\nRunning from https://github.com/docker/docker/commit/821aeb6a6f72f070ae045cb7813759cbbaba7bda (https://github.com/docker/docker/pull/26833)\r\n\r\n    docker service create --name test --mount type=tmpfs,target=/foo,tmpfs-size=4194304 nginx:alpine\r\n\r\n\r\nThe container has;\r\n\r\n`HostConfig`:\r\n\r\n    \"Tmpfs\": {\r\n        \"/foo\": \"\"\r\n    },\r\n    \"Mounts\": [\r\n        {\r\n            \"Type\": \"tmpfs\",\r\n            \"Target\": \"/foo\"\r\n        }\r\n    ]\r\n\r\n`Mounts`:\r\n\r\n    \"Mounts\": [\r\n        {\r\n            \"Type\": \"tmpfs\",\r\n            \"Source\": \"\",\r\n            \"Destination\": \"/foo\",\r\n            \"Mode\": \"\",\r\n            \"RW\": true,\r\n            \"Propagation\": \"\"\r\n        }\r\n    ],\r\n\r\n\r\n\r\nRunning on master (a756c1ac659468bb8d6ec9ee2e1182fc6cae4002)\r\n\r\n    docker service create --name test --mount type=tmpfs,target=/foo,tmpfs-size=4194304 nginx:alpine\r\n\r\nThis request is sent (looks good);\r\n\r\n```json\r\n{\r\n  \"EndpointSpec\": {},\r\n  \"Mode\": {\r\n    \"Replicated\": {}\r\n  },\r\n  \"Name\": \"test\",\r\n  \"TaskTemplate\": {\r\n    \"ContainerSpec\": {\r\n      \"DNSConfig\": {},\r\n      \"Image\": \"nginx:alpine\",\r\n      \"Mounts\": [\r\n        {\r\n          \"Target\": \"/foo\",\r\n          \"TmpfsOptions\": {\r\n            \"SizeBytes\": 4194304\r\n          },\r\n          \"Type\": \"tmpfs\"\r\n        }\r\n      ]\r\n    },\r\n    \"ForceUpdate\": 0,\r\n    \"Placement\": {},\r\n    \"Resources\": {\r\n      \"Limits\": {},\r\n      \"Reservations\": {}\r\n    },\r\n    \"RestartPolicy\": {}\r\n  },\r\n  \"UpdateConfig\": {\r\n    \"FailureAction\": \"pause\",\r\n    \"MaxFailureRatio\": 0,\r\n    \"Parallelism\": 1\r\n  }\r\n}\r\n```\r\n\r\nHowever, `docker service inspect` does not show that;\r\n\r\n\r\n```JSON\r\n[\r\n    {\r\n        \"ID\": \"oao6qenv51cdid1y7ookqe5ql\",\r\n        \"Version\": {\r\n            \"Index\": 11\r\n        },\r\n        \"CreatedAt\": \"2016-12-02T13:22:29.706211456Z\",\r\n        \"UpdatedAt\": \"2016-12-02T13:22:29.706211456Z\",\r\n        \"Spec\": {\r\n            \"Name\": \"test\",\r\n            \"TaskTemplate\": {\r\n                \"ContainerSpec\": {\r\n                    \"Image\": \"nginx:alpine@sha256:aee97412fee873bd3d8fc2331b80862d7bd58913f7b12740cae8515edc1a66e4\",\r\n                    \"Mounts\": [\r\n                        {\r\n                            \"Type\": \"tmpfs\",\r\n                            \"Target\": \"/foo\"\r\n                        }\r\n                    ],\r\n                    \"DNSConfig\": {}\r\n                },\r\n                \"Resources\": {\r\n                    \"Limits\": {},\r\n                    \"Reservations\": {}\r\n                },\r\n                \"RestartPolicy\": {\r\n                    \"Condition\": \"any\",\r\n                    \"MaxAttempts\": 0\r\n                },\r\n                \"Placement\": {},\r\n                \"ForceUpdate\": 0\r\n            },\r\n            \"Mode\": {\r\n                \"Replicated\": {\r\n                    \"Replicas\": 1\r\n                }\r\n            },\r\n            \"UpdateConfig\": {\r\n                \"Parallelism\": 1,\r\n                \"FailureAction\": \"pause\",\r\n                \"MaxFailureRatio\": 0\r\n            },\r\n            \"EndpointSpec\": {\r\n                \"Mode\": \"vip\"\r\n            }\r\n        },\r\n        \"Endpoint\": {\r\n            \"Spec\": {}\r\n        },\r\n        \"UpdateStatus\": {\r\n            \"StartedAt\": \"0001-01-01T00:00:00Z\",\r\n            \"CompletedAt\": \"0001-01-01T00:00:00Z\"\r\n        }\r\n    }\r\n]\r\n```\r\n\r\nAnd the backing container also doesn't show;\r\n\r\n```JSON\r\n[\r\n    {\r\n        \"Id\": \"65d6a139685f0467194bb7ac3a2c404f42595d0285522a425c3ed9916435d02b\",\r\n        \"Created\": \"2016-12-02T13:22:38.009036877Z\",\r\n        \"Path\": \"nginx\",\r\n        \"Args\": [\r\n            \"-g\",\r\n            \"daemon off;\"\r\n        ],\r\n        \"State\": {\r\n            \"Status\": \"running\",\r\n            \"Running\": true,\r\n            \"Paused\": false,\r\n            \"Restarting\": false,\r\n            \"OOMKilled\": false,\r\n            \"Dead\": false,\r\n            \"Pid\": 561,\r\n            \"ExitCode\": 0,\r\n            \"Error\": \"\",\r\n            \"StartedAt\": \"2016-12-02T13:22:38.958195446Z\",\r\n            \"FinishedAt\": \"0001-01-01T00:00:00Z\"\r\n        },\r\n        \"Image\": \"sha256:d964ab5d0abe650e824c6b5fdfdf33df306ca6d4d59b1f9ca2c494324d6d37f3\",\r\n        \"ResolvConfPath\": \"/var/lib/docker/containers/65d6a139685f0467194bb7ac3a2c404f42595d0285522a425c3ed9916435d02b/resolv.conf\",\r\n        \"HostnamePath\": \"/var/lib/docker/containers/65d6a139685f0467194bb7ac3a2c404f42595d0285522a425c3ed9916435d02b/hostname\",\r\n        \"HostsPath\": \"/var/lib/docker/containers/65d6a139685f0467194bb7ac3a2c404f42595d0285522a425c3ed9916435d02b/hosts\",\r\n        \"LogPath\": \"/var/lib/docker/containers/65d6a139685f0467194bb7ac3a2c404f42595d0285522a425c3ed9916435d02b/65d6a139685f0467194bb7ac3a2c404f42595d0285522a425c3ed9916435d02b-json.log\",\r\n        \"Name\": \"/test.1.nv0cc9h0rxz4n6kep9ar0fwon\",\r\n        \"RestartCount\": 0,\r\n        \"Driver\": \"aufs\",\r\n        \"MountLabel\": \"\",\r\n        \"ProcessLabel\": \"\",\r\n        \"AppArmorProfile\": \"\",\r\n        \"ExecIDs\": null,\r\n        \"HostConfig\": {\r\n            \"Binds\": null,\r\n            \"ContainerIDFile\": \"\",\r\n            \"LogConfig\": {\r\n                \"Type\": \"json-file\",\r\n                \"Config\": {}\r\n            },\r\n            \"NetworkMode\": \"default\",\r\n            \"PortBindings\": {},\r\n            \"RestartPolicy\": {\r\n                \"Name\": \"\",\r\n                \"MaximumRetryCount\": 0\r\n            },\r\n            \"AutoRemove\": false,\r\n            \"VolumeDriver\": \"\",\r\n            \"VolumesFrom\": null,\r\n            \"CapAdd\": null,\r\n            \"CapDrop\": null,\r\n            \"Dns\": null,\r\n            \"DnsOptions\": null,\r\n            \"DnsSearch\": null,\r\n            \"ExtraHosts\": null,\r\n            \"GroupAdd\": null,\r\n            \"IpcMode\": \"\",\r\n            \"Cgroup\": \"\",\r\n            \"Links\": null,\r\n            \"OomScoreAdj\": 0,\r\n            \"PidMode\": \"\",\r\n            \"Privileged\": false,\r\n            \"PublishAllPorts\": false,\r\n            \"ReadonlyRootfs\": false,\r\n            \"SecurityOpt\": null,\r\n            \"UTSMode\": \"\",\r\n            \"UsernsMode\": \"\",\r\n            \"ShmSize\": 67108864,\r\n            \"Runtime\": \"runc\",\r\n            \"ConsoleSize\": [\r\n                0,\r\n                0\r\n            ],\r\n            \"Isolation\": \"\",\r\n            \"CpuShares\": 0,\r\n            \"Memory\": 0,\r\n            \"NanoCpus\": 0,\r\n            \"CgroupParent\": \"\",\r\n            \"BlkioWeight\": 0,\r\n            \"BlkioWeightDevice\": null,\r\n            \"BlkioDeviceReadBps\": null,\r\n            \"BlkioDeviceWriteBps\": null,\r\n            \"BlkioDeviceReadIOps\": null,\r\n            \"BlkioDeviceWriteIOps\": null,\r\n            \"CpuPeriod\": 0,\r\n            \"CpuQuota\": 0,\r\n            \"CpuRealtimePeriod\": 0,\r\n            \"CpuRealtimeRuntime\": 0,\r\n            \"CpusetCpus\": \"\",\r\n            \"CpusetMems\": \"\",\r\n            \"Devices\": null,\r\n            \"DiskQuota\": 0,\r\n            \"KernelMemory\": 0,\r\n            \"MemoryReservation\": 0,\r\n            \"MemorySwap\": 0,\r\n            \"MemorySwappiness\": -1,\r\n            \"OomKillDisable\": false,\r\n            \"PidsLimit\": 0,\r\n            \"Ulimits\": null,\r\n            \"CpuCount\": 0,\r\n            \"CpuPercent\": 0,\r\n            \"IOMaximumIOps\": 0,\r\n            \"IOMaximumBandwidth\": 0,\r\n            \"Mounts\": [\r\n                {\r\n                    \"Type\": \"tmpfs\",\r\n                    \"Target\": \"/foo\"\r\n                }\r\n            ]\r\n        },\r\n        \"GraphDriver\": {\r\n            \"Name\": \"aufs\",\r\n            \"Data\": null\r\n        },\r\n        \"Mounts\": [\r\n            {\r\n                \"Type\": \"tmpfs\",\r\n                \"Source\": \"\",\r\n                \"Destination\": \"/foo\",\r\n                \"Mode\": \"\",\r\n                \"RW\": true,\r\n                \"Propagation\": \"\"\r\n            }\r\n        ],\r\n        \"Config\": {\r\n            \"Hostname\": \"65d6a139685f\",\r\n            \"Domainname\": \"\",\r\n            \"User\": \"\",\r\n            \"AttachStdin\": false,\r\n            \"AttachStdout\": false,\r\n            \"AttachStderr\": false,\r\n            \"ExposedPorts\": {\r\n                \"443/tcp\": {},\r\n                \"80/tcp\": {}\r\n            },\r\n            \"Tty\": false,\r\n            \"OpenStdin\": false,\r\n            \"StdinOnce\": false,\r\n            \"Env\": [\r\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\r\n                \"NGINX_VERSION=1.11.6\"\r\n            ],\r\n            \"Cmd\": [\r\n                \"nginx\",\r\n                \"-g\",\r\n                \"daemon off;\"\r\n            ],\r\n            \"ArgsEscaped\": true,\r\n            \"Image\": \"nginx@sha256:aee97412fee873bd3d8fc2331b80862d7bd58913f7b12740cae8515edc1a66e4\",\r\n            \"Volumes\": null,\r\n            \"WorkingDir\": \"\",\r\n            \"Entrypoint\": null,\r\n            \"OnBuild\": null,\r\n            \"Labels\": {\r\n                \"com.docker.swarm.node.id\": \"nu0ip7usli91dikmeclsum063\",\r\n                \"com.docker.swarm.service.id\": \"oao6qenv51cdid1y7ookqe5ql\",\r\n                \"com.docker.swarm.service.name\": \"test\",\r\n                \"com.docker.swarm.task\": \"\",\r\n                \"com.docker.swarm.task.id\": \"nv0cc9h0rxz4n6kep9ar0fwon\",\r\n                \"com.docker.swarm.task.name\": \"test.1.nv0cc9h0rxz4n6kep9ar0fwon\"\r\n            }\r\n        },\r\n        \"NetworkSettings\": {\r\n            \"Bridge\": \"\",\r\n            \"SandboxID\": \"a35107b0b1cbf27f63669328d5c8ca3bccedeac7d9dc0ec8a43af10f1fc14522\",\r\n            \"HairpinMode\": false,\r\n            \"LinkLocalIPv6Address\": \"\",\r\n            \"LinkLocalIPv6PrefixLen\": 0,\r\n            \"Ports\": {\r\n                \"443/tcp\": null,\r\n                \"80/tcp\": null\r\n            },\r\n            \"SandboxKey\": \"/var/run/docker/netns/a35107b0b1cb\",\r\n            \"SecondaryIPAddresses\": null,\r\n            \"SecondaryIPv6Addresses\": null,\r\n            \"EndpointID\": \"c6c4250db69a4516e5e23aa4567e5fbfaa640ff6e8d16505008bf3b1933e6592\",\r\n            \"Gateway\": \"172.18.0.1\",\r\n            \"GlobalIPv6Address\": \"\",\r\n            \"GlobalIPv6PrefixLen\": 0,\r\n            \"IPAddress\": \"172.18.0.2\",\r\n            \"IPPrefixLen\": 16,\r\n            \"IPv6Gateway\": \"\",\r\n            \"MacAddress\": \"02:42:ac:12:00:02\",\r\n            \"Networks\": {\r\n                \"bridge\": {\r\n                    \"IPAMConfig\": null,\r\n                    \"Links\": null,\r\n                    \"Aliases\": null,\r\n                    \"NetworkID\": \"29ebdfc034bf747d22b4b5bf19149c2a3bfb8f177de46c7d53c923a6a791b2f7\",\r\n                    \"EndpointID\": \"c6c4250db69a4516e5e23aa4567e5fbfaa640ff6e8d16505008bf3b1933e6592\",\r\n                    \"Gateway\": \"172.18.0.1\",\r\n                    \"IPAddress\": \"172.18.0.2\",\r\n                    \"IPPrefixLen\": 16,\r\n                    \"IPv6Gateway\": \"\",\r\n                    \"GlobalIPv6Address\": \"\",\r\n                    \"GlobalIPv6PrefixLen\": 0,\r\n                    \"MacAddress\": \"02:42:ac:12:00:02\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n]\r\n```\r\n\r\n\r\nNote that on 1.13.0-rc2, this works (`--mount` is still present on `docker run`, but removed in https://github.com/docker/docker/pull/28838);\r\n\r\n    docker run -dit --rm --mount type=tmpfs,target=/foo,tmpfs-size=1m busybox\r\n\r\n`HostConfig.Mounts`:\r\n\r\n```\r\n\"Mounts\": [\r\n    {\r\n        \"Type\": \"tmpfs\",\r\n        \"Target\": \"/foo\",\r\n        \"TmpfsOptions\": {\r\n            \"SizeBytes\": 1048576\r\n        }\r\n    }\r\n]\r\n```\r\n\r\n`Mounts`:\r\n\r\n```\r\n\"Mounts\": [\r\n    {\r\n        \"Type\": \"tmpfs\",\r\n        \"Source\": \"\",\r\n        \"Destination\": \"/foo\",\r\n        \"Mode\": \"\",\r\n        \"RW\": true,\r\n        \"Propagation\": \"\"\r\n    }\r\n],\r\n```\r\n\r\n\r\nSo, it looks like there's an issue in SwarmKit, or integration of SwarmKit into docker\r\n\r\n/cc @cpuguy83 @AkihiroSuda "},{"labels":["api",null],"text":"I'm using docker in mas OS with TLS and CORS enabled. I'm connecting to the docker daemon from javascript, but I get following error in the browser:\r\nNo 'Access-Control-Allow-Origin' header is present on the requested resource\r\n\r\nI'm using following curl commands to check docker behaviour (I've previously created the container and the images):\r\n1. I create a process with exec:\r\n\r\n```\r\ncurl -v -X POST -H \"Content-Type: application/json\" --cert ..../cert.p12 --pass XXXX --key ..../key.pem --cacert ..../ca.pem https://192.168.99.100:2376/containers/ba88fb9efcce4962dbd9faaed1e7580df6d33d8778f08e1f469a57b7a4fee118/exec -d '{                 \r\n\"AttachStdin\" : false,\r\n\"AttachStdout\" : true,\r\n\"AttachStderr\" : true,\r\n\"Tty\" : false,\r\n\"Cmd\" : [\"/bin/date\"]}'\r\n\r\nNote: Unnecessary use of -X or --request, POST is already inferred.\r\n*   Trying 192.168.99.100...\r\n* Connected to 192.168.99.100 (192.168.99.100) port 2376 (#0)\r\n* WARNING: SSL: CURLOPT_SSLKEY is ignored by Secure Transport. The private key must be in the Keychain.\r\n* WARNING: SSL: Certificate type not set, assuming PKCS#12 format.\r\n* Client certificate: mmiguel.<bootstrap>\r\n* WARNING: using IP address, SNI is being disabled by the OS.\r\n* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\n* Server certificate: XXXX\r\n* Server certificate: XXXX\r\n> POST /containers/ba88fb9efcce4962dbd9faaed1e7580df6d33d8778f08e1f469a57b7a4fee118/exec HTTP/1.1\r\n> Host: 192.168.99.100:2376\r\n> User-Agent: curl/7.49.1\r\n> Accept: */*\r\n> Content-Type: application/json\r\n> Content-Length: 108\r\n> \r\n* upload completely sent off: 108 out of 108 bytes\r\n< HTTP/1.1 201 Created\r\n< Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, X-Registry-Auth\r\n< Access-Control-Allow-Methods: HEAD, GET, POST, DELETE, PUT, OPTIONS\r\n< Access-Control-Allow-Origin: *\r\n< Content-Type: application/json\r\n< Server: Docker/1.12.3 (linux)\r\n< Date: Fri, 02 Dec 2016 12:21:30 GMT\r\n< Content-Length: 74\r\n< \r\n{\"Id\":\"6b2f0da5b53fc60d9ab87256bc2c625fdde77ead838daa3c1902db7405885a6c\"}\r\n* Connection #0 to host 192.168.99.100 left intact\r\n```\r\n\r\nWhen I execute the create exec command I receive the Access-Control-Allow-Origin header, and the process id.\r\n\r\n2. Then I start the exec process:\r\n\r\n```\r\ncurl -v -X POST -H \"Content-Type: application/json\" --cert ..../cert.p12 --pass XXXX --key ..../key.pem --cacert .... /ca.pem https://192.168.99.100:2376/exec/6b2f0da5b53fc60d9ab87256bc2c625fdde77ead838daa3c1902db7405885a6c/start -d '{\"Detach\" : false, \"Tty\" : false}'\r\n\r\nNote: Unnecessary use of -X or --request, POST is already inferred.\r\n*   Trying 192.168.99.100...\r\n* Connected to 192.168.99.100 (192.168.99.100) port 2376 (#0)\r\n* WARNING: SSL: CURLOPT_SSLKEY is ignored by Secure Transport. The private key must be in the Keychain.\r\n* WARNING: SSL: Certificate type not set, assuming PKCS#12 format.\r\n* Client certificate: mmiguel.<bootstrap>\r\n* WARNING: using IP address, SNI is being disabled by the OS.\r\n* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\r\n* Server certificate: xxxx\r\n* Server certificate: xxxx\r\n> POST /exec/6b2f0da5b53fc60d9ab87256bc2c625fdde77ead838daa3c1902db7405885a6c/start HTTP/1.1\r\n> Host: 192.168.99.100:2376\r\n> User-Agent: curl/7.49.1\r\n> Accept: */*\r\n> Content-Type: application/json\r\n> Content-Length: 33\r\n> \r\n* upload completely sent off: 33 out of 33 bytes\r\n< HTTP/1.1 200 OK\r\n< Content-Type: application/vnd.docker.raw-stream\r\n* no chunk, no close, no size. Assume close to signal end\r\n< \r\nFri Dec  2 12:25:06 UTC 2016\r\n* Closing connection 0\r\n```\r\n\r\nThis executes the command (/bin/date), I receive the output, but the header doesn't includes Access-Control-Allow-Origin header (previous execution with the same configuration included the header).\r\nBecause of that I can't get the execution result, when I execute the same thing from javascript in the client browser.\r\n\r\nDo I need to make any cors configuration for the process that we create with the exec command?\r\n(I haven't found anything about this in the rest api doc)."},{"labels":["api",null],"text":"\r\n**Environment**\r\n\r\n* CentOS 7.1.1503   kernel 3.10.0-229.el7.x86_64\r\n* docker version: 1.12.1\r\n\r\n**Problem description**:\r\n\r\nI recently encountered a problem: I have removed the container by `docker rm $containerID`, but it is not really removed. there are lots of errors in /var/log/messages, such as\r\n\r\n```shell\r\n[op@localhost ~]$ sudo tail -f /var/log/messages\r\nDec  2 15:12:10 localhost dockerd: time=\"2016-12-02T15:12:10.114497059+08:00\" level=error msg=\"Handler for GET /containers/30d8fecac0f9fcf78c56e9b1cab3939d52f5ac7cda53e5b6df46a175f8af6fbb/json returned error: No such container: 30d8fecac0f9fcf78c56e9b1cab3939d52f5ac7cda53e5b6df46a175f8af6fbb\"\r\nDec  2 15:12:10 localhost dockerd: time=\"2016-12-02T15:12:10.114806985+08:00\" level=error msg=\"Handler for GET /containers/e5a6cdf84d37efa8a8185e142cb326ff622f15a168b26ba08382c1b01f938db5/json returned error: No such container: e5a6cdf84d37efa8a8185e142cb326ff622f15a168b26ba08382c1b01f938db5\"\r\nDec  2 15:12:10 localhost dockerd: time=\"2016-12-02T15:12:10.115129370+08:00\" level=error msg=\"Handler for GET /containers/98e8c3bda8ca0adb138a7d3d6f2116453ba7543e4384c2d56b018fa6c7540018/json returned error: No such container: 98e8c3bda8ca0adb138a7d3d6f2116453ba7543e4384c2d56b018fa6c7540018\"\r\nDec  2 15:12:10 localhost dockerd: time=\"2016-12-02T15:12:10.115444802+08:00\" level=error msg=\"Handler for GET /containers/effb24af21f7f3cb7b682e4baaaf383f39fb3ca9b1cd20f1c01461c139ac02f2/json returned error: No such container: effb24af21f7f3cb7b682e4baaaf383f39fb3ca9b1cd20f1c01461c139ac02f2\"\r\nDec  2 15:12:10 localhost dockerd: time=\"2016-12-02T15:12:10.115739337+08:00\" level=error msg=\"Handler for GET /containers/f038482af075bbfdaaa4ac1844ef4ccacd0c7ba9b5f95a16229468c45913ccb1/json returned error: No such container: f038482af075bbfdaaa4ac1844ef4ccacd0c7ba9b5f95a16229468c45913ccb1\"\r\nDec  2 15:12:10 localhost dockerd: time=\"2016-12-02T15:12:10.116081434+08:00\" level=error msg=\"Handler for GET /containers/42097edcc80320f3727e7d9fe3f122ddf415af3827db40604d24aceee84c883b/json returned error: No such container: 42097edcc80320f3727e7d9fe3f122ddf415af3827db40604d24aceee84c883b\"\r\nDec  2 15:12:10 localhost dockerd: time=\"2016-12-02T15:12:10.116373021+08:00\" level=error msg=\"Handler for GET /containers/25e380857eda37c25b01b14afb51c74eba83978c358a8a489d8b59b14712ea41/json returned error: No such container: 25e380857eda37c25b01b14afb51c74eba83978c358a8a489d8b59b14712ea41\"\r\nDec  2 15:12:10 localhost dockerd: time=\"2016-12-02T15:12:10.116663990+08:00\" level=error msg=\"Handler for GET /containers/9a71ef7a2cd5ceae29e54d5827800af7acc1742b8b5cc7481071e3ec5c94a76f/json returned error: No such container: 9a71ef7a2cd5ceae29e54d5827800af7acc1742b8b5cc7481071e3ec5c94a76f\"\r\nDec  2 15:12:10 localhost dockerd: time=\"2016-12-02T15:12:10.116973822+08:00\" level=error msg=\"Handler for GET /containers/f5b24d5887ef1bcd2e021f365ae029254c6be9be1a0ec34aa540e627e076ddc8/json returned error: No such container: f5b24d5887ef1bcd2e021f365ae029254c6be9be1a0ec34aa540e627e076ddc8\"\r\n```\r\n\r\n \r\n\r\nIn the  storage directory, i can find the containID.  but it can't be see in `docker ps -a` \r\n\r\n```shell\r\n[root@localhost docker]# ls\r\ncontainers  devicemapper  image  network  swarm  tmp  trust  volumes\r\n```\r\n\r\nthe removed containerID can be find in **devicemapper** directory, but can not be find in **containers** directory.\r\n\r\nhow can i do to solve the problem?\r\n\r\n"},{"labels":["api",null],"text":"since https://github.com/docker/docker/pull/28840/ got merged, the swagger generation is not working as expected.\r\n\r\n* doing a `make swagger-gen` now generated a `api/types/containers` with an `s` owned by root instead of updating the files in `api/types/container`\r\n* `rm api/types/volume/volumes_create.go && make swagger-gen` doesn't' generate the missing file.\r\n\r\nlooks like tags have a effect on the folder where the types are generated and the above PR changed them.\r\n\r\n/cc @bfirsh @dnephin \r\n\r\nit blocks https://github.com/docker/docker/pull/29002"},{"labels":["api",null,null,null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\nI am receiving the following error when on 1.13-rc2 and directing a Docker host to build a container through the mounted Docker socket.\r\n```\r\nERRO[0000] error removing container: Error response from daemon: removal of container ce0976ad22495c7cbe9487752ea32721a282164862db036b2f3377bd07461c3a is already in progress\r\n```\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\n**Steps to reproduce the issue:**\r\n\r\nOne file \"Dockerfile-builder\" for the container which will initiate the build:\r\n```docker\r\nFROM debian:jessie\r\n\r\nRUN apt-get update && apt-get install -y \\\r\n        ca-certificates \\\r\n        curl \\\r\n    --no-install-recommends && rm -r /var/lib/apt/lists/*\r\n\r\n# Set up Docker\r\nRUN  set -x \\\r\n    && curl -fSL \"https://test.docker.com/builds/Linux/x86_64/docker-1.13.0-rc2.tgz\" -o docker.tgz \\\r\n    && tar -xzvf docker.tgz \\\r\n    && mv docker/* /usr/local/bin/ \\\r\n    && rmdir docker \\\r\n    && rm docker.tgz \\\r\n    && docker -v\r\n\r\nENTRYPOINT [ \"docker\" ]\r\n```\r\n\r\nOne file \"Dockerfile\" for a simple image being built:\r\n```docker\r\nFROM debian:jessie\r\n```\r\n\r\nBuild the builder, then use it to build the simple image along with the build context for that directory:\r\n```bash\r\ndocker build -f Dockerfile-builder -t builder .\r\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:$PWD --workdir $PWD builder build -t example .\r\n```\r\n\r\nYou may have to run the second command a couple times to encounter the error.\r\n\r\n**Describe the results you received:**\r\n\r\n```\r\nSending build context to Docker daemon 3.072 kB\r\nStep 1/1 : FROM debian:jessie\r\n ---> 73e72bf822ca\r\nSuccessfully built 73e72bf822ca\r\nERRO[0000] error removing container: Error response from daemon: removal of container ce0976ad22495c7cbe9487752ea32721a282164862db036b2f3377bd07461c3a is already in progress\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\n```\r\nSending build context to Docker daemon 3.072 kB\r\nStep 1/1 : FROM debian:jessie\r\n ---> 73e72bf822ca\r\nSuccessfully built 73e72bf822ca\r\n```\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nRunning this on:\r\n* Docker Machine `Version: 0.9.0-rc1, build ed849a7`\r\n* Installed as part of Docker for Mac `Version: 0.9.0-rc1, build ed849a7`\r\n* macOS Sierra 10.12.1.\r\n\r\nThe virtual machine is VMWare Fusion `Version 8.5.2 (4635224)`.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.13.0-rc2\r\n API version:  1.24\r\n Go version:   go1.7.3\r\n Git commit:   1f9b3ef\r\n Built:        Wed Nov 23 17:40:58 2016\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:             1.13.0-rc2\r\n API version:         1.25\r\n Minimum API version: 1.12\r\n Go version:          go1.7.3\r\n Git commit:          1f9b3ef\r\n Built:               Wed Nov 23 17:40:58 2016\r\n OS/Arch:             linux/amd64\r\n Experimental:        false\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 0\r\n Running: 0\r\n Paused: 0\r\n Stopped: 0\r\nImages: 511\r\nServer Version: 1.13.0-rc2\r\nStorage Driver: aufs\r\n Root Dir: /mnt/sda1/var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 706\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 03e5862ec0d8d3b3f750e19fca3ee367e13c090e\r\nrunc version: 51371867a01c467f08af739783b8beafc154c4d7\r\ninit version: 949e6fa\r\nSecurity Options:\r\n seccomp\r\nKernel Version: 4.4.34-boot2docker\r\nOperating System: Boot2Docker 1.13.0-rc2 (TCL 7.2); HEAD : 51fa426 - Wed Nov 23 20:08:44 UTC 2016\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 2\r\nTotal Memory: 1.955 GiB\r\nName: default\r\nID: EZ5K:RZIJ:SLYL:Q4DX:H5JL:L76H:OROI:D2BL:S34W:45FX:DGSN:L6VN\r\nDocker Root Dir: /mnt/sda1/var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 14\r\n Goroutines: 23\r\n System Time: 2016-12-01T22:07:58.068629497Z\r\n EventsListeners: 0\r\nUsername: taiidani\r\nRegistry: https://index.docker.io/v1/\r\nLabels:\r\n provider=vmwarefusion\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n```\r\n"},{"labels":["api",null,null,null,null],"text":"**Description**\r\n**Steps to reproduce the issue:**\r\n1. Get docker v1.13 on Docker for Mac\r\n2. `docker run -d --restart=on-failure nginx`\r\n\r\n**Describe the results you received:**\r\n```\r\ndocker: Error response from daemon: maximum restart count must be a positive integer.\r\nSee 'docker run --help'.\r\n```\r\n\r\n**Describe the results you expected:**\r\n* Container is started without a problem.\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\n$ docker version\r\nClient:\r\n Version:      1.13.0-rc2\r\n API version:  1.25\r\n Go version:   go1.7.3\r\n Git commit:   1f9b3ef\r\n Built:        Wed Nov 23 17:40:58 2016\r\n OS/Arch:      darwin/amd64\r\n\r\nServer:\r\n Version:             1.13.0-rc2\r\n API version:         1.25\r\n Minimum API version: 1.12\r\n Go version:          go1.7.3\r\n Git commit:          1f9b3ef\r\n Built:               Wed Nov 23 17:40:58 2016\r\n OS/Arch:             linux/amd64\r\n Experimental:        true\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\nhttp://pastebin.com/raw/ckKsKLNh\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n* Docker for Mac\r\n* The same thing works with docker v1.12.\r\n"},{"labels":["api",null,null,null,null],"text":"This is a continuation of #27275\r\n\r\nIn 1.11 a change was introduced to validate that hostnames are RFC compliant (#20566, https://tools.ietf.org/html/rfc1123).\r\nThis change did not follow the normal deprecation policy and broke users using non-RFC compliant hostnames.\r\n\r\nAffected versions are Docker 1.11 - 1.13-rc2\r\n\r\nPing @thaJeztah \r\n@vdemeester who I believe introduced version checking at least in the API to only valid in api versions >= 1.24 (1.12+)"},{"labels":["api",null],"text":"**Description**\r\n\r\nThe Docker client API from tag v1.13.0-rc2 breaks the ImageList API when used with a Docker server below 1.25.\r\n\r\n**Steps to reproduce the issue:**\r\n\r\n1. Create a client with version 1.24: ```client := NewClient(socket, \"1.24\", nil, header))```\r\n2. Build an ImageListOptions object with a ```reference``` filter (replaces the MatchName property from previous versions of the API):\r\n```\r\n    filter := filters.NewArgs()\r\n    filter.Add(\"reference\", imageName)\r\n    options := types.ImageListOptions{All: false, Filters: filter}\r\n```\r\n3. Use the ImageList object with these options: ```list, err := client.ImageList(ctx, options)```\r\n4. Test the client against a 1.12.3 Docker engine\r\n\r\n**Describe the results you received:**\r\n\r\nThe Docker engine complains about an unknown filter:\r\nError response from daemon: Invalid filter 'reference'\r\n\r\n**Describe the results you expected:**\r\n\r\nThe API should adapt (based on the version passed to NewClient) and provide the proper parameters to the server.\r\n"},{"labels":["api",null],"text":"When using the docker stats api currently each request to the API will take up to 2 seconds. As explained in https://github.com/docker/docker/issues/23188 the docker API needs two measurement points to calculate an average. \r\n\r\nFor stats collectors like [Metricbeat](https://github.com/elastic/beats/tree/master/metricbeat) it would be useful to get the raw cpu values and either do the calculations on the collector side or directly when viewing the data on the storage system (in our case Elasticsearch).\r\n\r\nI'm proposing to add a flag/param to the docker stats API request that skips average calculations and return only raw values instead. This will speed up the API request and will potentially also reduce the load on the docker service as the request is open for a much shorter time.\r\n\r\nCollecting stats for a large number of containers has currently to be done one by one which leads to lots of open http requests and is quite slow because of the above issue. This will potentially be solved with https://github.com/docker/docker/pull/25361 by @WeiZhang555 but also as part of this bulk request it would be nice to have the flag to disable calculations."},{"labels":["api"],"text":"There is an API endpoint which exists for updating metadata for a secret (i.e., labels) but there is not yet a method on the Go client in the `github.com/docker/docker/client` package.\r\n\r\nNote: this issue is **not** requesting that we add a CLI command for updating a secret."},{"labels":["api",null],"text":"Please see https://github.com/docker/docker/pull/28299#discussion_r88733899.\r\n\r\nThe new `hosts` field just uses the format from `/etc/hosts`, since this is cross-platform capable.\r\n\r\n@thaJeztah @cpuguy83 "},{"labels":["api",null,null,null,null],"text":"I think there's a 1.13.0-rc1 (client) / 1.12.3 (server) incompatibility.\r\n\r\n**Steps to reproduce the issue:**\r\n\r\n1. `docker deploy --bundle-file .\\iv.dab iv`\r\n\r\n**Describe the results you received:**\r\n\r\nLoading bundle from .\\iv.dab\r\nCreating network iv_back-tier\r\nError response from daemon: rpc error: code = 3 desc = driver name: if driver is specified name is required\r\n\r\n**Describe the results you expected:**\r\n\r\nDAB file deployed\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThis works with 1.12.3 client\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.13.0-rc1\r\n API version:  1.24 (downgraded from 1.25)\r\n Go version:   go1.7.3\r\n Git commit:   75fd88b\r\n Built:        Fri Nov 11 22:32:34 2016\r\n OS/Arch:      windows/amd64\r\n\r\nServer:\r\n Version:             1.12.3\r\n API version:         1.24\r\n Minimum API version:\r\n Go version:          go1.6.3\r\n Git commit:          6b644ec\r\n Built:               Thu Oct 27 00:09:21 2016\r\n OS/Arch:             linux/amd64\r\n Experimental:        true\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nRunning Windows client and Docker for AWS.\r\n\r\nDAB file below:\r\n\r\n```\r\n{\r\n  \"services\": {\r\n    \"db\": {\r\n      \"Image\": \"postgres@sha256:f76245b04ddbcebab5bb6c28e76947f49222c99fec4aadb0bb1c24821a9e83ef\", \r\n      \"Networks\": [\r\n        \"back-tier\"\r\n      ]\r\n    }, \r\n    \"redis\": {\r\n      \"Image\": \"redis@sha256:2e75b1750a11e1bb060b3af6a80f8f5c536a2b16bc85c02e006ffc2f93ec8ba6\", \r\n      \"Networks\": [\r\n        \"back-tier\"\r\n      ], \r\n      \"Ports\": [\r\n        {\r\n          \"Port\": 6379, \r\n          \"Protocol\": \"tcp\"\r\n        }\r\n      ]\r\n    }, \r\n    \"result\": {\r\n      \"Image\": \"docker4x/demo-result@sha256:9932a45ccc04447430659acb88243ddf3ff207efc8cd28f6cda03da0c9d4a426\", \r\n      \"Networks\": [\r\n        \"front-tier\", \r\n        \"back-tier\"\r\n      ], \r\n      \"Ports\": [\r\n        {\r\n          \"Port\": 80, \r\n          \"Protocol\": \"tcp\"\r\n        }\r\n      ]\r\n    }, \r\n    \"vote\": {\r\n      \"Image\": \"docker4x/demo-vote@sha256:c961faf9a715176f09fe10104fd763b96cf8341d274031cf477b0dfd1fe2af32\", \r\n      \"Networks\": [\r\n        \"front-tier\", \r\n        \"back-tier\"\r\n      ], \r\n      \"Ports\": [\r\n        {\r\n          \"Port\": 80, \r\n          \"Protocol\": \"tcp\"\r\n        }\r\n      ]\r\n    }, \r\n    \"worker\": {\r\n      \"Image\": \"docker4x/demo-worker@sha256:df16d85fba95eef19d2d53f1ee5367c22aa4956fab0977ed9a187d69ec15dab0\", \r\n      \"Networks\": [\r\n        \"back-tier\"\r\n      ]\r\n    }\r\n  }, \r\n  \"version\": \"0.1\"\r\n}\r\n```\r\n\r\ncc @vieux @mavenugo "},{"labels":["api",null,null],"text":"# Problem statement\r\n\r\nDocker 1.12.0 and 1.13.0 introduce new syntaxes for:\r\n\r\n- Mount specifications (`docker run --mount` and `docker service create --mount`)\r\n- Port specifications (`docker service create --port`)\r\n- Secret specifications (`docker service create --secret`)\r\n\r\nThis raises several questions regarding consistency:\r\n\r\n1. What are the guidelines in terms of short syntax (\"porcelain\") versus long syntax (\"plumbing\")?\r\n2. How many flags should be exposed: one for porcelain and one for plumbing, or a single one with two possible syntaxes?\r\n3. Where those flags overlap, do they use the same naming scheme for long syntax option names?\r\n\r\n## Current state\r\n\r\n<table>\r\n  <tbody>\r\n    <tr>\r\n      <th colspan=\"2\">Area</th>\r\n      <th>Mounts</th>\r\n      <th>Ports</th>\r\n      <th>Secrets</th>\r\n    </tr>\r\n    <tr>\r\n      <th align=\"left\" rowspan=\"2\">Syntax</th>\r\n      <th align=\"left\">Short</th>\r\n      <td><a href=\"https://docs.docker.com/engine/reference/run/#/volume-shared-filesystems\"><code>/src:/dest:rw</code></a></td>\r\n      </td>\r\n      <td><a href=\"https://github.com/docker/docker/pull/27917#issuecomment-258556920\"><code>80:8080/tcp</code></a></td>\r\n      <td><code>secret_name</code></td>\r\n    </tr>\r\n<tr>\r\n      <th align=\"left\">Long</th>\r\n      <td><a href=\"https://docs.docker.com/engine/reference/run/#/volume-shared-filesystems\"><code>src=/src,dst=/dest,readonly=true</code></a></td>\r\n      <td><code>target=80,published=8080,protocol=tcp</code></td>\r\n      <td><code>source=secret_name,target=alias</code></td>\r\n</tr>\r\n    <tr>\r\n      <th align=\"left\" rowspan=\"2\">Flags</th>\r\n      <th align=\"left\">Short</th>\r\n      <td><code>-v, --volume</code></td>\r\n      <td><code>-p, --publish</code></td>\r\n      <td><code>--secret</code></td>\r\n    </tr>\r\n<tr>\r\n      <th align=\"left\">Long</th>\r\n      <td><code>--mount</code></td>\r\n      <td><code>--port</code></td>\r\n      <td><code>--secret</code></td>\r\n</tr>\r\n    <tr>\r\n      <th align=\"left\" colspan=\"2\">Named options</th>\r\n      <td>\r\n<ul>\r\n<li>type</li>\r\n<li>src, source</li>\r\n<li>dst, destination, target</li>\r\n<li>readonly, ro</li>\r\n<li>bind-propagation</li>\r\n<li>volume-driver</li>\r\n<li>volume-label</li>\r\n<li>volume-nocopy</li>\r\n<li>volume-opt</li>\r\n</ul>\r\n</td>\r\n<td>\r\n<ul>\r\n<li>target</li>\r\n<li>published</li>\r\n<li>protocol</li>\r\n<li>mode</li>\r\n</ul>\r\n</td>\r\n<td>\r\n\r\n<ul>\r\n<li>source</li>\r\n<li>target</li>\r\n<li>uid</li>\r\n<li>gid</li>\r\n<li>mode</li>\r\n</ul>\r\n</td>\r\n    </tr>\r\n</tbody>\r\n</table>\r\n\r\nWhat we can see from the table above is that:\r\n\r\n- Some areas have a same flag support the short and long syntax.\r\n- Some areas have overlapping named options, but not necessarily the same short versions.\r\n- Some areas have overlapping named options, but not necessarily the same semantic (*to be verified*).\r\n\r\n# Proposal\r\n\r\n*The proposal is to ~burn it all~ homogenize according to well defined guidelines that we can reuse in the future for every feature with the same requirement. What follows is an attempt at defining such guidelines.*\r\n\r\nAll features which require both a rich way to express complex things in a non-ambiguous manner, while preserving a nice \"porcelain\" syntax for the 80% use case should:\r\n\r\n1. Use the same flag for both the short and long syntax.\r\n2. The long syntax should be a **comma separated** list of **`arg=value`** specifications (e.g., `arg1=val1,arg2=val2`).\r\n3. The short syntax should be a separated list of values (**NOTE:** separator TBD, although `--publish` and `--volume` use `:` today), which defines positional arguments that map directly to an expanded long term equivalent. For example, given the order `arg1`, `arg2`, `arg3`, the short syntax `val1:val2` is equivalent to the long form `arg1=val1,arg2=val2`. This is inspired by the way Python function invocation syntax deals with optional and keyword-only arguments.\r\n4. Wherever possible, consistency of named arguments in the long form across different features should be enforced, including in any short term aliases that those named arguments can take.\r\n\r\n# What it means for 1.13.0\r\n\r\nIf we agree to move forward with this, then we need to review the current set of flags and act accordingly:\r\n\r\n- [x] The newly introduced `--port` flag should likely disappear in favor of `--publish`, ensuring that the short form maps cleanly to the long form. #28943\r\n- [x] We know that the `-v` syntax is likely already too overloaded to map cleanly to the long-syntax equivalent introduced by mount, and we might need to drop support for `--mount` in `run` until we can figure this out.\r\n- [ ] We need to reconcile named arguments in secrets with those in mounts (especially with regard to the aliases that `source` supports in mounts).\r\n\r\n# References\r\n\r\n- #26825 - Add `--mount` flag to `docker create` and `docker run`\r\n- #27794 - Add secret management\r\n- #27917 - Add support for host port `PublishMode` in services using the `--port` option in docker service create\r\n\r\nPing @joaofnfernandes @aluzzardi @thaJeztah @mstanleyjones @vieux @dhiltgen @ehazlett @dnephin :cactus:"},{"labels":["api"],"text":"This is a tracking issue so that we don't release 1.13 before the remaining review comments on the secrets feature are addressed; https://github.com/docker/docker/pull/27794#issuecomment-261100495\r\n\r\n/cc @ehazlett @stevvooe "},{"labels":["api",null,null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\nThe output from docker info includes a section *Plugins*, within which there is *Network*. Typically this shows four items: *bridge null host overlay* (in no particular order); but on my docker installations it only shows three: *bridge null host* .\r\n\r\n**Describe the results you received:**\r\n\r\n```\r\nPlugins:\r\n Volume: local\r\n Network: bridge null host\r\n```\r\n\r\n**Describe the results you expected:**\r\n```\r\nPlugins:\r\n Volume: local\r\n Network: bridge null host overlay\r\n```\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n```\r\nClient:\r\n Version:         1.10.3\r\n API version:     1.22\r\n Package version: docker-common-1.10.3-46.el7.centos.10.x86_64\r\n Go version:      go1.6.3\r\n Git commit:      d381c64-unsupported\r\n Built:           Thu Aug  4 13:21:17 2016\r\n OS/Arch:         linux/amd64\r\n\r\nServer:\r\n Version:         1.10.3\r\n API version:     1.22\r\n Package version: docker-common-1.10.3-46.el7.centos.10.x86_64\r\n Go version:      go1.6.3\r\n Git commit:      d381c64-unsupported\r\n Built:           Thu Aug  4 13:21:17 2016\r\n OS/Arch:         linux/amd64\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 3\r\n Running: 3\r\n Paused: 0\r\n Stopped: 0\r\nImages: 3\r\nServer Version: 1.10.3\r\nStorage Driver: devicemapper\r\n Pool Name: docker-253:2-395657-pool\r\n Pool Blocksize: 65.54 kB\r\n Base Device Size: 10.74 GB\r\n Backing Filesystem: xfs\r\n Data file: /dev/loop0\r\n Metadata file: /dev/loop1\r\n Data Space Used: 644.3 MB\r\n Data Space Total: 107.4 GB\r\n Data Space Available: 7.127 GB\r\n Metadata Space Used: 1.552 MB\r\n Metadata Space Total: 2.147 GB\r\n Metadata Space Available: 2.146 GB\r\n Udev Sync Supported: true\r\n Deferred Removal Enabled: false\r\n Deferred Deletion Enabled: false\r\n Deferred Deleted Device Count: 0\r\n Data loop file: /var/lib/docker/devicemapper/devicemapper/data\r\n WARNING: Usage of loopback devices is strongly discouraged for production use. Either use `--storage-opt dm.thinpooldev` or use `--storage-opt dm.no_warn_on_loop_devices=true` to suppress this warning.\r\n Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata\r\n Library Version: 1.02.107-RHEL7 (2016-06-09)\r\nExecution Driver: native-0.2\r\nLogging Driver: json-file\r\nPlugins:\r\n Volume: local\r\n Network: bridge null host\r\nKernel Version: 3.10.0-327.28.3.el7.x86_64\r\nOperating System: CentOS Linux 7 (Core)\r\nOSType: linux\r\nArchitecture: x86_64\r\nNumber of Docker Hooks: 2\r\nCPUs: 2\r\nTotal Memory: 31.26 GiB\r\nName: webdmz8-10-250-130-124\r\nID: 2FHN:3AEV:SPGX:QHHJ:34HL:A3MW:LGR5:MCPB:D7HQ:6CPQ:A4WV:WLVX\r\nWARNING: bridge-nf-call-iptables is disabled\r\nWARNING: bridge-nf-call-ip6tables is disabled\r\nRegistries: docker.io (secure)\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nA set of virtual machines each running CentOS 7.0; the same problem is observed on all seven.\r\n\r\nNote: I understand that the [overlay driver should now be supported on kernel 3.10](https://github.com/docker/docker/releases/tag/v1.10.0) however there might be some remaining incompatibility problem?\r\n\r\n"},{"labels":["api",null,null],"text":"**Description**\r\n\r\n`docker info` yields the following error message, and doesn't display the info:\r\n```\r\nError reading remote info: json: cannot unmarshal object into Go value of type string\r\n```\r\n\r\nAlso, pulling an image yields the following warning (but the pull proceeds anyway):\r\n```\r\nWarning: failed to get default registry endpoint from daemon (Error reading remote info: json: cannot unmarshal object into Go value of type string). Using system default: https://index.docker.io/v1/\r\n```\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.12.1\r\n API version:  1.25\r\n Go version:   go1.6.3\r\n Git commit:   23cf638\r\n Built:        Thu Aug 18 05:32:35 2016\r\n OS/Arch:      linux/amd64\r\n Experimental: true\r\n\r\nServer:\r\n Version:      1.13.0-rc1\r\n API version:  1.25\r\n Go version:   go1.7.3\r\n Git commit:   75fd88b\r\n Built:        Fri Nov 11 19:47:07 2016\r\n OS/Arch:      linux/amd64\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nError reading remote info: json: cannot unmarshal object into Go value of type string\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nFWIW I provisioned the Engine with `docker-machine` 0.9.0-rc1 on AWS."},{"labels":["api",null],"text":"## Reasoning\r\n\r\nAs part of [my work to improve the API documentation](https://github.com/docker/docker.github.io/pull/210) I realised that \"Docker Remote API\" is a bit of a confusing name. The Docker Registry serves the [Docker Registry API](https://docs.docker.com/registry/spec/api/), Docker Cloud serves the [Docker Cloud API](https://docs.docker.com/registry/spec/api/), Docker Hub has (had?) the [Docker Hub API](https://docs.docker.com/v1.7/reference/api/docker-io_api/), Docker Trusted Registry has the [Docker Trusted Registry API](https://docs.docker.com/apidocs/overview/), but Engine is the odd one out.\r\n\r\nAs far as I can see, it's a historical artefact from when \"Docker\" was just the Engine. We've since added other APIs, and the original was never given a distinctive name.\r\n\r\nBesides consistency, here are some reasons for the change:\r\n\r\n1) \"Remote\" is redundant – all HTTP APIs are remote. \"Docker API\" would collide with other Docker APIs, hence \"Docker Engine API\".\r\n2) When you want to find the API for the Engine, it's not immediately clear that you should be looking for the \"Remote API\". (And vice versa, \"Remote API\" does not make it immediately obvious that it's the thing the Engine exposes.)\r\n3) The information architecture in the documentation is a bit weird, because \"Remote API\" doesn't comfortably sit under \"Engine\".\r\n\r\n## Implementation\r\n\r\nThe only place we reference it seems to be in the documentation and CLI docs, so looks like we can just do a big ol' search and replace.\r\n\r\nThe only breakage I can think of is if people search for \"Docker Remote API\" on Google and the documentation doesn't turn up. To counteract this, we can leave it as the \"Remote API\" in old versions of the API documentation, and add \"Remote API\" to the keywords of the latest API docs. Or, just a bit of copy like: \"In version X of Docker and below, the Engine API was called the Docker Remote API.\"\r\n\r\n/cc @dnephin @johndmulhausen @icecrime @shykes "},{"labels":["api",null,null],"text":"**Description**\r\n\r\nThe WebSocket container attach endpoint at `/containers/<container ID>/attach/ws` always sends text frames, but the data contained within those frames is just the bytestream from the container's stdout or stderr. This means that the text frames may not contain valid UTF-8 data, but the WebSocket spec requires that text frames only contain valid UTF-8:\r\n\r\nhttps://tools.ietf.org/html/rfc6455#section-8.1\r\n\r\nWeb browsers such as Chrome, for instance, will automatically close a WebSocket connection if they get invalid UTF-8 data in a text frame.\r\n\r\n**Steps to reproduce the issue:**\r\nOne can create a container that creates invalid UTF-8 data by simply doing:\r\n\r\n```\r\ndocker run -it busybox sh -c \"while true; do echo -e '\\\\xc3\\\\x28'; done\"\r\n```\r\n\r\n**Describe the results you received:**\r\nGot invalid UTF-8 bytes in a WebSocket text frame.\r\n\r\n**Describe the results you expected:**\r\nThe frames would either be marked as binary frames or their contents would be sanitized somehow.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nServer:\r\n Version:      1.12.2-cs2\r\n API version:  1.24\r\n Go version:   go1.6.3\r\n Git commit:   d5fda6e\r\n Built:        Wed Oct 12 22:55:42 2016\r\n OS/Arch:      linux/amd64\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\n```\r\nContainers: 0\r\n Running: 0\r\n Paused: 0\r\n Stopped: 0\r\nImages: 73\r\nServer Version: 1.12.2-cs2\r\nStorage Driver: aufs\r\n Root Dir: /mnt/sda1/var/lib/docker/aufs\r\n Backing Filesystem: extfs\r\n Dirs: 77\r\n Dirperm1 Supported: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge null host overlay\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nSecurity Options: seccomp\r\nKernel Version: 4.4.24-boot2docker\r\nOperating System: Boot2Docker 1.12.1 (TCL 7.2); master : 4b170dc - Fri Oct  7 22:28:40 UTC 2016\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 1\r\nTotal Memory: 1.955 GiB\r\nName: default-cs\r\nID: AMY7:2Q4A:QOPC:LLOK:7C5O:OOTV:Q7OS:5RZN:QBQR:DC3B:DFXB:MPL6\r\nDocker Root Dir: /mnt/sda1/var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): true\r\n File Descriptors: 31\r\n Goroutines: 125\r\n System Time: 2016-11-08T19:52:31.989430161Z\r\n EventsListeners: 0\r\nUsername: wsongdocker\r\nRegistry: https://index.docker.io/v1/\r\nLabels:\r\n provider=virtualbox\r\nInsecure Registries:\r\n 127.0.0.0/8\r\n```\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n"},{"labels":["api",null],"text":"#26276 introduced a backwards incompatible api change in the docker info api. If the client reports a lower API version than 1.25, we need to return a response using the old format."},{"labels":["api",null,null,null],"text":"<!--\r\nIf you are reporting a new issue, make sure that we do not have any duplicates\r\nalready open. You can ensure this by searching the issue list for this\r\nrepository. If there is a duplicate, please close your issue and add a comment\r\nto the existing issue instead.\r\n\r\nIf you suspect your issue is a bug, please edit your issue description to\r\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\r\ninformation within 7 days, we cannot debug your issue and will close it. We\r\nwill, however, reopen it if you later provide the information.\r\n\r\nFor more information about reporting issues, see\r\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\r\n\r\n---------------------------------------------------\r\nGENERAL SUPPORT INFORMATION\r\n---------------------------------------------------\r\n\r\nThe GitHub issue tracker is for bug reports and feature requests.\r\nGeneral support can be found at the following locations:\r\n\r\n- Docker Support Forums - https://forums.docker.com\r\n- IRC - irc.freenode.net #docker channel\r\n- Post a question on StackOverflow, using the Docker tag\r\n\r\n---------------------------------------------------\r\nBUG REPORT INFORMATION\r\n---------------------------------------------------\r\nUse the commands below to provide key information from your environment:\r\nYou do NOT have to include this information if this is a FEATURE REQUEST\r\n-->\r\n\r\n**Description**\r\n\r\n<!--\r\nBriefly describe the problem you are having in a few paragraphs.\r\n-->\r\n\r\nThe docker engine server-side API does not respect the Source parameter provided by the API (which specifies a reader that can be used). When specifying a Source with no SourceName (they are described as mutually exclusive in the docs), it tries to process an empty string as a URL and while doing that successfully producing `http://`, yields no error except for in the response body, which makes it really fun to catch. :)\r\n\r\n**Steps to reproduce the issue:**\r\n1. use the docker api for image import with no SourceName and an open io.Reader attached to Source\r\n2. monitor err and response reader, the latter will be readable with json output stating the error. the former will be nil.\r\n3. observe it is trying to pull `http://`\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nI think the relevant code is here: look at this https://github.com/docker/docker/blob/master/api/server/router/image/image_routes.go#L109-L115\r\n\r\nI don't believe the body is considered at all without examining the post parameters first.\r\n\r\nIs this a case of wrong docs?\r\n\r\nhttps://godoc.org/github.com/docker/docker/api/types#ImageImportSource\r\n\r\n**Output of `docker version`:**\r\n\r\n```\r\nClient:\r\n Version:      1.12.3\r\n API version:  1.24\r\n Go version:   go1.6.3\r\n Git commit:   6b644ec\r\n Built:        Wed Oct 26 22:01:48 2016\r\n OS/Arch:      linux/amd64\r\n\r\nServer:\r\n Version:      1.12.3\r\n API version:  1.24\r\n Go version:   go1.6.3\r\n Git commit:   6b644ec\r\n Built:        Wed Oct 26 22:01:48 2016\r\n OS/Arch:      linux/amd64\r\n\r\n```\r\n\r\n**Output of `docker info`:**\r\n\r\nnot using the docker client but I'm using the 1.12.3 tag and also tried docker/engine-api before finding out it was deprecated.\r\n\r\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\r\n\r\nbuilding with go 1.7.3, but i really doubt that matters"},{"labels":["api"],"text":"Related: https://github.com/docker/engine-api/issues/77, #5893, #22931\r\n\r\nWe now have a [swagger spec](https://github.com/docker/docker/blob/master/api/swagger.yaml) which we use to generate a few types. This issue is to document and track the rest of the required work.\r\n\r\n## Project\r\n\r\n* [x] (#28215) add a validate script to check that running the generation does not result in file changes (same idea as `validate-vendor`)\r\n* [x] (#28038) add validation for the swagger.yaml file (see https://github.com/bfirsh/docker-api-reference/blob/master/dobi.yaml) https://github.com/docker/docker/pull/28038\r\n* [x] (#28506) replace [api reference docs](https://docker.github.io/engine/reference/api/docker_remote_api/) with [generated docs](https://bfirsh.github.io/docker-api-reference/). See https://github.com/bfirsh/docker-api-reference for a working prototype and https://github.com/docker/docker.github.io/pull/210 for a WIP PR\r\n* [ ] document how contributors can work with the swagger spec and add new types.\r\n\r\n## Milestone 1 - Types\r\n \r\nGenerate `api/types` from the spec:\r\n\r\n**api/types/types.go**\r\n* [x] ContainerChange\r\n* [x] ImageHistory\r\n* [x] ImageDelete\r\n* [x] GraphDriverData\r\n* [ ] RootFS\r\n* [ ] ImageInspect\r\n* [ ] Container\r\n* [x] CopyConfig\r\n* [ ] ContainerPathStat\r\n* [ ] ContainerStats\r\n* [ ] ContainerProcessList\r\n* [x] Version\r\n* [ ] Info\r\n* [ ] PluginsInfo\r\n* [ ] ExecStartCheck\r\n* [ ] HealthcheckResult\r\n* [ ] Health\r\n* [ ] ContainerState\r\n* [ ] ContainerNode\r\n* [ ] ContainerJSONBase\r\n* [ ] ContainerJSON\r\n* [ ] NetworkSettings\r\n* [ ] SummaryNetworkSettings\r\n* [ ] NetworkSettingsBase\r\n* [ ] DefaultNetworkSettings\r\n* [ ] MountPoint\r\n* [ ] NetworkResource\r\n* [ ] EndpointResource\r\n* [ ] NetworkCreate\r\n* [ ] NetworkCreateRequest\r\n* [ ] NetworkCreateResponse\r\n* [ ] NetworkConnect\r\n* [ ] NetworkDisconnect\r\n* [ ] Checkpoint\r\n* [ ] Runtime\r\n* [ ] DiskUsage\r\n* [ ] ImagesPruneConfig\r\n* [ ] ContainersPruneConfig\r\n* [ ] VolumesPruneConfig\r\n* [ ] NetworksPruneConfig\r\n* [ ] ContainersPruneReport\r\n* [ ] VolumesPruneReport\r\n* [ ] ImagesPruneReport\r\n* [ ] NetworksPruneReport\r\n\r\n**api/types/swarm/**:\r\n* [ ] Version\r\n* [ ] Meta\r\n* [ ] Annotations\r\n* [ ] ContainerSpec\r\n* [ ] Endpoint\r\n* [ ] EndpointSpec\r\n* [ ] ResolutionMode\r\n* [ ] PortConfig\r\n* [ ] PortConfigProtocol\r\n* [ ] EndpointVirtualIP\r\n* [ ] Network\r\n* [ ] NetworkSpec\r\n* [ ] NetworkAttachmentConfig\r\n* [ ] NetworkAttachment\r\n* [ ] IPAMOptions\r\n* [ ] IPAMConfig\r\n* [ ] Driver\r\n* [ ] Node\r\n* [ ] NodeSpec\r\n* [ ] NodeRole\r\n* [ ] NodeAvailability\r\n* [ ] NodeDescription\r\n* [ ] Platform\r\n* [ ] EngineDescription\r\n* [ ] PluginDescription\r\n* [ ] NodeStatus\r\n* [ ] Reachability\r\n* [ ] ManagerStatus\r\n* [ ] NodeState\r\n* [ ] Service\r\n* [ ] ServiceSpec\r\n* [ ] ServiceMode\r\n* [ ] UpdateState\r\n* [ ] UpdateStatus\r\n* [ ] ReplicatedService\r\n* [ ] GlobalService\r\n* [ ] UpdateConfig\r\n* [ ] ClusterInfo\r\n* [ ] Swarm\r\n* [ ] JoinTokens\r\n* [ ] Spec\r\n* [ ] OrchestrationConfig\r\n* [ ] TaskDefaults\r\n* [ ] RaftConfig\r\n* [ ] DispatcherConfig\r\n* [ ] CAConfig\r\n* [ ] ExternalCAProtocol\r\n* [ ] ExternalCAProtocol\r\n* [ ] ExternalCA\r\n* [ ] InitRequest\r\n* [ ] JoinRequest\r\n* [ ] LocalNodeState\r\n* [ ] Info\r\n* [ ] Peer\r\n* [ ] UpdateFlags\r\n* [ ] TaskState\r\n* [ ] Task\r\n* [ ] TaskSpec\r\n* [ ] Resources\r\n* [ ] ResourceRequirements\r\n* [ ] Placement\r\n* [ ] RestartPolicy\r\n* [ ] RestartPolicyCondition\r\n* [ ] TaskStatus\r\n* [ ] ContainerStatus\r\n\r\n\r\n## Milestone 2 - Client\r\n\r\nGenerate (most of) `client/` from the spec. \r\n\r\nThis milestone can be done in parallel with Milestone 3, but requires a prototype before work can be enumerated.\r\n\r\n## Milestone 3 - Server (router)\r\n\r\nGenerate (most of) `api/server/router/` from the spec. \r\n\r\nThis milestone can be done in parallel with Milestone 2, but requires a prototype before work can be enumerated.\r\n\r\n"},{"labels":["api",null,null,null],"text":"**Description**\n\nThe Docker Remote API response to `GET /containers/(id or name)/json` changed in version 1.20 and 1.21 from prior versions, changing the location of some fields.  Docker attempts to maintain compatibility by dispatching to [a versioned function](https://github.com/docker/docker/blob/v1.12.2/daemon/inspect.go#L16-L27), which functions properly [on Linux](https://github.com/docker/docker/blob/v1.12.2/daemon/inspect_unix.go#L23) (with logic to provide the expected values of old fields).  However, on Windows, that function [just calls the current version](https://github.com/docker/docker/blob/v1.12.2/daemon/inspect_windows.go#L29-L32) instead of the requested compatibility version.\n\n**Steps to reproduce the issue:**\n1. Call the inspect API with the current API version on Linux\n2. Call the inspect API with an old (pre-1.20) version on Linux\n3. Call the inspect API with the current API version on Windows\n4. Call the inspect API with an old (pre-1.20) version on Windows\n5. Observe that a Linux daemon returns an appropriate response for the requested version while a Windows daemon returns the current API version response regardless of requested version\n\n**Describe the results you received:**\n\nA Windows daemon ignores the requested API version and just returns a response appropriate for the current version of the API.\n\n**Describe the results you expected:**\n\nExpected the Windows daemon to either return an appropriate response for the requested API version or to reject the request for an unsupported API version.\n\n**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.2-cs2-ws-beta\n API version:  1.25\n Go version:   go1.7.1\n Git commit:   050b611\n Built:        Tue Oct 11 02:35:40 2016\n OS/Arch:      windows/amd64\n\nServer:\n Version:      1.12.2-cs2-ws-beta\n API version:  1.25\n Go version:   go1.7.1\n Git commit:   050b611\n Built:        Tue Oct 11 02:35:40 2016\n OS/Arch:      windows/amd64\n```\n\n**Output of `docker info`:**\n\n```\nPS C:\\Users\\Administrator> docker info\nContainers: 0\n Running: 0\n Paused: 0\n Stopped: 0\nImages: 0\nServer Version: 1.12.2-cs2-ws-beta\nStorage Driver: windowsfilter\n Windows:\nLogging Driver: json-file\nPlugins:\n Volume: local\n Network: nat null overlay\nSwarm: inactive\nDefault Isolation: process\nKernel Version: 10.0 14393 (14393.321.amd64fre.rs1_release_inmarket.161004-2338)\nOperating System: Windows Server 2016 Datacenter\nOSType: windows\nArchitecture: x86_64\nCPUs: 8\nTotal Memory: 32 GiB\nName: EC2AMAZ-T211LER\nID: 6JSQ:WIFX:QJ25:TM5T:JBOG:CR7M:NSOW:X2AJ:QJXR:PRID:CLE2:6Q67\nDocker Root Dir: C:\\ProgramData\\docker\nDebug Mode (client): false\nDebug Mode (server): false\nRegistry: https://index.docker.io/v1/\nInsecure Registries:\n 127.0.0.0/8\nLive Restore Enabled: false\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):** On EC2, using Microsoft Windows Server 2016 Base with Containers - ami-5e6bce3e\n"},{"labels":["api",null,null],"text":"Networks don't support updates. While this makes sense for the most part (it's impossible to change a driver midway), there are some fields which would be harmless to update such as labels.\n\nThere's also some other fields which could be considered such as `attachable`.\n\n/cc @diogomonica @mrjana @mavenugo \n"},{"labels":["api",null],"text":"**Description**\nThe below is the response body for a `POST (uri)/containers/create?name=(name)` and it is malformed JSON but valid JS. This is an issue because `JSON.parse` cannot handle the response. Instead we have to resort to using `eval()` on the response.\n\nActual repsonse:\n\n``` json\n{ Id: '604e48f4b7a650340b43c0bbb139d334edf63fe3476f2e503877b3e2c8cc1a2a',\n  Warnings: null }\n```\n\nShould be:\n\n``` json\n{ \"Id\": \"604e48f4b7a650340b43c0bbb139d334edf63fe3476f2e503877b3e2c8cc1a2a\",\n  \"Warnings\": null }\n```\n\n**Steps to reproduce the issue:**\n1. Make any valid `/containers/create` request to a engine remote\n2. Run JSON.parse on the response's body\n3. Handle error `SyntaxError: Unexpected token o in JSON at position 1`\n\n**Describe the results you received:**\nI received invalid JSON on a http response that should yield valid JSON for the content-type \"application/json\"\n\n**Describe the results you expected:**\nValid json that meets RFC7159 specification  https://tools.ietf.org/html/rfc7159 \nSpecifically the part that says **\"A string begins and ends with quotation marks.\"**\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\n\n**Output of `docker version`:**\n\n```\nDocker version 1.12.1, build 23cf638\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 8\n Running: 0\n Paused: 0\n Stopped: 8\nImages: 10\nServer Version: 1.12.1\nStorage Driver: devicemapper\n Pool Name: docker-253:0-202281288-pool\n Pool Blocksize: 65.54 kB\n Base Device Size: 10.74 GB\n Backing Filesystem: xfs\n Data file: /dev/loop0\n Metadata file: /dev/loop1\n Data Space Used: 932.2 MB\n Data Space Total: 107.4 GB\n Data Space Available: 33.4 GB\n Metadata Space Used: 2.22 MB\n Metadata Space Total: 2.147 GB\n Metadata Space Available: 2.145 GB\n Thin Pool Minimum Free Space: 10.74 GB\n Udev Sync Supported: true\n Deferred Removal Enabled: false\n Deferred Deletion Enabled: false\n Deferred Deleted Device Count: 0\n Data loop file: /var/lib/docker/devicemapper/devicemapper/data\n Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata\n Library Version: 1.02.107-RHEL7 (2016-06-09)\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: bridge null host overlay\nSwarm: inactive\nRuntimes: runc\nDefault Runtime: runc\nSecurity Options: seccomp\nKernel Version: 3.10.0-327.36.1.el7.x86_64\nOperating System: CentOS Linux 7 (Core)\nOSType: linux\nArchitecture: x86_64\nCPUs: 2\nTotal Memory: 3.703 GiB\nName: vm\nID: RPLT:DWEL:LJBT:54Z6:H2KO:44F5:2NQB:BL6K:L7IT:UCMJ:OYQH:UT6Z\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): true\n File Descriptors: 17\n Goroutines: 26\n System Time: 2016-10-16T09:59:17.159342406-04:00\n EventsListeners: 0\nRegistry: https://index.docker.io/v1/\nInsecure Registries:\n 127.0.0.0/8\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\nI'm running Centos 7 in VirtualBox Version 5.1.6 r110634 (Qt5.5.1)\nI can replicate this on my DigitalOcean VPS running Centos7 as well.\nI encountered this while writing a NodeJS library https://github.com/matutter/docker-as-promised/tree/dev  \n"},{"labels":["api",null],"text":"Hi,\nDoes anyone knows how to specify the network parameter (name and driver) while creating a docker service via Docker Remote API ?\nI'm doing it like this:\nPOST: http://vm-test1.sandbox.lan:2375/services/create\nBody:\n\n> {\n>     \"Name\": \"test-service\",\n>     \"TaskTemplate\": {\n>         \"ContainerSpec\": {\n>             \"Image\": \"vm-test1.sandbox.lan:5000/test-image\"\n>         },\n>         \"LogDriver\": {\n>             \"Name\": \"syslog\",\n>             \"Options\": {\n>                 \"tag\": \"test-service\"\n>             }\n>         },\n>         \"EndpointSpec\": {\n>             \"Ports\": [{\n>                 \"Protocol\": \"tcp\",\n>                 \"PublishedPort\": 10080,\n>                 \"TargetPort\": 8080\n>             }]\n>         }\n>     },\n>     \"Networks\": [{\n>         \"Name\": \"test_network\",\n>         \"Driver\": \"overlay\"\n>     }]\n> }\n\nHowever, I get a 403 Forbidden message:\n`{\"message\":\"network bridge is not eligible for docker services\"}`\n\n> docker network ls\n> NETWORK ID          NAME                DRIVER              SCOPE\n> c97a6c216498        bridge              bridge              local  \n> ew1wt4xa5olk        test_network        overlay             swarm  \n> 6ae7e1d9fe4b        docker_gwbridge     bridge              local       \n\nI believe that something is wrong inside my JSON request,  at \"Networks\" field.\n\nDocker Remote API v1.24\n\n> Create a service\n> POST /services/create\n> ...\n> Networks – Array of network names or IDs to attach the service to.\n"},{"labels":["api",null,null,null,null],"text":"<!--\nIf you are reporting a new issue, make sure that we do not have any duplicates\nalready open. You can ensure this by searching the issue list for this\nrepository. If there is a duplicate, please close your issue and add a comment\nto the existing issue instead.\n\nIf you suspect your issue is a bug, please edit your issue description to\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\ninformation within 7 days, we cannot debug your issue and will close it. We\nwill, however, reopen it if you later provide the information.\n\nFor more information about reporting issues, see\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\n\n---------------------------------------------------\nBUG REPORT INFORMATION\n---------------------------------------------------\nUse the commands below to provide key information from your environment:\nYou do NOT have to include this information if this is a FEATURE REQUEST\n-->\n\n**Description**\nWhen I ran the \"info\" path in the Remote API v1.24 I got a lot more fields then the documentation said, these are:\n\nPlugins > Authorization\nCPUShares\nCPUSet\nBridgeNfIptables\nBridgeNfIp6tables\nExecutionDriver\nLoggingDriver\nRegistryConfig > Mirrors??? (the IndexConfigs have array of Mirrors but the RegistryConfig itself has also Mirrors, maybe a bug?)\nClusterAdvertise\nRuntimes\nDefaultRuntime\nSwarm (has lots of things in it)\nLiveRestoreEnabled\n\nI attach the raw response json I got:\n[info.txt](https://github.com/docker/docker/files/512218/info.txt)\n\n**Steps to reproduce the issue:**\n1. run \"/info\" on the remote api v1.24\n2. check the response JSON and compare to docs\n3.\n\n**Describe the results you received:**\nLots of more fields then documentation has\n\n**Describe the results you expected:**\nDocumentation of all fields\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\n\n**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.1\n API version:  1.24\n Go version:   go1.7\n Git commit:   23cf638\n Built:        Fri Aug 19 02:03:02 2016\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.12.1\n API version:  1.24\n Go version:   go1.7\n Git commit:   23cf638\n Built:        Fri Aug 19 02:03:02 2016\n OS/Arch:      linux/amd64\n\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 1\n Running: 0\n Paused: 0\n Stopped: 1\nImages: 6\nServer Version: 1.12.1\nStorage Driver: devicemapper\n Pool Name: docker-253:1-10223820-pool\n Pool Blocksize: 65.54 kB\n Base Device Size: 10.74 GB\n Backing Filesystem: xfs\n Data file: /dev/loop0\n Metadata file: /dev/loop1\n Data Space Used: 664.9 MB\n Data Space Total: 107.4 GB\n Data Space Available: 106.7 GB\n Metadata Space Used: 1.389 MB\n Metadata Space Total: 2.147 GB\n Metadata Space Available: 2.146 GB\n Thin Pool Minimum Free Space: 10.74 GB\n Udev Sync Supported: true\n Deferred Removal Enabled: false\n Deferred Deletion Enabled: false\n Deferred Deleted Device Count: 0\n Data loop file: /var/lib/docker/devicemapper/devicemapper/data\n WARNING: Usage of loopback devices is strongly discouraged for production use. Use `--storage-opt dm.thinpooldev` to specify a custom block storage device.\n Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata\n Library Version: 1.02.135 (2016-09-26)\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: overlay null host bridge\nSwarm: inactive\nRuntimes: runc\nDefault Runtime: runc\nSecurity Options: seccomp\nKernel Version: 4.7.5-1-ARCH\nOperating System: Arch Linux\nOSType: linux\nArchitecture: x86_64\nCPUs: 8\nTotal Memory: 23.49 GiB\nName: karl_rog\nID: IOCD:Y7FK:RDB6:43I7:QLCF:OBP5:LKJR:QLYD:NC6U:V7GA:ROQA:TCVE\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): false\nRegistry: https://index.docker.io/v1/\nInsecure Registries:\n codeslasher.se:5000\n 127.0.0.0/8\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\n"},{"labels":["api",null,null],"text":"Hello, Docker Team.\n\nDocker inspect incorrectly shows environment variable with ampersand (&).\n\n**Steps to reproduce the issue:**\n1. docker run -ti --env TEST_ENV=\"soanni&rtr\" alpine:latest sh\n2. docker inspect <container_id>\n3. Screenshot is attached\n\n**Output of `docker version`:**\n\nClient:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:\n OS/Arch:      linux/amd64\n\n**Output of `docker info`:**\n\nContainers: 1\n Running: 1\n Paused: 0\n Stopped: 0\nImages: 51\nServer Version: 1.12.0\nStorage Driver: devicemapper\n Pool Name: docker-202:2-8828904-pool\n Pool Blocksize: 65.54 kB\n Base Device Size: 10.74 GB\n Backing Filesystem: xfs\n Data file: /dev/loop0\n Metadata file: /dev/loop1\n Data Space Used: 5.301 GB\n Data Space Total: 107.4 GB\n Data Space Available: 1.405 GB\n Metadata Space Used: 9.22 MB\n Metadata Space Total: 2.147 GB\n Metadata Space Available: 1.405 GB\n Thin Pool Minimum Free Space: 10.74 GB\n Udev Sync Supported: true\n Deferred Removal Enabled: false\n Deferred Deletion Enabled: false\n Deferred Deleted Device Count: 0\n Data loop file: /var/lib/docker/devicemapper/devicemapper/data\n WARNING: Usage of loopback devices is strongly discouraged for production use. Use `--storage-opt dm.thinpooldev` to specify a custom block storage device.\n Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata\n Library Version: 1.02.107-RHEL7 (2015-10-14)\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: bridge null host overlay\nSwarm: inactive\nRuntimes: runc\nDefault Runtime: runc\nSecurity Options: seccomp\nKernel Version: 3.10.0-327.el7.x86_64\nOperating System: Red Hat Enterprise Linux Server 7.2 (Maipo)\nOSType: linux\nArchitecture: x86_64\nCPUs: 1\nTotal Memory: 991.7 MiB\nName: ip-172-31-25-213.us-west-2.compute.internal\nID: RZKH:EXW3:V7DY:HOFH:Y7BK:YMSK:OEML:AD3H:FZDO:WC2F:7GPC:BMCE\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): false\nRegistry: https://index.docker.io/v1/\nInsecure Registries:\n 127.0.0.0/8\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\nAWS AMI Linux\n\n![image](https://cloud.githubusercontent.com/assets/5715840/18952955/2c1ab79a-865d-11e6-9fa2-e2fbab8878a4.png)\n"},{"labels":["api",null,null,null],"text":"First time daemon is booted (no `docker0` bridge present, no or empty `/var/lib/docker/network/files/local-kv.db` file), IPAM.Config structure in network inspect output will not contain the Gateway field\n\n```\n$ docker network inspect bridge\n[\n    {\n        \"Name\": \"bridge\",\n        \"Id\": \"2b5cc5f97b6de6a5e0533b1e2d5bec6284d900a9a82632ce782320a19db8b9e0\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": null,\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.17.0.0/16\"\n                }\n            ]\n        },\n\n```\n\nVerified problem exists in `1.11.2`, `1.12.0` and in current master (`1.13.0`).\n\nGiven the `IPAM.Config` filed currently used to carry both configuration and operational data, the gateway address should always be there.\n\n**Note:**\nA daemon reload will fix the issue\n"},{"labels":["api",null,null],"text":"The following change that was merged yesterday broke some of our tests:\n\nhttps://github.com/docker/docker/commit/53774423ff0db50cb0934e7b1e5ce507363e8147#diff-5251fbdfab3c1500c0c76ec0d8adf746R78\n\nIt's a backwards incompatible API change and prevents older docker clients from running containers on newer daemons. I think it should be reverted unless a compatibility layer is added for older engines.\n"},{"labels":["api",null],"text":"**Description**\nThanks for the work on this project. \n\nAttempting to pull an image (by sending a request to the remote API) fails depending on the whitespace present in the unencoded auth config. Here are examples:\n\n``` shell\n# WORKS\nAUTH=`echo -n \"{ \\\"username\\\": \\\"$DOCKER_USERNAME\\\",\n     \\\"password\\\": \\\"$DOCKER_PASSWORD\\\",\n     \\\"serveraddress\\\": \\\"$DOCKER_REGISTRY\\\"\n}\" | perl -pe 's/\\r\\n|\\n|\\r/\\r\\n/g' | base64`;\ncurl -X POST -H \"X-Registry-Auth: $AUTH\" -H \"Cache-Control: no-cache\" \\\nhttps://$DOCKER_HOST_IP:2376/images/create\\?fromImage\\=$DOCKER_REGISTRY%2Fcassandra\\&tag\\=latest \\\n--cert $DOCKER_CERT_PATH/cert.p12 --pass mypass --key $DOCKER_CERT_PATH/key.pem --cacert $DOCKER_CERT_PATH/ca.pem\n\n# {\"status\":\"Pulling from cassandra\",\"id\":\"latest\"}\n# . . . \n```\n\n``` shell\n# FAILS\nAUTH=`echo -n \"{\\\"username\\\": \\\"$DOCKER_USERNAME\\\",\n     \\\"password\\\": \\\"$DOCKER_PASSWORD\\\",\n     \\\"serveraddress\\\": \\\"$DOCKER_REGISTRY\\\"\n}\" | perl -pe 's/\\r\\n|\\n|\\r/\\r\\n/g' | base64`;\ncurl -X POST -H \"X-Registry-Auth: $AUTH\" -H \"Cache-Control: no-cache\" \\\nhttps://$DOCKER_HOST_IP:2376/images/create\\?fromImage\\=$DOCKER_REGISTRY%2Fcassandra\\&tag\\=latest \\\n--cert $DOCKER_CERT_PATH/cert.p12 --pass mypass --key $DOCKER_CERT_PATH/key.pem --cacert $DOCKER_CERT_PATH/ca.pem\n\n# {\"message\":\"Get https://my-registry.com/v2/cassandra/manifests/latest: unauthorized: authentication required\"}\n```\n\nNote:\n- The only difference between the two is the space after the opening `{` of the auth json. No space breaks it.\n- I needed to use DOS line endings to get anything to work at all.\n\n**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.1\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   23cf638\n Built:        Thu Aug 18 17:52:38 2016\n OS/Arch:      darwin/amd64\n\nServer:\n Version:      1.12.1\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   23cf638\n Built:        Thu Aug 18 17:52:38 2016\n OS/Arch:      linux/amd64\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 9\n Running: 2\n Paused: 0\n Stopped: 7\nImages: 13\nServer Version: 1.12.1\nStorage Driver: aufs\n Root Dir: /mnt/sda1/var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 180\n Dirperm1 Supported: true\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: host bridge null overlay\nSwarm: inactive\nRuntimes: runc\nDefault Runtime: runc\nSecurity Options: seccomp\nKernel Version: 4.4.17-boot2docker\nOperating System: Boot2Docker 1.12.1 (TCL 7.2); HEAD : ef7d0b4 - Thu Aug 18 21:18:06 UTC 2016\nOSType: linux\nArchitecture: x86_64\nCPUs: 1\nTotal Memory: 3.858 GiB\nName: default\nID: SLVU:TD74:RZM6:KB5M:7IXK:PEVM:7QWW:NDLB:MYTY:BY6D:BFGM:CKHF\nDocker Root Dir: /mnt/sda1/var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): true\n File Descriptors: 25\n Goroutines: 48\n System Time: 2016-09-15T14:16:52.261023938Z\n EventsListeners: 0\nRegistry: https://index.docker.io/v1/\nLabels:\n provider=virtualbox\nInsecure Registries:\n 127.0.0.0/8\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\nDocker Machine is running in VirtualBox Version 5.1.4 r110228 (Qt5.5.1)\n"},{"labels":["api",null,null],"text":"**Description**\n\nWhen using the remote API to create a service but in the params an invalid network ID is send, the API returns 404. A 404 error signals in REST semantics that an inexistent resource has been tryied to be accessed. However, in this case we are creating a new resource, the fact that the new resource has a property that \"links\" to an invalid resource should not be relevant in this case.\nBesides, the documentation https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/#/create-a-volume\ndoes not mention that the call can return 404:\n\n**Steps to reproduce the issue:**\nJust use the remote API to create a service with an invalid network ID\n\n**Describe the results you received:**\n404 { message: 'network xxxxxx not found' }\n\n**Describe the results you expected:**\n406 { message: 'network xxxxxx not found' }\n\n**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 23:54:00 2016\n OS/Arch:      darwin/amd64\n\nServer:\n Version:      1.12.1\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   23cf638\n Built:        Thu Aug 18 05:33:38 2016\n OS/Arch:      linux/amd64\n```\n"},{"labels":["api",null,null,null],"text":"**Description**\n\nWhen trying to create a network using the remote API, according to the documentation 1.24 (https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/#/create-a-network)\nthe IPAM field is an optional parameter, but if not provided, the following error is returned:\n\"rpc error: code = 3 desc = driver name: if driver is specified name is required\" which does not seem correct either.\n\n**Steps to reproduce the issue:**\nJust use the remote API to create a network, using curl or whatever you feel comfortable with.\n**Describe the results you received:**\n\"rpc error: code = 3 desc = driver name: if driver is specified name is required\"\n\n**Describe the results you expected:**\nstatus = 201\n\n**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 23:54:00 2016\n OS/Arch:      darwin/amd64\n\nServer:\n Version:      1.12.1\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   23cf638\n Built:        Thu Aug 18 05:33:38 2016\n OS/Arch:      linux/amd64\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 158\n Running: 8\n Paused: 0\n Stopped: 150\nImages: 258\nServer Version: 1.12.1\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 577\n Dirperm1 Supported: true\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: bridge overlay host null\nSwarm: active\n NodeID: cbq5d7h0cigpzulcfyqvaomlq\n Is Manager: true\n ClusterID: 070qemaxhu18hg3tvatjlh602\n Managers: 1\n Nodes: 1\n Orchestration:\n  Task History Retention Limit: 5\n Raft:\n  Snapshot interval: 10000\n  Heartbeat tick: 1\n  Election tick: 3\n Dispatcher:\n  Heartbeat period: 5 seconds\n CA configuration:\n  Expiry duration: 3 months\n Node Address: 138.201.132.20\nRuntimes: runc\nDefault Runtime: runc\nSecurity Options: apparmor seccomp\nKernel Version: 4.4.0-36-generic\nOperating System: Ubuntu 16.04.1 LTS\nOSType: linux\nArchitecture: x86_64\nCPUs: 8\nTotal Memory: 62.75 GiB\nName: caturra\nID: 46TP:5YN6:AVJS:7CAZ:JZJO:SFJY:H5R7:JVJR:OCQU:NW4Y:5WL7:UDLX\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): false\nUsername: manast\nRegistry: https://index.docker.io/v1/\nWARNING: No swap limit support\nLabels:\n provider=generic\nInsecure Registries:\n 127.0.0.0/8\n```\n"},{"labels":["api",null,null,null],"text":"Somewhat frequently users see this error when trying to `docker rm foo`: `device or resource busy`.\nThis error is returned from the kernel when trying to remove container rw layers and/or the container config root... typically due to mounts leaked into other namespaces.\nWhen this happens the container gets flagged as `Dead` and they can re-try later... or if the user specified `-f` it'll just get removed from the container list by force even if the underlying files are still there... this may leak disk space.\n\nI propose instead of erroring out we add these paths to a deferred deletion queue where we can re-try unmounting and removing them every X amount of time.\n\nPaths in this state should be visible to the data management command proposed here: #26108\nAnd a call to `docker prune` would also cause a forced GC run of these deferred removals out-of-band from the normal run.\n\n`Dead` containers should not be seen by end users... except maybe in the aforementioned data management command.\n\nping @mlaventure \n"},{"labels":["api",null,null,null],"text":"**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.1-rc1\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   7889dc7\n Built:        Fri Aug 12 18:35:53 2016\n OS/Arch:      darwin/amd64\n Experimental: true\n\nServer:\n Version:      1.12.1-rc1\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   7889dc7\n Built:        Fri Aug 12 18:35:53 2016\n OS/Arch:      linux/amd64\n Experimental: true\n```\n\n**Steps to reproduce the issue:**\n\nIn one terminal:\n\n``` bash\ndocker events --filter event=health_status\n```\n\nIn another terminal;\n\n``` bash\ndocker run --name=test -d --health-cmd='stat /etc/passwd || exit 1' --health-interval=2s   busybox sleep 1d\n```\n\n**Describe the results you received:**\n\n``` bash\n$ docker events --filter event=health_status\n<no output>\n\n$ docker events --filter event=exec_create\n<no output>\n\n\n$ docker events --filter event=exec_start\n<no output>\n```\n\n**Describe the results you expected:**\n\n``` bash\n$ docker events --filter event=health_status\n\n2016-08-17T12:10:34.337301145Z container health_status: healthy da1bab7bc91a424cd8e0571808c1b4638a903a8508eb6612e9cdfc49f9dde555 (image=busybox, name=test)\n\n\n$ docker events --filter event=exec_create\n\n2016-08-17T12:10:34.198347963Z container exec_create: /bin/sh -c stat /etc/passwd || exit 1 da1bab7bc91a424cd8e0571808c1b4638a903a8508eb6612e9cdfc49f9dde555 (image=busybox, name=test)\n2016-08-17T12:10:36.338156681Z container exec_create: /bin/sh -c stat /etc/passwd || exit 1 da1bab7bc91a424cd8e0571808c1b4638a903a8508eb6612e9cdfc49f9dde555 (image=busybox, name=test)\n\n\n$ docker events --filter event=exec_start\n\n2016-08-17T12:10:34.198549073Z container exec_start: /bin/sh -c stat /etc/passwd || exit 1 da1bab7bc91a424cd8e0571808c1b4638a903a8508eb6612e9cdfc49f9dde555 (image=busybox, name=test)\n2016-08-17T12:10:36.338214034Z container exec_start: /bin/sh -c stat /etc/passwd || exit 1 da1bab7bc91a424cd8e0571808c1b4638a903a8508eb6612e9cdfc49f9dde555 (image=busybox, name=test)\n```\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\n\nI tried to reproduce on older versions of docker, and this seems to work on Docker 1.8, but fails on Docker 1.9\n\nI debugged this issue, and as far as I can see, the cause of this is that, unlike other events, the `event.Action` for `exec_create`, `exec_start`, and `health_status` contains additional output. This is the content of `event.Action` of events fired by the example container;\n\n```\ncreate\nconnect\nstart\nexec_create: /bin/sh -c stat /etc/passwd || exit 1\nexec_start: /bin/sh -c stat /etc/passwd || exit 1\nhealth_status: healthy\n```\n\nThe filter executes an _exact_ match on `event.Action` (`ef.filter.ExactMatch(\"event\", ev.Action)`), and fails to recognize the events due to this extra output;\n\nSee [daemon/events/filter.go#L21)](https://github.com/docker/docker/blob/297745b1cdfb79a12986465f8150e22b0018c640/daemon/events/filter.go#L21), and [vendor/src/github.com/docker/engine-api/types/filters/parse.go#L209-L219](https://github.com/docker/docker/blob/75109b32db4c23f469b57fb99300fc5d4a689dce/vendor/src/github.com/docker/engine-api/types/filters/parse.go#L209-L219)\n\nPossibly we can change the `ef.filter.ExactMatch()` with `ef.filter.FuzzyMatch()`, however that would result in `--filter event=exec` to match both `exec_start` and `exec_create` (not sure we want that).\n\nIf we want this filter to be an \"exact\" match, we could filter on;\n1. Exact match (for, e.g. `start`)\n2. A _prefix_ match for `exec_start:` (the event name provided, but with a _colon_ (`:`) after\n\nThis would prevent `exec` to match `exec_start`.\n"},{"labels":["api",null,null,null],"text":"When issuing a docker run command with the --volume option, a volume name with a label one character in length will result in a long random string being provided to the driver as the name (like: 051280b61be3b55d1d3a80899475ea7abb657da4cf9bd65a4263a6c4ceacde73).\n\nThis was found utilizing the NetApp volume plugin, but is present without the plugin involved.\n\n**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 22:11:10 2016\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 22:11:10 2016\n OS/Arch:      linux/amd64\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 4\n Running: 0\n Paused: 0\n Stopped: 4\nImages: 3\nServer Version: 1.12.0\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 21\n Dirperm1 Supported: true\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local netapp\n Network: host bridge overlay null\nSwarm: inactive\nRuntimes: runc\nDefault Runtime: runc\nSecurity Options: apparmor seccomp\nKernel Version: 4.4.0-34-generic\nOperating System: Ubuntu 16.04.1 LTS\nOSType: linux\nArchitecture: x86_64\nCPUs: 2\nTotal Memory: 3.859 GiB\nName: openstack2\nID: OMJ2:4XKE:HUKO:C3VM:KHEG:UK2D:BHDG:CEP5:ON5Y:SGWX:2W5V:CFMW\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): false\nRegistry: https://index.docker.io/v1/\nWARNING: No swap limit support\nInsecure Registries:\n 127.0.0.0/8\n\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\nVM running under KVM/QEMU\n\n**Steps to reproduce the issue:**\n1. Issue a docker run of the form `docker run --rm -it --volume <name>:/my_vol java bash`, where name is a single character in length.\n\n**Describe the results you received:**\nThe volume driver receives a garbage/generated value rather than the expected name.\n\n**Describe the results you expected:**\nThe name passed in through the Create request should be the same name that the user passed in.\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\nN/A\n"},{"labels":["api",null,null,null,null,null],"text":"<!--\nIf you are reporting a new issue, make sure that we do not have any duplicates\nalready open. You can ensure this by searching the issue list for this\nrepository. If there is a duplicate, please close your issue and add a comment\nto the existing issue instead.\n\nIf you suspect your issue is a bug, please edit your issue description to\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\ninformation within 7 days, we cannot debug your issue and will close it. We\nwill, however, reopen it if you later provide the information.\n\nFor more information about reporting issues, see\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\n\n---------------------------------------------------\nBUG REPORT INFORMATION\n---------------------------------------------------\nUse the commands below to provide key information from your environment:\nYou do NOT have to include this information if this is a FEATURE REQUEST\n-->\n\nI'm opening an issue here as well as on engine-api: https://github.com/docker/engine-api/issues/368\n\nThere seems to be a disagreement between engine-api and docker about whether the IPAM driver name is required in the network create api. engine-api doesn't set it by default and docker requires it by default. This breaks existing applications that use engine-api to create overlay networks.\n\n**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 21:04:48 2016\n OS/Arch:      linux/amd64\n Experimental: true\n\nServer:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 21:04:48 2016\n OS/Arch:      linux/amd64\n Experimental: true\n\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 153\n Running: 13\n Paused: 0\n Stopped: 140\nImages: 743\nServer Version: 1.12.0\nStorage Driver: overlay2\n Backing Filesystem: extfs\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: overlay host null bridge\nSwarm: active\n NodeID: 0jnlg1wjfbomj3vpagxqcjied\n Is Manager: true\n ClusterID: 7npas0qe6x670sbnzawyulo5y\n Managers: 1\n Nodes: 1\n Orchestration:\n  Task History Retention Limit: 10\n Raft:\n  Snapshot interval: 10000\n  Heartbeat tick: 1\n  Election tick: 3\n Dispatcher:\n  Heartbeat period: 5 seconds\n CA configuration:\n  Expiry duration: 3 months\n Node Address: 172.17.0.1\nRuntimes: runc\nDefault Runtime: runc\nSecurity Options: seccomp\nKernel Version: 4.6.4-1-ARCH\nOperating System: Arch Linux\nOSType: linux\nArchitecture: x86_64\nCPUs: 4\nTotal Memory: 7.709 GiB\nName: compooter\nID: GKSI:YHZC:YPNI:PAGO:EYPD:AYME:K6BY:BAIH:EBKQ:SOAK:WUFP:6MJM\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): true\n File Descriptors: 1966\n Goroutines: 1943\n System Time: 2016-08-15T15:22:58.960604046-07:00\n EventsListeners: 2\nUsername: viktorstanchev\nRegistry: https://index.docker.io/v1/\nExperimental: true\nInsecure Registries:\n 172.17.0.1\n 192.168.0.106\n dtr2-2061409770.us-west-2.elb.amazonaws.com\n new-1428125395.us-west-2.elb.amazonaws.com\n 127.0.0.0/8\n\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\n\n**Steps to reproduce the issue:**\n1. See https://github.com/docker/engine-api/issues/368\n2.\n3.\n\n**Describe the results you received:**\nerror\n\n**Describe the results you expected:**\nno error\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"},{"labels":["api"],"text":"<!--\nIf you are reporting a new issue, make sure that we do not have any duplicates\nalready open. You can ensure this by searching the issue list for this\nrepository. If there is a duplicate, please close your issue and add a comment\nto the existing issue instead.\n\nIf you suspect your issue is a bug, please edit your issue description to\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\ninformation within 7 days, we cannot debug your issue and will close it. We\nwill, however, reopen it if you later provide the information.\n\nFor more information about reporting issues, see\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\n\n---------------------------------------------------\nBUG REPORT INFORMATION\n---------------------------------------------------\nUse the commands below to provide key information from your environment:\nYou do NOT have to include this information if this is a FEATURE REQUEST\n-->\n\n**Output of `docker version`:**\n\n```\nDocker version 1.11.1, build 5604cbe\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 7\n Running: 7\n Paused: 0\n Stopped: 0\nImages: 8\nServer Version: 1.11.1\nStorage Driver: devicemapper\n Pool Name: docker-253:1-33556103-pool\n Pool Blocksize: 65.54 kB\n Base Device Size: 10.74 GB\n Backing Filesystem: xfs\n Data file: /dev/loop0\n Metadata file: /dev/loop1\n Data Space Used: 2.871 GB\n Data Space Total: 171.8 GB\n Data Space Available: 168.9 GB\n Metadata Space Used: 6.959 MB\n Metadata Space Total: 17.05 GB\n Metadata Space Available: 17.04 GB\n Udev Sync Supported: true\n Deferred Removal Enabled: false\n Deferred Deletion Enabled: false\n Deferred Deleted Device Count: 0\n Data loop file: /var/lib/docker/devicemapper/devicemapper/data\n WARNING: Usage of loopback devices is strongly discouraged for production use. Either use `--storage-opt dm.thinpooldev` or use `--storage-opt dm.no_warn_on_loop_devices=true` to suppress this warning.\n Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata\n Library Version: 1.02.107-RHEL7 (2015-12-01)\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: null host bridge\nKernel Version: 3.10.0-123.4.4.el7.x86_64\nOperating System: CentOS Linux 7 (Core)\nOSType: linux\nArchitecture: x86_64\nCPUs: 8\nTotal Memory: 7.64 GiB\nName: ***\nID: ***\nDocker Root Dir: /var/lib/docker\nDebug mode (client): false\nDebug mode (server): false\nRegistry: https://index.docker.io/v1/\nWARNING: bridge-nf-call-iptables is disabled\nWARNING: bridge-nf-call-ip6tables is disabled\nCluster store: ***\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\n\n**Steps to reproduce the issue:**\n1. `docker inspect [container_id]`\n\n**Describe the results you received:**\nOne can't tell if the container inspected is in removal\n\n**Describe the results you expected:**\nI expect there's a `RemovalInProgress` in `State` from the inspect results, to indicate that the container is in removal.\n\n**We'll be happy to create a PR for this**\n"},{"labels":["api",null,null,null,null],"text":"<!--\nIf you are reporting a new issue, make sure that we do not have any duplicates\nalready open. You can ensure this by searching the issue list for this\nrepository. If there is a duplicate, please close your issue and add a comment\nto the existing issue instead.\n\nIf you suspect your issue is a bug, please edit your issue description to\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\ninformation within 7 days, we cannot debug your issue and will close it. We\nwill, however, reopen it if you later provide the information.\n\nFor more information about reporting issues, see\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\n\n---------------------------------------------------\nBUG REPORT INFORMATION\n---------------------------------------------------\nUse the commands below to provide key information from your environment:\nYou do NOT have to include this information if this is a FEATURE REQUEST\n-->\n\n**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 21:04:48 2016\n OS/Arch:      darwin/amd64\n Experimental: true\n\nServer:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 21:04:48 2016\n OS/Arch:      linux/amd64\n Experimental: true\n```\n\nand\n\n```\nClient:\n Version:      1.11.0\n API version:  1.23\n Go version:   go1.5.4\n Git commit:   4dc5990\n Built:        Wed Apr 13 18:34:23 2016\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.11.0\n API version:  1.23\n Go version:   go1.5.4\n Git commit:   4dc5990\n Built:        Wed Apr 13 18:34:23 2016\n OS/Arch:      linux/amd64\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 99\n Running: 2\n Paused: 0\n Stopped: 97\nImages: 52\nServer Version: 1.12.0\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 250\n Dirperm1 Supported: true\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: bridge host overlay null\nSwarm: inactive\nRuntimes: runc\nDefault Runtime: runc\nSecurity Options: seccomp\nKernel Version: 4.4.15-moby\nOperating System: Alpine Linux v3.4\nOSType: linux\nArchitecture: x86_64\nCPUs: 2\nTotal Memory: 1.954 GiB\nName: moby\nID: A7F5:MEE2:XJ2N:ZQ6Q:HRKO:SRQJ:CTJF:RR3B:6K7F:SQPP:NBJ7:I7MM\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): true\n File Descriptors: 26\n Goroutines: 41\n System Time: 2016-08-10T18:29:32.322513876Z\n EventsListeners: 1\nNo Proxy: *.local, 169.254/16\nUsername: flavin\nRegistry: https://index.docker.io/v1/\nExperimental: true\nInsecure Registries:\n 127.0.0.0/8\n```\n\nand\n\n```\nContainers: 7\n Running: 0\n Paused: 0\n Stopped: 7\nImages: 1\nServer Version: 1.11.0\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 15\n Dirperm1 Supported: true\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: bridge null host\nKernel Version: 4.2.0-27-generic\nOperating System: Ubuntu 14.04.4 LTS\nOSType: linux\nArchitecture: x86_64\nCPUs: 1\nTotal Memory: 1.954 GiB\nName: xnat\nID: 3XVY:66LA:O7YA:ZRXD:5O3L:HR56:FBKD:5CG3:HAV3:JDG7:K3MX:44G7\nDocker Root Dir: /var/lib/docker\nDebug mode (client): false\nDebug mode (server): false\nRegistry: https://index.docker.io/v1/\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\nthe first machine is my local Docker for Mac installation; the second is an Ubuntu 14.04 VM in VirtualBox.\n\n**Steps to reproduce the issue:**\n1. Use the remote API to GET events, using the `since` query param.. For example, here is a simple example that asks for all events since time 0. (I have verified this behavior with other, more realistic time values.)\n\n```\ncurl --unix-socket /var/run/docker.sock http://localhost/events?since=0\n```\n\n**Describe the results you received:**\nThe events in the specified time range (in the example, from time 0 until now) are sent to me from docker, and the HTTP stream remains open.\n\n**Describe the results you expected:**\nThe events in the specified time range (in the example, from time 0 until now) are sent to me from docker, and the stream is closed. This is the documented behavior when using the `since` or `until` query params.\n"},{"labels":["api",null],"text":"For `/nodes`, it looks like the DELETE and GET methods can take either an ID, a full name or an ID prefix, but POST can only use the actual ID. This seems inconsistent (and doesn't match the docs). Let's standardize on one or the other.\n"},{"labels":["api",null,null],"text":"While working on https://github.com/docker/docker/pull/25548, I noticed some things in the plugin API that may need improvement; putting them in an issue so that I don't forget, and we can discuss.\n1. Plugins can only be referenced by _name_ on the API (not by ID). Referencing by ID may be more consistent with other API endpoints, and also keeps control over possibly \"ambiguous\" URLs (see other points below)\n2. Due to using names in the URL we may run into issues with plugins installed from third-party registries (`my-registry:5000/my/plugin:latest`). I'm not sure routing those URL's will always work; they look a bit \"scary\".\n3. Potentially ambiguous URLs (for example, inspecting a plugin called `helloworld/enable` would produce URL `/plugins/helloworld/enable`). This is not a _direct_ issue, because inspect uses `GET`, and enable `POST`, but just posting in case.\n4. Some endpoints don't return a message in the response. I didn't check if other endpoints consistently do this, but a \"success\" message may be nice (e.g. `/plugins/(plugin)/enable` only responds with `HTTP/1.1 200 OK`, but no message (e.g. `{message: \"successfully enabled plugin foo\"}`\n\n/cc @anusha-ragunathan @tiborvass @bfirsh\n"},{"labels":["api",null],"text":"The `image/load` endpoint returns either `text/plain` or `application/json`, depending on if the `?quiet` query-parameter is set to true/1 or false/0;\n\n```\ncat my-image.tar | curl --data \"@-\" --verbose -H \"Content-Type: application/x-tar\" -X POST http://127.0.0.1:2375/v1.25/images/load?quiet=0\n\n(snip)\n\nHTTP/1.1 100 Continue\nHTTP/1.1 200 OK\nContent-Type: application/json\nTransfer-Encoding: chunked\n\n{\"status\":\"Loading layer\",\"progressDetail\":{\"current\":32768,\"total\":1292800},\"progress\":\"[=                                                 ] 32.77 kB/1.293 MB\",\"id\":\"8ac8bfaff55a\"}\n{\"status\":\"Loading layer\",\"progressDetail\":{\"current\":65536,\"total\":1292800},\"progress\":\"[==                                                ] 65.54 kB/1.293 MB\",\"id\":\"8ac8bfaff55a\"}\n{\"status\":\"Loading layer\",\"progressDetail\":{\"current\":98304,\"total\":1292800},\"progress\":\"[===                                               ]  98.3 kB/1.293 MB\",\"id\":\"8ac8bfaff55a\"}\n{\"status\":\"Loading layer\",\"progressDetail\":{\"current\":131072,\"total\":1292800},\"progress\":\"[=====                                             ] 131.1 kB/1.293 MB\",\"id\":\"8ac8bfaff55a\"}\n...\n{\"stream\":\"Loaded image: busybox:latest\\n\"}\n```\n\n```\ncat my-image.tar | curl --data \"@-\" --verbose -H \"Content-Type: application/x-tar\" -X POST http://127.0.0.1:2375/v1.25/images/load?quiet=1\n\n(snip)\n\nHTTP/1.1 100 Continue\nHTTP/1.1 200 OK\nContent-Length: 29\nContent-Type: text/plain; charset=utf-8\n\nLoaded image: busybox:latest\n```\n\nThe endpoint should return JSON in both cases to be consistent\n\n/cc @bfirsh \n"},{"labels":["api",null,null,null],"text":"Sorry for being brief, but I feel the subject says it all. If you need anything else, please let me know.\n"},{"labels":["api",null,null],"text":"# Problem statement\n\nThe API/CLI version compatibility requirement is a pain for a huge number of users, and is only getting worse as we have Docker deployed on more and more heterogeneous environments. On the daemon-side, that logic is implemented in the [`VersionMiddleware`](https://github.com/docker/docker/blob/master/api/server/middleware/version.go).\n\n```\n        if versions.GreaterThan(apiVersion, v.defaultVersion) {\n            return badRequestError{fmt.Errorf(\"client is newer than server (client API version: %s, server API version: %s)\", apiVersion, v.defaultVersion)}\n        }\n        if versions.LessThan(apiVersion, v.minVersion) {\n            return badRequestError{fmt.Errorf(\"client version %s is too old. Minimum supported API version is %s, please upgrade your client to a newer version\", apiVersion, v.minVersion)}\n        }\n```\n\nToday, the only possible workaround is a horrific hack that simply overrides the version string using the [`DOCKER_API_VERSION`](https://github.com/docker/docker/blob/7c8780ea6327b1d403b13c8b144d9557b5e655e5/api/client/cli.go#L221-L223) environment variable.\n# Possible solution\n\nCreate a Go package capable of detecting the remote version and accommodating for that (up to its own capabilities, of course). Perhaps we could create a repository that packages multiple versions of the [`docker/engine-api`](https://github.com/docker/engine-api) project and would be \"version-aware\"? It would expose the latest Go interface, and could provide policies on ways to deal with unsolvable incompatibilities (e.g., the server you're interacting with doesn't implement feature X).\n\nAny idea is welcome on the best way to tackle this!\n\nCc @vdemeester @fermayo @crosbymichael.\n"},{"labels":["api",null,null],"text":"**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 22:00:36 2016\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.12.0\n API version:  1.24\n Go version:   go1.6.3\n Git commit:   8eab29e\n Built:        Thu Jul 28 22:00:36 2016\n OS/Arch:      linux/amd64\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 53\n Running: 1\n Paused: 0\n Stopped: 52\nImages: 138\nServer Version: 1.12.0\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 186\n Dirperm1 Supported: true\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: bridge overlay null host\nSwarm: inactive\nRuntimes: runc\nDefault Runtime: runc\nSecurity Options: apparmor\nKernel Version: 3.19.0-33-generic\nOperating System: Ubuntu 14.04.5 LTS\nOSType: linux\nArchitecture: x86_64\nCPUs: 4\nTotal Memory: 15.67 GiB\nName: mafiosso-HSC\nID: 4IXB:YZFW:X4AW:LUMH:4K3Z:VB5V:DNAZ:DFPP:GCRY:EJJF:PB6F:HBVX\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): false\nRegistry: https://index.docker.io/v1/\nWARNING: No swap limit support\nInsecure Registries:\n 127.0.0.0/8\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\n\n**Steps to reproduce the issue:**\n1. Post a large image via curl on /load\n\n**Describe the results you received:**\n Remote API returns code 500 with message {\"message\":\"http: POST too large\"}.\n\n**Describe the results you expected:**\nExpected behavior shloud be code 200\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"},{"labels":["api",null,null],"text":"Docker version - v1.12 \nOS - Ubuntu 14.04.4-LTS\nClustering mode - Swarm\n\nCreated an overlay network:\n\n```\n$ docker -H tcp://0.0.0.0:2375 network create --driver overlay --subnet=10.0.9.0/24 my-net\n```\n\nCreating the container: `[POST] http://localhost:2375/container/create?name={id}`\n\n```\n{\n\"Env\": [\n        \"env1=val1\"\n   ],\n   \"Cmd\": [\n       \"/Run.sh\",\n       \"launch\n    ],\n   \"Image\": \"<image>\",\n   \"Volumes\": {\n       \"/tmp\" : {}\n   },\n   \"HostConfig\": {\n     \"NetworkMode\": \"my-net\"\n   }\n}\n```\n\nResponse of $ docker inspect:\n\n```\n\"HostConfig\": {\n    \"Binds\": null,\n    \"ContainerIDFile\": \"\",\n    \"LogConfig\": {\n        \"Type\": \"json-file\",\n        \"Config\": {}\n    },\n    \"NetworkMode\": \"my-net\",\n    \"PortBindings\": null,\n    \"RestartPolicy\": {\n        \"Name\": \"\",\n        \"MaximumRetryCount\": 0\n    },\n    \"AutoRemove\": false,\n    \"VolumeDriver\": \"\",\n    \"VolumesFrom\": null,\n}\n```\n\nThis creates container with networkMode as my-net. But when I run the container using the rest API `[POST] http://localhost:2375/containers/{id}/start` networkMode changes to default.\n\nResponse of $ docker inspect:\n\n```\n\"HostConfig\": {\n    \"Binds\": null,\n    \"ContainerIDFile\": \"\",\n    \"LogConfig\": {\n        \"Type\": \"json-file\",\n        \"Config\": {}\n    },\n    \"NetworkMode\": \"default\",\n    \"PortBindings\": null,\n    \"RestartPolicy\": {\n        \"Name\": \"\",\n        \"MaximumRetryCount\": 0\n    },\n    \"AutoRemove\": false,\n    \"VolumeDriver\": \"\",\n    \"VolumesFrom\": null,\n}\n```\n\nWhereas `docker run --network=my-net` command works fine with overlay network.\n"},{"labels":["api",null],"text":"## Why we should do this\n\nThere are various ways we can clean up the API to fit HTTP conventions. This will make it easier to comprehend, easier to use, and generally better organised.\n\nHere are some things that could be changed:\n1. We could remove `/json` from URLs because:\n   - They're all JSON anyway.\n   - If we want to add different formats, we can use parameters or the `Accept` header.\n   - Consistency with new `/networks` and `/volumes` endpoints.\n2. We could remove `/create` from API URLs because `POST` implies you are creating.\n3. We could remove `/update` from API URLs and use `PUT` instead.\n## Why we shouldn't do this\n\nArguably, this is a pretty big change for a minor improvement in usability and aesthetics. It wouldn't be a breaking change because we can use a new API version, but it _is_ breaking in the sense that people will be forced to update their client libraries to use this API version.\n\nAlthough this is a minor improvement on the surface, I think people who see this crufty API design will perceive Docker as poor quality, and it is a [broken window](https://en.wikipedia.org/wiki/Broken_windows_theory) that encourages more bad design.\n## How\n\nThis is non-trivial, because some other API endpoints need renaming (e.g. `/images/search` will collide with an image called `search`). See the failed attempt in [#23219](https://github.com/docker/docker/pull/23219) for full details.\n\nThe trivial ones:\n- Rename `GET /containers/json` to `GET /containers`\n- Rename `GET /containers/(id or name)/json` to `GET /containers/(id or name)`\n- Rename `POST /containers/(id or name)/update` to `PUT /containers/(id or name)`\n- Rename `GET /images/json` to `GET /images`\n- Rename `POST /images/create` to `POST /images`\n- Rename `GET /images/json` to `GET /images`\n- Rename `GET /images/(name)/json` to `GET /images/(name)`\n- Rename `POST /images/create` to `POST /images`\n- Rename `GET /exec/(id)/json` to `GET /exec/(id)`\n- Rename `POST /volumes/create` to `POST /volumes`\n- Rename `POST /networks/create` to `POST /networks`\n- Rename `POST /services/create` to `POST /services`\n- Rename `POST /services/(id or name)/update` to `PUT /services/(id or name)`\n\nThe ones that are a bit more complex: \n- Do something to `GET /images/search` because it collides with `GET /images/(name)`. We could either:\n  - Move it client side, because all it does is query Docker Hub.\n  - Give it a different name. e.g. `GET /image-search?q=...` It's a different resource to daemon images, anyway.\n- Rename `GET /images/(name)/get` to `GET /images/(name)?format=tar` (`GET .../get` is not particularly descriptive)\n- Rename `POST /images/load` to `POST /images?format=tar`\n- Rename `GET /images/get?names=(name1)&names=(name2)` to `GET /images?format=tar&name=(name1)&name=(name2)`. Alternatively, we could remove this entirely because it's probably pretty simple to concatenate the tarballs client-side.\n## See also\n- #5893\n- #23219\n\n/cc @justincormack @thaJeztah @vdemeester @cpuguy83 \n"},{"labels":["api",null,null,null],"text":"Stopping multiple containers is currently implemented in the client.\n\nAs a result, stopping multiple containers takes longer than needed, and also can result in only _some_ of the containers being stopped if the client disconnects during the process.\n\nFor example, having three containers, and stopping them all through the CLI;\n\n``` bash\ndocker run -dit --name one busybox\ndocker run -dit --name two busybox\ndocker run -dit --name three busybox\n\ndocker stop one two three\n```\n\nResults in:\n\n```\nDEBU[0683] Calling POST /v1.25/containers/one/stop\nDEBU[0683] Sending 15 to 4abc5dc9add562469a8aeda45c6955453c6615ca0a6d897ce2aff01f33acd04e\nINFO[0693] Container 4abc5dc9add562469a8aeda45c6955453c6615ca0a6d897ce2aff01f33acd04e failed to exit within 10 seconds of signal 15 - using the force\nDEBU[0693] Sending 9 to 4abc5dc9add562469a8aeda45c6955453c6615ca0a6d897ce2aff01f33acd04e\nDEBU[0693] containerd: process exited                    id=4abc5dc9add562469a8aeda45c6955453c6615ca0a6d897ce2aff01f33acd04e pid=init status=137 systemPid=734\nDEBU[0693] received containerd event: &types.Event{Type:\"exit\", Id:\"4abc5dc9add562469a8aeda45c6955453c6615ca0a6d897ce2aff01f33acd04e\", Status:0x89, Pid:\"init\", Timestamp:0x578a7d0e}\nDEBU[0693] Revoking external connectivity on endpoint one (9aad9a405dde09368cf35444ffa3b65a664856f8786ef8aecd59594f6a5caf19)\nDEBU[0693] Releasing addresses for endpoint one's interface on network bridge\nDEBU[0693] ReleaseAddress(LocalDefault/172.18.0.0/16, 172.18.0.2)\nDEBU[0693] Calling POST /v1.25/containers/two/stop\nDEBU[0693] Sending 15 to de985018aa64897c1ec5d5b985143403450559741ef05c103e74784c06397941\nINFO[0703] Container de985018aa64897c1ec5d5b985143403450559741ef05c103e74784c06397941 failed to exit within 10 seconds of signal 15 - using the force\nDEBU[0703] Sending 9 to de985018aa64897c1ec5d5b985143403450559741ef05c103e74784c06397941\nDEBU[0703] containerd: process exited                    id=de985018aa64897c1ec5d5b985143403450559741ef05c103e74784c06397941 pid=init status=137 systemPid=775\nDEBU[0703] received containerd event: &types.Event{Type:\"exit\", Id:\"de985018aa64897c1ec5d5b985143403450559741ef05c103e74784c06397941\", Status:0x89, Pid:\"init\", Timestamp:0x578a7d18}\nDEBU[0703] Revoking external connectivity on endpoint two (8453045aeb96f59a41e32cac1351835df8820e11460bac6c666e7378440f5cd6)\nDEBU[0703] Releasing addresses for endpoint two's interface on network bridge\nDEBU[0703] ReleaseAddress(LocalDefault/172.18.0.0/16, 172.18.0.3)\nDEBU[0703] Calling POST /v1.25/containers/three/stop\nDEBU[0703] Sending 15 to 744058945ea8424a1be8ba640ce5fe722edf6e0815714720bae8a3d34f41f459\nINFO[0713] Container 744058945ea8424a1be8ba640ce5fe722edf6e0815714720bae8a3d34f41f459 failed to exit within 10 seconds of signal 15 - using the force\nDEBU[0713] Sending 9 to 744058945ea8424a1be8ba640ce5fe722edf6e0815714720bae8a3d34f41f459\nDEBU[0713] containerd: process exited                    id=744058945ea8424a1be8ba640ce5fe722edf6e0815714720bae8a3d34f41f459 pid=init status=137 systemPid=817\nDEBU[0713] received containerd event: &types.Event{Type:\"exit\", Id:\"744058945ea8424a1be8ba640ce5fe722edf6e0815714720bae8a3d34f41f459\", Status:0x89, Pid:\"init\", Timestamp:0x578a7d23}\nDEBU[0713] Revoking external connectivity on endpoint three (8c14e18ecee41b2ff8aef42678ddee73a5b522e0be5442782cf0da92d189b15b)\nDEBU[0714] Releasing addresses for endpoint three's interface on network bridge\nDEBU[0714] ReleaseAddress(LocalDefault/172.18.0.0/16, 172.18.0.4)\n```\n\nThe client calls `stop` for the first container, and doesn't stop the second container\nuntil stopping the first container was completed. Stopping these containers therefore\ntakes 30 seconds.\n\nOn the other hand, stopping the _daemon_ (dockerd), will execute this in parallel, so only taking 10 seconds;\n\n```\n^CINFO[0748] Processing signal 'interrupt'\nDEBU[0748] starting clean shutdown of all containers...\nDEBU[0748] stopping de985018aa64897c1ec5d5b985143403450559741ef05c103e74784c06397941\nDEBU[0748] Sending 15 to de985018aa64897c1ec5d5b985143403450559741ef05c103e74784c06397941\nDEBU[0748] stopping 744058945ea8424a1be8ba640ce5fe722edf6e0815714720bae8a3d34f41f459\nDEBU[0748] Sending 15 to 744058945ea8424a1be8ba640ce5fe722edf6e0815714720bae8a3d34f41f459\nDEBU[0748] stopping 4abc5dc9add562469a8aeda45c6955453c6615ca0a6d897ce2aff01f33acd04e\nDEBU[0748] Sending 15 to 4abc5dc9add562469a8aeda45c6955453c6615ca0a6d897ce2aff01f33acd04e\nINFO[0758] Container 4abc5dc9add562469a8aeda45c6955453c6615ca0a6d897ce2aff01f33acd04e failed to exit within 10 seconds of signal 15 - using the force\nDEBU[0758] Sending 9 to 4abc5dc9add562469a8aeda45c6955453c6615ca0a6d897ce2aff01f33acd04e\nINFO[0758] Container 744058945ea8424a1be8ba640ce5fe722edf6e0815714720bae8a3d34f41f459 failed to exit within 10 seconds of signal 15 - using the force\nDEBU[0758] Sending 9 to 744058945ea8424a1be8ba640ce5fe722edf6e0815714720bae8a3d34f41f459\nINFO[0758] Container de985018aa64897c1ec5d5b985143403450559741ef05c103e74784c06397941 failed to exit within 10 seconds of signal 15 - using the force\nDEBU[0758] Sending 9 to de985018aa64897c1ec5d5b985143403450559741ef05c103e74784c06397941\n```\n\nWe could improve here, and have an API endpoint that allows stopping _multiple_ containers, so that\nstopping occurs in parallel.\n"},{"labels":["api",null],"text":"**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.0-rc3\n API version:  1.24\n Go version:   go1.6.2\n Git commit:   91e29e8\n Built:        Sat Jul  2 00:09:24 2016\n OS/Arch:      darwin/amd64\n Experimental: true\n\nServer:\n Version:      1.12.0-rc3\n API version:  1.24\n Go version:   go1.6.2\n Git commit:   876f3a7\n Built:        Tue Jul  5 02:20:13 2016\n OS/Arch:      linux/amd64\n Experimental: true\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 19\n Running: 1\n Paused: 0\n Stopped: 18\nImages: 9\nServer Version: 1.12.0-rc3\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 60\n Dirperm1 Supported: true\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: overlay bridge null host\nSwarm: inactive\nRuntimes: runc\nDefault Runtime: runc\nSecurity Options: seccomp\nKernel Version: 4.4.14-moby\nOperating System: Alpine Linux v3.4\nOSType: linux\nArchitecture: x86_64\nCPUs: 2\nTotal Memory: 1.954 GiB\nName: moby\nID: 2DSY:BZFE:2LSD:RS2O:KQWU:HAWE:H6DW:SXZ5:ZPHJ:ZMYY:X2TY:P35F\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): true\n File Descriptors: 23\n Goroutines: 43\n System Time: 2016-07-14T01:29:33.766456833Z\n EventsListeners: 1\nRegistry: https://index.docker.io/v1/\nExperimental: true\nInsecure Registries:\n 127.0.0.0/8\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\nDocker for Mac\n\n**Steps to reproduce the issue:**\n1. Start a container. `docker run -it ubuntu /bin/bash`\n2. Use the API to get information. `curl --unix-socket /var/run/docker.sock http:/containers/json`\n3. Specify an older version of the API. `curl --unix-socket /var/run/docker.sock http:/v1.22/containers/json`\n\n**Describe the results you received:**\n1. API version 1.24\n   `[{\"Id\":\"c0cf517247df0c0b4dbc17c78e09582a017c0a15c45b5031cd7297fe459ae416\",\"Names\":[\"/hungry_heisenberg\"],\"Image\":\"ubuntu\",\"ImageID\":\"sha256:12543ced0f6f754223eff4cca67b56cbf9f384456ab9deaa824ba9ff28bcfdd6\",\"Command\":\"/bin/bash\",\"Created\":1468459844,\"Ports\":[],\"Labels\":{},\"State\":\"running\",\"Status\":\"Up 33 seconds\",\"HostConfig\":{\"NetworkMode\":\"default\"},\"NetworkSettings\":{\"Networks\":{\"bridge\":{\"IPAMConfig\":null,\"Links\":null,\"Aliases\":null,\"NetworkID\":\"dfddde6472aac68727b764d95aa8f613075db2b9dc692051c1135340d0532f7a\",\"EndpointID\":\"b89d95007c1d903d8e5ded3493b9b4160c4d084628ae1c38614f3432ab62b4d6\",\"Gateway\":\"172.17.0.1\",\"IPAddress\":\"172.17.0.2\",\"IPPrefixLen\":16,\"IPv6Gateway\":\"\",\"GlobalIPv6Address\":\"\",\"GlobalIPv6PrefixLen\":0,\"MacAddress\":\"02:42:ac:11:00:02\"}}},\"Mounts\":[]}]`\n2. API version 1.22\n   `[{\"Id\":\"c0cf517247df0c0b4dbc17c78e09582a017c0a15c45b5031cd7297fe459ae416\",\"Names\":[\"/hungry_heisenberg\"],\"Image\":\"ubuntu\",\"ImageID\":\"sha256:12543ced0f6f754223eff4cca67b56cbf9f384456ab9deaa824ba9ff28bcfdd6\",\"Command\":\"/bin/bash\",\"Created\":1468459844,\"Ports\":[],\"Labels\":{},\"State\":\"running\",\"Status\":\"Up About a minute\",\"HostConfig\":{\"NetworkMode\":\"default\"},\"NetworkSettings\":{\"Networks\":{\"bridge\":{\"IPAMConfig\":null,\"Links\":null,\"Aliases\":null,\"NetworkID\":\"dfddde6472aac68727b764d95aa8f613075db2b9dc692051c1135340d0532f7a\",\"EndpointID\":\"b89d95007c1d903d8e5ded3493b9b4160c4d084628ae1c38614f3432ab62b4d6\",\"Gateway\":\"172.17.0.1\",\"IPAddress\":\"172.17.0.2\",\"IPPrefixLen\":16,\"IPv6Gateway\":\"\",\"GlobalIPv6Address\":\"\",\"GlobalIPv6PrefixLen\":0,\"MacAddress\":\"02:42:ac:11:00:02\"}}},\"Mounts\":[]}]`\n\n**Describe the results you expected:**\n\nv1.22 and older veresions of the API should not return `\"State\":\"running\"` as this was only added in [v1.23](https://docs.docker.com/engine/reference/api/docker_remote_api/#/v1-23-api-changes)\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"},{"labels":["api",null,null,null],"text":"**Output of `docker version`:**\n\n```\n$ docker version\nClient:\n Version:      1.12.0-dev\n API version:  1.25\n Go version:   go1.6.2\n Git commit:   906c1dc\n Built:        Fri Jun 17 16:48:48 2016\n OS/Arch:      linux/amd64\n Experimental: true\n\nServer:\n Version:      1.12.0-dev\n API version:  1.25\n Go version:   go1.6.2\n Git commit:   906c1dc\n Built:        Fri Jun 17 16:48:48 2016\n OS/Arch:      linux/amd64\n Experimental: true\n```\n\n**Output of `docker info`:**\n\n```\n$ docker info\nContainers: 0\n Running: 0\n Paused: 0\n Stopped: 0\nImages: 0\nServer Version: 1.12.0-dev\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 0\n Dirperm1 Supported: true\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: host bridge overlay null\nSwarm: active\n NodeID: cjz9ffldhgrc2r5v4zj5vvmbi\n IsManager: Yes\n Managers: 1\n Nodes: 1\n CACertHash: sha256:9e85419452564689e7f8a5c72069ae4abe7a7e1ff48958a024e1451cc7c89d7a\nRuntimes: default\nDefault Runtime: default\nSecurity Options: apparmor seccomp\nKernel Version: 4.2.0-23-generic\nOperating System: Ubuntu 15.10\nOSType: linux\nArchitecture: x86_64\nCPUs: 1\nTotal Memory: 1.954 GiB\nName: manager1\nID: 7SAZ:IYHI:XB25:GMRN:OLUS:ERHX:4LAL:2S7A:KLYS:EDL6:GAZM:PQGX\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): true\n File Descriptors: 35\n Goroutines: 109\n System Time: 2016-07-13T11:34:31.825999312-07:00\n EventsListeners: 0\nUsername: mikegoelzer\nRegistry: https://index.docker.io/v1/\nWARNING: No swap limit support\nExperimental: true\nInsecure Registries:\n 127.0.0.0/8\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\n\nVirtualbox\n\n**Steps to reproduce the issue:**\n\n```\n$ curl --unix-socket /var/run/docker.sock http:/networks/ | jq .\n```\n\n**Describe the results you received:**\n\n```\n{\n  \"Name\": \"bridge\",\n  \"Id\": \"63eb8a3bd519a737a1eadaa5143dd89ee832be08c8370f94a8c9f1dc7f7affde\",\n  \"Scope\": \"local\",\n  \"Driver\": \"bridge\",\n  \"EnableIPv6\": false,\n  \"IPAM\": {\n    \"Driver\": \"default\",\n    \"Options\": null,\n    \"Config\": [\n      {\n        \"Subnet\": \"172.17.0.0/16\",\n        \"Gateway\": \"172.17.0.1\"\n      }\n    ]\n  },\n  \"Internal\": false,\n  \"Containers\": {},\n  \"Options\": {\n    \"com.docker.network.bridge.default_bridge\": \"true\",\n    \"com.docker.network.bridge.enable_icc\": \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n    \"com.docker.network.bridge.name\": \"docker0\",\n    \"com.docker.network.driver.mtu\": \"1500\"\n  },\n  \"Labels\": {}\n}\n```\n\n**Describe the results you expected:**\nI would either expect an error (because I am trying to inspect a network with an empty name) or a list of all networks (if it ignores the trailing slash).\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\nSwarm mode is enabled\n"},{"labels":["api",null],"text":"<!--\nIf you are reporting a new issue, make sure that we do not have any duplicates\nalready open. You can ensure this by searching the issue list for this\nrepository. If there is a duplicate, please close your issue and add a comment\nto the existing issue instead.\n\nIf you suspect your issue is a bug, please edit your issue description to\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\ninformation within 7 days, we cannot debug your issue and will close it. We\nwill, however, reopen it if you later provide the information.\n\nFor more information about reporting issues, see\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\n\n---------------------------------------------------\nBUG REPORT INFORMATION\n---------------------------------------------------\nUse the commands below to provide key information from your environment:\nYou do NOT have to include this information if this is a FEATURE REQUEST\n-->\n\n**Output of `docker version`:**\n\n```\nClient:\n Version:      1.12.0-rc3\n API version:  1.24\n Go version:   go1.6.2\n Git commit:   91e29e8\n Built:        \n OS/Arch:      linux/amd64\n Experimental: true\n\nServer:\n Version:      1.12.0-rc3\n API version:  1.24\n Go version:   go1.6.2\n Git commit:   91e29e8\n Built:        \n OS/Arch:      linux/amd64\n Experimental: true\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 0\n Running: 0\n Paused: 0\n Stopped: 0\nImages: 7\nServer Version: 1.12.0-rc3\nStorage Driver: devicemapper\n Pool Name: docker-253:0-25774666-pool\n Pool Blocksize: 65.54 kB\n Base Device Size: 10.74 GB\n Backing Filesystem: xfs\n Data file: /dev/loop0\n Metadata file: /dev/loop1\n Data Space Used: 760.2 MB\n Data Space Total: 107.4 GB\n Data Space Available: 4.982 GB\n Metadata Space Used: 1.606 MB\n Metadata Space Total: 2.147 GB\n Metadata Space Available: 2.146 GB\n Thin Pool Minimum Free Space: 10.74 GB\n Udev Sync Supported: true\n Deferred Removal Enabled: false\n Deferred Deletion Enabled: false\n Deferred Deleted Device Count: 0\n Data loop file: /var/lib/docker/devicemapper/devicemapper/data\n WARNING: Usage of loopback devices is strongly discouraged for production use. Use `--storage-opt dm.thinpooldev` to specify a custom block storage device.\n Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata\n Library Version: 1.02.107-RHEL7 (2016-06-09)\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: host null overlay bridge\nSwarm: active\n NodeID: 1evcplm30vhdpr9aopzh9nyr9\n IsManager: Yes\n Managers: 1\n Nodes: 1\n CACertHash: sha256:849aba16e2db83d572a454d5169152444670824fee4fb810a98cf01f92f62ce1\nRuntimes: runc\nDefault Runtime: runc\nSecurity Options: seccomp\nKernel Version: 3.10.0-327.18.2.el7.x86_64\nOperating System: CentOS Linux 7 (Core)\nOSType: linux\nArchitecture: x86_64\nCPUs: 1\nTotal Memory: 3.703 GiB\nName: centos-vm1.localdomain\nID: PCUR:AM7W:CPRK:4PQY:CMEL:KKRU:AY3Y:KUIX:OONU:7HBU:K65S:ECRK\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): false\nRegistry: https://index.docker.io/v1/\nExperimental: true\nInsecure Registries:\n 127.0.0.0/8\n```\n\n**Steps to reproduce the issue:**\n\n```\n$ docker run -d --privileged -p 8000:8000 --name=dind dockerswarm/dind:1.12.0-rc3 docker daemon -H 0.0.0.0:8000\ndffb8c1a3ae38733c95500014b6ddd069fc70644549c285304d46fd53e40152f\n$ docker -H localhost:8000 swarm init\nSwarm initialized: current node (9c2e1w54km44r2ymo8z4i4wv7) is now a manager.\n$ curl http://localhost:8000/services\nnull\n```\n\n**Describe the results you received:**\nWhen there are no services running in the swarm, the server returns `null`\n\n**Describe the results you expected:**\nWhen there are no services running in the swarm, the server should return `[]`\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\nAlso happens with older 1.12.0 versions (e.g. RC1).\n"},{"labels":["api",null,null,null,null],"text":"Both `docker info` and `docker swarm inspect` display information regarding the swarm.\n\nThey do so in a different way.\n\nThere are also other inconsistencies in `swarm inspect` (#23689, #24122).\n\n/cc @stevvooe @aanand @dnephin @tonistiigi \n"},{"labels":["api",null,null],"text":"Swarm mode internally tracks removed nodes with a cert blacklist recording the CN of the nodes cert.  It would be useful to expose this list via an API for visibility/management purposes.\n"},{"labels":["api",null,null],"text":"Barring a resolution to https://github.com/docker/swarmkit/issues/696 there should be a programmatic way to restart the swarm mode manager after making configuration changes via the API.\n"},{"labels":["api",null],"text":"On `Docker version 1.11.2, build b9f10c9`, both `POST /v1.23/containers/<container ID>/exec` and `POST /v1.23/exec/<exec ID>/start` have the following body:\n\n``` json\n{\n  \"AttachStderr\": true,\n  \"AttachStdin\": true,\n  \"AttachStdout\": true,\n  \"Cmd\": [\n    \"true\"\n  ],\n  \"Container\": \"<container ID>\",\n  \"Detach\": false,\n  \"DetachKeys\": \"\",\n  \"Privileged\": false,\n  \"Tty\": true,\n  \"User\": \"\"\n}\n```\n\nOn `Docker version 1.12.0-rc2, build 906eacd, experimental`, both `POST /v1.24/containers/<container ID>/exec` and `POST /v1.24/exec/<exec ID>/start` have the following body:\n\n``` json\n{\n  \"AttachStderr\": true,\n  \"AttachStdin\": true,\n  \"AttachStdout\": true,\n  \"Cmd\": [\n    \"true\"\n  ],\n  \"Detach\": false,\n  \"DetachKeys\": \"\",\n  \"Privileged\": false,\n  \"Tty\": true,\n  \"User\": \"\"\n}\n```\n\nNote that the bodies are different -- the v1.23 body includes the container ID. This change doesn't appear in the Remote API documentation.\n"},{"labels":["api",null,null],"text":"In Rancher we've been following docker-compose format for naming containers \"stackName_serviceName_number\" (\"foo_bar_1\"). With docker 1.12 change for hostname validation, the containers can no longer be started due to \"Invalid hostname format\". \n\n@thaJeztah commented on https://github.com/rancher/rancher/issues/5195:\n\n> Could you open an issue in the Docker issue tracker as well, to discus this? Although validating the hostname may be a good thing, possibly it's too much of a breaking change\n"},{"labels":["api",null],"text":"See docker/engine-api#279\n\n> # 151 broke backward compat, since StorageOpt is unused most of a time, let's put an omitempty to prevent unmarshalling error.\n\nWe need to bump docker/engine-api for 1.12.0-RC2 and fix this issue.\n"},{"labels":["api",null],"text":"<!--\nIf you are reporting a new issue, make sure that we do not have any duplicates\nalready open. You can ensure this by searching the issue list for this\nrepository. If there is a duplicate, please close your issue and add a comment\nto the existing issue instead.\n\nIf you suspect your issue is a bug, please edit your issue description to\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\ninformation within 7 days, we cannot debug your issue and will close it. We\nwill, however, reopen it if you later provide the information.\n\nFor more information about reporting issues, see\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\n\n---------------------------------------------------\nBUG REPORT INFORMATION\n---------------------------------------------------\nUse the commands below to provide key information from your environment:\nYou do NOT have to include this information if this is a FEATURE REQUEST\n-->\n\nhttps://docs.docker.com/engine/reference/api/docker_remote_api_v1.23\n\nCreate a container -- status codes:\n[mistake] 404: no such container --> image\n[miss] 409: the name \"xxx\" is already in use\n[confuse] 406: impossible to attach.\nHow to trigger a 406 error in a create action?\n\nStart a container -- status codes:\n[mistake] 404: no such container --> can also be \"executable file not found in $PATH\"\n"},{"labels":["api",null,null,null],"text":"Hi, all,\n\nI use two APIs to get one volume details\n\nAs I call `192.168.0.11:2376/volumes` against docker engine :\nNo labels in results.\n\n```\n{\n  \"Volumes\": [\n    {\n      \"Name\": \"allen\",\n      \"Driver\": \"local\",\n      \"Mountpoint\": \"/var/lib/docker/volumes/allen/_data\",\n      \"Labels\": null\n    },\n    {\n      \"Name\": \"test5\",\n      \"Driver\": \"local\",\n      \"Mountpoint\": \"/var/lib/docker/volumes/test5/_data\",\n      \"Labels\": null\n    }\n  ],\n  \"Warnings\": null\n}\n```\n\nwhile calling `192.168.0.11:2376/volumes/test5` has label details:\n\n```\n{\n  \"Name\": \"test5\",\n  \"Driver\": \"local\",\n  \"Mountpoint\": \"/var/lib/docker/volumes/test5/_data\",\n  \"Labels\": {\n    \"owner\": \"ryan\"\n  }\n}\n```\n\nIt is inconsistency. Since Swarm uses /volumes to get volumes, there is no way for user to use `docker volumes inspect xxx` to get volume labels.\n\nrelated https://github.com/docker/swarm/issues/2245\n\ndocker version\n\n```\nroot@ubuntu:~# docker version\nClient:\n Version:      1.11.1\n API version:  1.23\n Go version:   go1.5.4\n Git commit:   5604cbe\n Built:        Tue Apr 26 23:30:23 2016\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.11.1\n API version:  1.23\n Go version:   go1.5.4\n Git commit:   5604cbe\n Built:        Tue Apr 26 23:30:23 2016\n OS/Arch:      linux/amd64\n```\n\ndocker info:\n\n```\nroot@ubuntu:~# docker info\nContainers: 2\n Running: 0\n Paused: 0\n Stopped: 2\nImages: 46\nServer Version: 1.11.1\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 364\n Dirperm1 Supported: true\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: bridge null host\nKernel Version: 3.19.0-25-generic\nOperating System: Ubuntu 14.04.3 LTS\nOSType: linux\nArchitecture: x86_64\nCPUs: 1\nTotal Memory: 1.954 GiB\nName: ubuntu\nID: HRBI:EV6M:3NAC:CXZ3:BDS7:UOKL:PD6Y:ZCK4:V3PF:V7MR:CU2Y:3LGG\nDocker Root Dir: /var/lib/docker\nDebug mode (client): false\nDebug mode (server): true\n File Descriptors: 15\n Goroutines: 33\n System Time: 2016-05-20T02:09:44.861951674+08:00\n EventsListeners: 1\nRegistry: https://index.docker.io/v1/\nWARNING: No swap limit support\n```\n\nuname -a\n\n```\nroot@ubuntu:~# uname -a\nLinux ubuntu 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:16:20 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n```\n"},{"labels":["api",null],"text":"Querying a container looks like this\n\n``` JSON\n{\n    \"Id\": \"6f50c841707d1a2c9e456faecbfe9e7d9174bf5004179506b20d7d9f4c3d806a\",\n    \"Names\": [\n      \"/big_yalow\"\n    ],\n    \"Image\": \"mongo\",\n    \"ImageID\": \"sha256:ddad4160b92fbfe39698089d72ca6c8907b7d997fd0c5aeafe5a0ade825803f8\",\n    \"Command\": \"/entrypoint.sh mongod\",\n    \"Created\": 1462167207,\n    \"Ports\": [\n      {\n        \"PrivatePort\": 27017,\n        \"Type\": \"tcp\"\n      }\n    ],\n    \"Labels\": {},\n    \"Status\": \"Up 3 days\",\n    \"HostConfig\": {\n      \"NetworkMode\": \"default\"\n    },\n    \"NetworkSettings\": {\n      \"Networks\": {\n        \"bridge\": {\n          \"IPAMConfig\": null,\n          \"Links\": null,\n          \"Aliases\": null,\n          \"NetworkID\": \"\",\n          \"EndpointID\": \"46e04db264b5fd529c7a8f80f59ab1a60ccc82b85821fef66de9e202cf98d323\",\n          \"Gateway\": \"172.17.0.1\",\n          \"IPAddress\": \"172.17.0.3\",\n          \"IPPrefixLen\": 16,\n          \"IPv6Gateway\": \"\",\n          \"GlobalIPv6Address\": \"\",\n          \"GlobalIPv6PrefixLen\": 0,\n          \"MacAddress\": \"02:42:ac:11:00:03\"\n        },\n        \"isolated_nw\": {\n          \"IPAMConfig\": null,\n          \"Links\": null,\n          \"Aliases\": null,\n          \"NetworkID\": \"\",\n          \"EndpointID\": \"2dc44cc549b09e972dbc86a2a453b77af6bb6a7989e2db5ec87c7d4d61caacd9\",\n          \"Gateway\": \"172.20.10.11\",\n          \"IPAddress\": \"172.20.10.0\",\n          \"IPPrefixLen\": 16,\n          \"IPv6Gateway\": \"\",\n          \"GlobalIPv6Address\": \"\",\n          \"GlobalIPv6PrefixLen\": 0,\n          \"MacAddress\": \"02:42:ac:14:0a:00\"\n        }\n      }\n    }\n  },\n```\n\nI was hoping we could get something like this.\n\n``` JSON\n{\n    \"Id\": \"6f50c841707d1a2c9e456faecbfe9e7d9174bf5004179506b20d7d9f4c3d806a\",\n    \"Names\": [\n      \"/big_yalow\"\n    ],\n    \"Image\": \"mongo\",\n    \"ImageID\": \"sha256:ddad4160b92fbfe39698089d72ca6c8907b7d997fd0c5aeafe5a0ade825803f8\",\n    \"Command\": \"/entrypoint.sh mongod\",\n    \"Created\": 1462167207,\n    \"Ports\": [\n      {\n        \"PrivatePort\": 27017,\n        \"Type\": \"tcp\"\n      }\n    ],\n    \"Labels\": {},\n    \"Status\": \"Up 3 days\",\n    \"HostConfig\": {\n      \"NetworkMode\": \"default\"\n    },\n    \"NetworkSettings\": {\n      \"Networks\": [\n       {\n          \"Name\": \"bridge\",\n          \"IPAMConfig\": null,\n          \"Links\": null,\n          \"Aliases\": null,\n          \"NetworkID\": \"\",\n          \"EndpointID\": \"46e04db264b5fd529c7a8f80f59ab1a60ccc82b85821fef66de9e202cf98d323\",\n          \"Gateway\": \"172.17.0.1\",\n          \"IPAddress\": \"172.17.0.3\",\n          \"IPPrefixLen\": 16,\n          \"IPv6Gateway\": \"\",\n          \"GlobalIPv6Address\": \"\",\n          \"GlobalIPv6PrefixLen\": 0,\n          \"MacAddress\": \"02:42:ac:11:00:03\"\n        },\n         {\n          \"Name\": \"isolated_nw\",\n          \"IPAMConfig\": null,\n          \"Links\": null,\n          \"Aliases\": null,\n          \"NetworkID\": \"\",\n          \"EndpointID\": \"2dc44cc549b09e972dbc86a2a453b77af6bb6a7989e2db5ec87c7d4d61caacd9\",\n          \"Gateway\": \"172.20.10.11\",\n          \"IPAddress\": \"172.20.10.0\",\n          \"IPPrefixLen\": 16,\n          \"IPv6Gateway\": \"\",\n          \"GlobalIPv6Address\": \"\",\n          \"GlobalIPv6PrefixLen\": 0,\n          \"MacAddress\": \"02:42:ac:14:0a:00\"\n        }\n      ]\n    }\n  },\n```\n\nThis would making lining the api request using GraphQL much easier as then the schema would be better defined rather than having dynamic object names. I'm looking at just converting the object each time before pushing it to graphQL\n"},{"labels":["api",null,null,null],"text":"**Output of `docker version`:**\n\n```\nClient:\n Version:      1.11.0\n API version:  1.23\n Go version:   go1.5.4\n Git commit:   4dc5990\n Built:        Wed Apr 13 18:34:23 2016\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.11.0\n API version:  1.23\n Go version:   go1.5.4\n Git commit:   4dc5990\n Built:        Wed Apr 13 18:34:23 2016\n OS/Arch:      linux/amd64\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 10\n Running: 10\n Paused: 0\n Stopped: 0\nImages: 30\nServer Version: 1.11.0\nStorage Driver: aufs\n Root Dir: /mnt/docker/aufs\n Backing Filesystem: extfs\n Dirs: 342\n Dirperm1 Supported: false\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: local\n Network: null host bridge\nKernel Version: 3.13.0-65-generic\nOperating System: Ubuntu 14.04.4 LTS\nOSType: linux\nArchitecture: x86_64\nCPUs: 4\nTotal Memory: 29.96 GiB\nName: ip-10-153-152-120\nID: DK42:EDNQ:Y6SG:7RR3:25VN:EMGH:XDH6:RIGU:EMRV:HSCD:V53O:PNTC\nDocker Root Dir: /mnt/docker\nDebug mode (client): false\nDebug mode (server): false\nRegistry: https://index.docker.io/v1/\nWARNING: No swap limit support\n```\n\n**Describe the results you received:**\n when performing \n\n```\necho -ne \"GET /containers/cc43cecb25b0195d740ae68e81451a5d7238a6db7d2bc1366c8bc6bb8b037144/stats HTTP/1.0\\r\\n\\r\\n\" | sudo nc -q 5 -U /var/run/docker.sock\n```\n\nthe memory_stats.stats section is empty:\n\n```\n{\"read\":\"2016-04-27T21:00:33Z\",\"precpu_stats\":{\"cpu_usage\":{\"total_usage\":0,\"percpu_usage\":null,\"usage_in_kernelmode\":0,\"usage_in_usermode\":0},\"system_cpu_usage\":0,\"throttling_data\":{\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}},\"cpu_stats\":{\"cpu_usage\":{\"total_usage\":4341303184586,\"percpu_usage\":[1095363405711,1116566179332,1050078722879,1079294876664],\"usage_in_kernelmode\":1170440000000,\"usage_in_usermode\":2095430000000},\"system_cpu_usage\":118987410000000,\"throttling_data\":{\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}},\"memory_stats\":{\"usage\":2674970624,\"max_usage\":2747441152,\"stats\":null,\"failcnt\":0,\"limit\":32170233856},\"blkio_stats\":{\"io_service_bytes_recursive\":[{\"major\":202,\"minor\":4096,\"op\":\"Read\",\"value\":0},{\"major\":202,\"minor\":4096,\"op\":\"Write\",\"value\":73728},{\"major\":202,\"minor\":4096,\"op\":\"Sync\",\"value\":0},{\"major\":202,\"minor\":4096,\"op\":\"Async\",\"value\":73728},{\"major\":202,\"minor\":4096,\"op\":\"Total\",\"value\":73728}],\"io_serviced_recursive\":[{\"major\":202,\"minor\":4096,\"op\":\"Read\",\"value\":0},{\"major\":202,\"minor\":4096,\"op\":\"Write\",\"value\":18},{\"major\":202,\"minor\":4096,\"op\":\"Sync\",\"value\":0},{\"major\":202,\"minor\":4096,\"op\":\"Async\",\"value\":18},{\"major\":202,\"minor\":4096,\"op\":\"Total\",\"value\":18}],\"io_queue_recursive\":[],\"io_service_time_recursive\":[],\"io_wait_time_recursive\":[],\"io_merged_recursive\":[],\"io_time_recursive\":[],\"sectors_recursive\":[]},\"pids_stats\":{}}\n{\"read\":\"2016-04-27T21:00:34Z\",\"precpu_stats\":{\"cpu_usage\":{\"total_usage\":4341303184586,\"percpu_usage\":[1095363405711,1116566179332,1050078722879,1079294876664],\"usage_in_kernelmode\":1170440000000,\"usage_in_usermode\":2095430000000},\"system_cpu_usage\":118987410000000,\"throttling_data\":{\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}},\"cpu_stats\":{\"cpu_usage\":{\"total_usage\":4341472345867,\"percpu_usage\":[1095385054810,1116638571900,1050104815044,1079343904113],\"usage_in_kernelmode\":1170470000000,\"usage_in_usermode\":2095460000000},\"system_cpu_usage\":118991060000000,\"throttling_data\":{\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}},\"memory_stats\":{\"usage\":2674970624,\"max_usage\":2747441152,\"stats\":null,\"failcnt\":0,\"limit\":32170233856},\"blkio_stats\":{\"io_service_bytes_recursive\":[{\"major\":202,\"minor\":4096,\"op\":\"Read\",\"value\":0},{\"major\":202,\"minor\":4096,\"op\":\"Write\",\"value\":73728},{\"major\":202,\"minor\":4096,\"op\":\"Sync\",\"value\":0},{\"major\":202,\"minor\":4096,\"op\":\"Async\",\"value\":73728},{\"major\":202,\"minor\":4096,\"op\":\"Total\",\"value\":73728}],\"io_serviced_recursive\":[{\"major\":202,\"minor\":4096,\"op\":\"Read\",\"value\":0},{\"major\":202,\"minor\":4096,\"op\":\"Write\",\"value\":18},{\"major\":202,\"minor\":4096,\"op\":\"Sync\",\"value\":0},{\"major\":202,\"minor\":4096,\"op\":\"Async\",\"value\":18},{\"major\":202,\"minor\":4096,\"op\":\"Total\",\"value\":18}],\"io_queue_recursive\":[],\"io_service_time_recursive\":[],\"io_wait_time_recursive\":[],\"io_merged_recursive\":[],\"io_time_recursive\":[],\"sectors_recursive\":[]},\"pids_stats\":{}}\n```\n\n**Describe the results you expected:**\nrunning the same for the same container on another instacne still running docker 1.9.0\n\n```\n{\"read\":\"2016-04-27T20:25:57.848975794Z\",\"precpu_stats\":{\"cpu_usage\":{\"total_usage\":2836319781512,\"percpu_usage\":[1326177125488,527018532881,486271592733,496852530410],\"usage_in_kernelmode\":304660000000,\"usage_in_usermode\":1746480000000},\"system_cpu_usage\":21499257010000000,\"throttling_data\":{\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}},\"cpu_stats\":{\"cpu_usage\":{\"total_usage\":2836328515244,\"percpu_usage\":[1326180655922,527023151840,486272105286,496852602196],\"usage_in_kernelmode\":304660000000,\"usage_in_usermode\":1746480000000},\"system_cpu_usage\":21499260900000000,\"throttling_data\":{\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}},\"memory_stats\":{\"usage\":1300934656,\"max_usage\":1314185216,\"stats\":{\"active_anon\":1196941312,\"active_file\":35741696,\"cache\":103866368,\"hierarchical_memory_limit\":18446744073709551615,\"inactive_anon\":0,\"inactive_file\":68124672,\"mapped_file\":23048192,\"pgfault\":501671,\"pgmajfault\":437,\"pgpgin\":409404,\"pgpgout\":376962,\"rss\":1196941312,\"rss_huge\":1126170624,\"total_active_anon\":1196941312,\"total_active_file\":35741696,\"total_cache\":103866368,\"total_inactive_anon\":0,\"total_inactive_file\":68124672,\"total_mapped_file\":23048192,\"total_pgfault\":501671,\"total_pgmajfault\":437,\"total_pgpgin\":409404,\"total_pgpgout\":376962,\"total_rss\":1196941312,\"total_rss_huge\":1126170624,\"total_unevictable\":0,\"total_writeback\":0,\"unevictable\":0,\"writeback\":0},\"failcnt\":0,\"limit\":32170233856},\"blkio_stats\":{\"io_service_bytes_recursive\":[{\"major\":7,\"minor\":0,\"op\":\"Read\",\"value\":0},{\"major\":7,\"minor\":0,\"op\":\"Write\",\"value\":16384},{\"major\":7,\"minor\":0,\"op\":\"Sync\",\"value\":0},{\"major\":7,\"minor\":0,\"op\":\"Async\",\"value\":16384},{\"major\":7,\"minor\":0,\"op\":\"Total\",\"value\":16384},{\"major\":252,\"minor\":0,\"op\":\"Read\",\"value\":0},{\"major\":252,\"minor\":0,\"op\":\"Write\",\"value\":16384},{\"major\":252,\"minor\":0,\"op\":\"Sync\",\"value\":0},{\"major\":252,\"minor\":0,\"op\":\"Async\",\"value\":16384},{\"major\":252,\"minor\":0,\"op\":\"Total\",\"value\":16384},{\"major\":252,\"minor\":6,\"op\":\"Read\",\"value\":92225536},{\"major\":252,\"minor\":6,\"op\":\"Write\",\"value\":77824},{\"major\":252,\"minor\":6,\"op\":\"Sync\",\"value\":0},{\"major\":252,\"minor\":6,\"op\":\"Async\",\"value\":92303360},{\"major\":252,\"minor\":6,\"op\":\"Total\",\"value\":92303360}],\"io_serviced_recursive\":[{\"major\":7,\"minor\":0,\"op\":\"Read\",\"value\":0},{\"major\":7,\"minor\":0,\"op\":\"Write\",\"value\":4},{\"major\":7,\"minor\":0,\"op\":\"Sync\",\"value\":0},{\"major\":7,\"minor\":0,\"op\":\"Async\",\"value\":4},{\"major\":7,\"minor\":0,\"op\":\"Total\",\"value\":4},{\"major\":252,\"minor\":0,\"op\":\"Read\",\"value\":0},{\"major\":252,\"minor\":0,\"op\":\"Write\",\"value\":4},{\"major\":252,\"minor\":0,\"op\":\"Sync\",\"value\":0},{\"major\":252,\"minor\":0,\"op\":\"Async\",\"value\":4},{\"major\":252,\"minor\":0,\"op\":\"Total\",\"value\":4},{\"major\":252,\"minor\":6,\"op\":\"Read\",\"value\":5669},{\"major\":252,\"minor\":6,\"op\":\"Write\",\"value\":19},{\"major\":252,\"minor\":6,\"op\":\"Sync\",\"value\":0},{\"major\":252,\"minor\":6,\"op\":\"Async\",\"value\":5688},{\"major\":252,\"minor\":6,\"op\":\"Total\",\"value\":5688}],\"io_queue_recursive\":[],\"io_service_time_recursive\":[],\"io_wait_time_recursive\":[],\"io_merged_recursive\":[],\"io_time_recursive\":[],\"sectors_recursive\":[]}}\n```\n\nSo something has changed for memory_stats.stats to be \"null\". and I could not find it in release notes for API 1.22 or 1.23\n"},{"labels":["api",null,null],"text":"**Output of `docker version`:**\n\n```\nClient:\n Version:      1.10.2\n API version:  1.22\n Go version:   go1.5.3\n Git commit:   6f36242-unsupported\n Built:        Fri Feb 26 11:59:13 2016\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.10.2\n API version:  1.22\n Go version:   go1.5.3\n Git commit:   6f36242-unsupported\n Built:        Fri Feb 26 11:59:13 2016\n OS/Arch:      linux/amd64\n\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 3\n Running: 3\n Paused: 0\n Stopped: 0\nImages: 12\nServer Version: 1.10.2\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 132\n Dirperm1 Supported: false\nExecution Driver: native-0.2\nLogging Driver: json-file\nPlugins: \n Volume: local\n Network: null host bridge\nKernel Version: 3.13.0-65-generic\nOperating System: Ubuntu 14.04.4 LTS\nOSType: linux\nArchitecture: x86_64\nCPUs: 2\nTotal Memory: 3.861 GiB\nName: trusty\nID: MBNO:UHUZ:QX3M:SYFQ:R6C7:3NLJ:4VBG:BTW7:3MLX:OL7G:UATE:ZTRP\nWARNING: No swap limit support\n\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\nVirtualBox\n\n**Steps to reproduce the issue:**\n1. Push image to private registry\n2. print out stream log in console\n3. Sometimes it will get `current` is bigger than `total`\n\n**Describe the results you received:**\n    {u'status': u'Pushing', u'progressDetail': {u'current': 190034944, u'total': 187764542}, u'id': u'c8528dddc096', u'progress': u'[==================================================>]   190 MB'}\n\n**Describe the results you expected:**\ncurrent should not bigger than total. Right?\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"},{"labels":["api",null,null],"text":"I use docker go api read docker log   (docker.LogsOptions{\n        Container:    id,\n        OutputStream: outwr,\n        ErrorStream:  errwr,\n        Stdout:       true,\n        Stderr:       true,\n        Follow:       true,\n        Tail:         \"0\",\n    }), when the pressure is too large,output read have a error: buf readstring stop: read/write on closed pipe,what is wrong?\n"},{"labels":["api",null],"text":"Hello,\n\nTrying to remove a referenced image with the docker remote API return non-JSON:\n\n``` shell\nsilex@silex-laptop:~$ curl -X DELETE --unix-socket /var/run/docker.sock http:/images/7a5866c2edbf\nconflict: unable to delete 7a5866c2edbf (must be forced) - image is referenced in one or more repositories\n```\n\n```\nClient:\n Version:      1.11.0\n API version:  1.23\n Go version:   go1.5.4\n Git commit:   4dc5990\n Built:        Wed Apr 13 18:38:59 2016\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.11.0\n API version:  1.23\n Go version:   go1.5.4\n Git commit:   4dc5990\n Built:        Wed Apr 13 18:38:59 2016\n OS/Arch:      linux/amd64\n\n```\n"},{"labels":["api"],"text":"As of API 1.17, creating a container with `POST /containers/create`, you could set some cpu and memory params on the top level of the posted object. These were `Memory`, `MemorySwap`, `CpuShares`, and `CpuSet`. See the [example request](https://github.com/docker/docker/blame/master/docs/reference/api/docker_remote_api_v1.17.md#L126); the params' respective [description texts](https://github.com/docker/docker/blame/master/docs/reference/api/docker_remote_api_v1.17.md#L192) were correctly placed at the top level with the other descriptions.\n\nIn API 1.18, these CPU and memory parameters were moved into `HostConfig`. However, the description text kept the parameters at the top level, i.e. they did not move into the corresponding `HostConfig` section of the description. See the [example object](https://github.com/docker/docker/blame/master/docs/reference/api/docker_remote_api_v1.18.md#L168), where the params are inside `HostConfig`, and the [description text](https://github.com/docker/docker/blame/master/docs/reference/api/docker_remote_api_v1.18.md#L209), where they are not.\n\nThis should be a pretty easy fix, right? Just move those descriptions under the `HostConfig` section. But it gets a little funnier than that.\n\nIn API 1.19, some new CPU params—`CpuPeriod`, `CpuQuota`, `CpusetMems`—were added that could be set in the `HostConfig` (see [example object](https://github.com/docker/docker/blame/master/docs/reference/api/docker_remote_api_v1.19.md#L170)). But their descriptions (brand new in this version, so they should go in the right place, right?) were added [next to the other incorrectly placed parameters](https://github.com/docker/docker/blame/master/docs/reference/api/docker_remote_api_v1.19.md#L216). :joy:\n\n...Ok, well, I think it's funny.\n\nThis problem just keeps growing with each API version. New parameters get added to `HostConfig`, and the container creation documentation shows them inside `HostConfig` for the example request, but not under `HostConfig` in the descriptions. I haven't made a comprehensive survey of exactly which parameters' descriptions should be moved in each version of the docs, but it will be a lot, and more in recent versions than older versions.\n\nLastly, while I'm pointing out issues with these parameter descriptions, I noticed another small problem that could be cleaned up at the same time. `Cpuset` has been deprecated since API 1.18, and yet it still gets documented in every version of the API docs as \n\n> **Cpuset** - Deprecated please don't use. Use `CpusetCpus` instead. \n\nCould this just be removed from the docs? At least the more recent versions. It has been deprecated for several versions now.\n"},{"labels":["api",null,null],"text":"Hi there,\n\nDo you guys think it could be a good idea to have in the API an endpoint which allows to get the stats of all the running containers at once?\n\nAt the moment I am using this collectd plugin (https://github.com/lebauce/docker-collectd-plugin) to get the stats out of my server. \n\nThe problem I am seeing is that when I am running 100+ container the server starts loading because I am making too many requests too often to the docker daemon (aka one call per container to the /stats endpoint every 20s).\n\nIf we could get all the stats at once that would fix this problem, for now I have implemented some rate limit on that plugin but not sure if it is the best as I do  not have a real time info anymore.\n\nCheers.\n"},{"labels":["api",null],"text":"Seen via `strace`:\n\n```\n[pid  9460] read(5, \"HTTP/1.1 200 OK\\r\\nContent-Length: 167\\r\\nContent-Type: application/json\\r\\nDate: Tue, 12 Apr 2016 10:25:27 GMT\\r\\nServer: Docker/1.11.0-rc5 (linux)\\r\\n\\r\\nThe image weaveworks/weave:latest already exists, renaming the old one with ID sha256:8a1f2f5f008334b625425659bab9ebdd2ffaea7dae6821d57bf9e0c2e9ad0c69 to empty string\\n\", 4096) = 311\n```\n\nit is claiming to send JSON, but actually sends plain text, which the client then barfs on.\n\n<!--\nIf you are reporting a new issue, make sure that we do not have any duplicates\nalready open. You can ensure this by searching the issue list for this\nrepository. If there is a duplicate, please close your issue and add a comment\nto the existing issue instead.\n\nIf you suspect your issue is a bug, please edit your issue description to\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\ninformation within 7 days, we cannot debug your issue and will close it. We\nwill, however, reopen it if you later provide the information.\n\nFor more information about reporting issues, see\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\n\n---------------------------------------------------\nBUG REPORT INFORMATION\n---------------------------------------------------\nUse the commands below to provide key information from your environment:\nYou do NOT have to include this information if this is a FEATURE REQUEST\n-->\n\n**Output of `docker version`:**\n\n```\nClient:\n Version:      1.11.0-rc5\n API version:  1.23\n Go version:   go1.5.3\n Git commit:   6178547\n Built:        Mon Apr 11 21:11:46 2016\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.11.0-rc5\n API version:  1.23\n Go version:   go1.5.3\n Git commit:   6178547\n Built:        Mon Apr 11 21:11:46 2016\n OS/Arch:      linux/amd64\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 3\n Running: 0\n Paused: 0\n Stopped: 3\nImages: 29\nServer Version: 1.11.0-rc5\nStorage Driver: overlay\n Backing Filesystem: extfs\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins: \n Volume: local\n Network: bridge null host\nKernel Version: 4.2.0-34-generic\nOperating System: Ubuntu 15.10\nOSType: linux\nArchitecture: x86_64\nCPUs: 1\nTotal Memory: 362.9 MiB\nName: host1\nID: WSO5:2WPX:NINR:DJJJ:U5VI:VZRJ:KBFJ:JCSE:VQGB:Y5WX:AOMI:24L6\nDocker Root Dir: /var/lib/docker\nDebug mode (client): false\nDebug mode (server): true\n File Descriptors: 14\n Goroutines: 30\n System Time: 2016-04-12T10:40:04.73189936Z\n EventsListeners: 0\nRegistry: https://index.docker.io/v1/\nWARNING: No swap limit support\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\n\nVirtualBox running Ubuntu 15.10\n\n**Steps to reproduce the issue:**\n1. build the Weave Net project https://github.com/weaveworks/weave\n2. `docker load` the output on a different machine\n3. change something and rebuild the project, so you get different checksums\n4. `docker load` the output onto the same machine as before\n\n**Describe the results you received:**\n\n```\n$ docker load -i weave.tar.gz \n2aa27ff8f322: Loading layer [==================================================>] 21.24 MB/21.24 MB\n6c02f687aa00: Loading layer [==================================================>]   277 kB/277 kB\ninvalid character 'T' looking for beginning of value\n```\n\n**Describe the results you expected:**\n\n```\nThe image weaveworks/weave:latest already exists, renaming the old one with ID sha256:8a1f2f5f008334b625425659bab9ebdd2ffaea7dae6821d57bf9e0c2e9ad0c69 to empty string\n```\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\n\nHappens every time.\n\nThe comparable http reply from 1.10.3 is:\n\n```\nHTTP/1.1 200 OK\\r\\nServer: Docker/1.10.3 (linux)\\r\\nDate: Tue, 12 Apr 2016 10:29:53 GMT\\r\\nContent-Length: 167\\r\\nContent-Type: text/plain; charset=utf-8\\r\\n\\r\\nThe image weaveworks/weave:latest already exists, renaming the old one with ID sha256:3cb08e6d141a1545e066e4e3f4873e4869bc62752a01e8c4342176ac252dcaca to empty string\\n\n```\n\nNote the content-type matches the content there.\n"},{"labels":["api",null],"text":"There are many times when the Docker version on a client can differ to that on a server.\n\nThis is typically because that end users are faster to update their clients whereas hosted Docker services or servers in production are slower to upgrade.\n\nThis issue can be much worse when attempting to RC test the new version of Docker as you need to switch Docker Client versions or set `DOCKER_API_VERSION`. The latter can have consequences e.g newer client features and flags failing against older engine versions.\n## Today\n\nAttempting to connect to older server:\n\n```\n$ docker ps\nError response from daemon: client is newer than server (client API version: 1.23, server API version: 1.22)\n```\n\nAttempting to create an IPv6 network\n\n```\n$ DOCKER_API_VERSION=1.22 docker network create --ipv6 foo\n2d6a8ce8e8303d27fbfdc19cb1d2a73328d5d278a1dea173d31ec4b9d586e8ca\n$ DOCKER_API_VERSION=1.22 docker network inspect foo\n[\n    {\n        \"Name\": \"foo\",\n        \"Id\": \"2d6a8ce8e8303d27fbfdc19cb1d2a73328d5d278a1dea173d31ec4b9d586e8ca\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1/16\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Containers\": {},\n        \"Options\": {},\n        \"Labels\": null\n    }\n]\n```\n\nThe command succeeds, but IPv6 wasn't enabled as this is only available in a newer API version!\n## Tomorrow\n\nRegardless of version, commands should work:\n\n```\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n```\n\nHandling of unsupported operations\n\n```\n$ docker network create --ipv6 foo\nError: `--ipv6` is not available on your server\nClient Version: 1.23 \nServer Version: 1.22\n```\n## Suggestion\n\nIf the Docker Client were able to maintain some form of session state, it could detect and preserve the Docker API version for a session. It should also be possible to prevent newer client features from being used on servers that do not support them to avoid inconsistencies like the example noted above\n"},{"labels":["api",null],"text":"### Problem Statement\n\nFor the docker Remote API there is a sound versioning scheme in place even with [history](https://docs.docker.com/engine/reference/api/docker_remote_api/#version-history).\n\nFor the plugin API only a [single mention](https://docs.docker.com/engine/extend/plugin_api/#api-design) of versioning can be found:\n\n_The API is versioned via an Accept header, which currently is always set to `application/vnd.docker.plugins.v1+json`._\n\nAccording to [this comment](https://github.com/docker/docker/issues/21857#issuecomment-207057067) there are possible changes in how the API works and/or is used. Furthermore, in contrast to the Remote API which is only implemented once (by docker engine, and of course swarm) the plugin API is implemented by a variety of services provided by different vendors.  \n\nTherefore I see the need to introduce versioning information for this API.\n### Requirements\n1. API Client (docker daemon) should indicate which version of the API it is supporting.\n2. API Service (plugin) should inidicate which version of the API it is supporting.\n3. For every API call it should be clear, which API version it refers to.\n4. A history for the versions should be maintained.\n### Possible implementation\n\nWhen the Plugin gets activated, the payload (currently empty) specifies, which plugin types for which API version is supported.\n**Request**\n\n```\n{\n    [ \n        { \n            \"PluginType\" : string, \n            \"APIVersion\" : string\n        }\n   ]\n}\n```\n\nThe following `PluginType`s are currently defined:  `authz` - `NetworkDriver` - `VolumeDriver`.\nIf for a given `PluginType` more then one APIVersion is supported it is listed multiple times. \n\n**Response**\nThe response indicates which Docker subsystems the plugin implements.\n\n```\n{\n    \"Implements\": [ \n    {\n        \"PluginType\" : string, \n        \"APIVersion\" : string\n    }\n    ]\n}\n```\n\nAt its own discretion the plugin can return only those `APIVersion` that the daemon also supports or it can return all versions.\nDocker Daemon can pick any of the supported `APIVersion` to communicate with the plugin. The daemon should stick with the version selected at the beginning of communication, changing API version during lifetime of plugin may result in undefined behaviour.\nIf the plugin supports more then one Docker subsystem,  the plugin may support different API versions for different subsystems. The order of entries in the list indicates plugin's preferences.\nSimilarily Docker daemon may use different API version when talking to different subsystems the plugin implements.\n\n**API-Calls**\nThe Version of the API-Call is encoded similiar the Remote API. A call gets the API version prepended, e.g. `/v1/VolumeDriver.List`. A call without the version prefix means the version of the first list entry for this subsystem returned by the plugin as responss to plugin activation. \n_This is not necessary the highest version currently specified or the highest version supported by daemon!_.\n\n**History**\nChanges between different versions should be tracked either in the [plugin documentation overview](https://docs.docker.com/engine/extend/plugin_api/) or in the documentation of the various subsystems ([volume](https://docs.docker.com/engine/extend/plugins_volume/), [network](https://docs.docker.com/engine/extend/plugins_network/)).\n\nSince the API comprises alls subsystems the API version is comprises all subsystems to.. Thus it is possible, that for a given subsystem no change exists between subsequent version.\n### Notes\n\nWhile this proposal could be part of #20363 too, I feel the discussion there is to wide and partly orthogonal. Thus I present this as a separate issue.\n"},{"labels":["api"],"text":"See https://github.com/docker/engine-api/pull/186; this breaks compatibility with some programs parsing Docker requests; e.g. https://github.com/weaveworks/weave/issues/2109\n\n<!--\nIf you are reporting a new issue, make sure that we do not have any duplicates\nalready open. You can ensure this by searching the issue list for this\nrepository. If there is a duplicate, please close your issue and add a comment\nto the existing issue instead.\n\nIf you suspect your issue is a bug, please edit your issue description to\ninclude the BUG REPORT INFORMATION shown below. If you fail to provide this\ninformation within 7 days, we cannot debug your issue and will close it. We\nwill, however, reopen it if you later provide the information.\n\nFor more information about reporting issues, see\nhttps://github.com/docker/docker/blob/master/CONTRIBUTING.md#reporting-other-issues\n\n---------------------------------------------------\nBUG REPORT INFORMATION\n---------------------------------------------------\nUse the commands below to provide key information from your environment:\nYou do NOT have to include this information if this is a FEATURE REQUEST\n-->\n\n**Output of `docker version`:**\n\n```\nClient:\n Version:      1.11.0-rc2\n API version:  1.23\n Go version:   go1.5.3\n Git commit:   aa9f9c8-unsupported\n Built:        Fri Apr  1 16:26:27 2016\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.11.0-rc2\n API version:  1.23\n Go version:   go1.5.3\n Git commit:   aa9f9c8-unsupported\n Built:        Fri Apr  1 16:26:27 2016\n OS/Arch:      linux/amd64\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 1\n Running: 0\n Paused: 0\n Stopped: 1\nImages: 283\nServer Version: 1.11.0-rc2\nStorage Driver: aufs\n Root Dir: /home/docker/aufs\n Backing Filesystem: extfs\n Dirs: 326\n Dirperm1 Supported: false\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins: \n Volume: local\n Network: null host weavemesh bridge\nKernel Version: 3.13.0-83-generic\nOperating System: Ubuntu 14.04.4 LTS\nOSType: linux\nArchitecture: x86_64\nCPUs: 2\nTotal Memory: 3.861 GiB\nName: bbvlx1\nID: IVMU:DIYM:GNIF:DNSW:GCHY:42Z5:R573:MDYB:YWOK:W57O:P4WY:2LQS\nDocker Root Dir: /home/docker\nDebug mode (client): false\nDebug mode (server): false\nUsername: bboreham\nRegistry: https://index.docker.io/v1/\nWARNING: No swap limit support\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\n\n**Steps to reproduce the issue:**\n1. Install Weave Net https://github.com/weaveworks/weave\n2. `weave launch`\n3. `eval $(weave env)`\n4. `docker run --net=none -ti alpine /bin/sh`\n\n**Describe the results you received:**\n\n`docker: Error response from daemon: EOF.`\n\n**Describe the results you expected:**\n\nRunning shell inside Alpine container.\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"},{"labels":["api",null],"text":"When `docker load`ing a `tar` file with image(s), the [(current v1.22) API](https://docs.docker.com/engine/reference/api/docker_remote_api_v1.22/#load-a-tarball-with-a-set-of-images-and-tags-into-docker) should return the list of images it loaded.\n"},{"labels":["api",null,null],"text":"Wrong HTTP-Status codes in many API-Docs, needs review\n\n**Describe the results you received:**\n\n```\ngrep \"201 OK\" docs/reference/api/*\ndocs/reference/api/docker_remote_api_v1.14.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.15.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.15.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.15.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.15.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.16.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.16.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.16.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.16.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.17.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.17.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.17.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.17.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.18.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.18.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.18.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.18.md:        HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.19.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.19.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.19.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.19.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.20.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.20.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.20.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.20.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.21.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.21.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.21.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.21.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.22.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.22.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.23.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.23.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.24.md:    HTTP/1.1 201 OK\ndocs/reference/api/docker_remote_api_v1.24.md:    HTTP/1.1 201 OK\n```\n\n**Describe the results you expected:**\nExpected \"HTTP/1.1 201 Created\" as per RFC2616\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\nSometimes wrong responsetype (\"OK\" instead of \"Created\"), sometimes wrong HTTP-Status Code number \"201\" instead of \"200\" documented)\n\nThere may be other statuscode deviations in the api docs\n"},{"labels":["api",null,null],"text":"We're having issues using the PUT /containers/(id)/archive endpoint due to file ownership permissions. When a container is running as a non-root user, the ownership is always reset back to root after uploading the file.\n\n```\n  > docker version                                                                         \nClient:                                                                                    \n Version:      1.10.0                                                                      \n API version:  1.22                                                                        \n Go version:   go1.5.3                                                                     \n Git commit:   590d5108                                                                    \n Built:        Thu Feb  4 18:36:33 2016                                                    \n OS/Arch:      linux/amd64                                                                 \n\nServer:                                                                                    \n Version:      1.10.0                                                                      \n API version:  1.22                                                                        \n Go version:   go1.5.3                                                                     \n Git commit:   590d5108-unsupported                                                        \n Built:        Fri Feb  5 02:32:52 2016                                                    \n OS/Arch:      linux/amd64  \n```\n\nGiven an image with a directory owned by a different user\n\n```\nFROM ubuntu\nRUN mkdir /opt/www-data && chown www-data:www-data /opt/www-data\ndocker build -t secure .\n```\n\nAnd a tar file owned by a non-root user\n\n```\n> touch test\n> tar -zcvf test.tar.gz test\n\n> ls -lha \n-rw-r--r-- 1 non-root non-root    0 Mar 30 10:19 test  \n-rw-r--r-- 1 non-root non-root  114 Mar 30 10:19 test.tar.gz\n```\n\nWhen you launch the container as a non-root user\n\n```\ndocker run -d -u www-data --name target secure sleep 100000\n```\n\nAfter uploading the tar, the file ownership permissions will be reset to root. The ownership should match either the original file or the user the container is being run as. \n\n```\ncurl -s -XPUT  -T test.tar.gz docker:2345/containers/target/archive?path=/opt/www-data\ndocker exec -it target bash\n\n> /opt/www-data$ ls -lha\ndrwxr-xr-x 1 www-data www-data 4.0K Mar 30 10:24 .\ndrwxr-xr-x 1 root     root     4.0K Mar 30 10:22 ..\n-rw-r--r-- 1 root     root        0 Mar 30 10:19 test \n```\n"},{"labels":["api",null],"text":"Every part of the remote API that returns a collection of objects (`GET /images/json`, `GET /containers/json`, `GET /events`, etc.) returns its values as a JSON list of objects: `[{...}, {...}, ...]`. Every part, that is, except `GET /volumes`. That endpoint returns an object of one element whose value is a list: `{ \"Volumes\": [{...}, {...}, ...] }`. This is still the case in the [most recent dev Remote API Docs](https://github.com/docker/docker/blob/master/docs/reference/api/docker_remote_api_v1.24.md#list-volumes).\n\nIs there a reason `GET /volumes` is inconsistent with the rest of the API? If there is no reason, I ask that it be made to return a flat list.\n"},{"labels":["api",null],"text":"This is more a question than an issue, but I'm wondering why the `/build` Remote API call returns JSON-formatted chunks like `{\"stream\":\"...\"}` and `{\"error\":\"...\"}` instead of multiplexing `stdout` and `stderr` like other API calls.\n\nAs documented in: https://docs.docker.com/engine/reference/api/docker_remote_api_v1.22/#build-image-from-a-dockerfile\n\n**Output of `docker version`:**\n\n```\nClient version: 1.6.2\nClient API version: 1.18\nGo version (client): go1.3.3\nGit commit (client): 7c8fca2\nOS/Arch (client): linux/amd64\nServer version: 1.6.2\nServer API version: 1.18\nGo version (server): go1.3.3\nGit commit (server): 7c8fca2\nOS/Arch (server): linux/amd64\n```\n\n**Output of `docker info`:**\n\n```\nContainers: 48\nImages: 1016\nStorage Driver: aufs\n Root Dir: /data2/docker/aufs\n Backing Filesystem: extfs\n Dirs: 1146\n Dirperm1 Supported: true\nExecution Driver: native-0.2\nKernel Version: 3.16.0-4-amd64\nOperating System: Debian GNU/Linux 8 (jessie)\nCPUs: 16\nTotal Memory: 63.11 GiB\nName: irill2\nID: GRUJ:4V5T:KSWG:L5HV:5JKV:RW5L:CYSK:ZBMG:GXSZ:W5JG:Q3CX:H2RP\nWARNING: No memory limit support\nWARNING: No swap limit support\n```\n\n**Additional environment details (AWS, VirtualBox, physical, etc.):**\n\nPhysical server running `Linux 3.16.0-4-amd64` and `Debian 8.3 jessie`.\n\n**Steps to reproduce the issue:**\n1. Send a properly formatted request with tar stream to the `/build` API endpoint.\n2. Listen for Docker's response.\n\n**Describe the results you received:**\n\nA series of JSON-formatted chunks like `{\"stream\":\"...\"}` (and `{\"error\":\"...\"}` if the build failed).\n\n**Describe the results you expected:**\n\nA stream with multiplexed `stdout` and `stderr`.\n\n**Additional information you deem important (e.g. issue happens only occasionally):**\n\nReproduces 100%.\n"},{"labels":["api",null],"text":"Just a quick placeholder, following a discussion on Slack;\n\nCurrently we accept both `/something` (\"latest\" API version), and `/vXX.YY/something` (API version \"XX.YY\").\n\nThe \"latest\" API version can be troublesome, because software using the \"latest\" version (and not explicitly defining a version), can break after an upgrade of the daemon.\n\nInstead, we can deprecated the \"latest\" URLs, and require consumers of the API to explicitly specify the API version they're using.\n\n/cc @tiborvass @dgageot @nishanttotla \n"},{"labels":["api"],"text":"Originally reported in https://github.com/docker/docker-py/issues/978\n\nExpected result: HTTP status 400 \"Bad request\", (ideally) with explicit error message about invalid parameter.\n\nObserved result: Connection aborted - Connection reset by peer.\n"},{"labels":["api",null],"text":"Hi,\n\nOk, so I've finally worked out what I needed to do as <a href=\"http://blog.arungupta.me/enable-docker-remote-api-mac-osx-machine/\">workaround</a> for the Mac Kitematic issue so that I can access the API using curl. \n\nThis works OK: \n\n```\ncurl -s --no-buffer -XGET --insecure --cert cert.p12 --pass mypass https://127.0.0.1:52376/events\n```\n\nHowever, I now want to filter the response stream. The API 1.21 docs suggest that this should work:\n\n```\nhttps://127.0.0.1:52376/events?filter=........\n```\n\ne.g.\n\n   events?filters=%7B%22image%22%3A%5B%22injcristianrojas%2Fnginx-ssl%22%5D%7D\n\nHowever, no matter what I try here the filter gets ignored.\n\nI need to filter on the `status` and `name`fields but so far I can't get this to work. The docs aren't particularly clear as to the filter should be constructed. \n\nAre there any examples out there ? \n\nI'm trying to create a filter that only returns based on a `Type=container` and `status=start or status=die`\n"},{"labels":["api",null,null],"text":"Currently docker merges labels with some container attributes in here: https://github.com/docker/docker/blob/master/daemon/events.go#L17\n\nThe way it is right now the user can start a container with the label \"image=this-is-my-label\" and that label won't show up in the docker events.\n\nSo my my proposal is:\n- Somehow split engine-api message with labels in one map and remaining attributes in the other.\n- Use the special labels assigned to docker e.g. \"com.docker.container.image\" and \"com.docker.container.name\"\n\nThoughts?\n\nPing @calavera \n"},{"labels":["api"],"text":"Currently, the `/info` endpoint for the Swarm API uses `DriverStatus` field in the Engine API. We would like to create a new field exclusively for Swarm to use.\n\nCorresponding `docker/swarm` issue: https://github.com/docker/swarm/issues/1625\n\ncc @calavera @vieux\n"},{"labels":["api",null,null],"text":"We have a tool that interacts with the docker API directly and it started failing on master (aka 1.10, aka 723be0a3325799fd6b2a6b689af54f5a07edf992). It tries to start containers with a custom network using the `NetworkMode` parameter in the `start` API. There is a warning that this will be removed in 1.12, but it looks like it already doesn't work for `NetworkMode`.\n\nExample docker log when this fails:\n\n```\nDEBU[0061] Calling POST /v1.13/containers/create        \nDEBU[0061] POST /v1.13/containers/create?name=(redacted) \nDEBU[0061] form data: {\"AttachStderr\":false,\"AttachStdin\":false,\"AttachStdout\":false,\"Env\":[\"NO_PROXY=(redacted)\",\"HTTPS_PROXY=\",\"HTTP_PROXY=\"],\"Image\":\"(redacted):(redacted)\",\"Memory\":0,\"MemorySwap\":0,\"NetworkDisabled\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Tty\":false}\nDEBU[0061] container mounted via layerStore: /var/lib/docker/overlay/a231abd7438a8a6dc86f68fe0e7abba14a63f89a00aa8076f3b88a0f23c2bb90/merged \nDEBU[0061] Incrementing volume reference: driver local, name cc80f3f57a0a9b57e3d787c5062f37497732f0cc2da1874c031fc3290bb85e3c \nDEBU[0061] Calling GET /v1.13/containers/json           \nDEBU[0061] GET /v1.13/containers/json?all=1&limit=-1&trunc_cmd=1&size=0 \nDEBU[0061] Calling GET /v1.13/containers/json           \nDEBU[0061] GET /v1.13/containers/json?all=0&limit=-1&trunc_cmd=1&size=0 \nDEBU[0061] Calling POST /v1.13/containers/(redacted)/start \nDEBU[0061] POST /v1.13/containers/(redacted)/start \nDEBU[0061] form data: {\"Binds\":[\"/var/(redacted):/var/(redacted):rw\"],\"NetworkMode\":\"(redacted)\",\"PortBindings\":{},\"RestartPolicy\":{\"MaximumRetryCount\":0,\"Name\":\"always\"},\"SecurityOpt\":[\"label:type:(redacted)\"]} \nWARN[0061] DEPRECATED: Setting host configuration options when the container starts is deprecated and will be removed in Docker 1.12 \nDEBU[0061] Decrementing volume reference: driver local, name cc80f3f57a0a9b57e3d787c5062f37497732f0cc2da1874c031fc3290bb85e3c \nDEBU[0061] container mounted via layerStore: /var/lib/docker/overlay/a231abd7438a8a6dc86f68fe0e7abba14a63f89a00aa8076f3b88a0f23c2bb90/merged \nDEBU[0061] Assigning addresses for endpoint (redacted)'s interface on network bridge \nDEBU[0061] RequestAddress(LocalDefault/172.17.0.0/16, <nil>, map[])\n```\n\nExpected result: Container starts attached to the custom network\nActual result: Container starts on the default \"bridge\" network\n"},{"labels":["api",null],"text":"Currently the [https://docs.docker.com/engine/reference/api/docker_remote_api_v1.21/#list-containers](`GET /containers/json`) endpoint returns a human readable `Status` field, which is useful for the `docker ps` cli, but not very useful for other API clients, since it's not machine readable. For example, this is what it has returned for me (simplified to only include the Id and Status fields from the returned JSON): \n\n```\nId                                                               Status\n9080c3d4e54b1367cd659d5841953f0a0b0ed789d52805491ba752744ca7ed33 Created\nda837d8058c56c0c038d4580f5f8c2197a7c383be7de106dfbc6d17849975f2a Exited (137) 12 days ago\n624d6deaf83091659d563d2063c6fcf0275a4b945b02e5b2262557a64e6953f8 Up 8 minutes (Paused)\n2a6e659fe99f33a5f43605e313fbee17c2eb91e317567d6fd98d69c5d30504db Up 5 seconds\n```\n\nIt would be more useful if the Status field (or a new field, for backwards compatibility) returned the states from this state diagram:\n\n[![State diagram from Remote API documentation](https://docs.docker.com/engine/reference/api/images/event_state.png)](https://docs.docker.com/engine/reference/api/docker_remote_api/#docker-events)\n\nI therefore propose a new `State` field to the result of calling `GET /containers/json` which will have one of the values from that diagram, namely `created`, `running`, `paused` or `stopped` (I don't think it can ever have `deleted`, since, well, it's deleted).\n"},{"labels":["api",null,null],"text":"The current implementation of `update`(#15078), and thus the endpoint `/containers/(id)/update`, is using `HostConfig` struct although it's only updating `Resources`. \n\nThis raises few concerns :\n- We decided that `update` should only _update_ stuff that are in `Resources` struct, but it's possible to send a complete `HostConfig` struct which could lead to confusion — like why is some fields not taken care of, etc….\n- If a complete `HostConfig` struct is passed, it will completely and **silently ignore** all attributes except `Resources`. It should at least put a warning.\n\nI think we should _reduce_ what we send and change the API `/containers/(id)/update` to just take `Resoures` struct instead of `HostConfig` — it would make it clear that only stuff _in_ this struct are supported (and it's simpler to implement than doing some diff or something and warn that something that is not in `Resources` has been wrongly set).\n\n/cc @hqhq @tiborvass @thaJeztah @runcom @duglin @unclejack @icecrime @calavera \n"},{"labels":["api",null,null,null],"text":"When Docker daemon is exiting, request to retrieve containers returns container JSON without names. This may cause tooling failure. For example, swarm decides named containers do not exist, instead of engine unreachable. I think docker daemon should reject requests during shutdown. \n\nThe problem is easy to reproduce under swarm setup. Reproduce steps: \n- start a swarm manager with 1 second refresh interval\n- start a docker engine on another machine, join the swarm \n- create a container with name thru swarm, validate container name exists\n- stop Docker engine with ^C\n- send `docker ps -a` to swarm, validate container without name\n\nActual Results thru swarm:\n\n```\ndchen@vm4:~$ docker -H 192.168.56.202:2372 ps -a \nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                            NAMES\n475f6d2008a4        busybox             \"/bin/sh -c 'echo hel\"   2 weeks ago         Host Down                                                            \n4b40a7988c1f        ubuntu              \"/bin/bash -c 'while \"   3 weeks ago         Host Down                                                            \ndd32d46a1892        nginx               \"nginx -g 'daemon off\"   3 weeks ago         Host Down           80/tcp, 443/tcp, 192.168.56.203:8080->8080/tcp   \n```\n\nExpected Results:\n\n```\ndchen@vm4:~$ docker  -H 192.168.56.202:2372 ps -a \nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                            NAMES\n475f6d2008a4        busybox             \"/bin/sh -c 'echo hel\"   2 weeks ago         Host Down                                                            vm3/test_container1\n4b40a7988c1f        ubuntu              \"/bin/bash -c 'while \"   3 weeks ago         Host Down                                                            vm3/evil_cray\ndd32d46a1892        nginx               \"nginx -g 'daemon off\"   3 weeks ago         Host Down           80/tcp, 443/tcp, 192.168.56.203:8080->8080/tcp   vm3/tiny_euclid\n\n```\n\nDocker information. \n\n```\ndchen@vm3:~/go/src/github.com/docker/swarm$ docker version\nClient:\n Version:      1.10.0-dev\n API version:  1.22\n Go version:   go1.5.1\n Git commit:   9c1006c\n Built:        Wed Nov  4 12:36:27 UTC 2015\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.10.0-dev\n API version:  1.22\n Go version:   go1.5.1\n Git commit:   9c1006c\n Built:        Wed Nov  4 12:36:27 UTC 2015\n OS/Arch:      linux/amd64\n\ndchen@vm3:~/go/src/github.com/docker/swarm$ docker info\nContainers: 3\nImages: 259\nServer Version: 1.10.0-dev\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 265\n Dirperm1 Supported: true\nExecution Driver: native-0.2\nLogging Driver: json-file\nKernel Version: 3.19.0-25-generic\nOperating System: Ubuntu 14.04.3 LTS\nCPUs: 2\nTotal Memory: 3.86 GiB\nName: vm3\nID: QCAK:VVFW:GTEN:RF4O:O5EF:4AAT:RXDM:2FIJ:FVIF:CJBL:IDUU:2DG4\nWARNING: No swap limit support\nCluster store: consul://192.168.56.204:8500/swarm\n\ndchen@vm3:~/go/src/github.com/docker/swarm$ uname -a\nLinux vm3 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:16:20 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n```\n"},{"labels":["api",null,null],"text":"Description of problem:\nUsing pull API to pull an image. But sometime it response detail information with `total:-1`.\n\n`docker version`:\n\n```\nClient:\n Version:      1.9.1\n API version:  1.21\n Go version:   go1.4.1\n Git commit:   d997753\n Built:        Thu Nov 26 02:31:23 UTC 2015\n OS/Arch:      linux/amd64\n\nServer:\n Version:      1.9.1\n API version:  1.21\n Go version:   go1.4.1\n Git commit:   d997753\n Built:        Thu Nov 26 02:31:23 UTC 2015\n OS/Arch:      linux/amd64\n```\n\n`docker info`:\n\n```\nContainers: 0\nImages: 116\nServer Version: 1.9.1\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 116\n Dirperm1 Supported: false\nExecution Driver: native-0.2\nLogging Driver: json-file\nKernel Version: 3.13.0-65-generic\n```\n\n`uname -a`:\nLinux trusty-64abced 3.13.0-65-generic #106-Ubuntu SMP Fri Oct 2 22:08:27 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n\nEnvironment details: VirtualBox\n\nHow reproducible:\nJust pull images by docker-py\n\nSteps to Reproduce:\n1. Pull image by docker-py\n2. Check the stream output\n\nActual Results:\n\n```\n{u'id': u'379cc190f32e',\n u'progress': u'7.395 MB',\n u'progressDetail': {u'current': 7395421, u'total': -1},\n u'status': u'Downloading'}\n```\n\nExpected Results:\ntotal without -1\n\nAdditional info:\n"},{"labels":["api",null,null],"text":"I have a container which needs to be restarted when the machine reboots.  If the process crashes or exits with an error I would like it to stay down so it can be diagnosed.\n\nExisting restart policies:\n- `on-failure` will not achieve either requirement.\n- `always` will achieve the first requirement but not the second.\n- `unless-stopped` is slightly better than `always`, but not quite what I want.\n\nI apologise if this is a misguided request; I searched around quite a lot but didn't find an open discussion of the topic.  I found [this](https://www.pivotfreight.com/devblog/on-docker-restart-policies) which asserts that `on-failure` will restart containers on a daemon restart, but this does not match my experiments or my reading of the code.  On a hard reset of the machine, the exit code will be recorded as zero so no restart.\n\nIn #7586 it is [asserted](https://github.com/docker/docker/issues/7586#issuecomment-57061376) that `always` has a max-retry count, and a max-retry count of 1 would be good enough for my purposes, but again this does not match what I find in the code.\n"},{"labels":["api",null],"text":"Currently the networking API always report 500 on failures (except in [special cases when the error message matches certain patterns](https://github.com/docker/docker/blob/e75da4b6fffbcf9dab86cd581e962a19d3efa35a/api/server/httputils/httputils.go#L129-L151)). Should HTTP handlers in the networking API use the [errcode package](https://godoc.org/github.com/docker/distribution/registry/api/errcode)? If so, I can prepare a patch for that.\n"},{"labels":["api",null,null],"text":"I see the need for a docker run --volumes-no option that enables me to run a normal production image and start a container instance of it so that it saves the content on docker commit even in the directorys that are normal defined as volume by the source image.\n"},{"labels":["api",null],"text":"There are some information that can only be reliably retrieved using the container inspection.\n\nWhen you get normal container information (e.g. through container listing), one cannot find out in what network is a container in. Before api 1.21, one could not find the imageID of the containers without inspecting it too - sometimes it returned the image repo+tag and sometimes the id.\n\nWhen a single host has thousands of containers, getting network information for every single container is very expensive, since it demands a get request per container.\n\nI would like to suggest an API extension where all the containers' inspection information will be retrieved in a single request. Although the response may be considerable large (several jsons), it is still better than a restful request per inspection.\n"},{"labels":["api",null,null],"text":"Instead of leaving a dangling image around or potentially purging common layers to early, it would be nice if there was an option to cleanly replace an image when pulling or building and tagging so there will not be a dangling image left behind.\n"},{"labels":["api",null,null],"text":"I like how, when manipulating containers, I can type the first few non-colliding characters of the container's ID. This doesn't seem to be true for volumes. Could these also be matched in the same way that container/image IDs are? At the moment I have to cut-and-paste the entire volume ID, which is annoying.\n\nThanks.\n"},{"labels":["api",null,null],"text":"`docker inspect`  should also return:\n- subnet\n- ip-range\n- gateway\n\nThey should show with the default or empty if they have nothing.\n"},{"labels":["api",null,null],"text":"We use SNMP to monitor our infrastructur. Unfortunately there's no easy pluggable solution - at least to my knowlegde - to integrate docker into this.\n\n`AgentX` is a [standard protocol](https://www.ietf.org/rfc/rfc2741.txt) to register a sub-agent with an Master SNMP agent for some particular information - plus some more things. Rather than writing a script which uses some hacks to get information about running containers, `docker daemon` could expose this information via `AgentX` to a SNMP-master daemon running on the same node.\n\nI found this [paper](http://research.arpa2.org/library/nyczak-2015-systemd-snmp-zeroconf.pdf) which describes a solution for systemd. And [here's](http://wiki.libvirt.org/page/Libvirt-snmp) the solution for libvirt.\n\nIn general it looks like this:\n\n```\ndocker <--agentx--> snmpd <--snmp--> monitoring solution\n```\n\nDocker would expose information about the service running in it's containers to the snmpd via AgentX-protocol ([RFC](https://www.ietf.org/rfc/rfc2741.txt)).\n\nWhat do you think? Does this makes sense?\n"},{"labels":["api",null],"text":"As of docker 1.8,\nDocker uses invalid JSON format in some API functions, as they reply with header `Content-Type: application/json`. So I expect they reply valid JSON.\n- /build\n- /images/create\n- /images/(name)/push\n- /events\n\nThis make parsing the output of these functions troublesome.\n"},{"labels":["api",null,null],"text":"Description of problem:\n\nAs described in the docs for [`/containers/(id)/logs`](https://docs.docker.com/reference/api/docker_remote_api_v1.20/#get-container-logs), the response Content-Type should be `application/vnd.docker.raw-stream`. Actually, it is always `text/plain`, using the current Docker 1.8.2 release.\n\nThings become a bit more complex, though, because plain text works well as long as the container isn't running in detached mode (Config.Tty = false). Only for a detached container the logs will be a raw stream, supporting multiplexing on stdout and stderr.\n\nFor consistency with `../attach`, it would be nice to always return the raw stream (and declare it correctly via `Content-Type`), with disabled multiplexing for attached containers.\n\nIf you like, I can try to create a PR, but I was a bit lost in the different router/cli/daemon source files... any pointer or suggestions how to tackle this would help!\n\n`docker version`:\n\n```\nClient:\n Version:      1.8.2\n API version:  1.20\n Go version:   go1.4.2\n Git commit:   0a8c2e3\n Built:        Thu Sep 10 19:10:10 UTC 2015\n OS/Arch:      darwin/amd64\n\nServer:\n Version:      1.8.2\n API version:  1.20\n Go version:   go1.4.2\n Git commit:   0a8c2e3\n Built:        Thu Sep 10 19:10:10 UTC 2015\n OS/Arch:      linux/amd64\n```\n\n`docker info`:\n\n```\nContainers: 3\nImages: 97\nStorage Driver: aufs\n Root Dir: /mnt/sda1/var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 103\n Dirperm1 Supported: true\nExecution Driver: native-0.2\nLogging Driver: json-file\nKernel Version: 4.0.9-boot2docker\nOperating System: Boot2Docker 1.8.2 (TCL 6.4); master : aba6192 - Thu Sep 10 20:58:17 UTC 2015\nCPUs: 1\nTotal Memory: 1.956 GiB\nName: default\nID: BDI6:3E4G:RBCP:BURV:FYFE:GEPK:J4QI:53U4:HKG4:ZUJW:XFCL:7A72\nDebug mode (server): true\nFile Descriptors: 14\nGoroutines: 23\nSystem Time: 2015-10-09T15:50:19.097175534Z\nEventsListeners: 0\nInit SHA1: \nInit Path: /usr/local/bin/docker\nDocker Root Dir: /mnt/sda1/var/lib/docker\nUsername: gesellix\nRegistry: https://index.docker.io/v1/\nLabels:\n provider=virtualbox\n```\n\n`uname -a`:\n\n```\nDarwin foo.bar 15.0.0 Darwin Kernel Version 15.0.0: Wed Aug 26 16:57:32 PDT 2015; root:xnu-3247.1.106~1/RELEASE_X86_64 x86_64\n```\n\nEnvironment details (AWS, VirtualBox, physical, etc.):\nMac w/ Docker Toolbox\n\nHow reproducible:\nalways\n\nSteps to Reproduce:\n1. run the Docker daemon\n2. `docker run -d --name container-id busybox:latest ping 127.0.0.1`\n3. `GET https://docker.host:2376/containers/container-id/logs?follow=true&stdout=true&stderr=true&timestamps=false&since=0`\n\nActual Results:\n\n```\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nDate: Fri, 09 Oct 2015 15:55:53 GMT\nServer: Docker/1.8.2 (linux)\nTransfer-Encoding: chunked\n```\n\nExpected Results:\n\n```\nHTTP/1.1 101 UPGRADED\nConnection: Upgrade\nContent-Type: application/vnd.docker.raw-stream\nDate: Fri, 09 Oct 2015 15:55:53 GMT\nUpgrade: tcp\nServer: Docker/1.8.2 (linux)\n```\n\nAdditional info:\n"},{"labels":["api",null,null],"text":"In many cases, it might be required for the user to be aware of the NUMA topology of the docker host in order to specify valid 'cpuset' for the containers.Currently NUMA topology information is not available via docker APIs. It's available by using commands like numactl or lscpu or via sysfs. \nThis proposal is for considering addition of NUMA topology info to docker Info API so that the same can be used by users or swarm in future.\n\nHere is an example on how the extended info API might look like:\n\n```\nroot@ubuntu:~/docker/bundles/1.8.0/binary# echo -e \"GET /info HTTP/1.0\\r\\n\" | nc -U /var/run/docker.sock\nHTTP/1.0 200 OK\nContent-Type: application/json\nServer: Docker/1.8.0 (linux)\nDate: Mon, 05 Oct 2015 06:52:06 GMT\nContent-Length: 1136\n\n{\"ID\":\"KFL7:6UJ7:QM6U:F3JV:VHPQ:4QKX:KLAB:YRLU:N25F:PD57:PYWZ:XM32\",\"Containers\":17,\"Images\":60,\"Driver\":\"aufs\",\"DriverStatus\":[[\"Root Dir\",\"/var/lib/docker/aufs\"],[\"Backing Filesystem\",\"extfs\"],[\"Dirs\",\"94\"],[\"Dirperm1 Supported\",\"true\"]],\"MemoryLimit\":true,\"SwapLimit\":false,\"CpuCfsPeriod\":true,\"CpuCfsQuota\":true,\"IPv4Forwarding\":true,\"BridgeNfIptables\":true,\"BridgeNfIp6tables\":true,\"Debug\":false,\"NFd\":34,\"OomKillDisable\":true,\"NGoroutines\":27,\"SystemTime\":\"2015-10-05T06:52:06.053388928Z\",\"ExecutionDriver\":\"native-0.2\",\"LoggingDriver\":\"json-file\",\"NEventsListener\":0,\"KernelVersion\":\"3.19.0-25-generic\",\"OperatingSystem\":\"Ubuntu 14.04.3 LTS\",\"IndexServerAddress\":\"https://index.docker.io/v1/\",\"RegistryConfig\":{\"InsecureRegistryCIDRs\":[\"127.0.0.0/8\"],\"IndexConfigs\":{\"docker.io\":{\"Name\":\"docker.io\",\"Mirrors\":null,\"Secure\":true,\"Official\":true}},\"Mirrors\":null},\"InitSha1\":\"\",\"InitPath\":\"/root/docker/bundles/1.8.0/binary/docker\",\"NCPU\":4,\"MemTotal\":4144381952,\"DockerRootDir\":\"/var/lib/docker\",\"HttpProxy\":\"\",\"HttpsProxy\":\"\",\"NoProxy\":\"\",\"Name\":\"ubuntu\",\"Labels\":null,\"ExperimentalBuild\":false,\"NumaNodes\":1,\"NodeCpus\":\"0-3\\n\"}\n```\n\nHere is what \"numactl -H\" output looks like:\n\n```\nroot@ubuntu:~/docker/bundles/1.8.0/binary# numactl -H\navailable: 1 nodes (0)\nnode 0 cpus: 0 1 2 3\nnode 0 size: 3952 MB\nnode 0 free: 1450 MB\nnode distances:\nnode   0 \n  0:  10 \n```\n\nThe API will result in showing number of numa nodes and the cpus in each node. The following code(a rough draft) can be added to daemon/info.go in order to scan sysfs and retrieve the numa topology:\n\n```\n       nodes, _ := filepath.Glob(\"/sys/devices/system/node/\" + \"/node*\")\n        num := len(nodes)\n\n        val := \"\"\n        for i:=0; i<len(nodes); i++ {\n\n                new, _ := filepath.Glob(nodes[i] + \"/cpulist\")\n                read, _ := ioutil.ReadFile(new[0])\n                val += string(read)\n        }\n```\n\nThe info structure can be modified by adding NumaNodes and NodeCpus:\n\n```\nv := &types.Info{\n                ID:                 daemon.ID,\n                Containers:         len(daemon.List()),\n                Images:             imgcount,\n                Driver:             daemon.GraphDriver().String(),\n                DriverStatus:       daemon.GraphDriver().Status(),\n                IPv4Forwarding:     !daemon.SystemConfig().IPv4ForwardingDisabled,\n                BridgeNfIptables:   !daemon.SystemConfig().BridgeNfCallIptablesDisabled,\n                BridgeNfIp6tables:  !daemon.SystemConfig().BridgeNfCallIp6tablesDisabled,\n                Debug:              os.Getenv(\"DEBUG\") != \"\",\n                NFd:                fileutils.GetTotalUsedFds(),\n                NGoroutines:        runtime.NumGoroutine(),\n                SystemTime:         time.Now().Format(time.RFC3339Nano),\n                ExecutionDriver:    daemon.ExecutionDriver().Name(),\n                LoggingDriver:      daemon.defaultLogConfig.Type,\n                NEventsListener:    daemon.EventsService.SubscribersCount(),\n                KernelVersion:      kernelVersion,\n                OperatingSystem:    operatingSystem,\n                IndexServerAddress: registry.IndexServer,\n                RegistryConfig:     daemon.RegistryService.Config,\n                InitSha1:           dockerversion.INITSHA1,\n                InitPath:           initPath,\n                NCPU:               runtime.NumCPU(),\n                MemTotal:           meminfo.MemTotal,\n                DockerRootDir:      daemon.Config().Root,\n                Labels:             daemon.Config().Labels,\n                ExperimentalBuild:  utils.ExperimentalBuild(),\n                NumaNodes:          num,\n                NodeCpus:           val,\n        }\n```\n\nIt further can be extended to scan more options other that NUMA topology to help users make better decisions.\n"},{"labels":["api",null,null],"text":"https://github.com/docker/compose/issues/1510 is one example of where this would be used. We use labels to track containers within a project.\n\n+area/api\n+kind/enhancement\n"},{"labels":["api",null],"text":"This is a quick write up of a design to enable programmatic bootstrapping of a Docker cluster.  I will quickly submit a PR if we can decide this is generally the right direction.  The motivation of this is to allow bootstrapping a cluster in a more user friendly fashion and additionally allow scripts and other programs to setup a cluster without having to deal with distro specific configuration files to handle daemon flags.\n## API\n\n`POST /join`\n\n``` json\n{\n  \"DiscoveryBackend\": \"...\",\n  \"DiscoveryAddress\": \"...\",\n  \"KvStore\": \"...\",\n}\n```\n## CLI\n\n`docker join --backend ... --address .. --kv-store ...`\n## Design\n\nIf no options are passed as daemon flags for `--discovery-backend`, `--discovery-address`, and `--kv-store` then the `/join` API can be used.  If any of those daemon flags are set the `/join` API should fail.  When POST-ing to `/join` the three arguments will be passed to `pkg/discovery` to initialize the discovery backend.  Additionally these parameters will be saved in `/var/lib/docker/discovery/config.json` to be used if the daemon restarts.\n\nOn start of the daemon discovery info will be read first from the CLI and then if not available will look in `/var/lib/docker/cluster/config.json`\n"},{"labels":["api",null,null,null],"text":"Hi guys,\n\nWe use swarm as orchestration tools. And we add labels on docker daemon to let swarm to do some specific scheduling, such as schedule redis container to the docker daemon which has `ssd` label.\n\nBut in some case, we need to change the docker daemon labels, such as we want add MapR-ability label to some daemon in the midnight, so the map reduce container could be scheduled to this daemon. \n\nThere's no API to change the daemon labels on the fly, and we can't afford to restart daemon. So we want add API to do that, such as:\n\n```\nUsage: docker labels [COMMAND] [OPTION]\n\nManage docker daemon labels:\n\nlist - show the docker daemon labels.\nadd - add new labels to docker daemon, docker labels add --label=[k=v]\nremove - remove any exist labels from docker daemon, docker labels remove --label=[k]\n```\n"},{"labels":["api",null,null,null],"text":"I have created an image from a running container - all good so far.\n\n```\nroot@scw-ec24f6:~# docker images\nREPOSITORY               TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nkapolos/armhf-arangodb   2.7.0-devel         6515245edb56        3 minutes ago       1.564 GB\n[...skipped...]\n```\n\nI realize I forgot to clean some files, I remove them on the still running container and commit again\n\n```\nroot@scw-ec24f6:~# docker commit hopeful_bose kapolos/armhf-arangodb:2.7.0-devel\n0bbc0ce06368e8a923737b4c8505d4157d43399495a72cf6a39b606a1b24e9ed\n```\n\nAnd then...\n\n```\nroot@scw-ec24f6:~# docker images\nREPOSITORY               TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nkapolos/armhf-arangodb   2.7.0-devel         0bbc0ce06368        44 seconds ago      -1.956e+09 B\n```\n\nNegative volume is awesome but might be slightly problematic :) Pushing the image to the hub, I see the actual size is 938MB, which sounds right.\n\n```\nDocker version 1.8.1, build d12ea79-dirty\n```\n\n```\narmhf arch\n```\n"},{"labels":["api",null],"text":"It would be useful to have a list of error codes and their corresponding cause. This could be in a tabular format such as:\n\n| Error Code | Meaning |\n| --- | --- |\n| NNN | Text |\n| NNN | Text |\n"},{"labels":["api",null,null],"text":"Right now the API will send an error when someone tries to call `stop` or `kill` on a paused container.\nThis is because signals alone don't do anything to processes that have been frozen by cgroup freezer.\n\nHowever once the process is unfrozen the kernel will go ahead and send those signals.\nWe should be able to update the API to go ahead and send the requested signal to the container, then automatically unpause it.\n\nThis is better than asking the user to unpause it first as the container may be paused due to some bad behavior in the container.\n\nIntroducing this behavior would also allow us to remove the work-around added in #13304\n"},{"labels":["api",null],"text":"In [pulp](https://pulp-docker.readthedocs.org/en/latest/) you can store docker images and serve them via readonly registry API. The way v1 content is uploaded is that you `docker save` the image and upload it to pulp via pulp's API. With v2, we would like to upload blobs and manifest directly. Unfortunately there is only a single way to get those: via v2 registry API. That's pretty cumbersome.\n\nWould it possible for docker client to output manifest and blobs?\n\nI have in mind something like:\n\n```\n$ docker manifest <image>\n{\n   \"name\": \"image\",\n   \"tag\": \"latest\",\n   \"architecture\": \"amd64\",\n   \"fsLayers\": [\n      {\n         \"blobSum\": \"sha256:074533a2d610d82f28097af30284da4077614e30cb0171f0d8d859d2bd294d74\"\n      },\n...\n```\n\nand\n\n```\n$ docker export -o blob.tar.gz --blob sha256:074533a2d610d82f28097af30284da4077614e30cb0171f0d8d859d2bd294d74\n```\n\nThis is _not_ a dupe of https://github.com/docker/distribution/issues/727\n"},{"labels":["api",null,null,null],"text":"Currently the output of `docker info` looks like:\n\n```\n$ docker info\nContainers: 1362\nImages: 145\nStorage Driver: overlay\n Backing Filesystem: extfs\nExecution Driver: native-0.2\nLogging Driver: json-file\nKernel Version: 4.1.4-1-ARCH\nOperating System: Arch Linux\nCPUs: 8\nTotal Memory: 15.6 GiB\nName: archbox\nID: OUQD:OBQE:7KQO:2FQ5:YJIC:ILXS:O7SE:PWEK:3ZWT:PG7I:RUPA:2EIW\n```\n\nThis does not really help at a first glance to assess how many containers are running on a machine. Indeed on those **1362** containers, I only have **10** _running_ containers, the rest are _stopped_. I might have a few _paused_ containers too.\n\nThis would be useful in `docker info` to show more informations on the current state of containers:\n\n```\n$ docker info\nContainers: 1362\n Running: 8\n Paused: 2\n Stopped: 1352\nImages: 145\nStorage Driver: overlay\n Backing Filesystem: extfs\nExecution Driver: native-0.2\nLogging Driver: json-file\nKernel Version: 4.1.4-1-ARCH\nOperating System: Arch Linux\nCPUs: 8\nTotal Memory: 15.6 GiB\nName: archbox\nID: OUQD:OBQE:7KQO:2FQ5:YJIC:ILXS:O7SE:PWEK:3ZWT:PG7I:RUPA:2EIW\n```\n\nThis also means adding this to the remote API on `/info`. This way we can also use it in Swarm as a quick way to assess the load on machines (see related issue on the Swarm side docker/swarm#1140)\n\nI agree that this information is provided somehow by `docker ps` but this could be an added convenience to have this on `info` :smiley:\n"},{"labels":["api",null,null],"text":"Hi All,\n\nNow that volume plugins were added to Docker experimental channel, I would like to suggest adding server-side plugins for handling Docker commands. This will allow Docker users to achieve similar capabilities as supplied by [PowerStrip](https://github.com/ClusterHQ/powerstrip).\n\nThe server side command handler plugins are pre/post extension to Docker command handling, allowing to modify input commands before processed by Docker engine, and output data after processed by Docker Engine (but before sent to client). It will allow adding new capabilities into Docker engine, implemented as out-of-process plugins.\n\nI've implemented a similar mechanism for a project I am working on. I'll be glad to get your feedback on the design and contribute the code if it makes sense.\n## Plugin Mechanics\n\nThe Command Handler plugins are similar to [Volume Plugins](https://github.com/docker/docker/blob/master/experimental/plugin_api.md): \n- Processes running on same host as Docker Engine. \n- Registered by placing a file in `/usr/share/docker/plugins/srv/cmd`. \n- There can be two type of plugin files:\n  - `.sock` files are UNIX domain sockets.\n  - `.spec` files are text files containing a URL, such as unix:///other.sock.\n- The name of the file (excluding the extension) determines the plugin name.\n- Plugins should be started before Docker, and stopped after Docker.\n- The Plugin API is RPC-style JSON over HTTP. Requests flow from the Docker daemon to the plugin.\n## Plugin Initialization\n\nUnlike volume plugins, the command handler plugins should be initialized upon Docker Engine startup. \nDocker Engine sends a /Plugin.Activate request and receives list of commands and type of handling (input or output) that plugin is interested in.\n### /Plugin.Activate\n\n**Request:** empty body\n\n**Response:**\n\n```\n{\n    \"Implements\": [\n        {\"cmd\":\"run\", \"type\":\"input\"}, \n        {\"cmd\":\"stop\", \"type\":\"input\"}, \n        {\"cmd\":\"inspect\", \"type\":\"output\"}\n    ]\n}\n```\n## Plugin Invocation\n\nOnce a plugin is registered for set of commands, Docker Engine calls the plugin before processing the command (\"input\" command handler) and before sending the output to client (\"output\" command handler). \n\nPlugin invocation is done by calling /Plugin.Execute request, while passing type of processing (input or output) and the associated payload (complete input command or output message).\n### /Plugin.Execute\n\n**Request:** \n\n```\n{\n    \"Command\": \"run\",\n    \"Type\": \"input\" or \"output\"\n    \"Payload\": { COMMAND PAYLOAD }\n}\n```\n\n**Response:**\n\n```\n{\n    \"Action\": \"continue\" or \"stop\"\n    \"Payload\": {UPDATED PAYLOAD}\n    \"Return_Code\": 0\n    \"Error_Msg\": {OPTIONAL ERROR MESSAGE}        \n}\n```\n\nDocker Engine should block until plugin responds back (timeouts?). It will continue processing the command in case the plugin responded with \"continue\" response action. It should stop processing the command (and returning return code and message) in case the response action is \"stop\".\n\nIn case of \"continue\" action, Docker Engine should use the Payload returned from the plugin response instead of the original command payload.\nThis allows plugins to modify command input parameters or output data.\n\nNote that multiple command handler plugins can be registered for the same command. Docker Engine will continue calling plugins for the same command as long as it did not get \"stop\" action from one of the handlers. After processing all plugins registered for a command, Docker Engine should continue handling the modified command (as returned from the last plugin).\n## Example Plugins\n\nExample for capabilities we would be able to implement using command handler plugins:\n- Run additional commands before/after container is started/stopped. E.g. when containerA is started/stopped, automatically start/stop containerB.\n- Add missing parameters to command line. E.g. add security parameters (cap-add, cap-drop) even if not specified in command line.\n- Prevent running command with certain parameters.\n- Modify Docker output to include additional data. E.g. modifying 'docker inspect' output to include container start time (or anything else which is useful). Note that this one is tricky as the CLI might be expecting certain outputs.\n"},{"labels":["api",null,null],"text":"Currently the filter for `ps`, `images`, and `events` only work with `key=value`. I was very surprised to learn that there is no `key!=value` expression for exclusion unlike affinity/constraint filters you can set for Docker Swarm. My suggestion is for filter should have the ability to include as well as exclude. Thoughts?\n"},{"labels":["api",null],"text":"**Description of problem**:\nHas the spec for this endpoint been changed in docker 1.7? Using the latest version of https://github.com/fsouza/go-dockerclient against https://master.dockerproject.com/ results in `Unrecognized input header` being returned when calling `client.Stats()`. Works correctly in 1.6. I can dig deeper if this isn't already a known issue.\n\n``` console\n$ docker version\nClient version: 1.6.0\nClient API version: 1.18\nGo version (client): go1.4.2\nGit commit (client): 4749651\nOS/Arch (client): darwin/amd64\nServer version: 1.7.0-dev\nServer API version: 1.19\nGo version (server): go1.4.2\nGit commit (server): 4bcfa47\nOS/Arch (server): linux/amd64\n```\n\n``` console\n$ docker info\nContainers: 5\nImages: 12\nStorage Driver: aufs\n Root Dir: /mnt/sda/var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 22\n Dirperm1 Supported: true\nExecution Driver: native-0.2\nKernel Version: 3.16.1-tinycore64\nOperating System: Boot2Docker 1.2.0 (TCL 5.3); 3.16.1-config-file : e75396e - Fri Aug 22 06:45:30 UTC 2014\nCPUs: 1\nTotal Memory: 495.1 MiB\nName: boot2docker\nID: 4MLS:BGLV:7FJH:UIG7:EOH5:FEME:W6LK:535D:JGRT:JXQI:JZUH:ROXH\nDebug mode (server): true\nDebug mode (client): false\nFds: 81\nGoroutines: 89\nSystem Time: Sat May 23 05:10:21 UTC 2015\nEventsListeners: 13\nInit Path: /usr/local/bin/docker\nDocker Root Dir: /mnt/sda/var/lib/docker\nHttp Proxy:\nHttps Proxy:\nNo Proxy:\nUsername: ejholmes\nRegistry: [https://index.docker.io/v1/]\n```\n\n``` console\n$ uname -a\nLinux boot2docker 3.16.1-tinycore64 #1 SMP Fri Aug 22 06:40:10 UTC 2014 x86_64 GNU/Linux\n```\n\n**Environment details (AWS, VirtualBox, physical, etc.)**:\nAble to reproduce in boot2docker and also on AWS EC2 instances.\n\n**How reproducible**:\n100%\n\n**Steps to Reproduce**:\n1. Run docker 1.7 daemon\n2. Run a container: `docker run -d alpine:3.1 /bin/sh -c \"while true; do echo hello; sleep 1; done\"`\n3. Issue a request to stream the stats for the container with telnet:\n\n``` console\n$ telnet <docker host> <port>\nTrying ::1...\ntelnet: connect to address ::1: Connection refused\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nGET /containers/4cda41c21e8d0e41e6da635b12f9e8e13b61f4dc62f7b65a05ff9d60d5393fdb/stats HTTP/1.1\n```\n\n**Actual Results**:\n\nOne stat message is streamed, then a 0 is sent and no more stats are sent after that:\n\n``` console\nHTTP/1.1 200 OK\nDate: Sat, 23 May 2015 05:06:25 GMT\nContent-Type: text/plain; charset=utf-8\nTransfer-Encoding: chunked\n\n560\n{\"read\":\"2015-05-23T05:06:24.831430951Z\",\"network\":{\"rx_bytes\":0,\"rx_packets\":0,\"rx_errors\":0,\"rx_dropped\":0,\"tx_bytes\":0,\"tx_packets\":0,\"tx_errors\":0,\"tx_dropped\":0},\"cpu_stats\":{\"cpu_usage\":{\"total_usage\":847371027,\"percpu_usage\":[847371027],\"usage_in_kernelmode\":50000000,\"usage_in_usermode\":170000000},\"system_cpu_usage\":1878570000000,\"throttling_data\":{\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}},\"memory_stats\":{\"usage\":163840,\"max_usage\":1179648,\"stats\":{\"active_anon\":65536,\"active_file\":0,\"cache\":4096,\"hierarchical_memory_limit\":18446744073709551615,\"hierarchical_memsw_limit\":18446744073709551615,\"inactive_anon\":0,\"inactive_file\":0,\"mapped_file\":0,\"pgfault\":58722,\"pgmajfault\":0,\"pgpgin\":19824,\"pgpgout\":19800,\"rss\":94208,\"rss_huge\":0,\"swap\":0,\"total_active_anon\":65536,\"total_active_file\":0,\"total_cache\":4096,\"total_inactive_anon\":0,\"total_inactive_file\":0,\"total_mapped_file\":0,\"total_pgfault\":58722,\"total_pgmajfault\":0,\"total_pgpgin\":19824,\"total_pgpgout\":19800,\"total_rss\":94208,\"total_rss_huge\":0,\"total_swap\":0,\"total_unevictable\":0,\"total_writeback\":0,\"unevictable\":0,\"writeback\":0},\"failcnt\":0,\"limit\":519147520},\"blkio_stats\":{\"io_service_bytes_recursive\":[],\"io_serviced_recursive\":[],\"io_queue_recursive\":[],\"io_service_time_recursive\":[],\"io_wait_time_recursive\":[],\"io_merged_recursive\":[],\"io_time_recursive\":[],\"sectors_recursive\":[]}}\n\n0\n```\n\n**Expected Results**:\n\nI expect a continuous stream of stats to be sent, like below, which was captured against docker 1.6.\n\n``` console\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Sat, 23 May 2015 05:03:14 GMT\nTransfer-Encoding: chunked\n\n582\n{\"read\":\"2015-05-23T05:03:14.412287818Z\",\"network\":{\"rx_bytes\":648,\"rx_packets\":8,\"rx_errors\":0,\"rx_dropped\":0,\"tx_bytes\":648,\"tx_packets\":8,\"tx_errors\":0,\"tx_dropped\":0},\"cpu_stats\":{\"cpu_usage\":{\"total_usage\":327891630,\"percpu_usage\":[61105665,115203059,53758803,97824103],\"usage_in_kernelmode\":130000000,\"usage_in_usermode\":20000000},\"system_cpu_usage\":75857340000000,\"throttling_data\":{\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}},\"memory_stats\":{\"usage\":454656,\"max_usage\":655360,\"stats\":{\"active_anon\":61440,\"active_file\":4096,\"cache\":8192,\"hierarchical_memory_limit\":18446744073709551615,\"hierarchical_memsw_limit\":18446744073709551615,\"inactive_anon\":0,\"inactive_file\":0,\"mapped_file\":0,\"pgfault\":6277,\"pgmajfault\":0,\"pgpgin\":2199,\"pgpgout\":2161,\"rss\":147456,\"rss_huge\":0,\"swap\":0,\"total_active_anon\":61440,\"total_active_file\":4096,\"total_cache\":8192,\"total_inactive_anon\":0,\"total_inactive_file\":0,\"total_mapped_file\":0,\"total_pgfault\":6277,\"total_pgmajfault\":0,\"total_pgpgin\":2199,\"total_pgpgout\":2161,\"total_rss\":147456,\"total_rss_huge\":0,\"total_swap\":0,\"total_unevictable\":0,\"total_writeback\":0,\"unevictable\":0,\"writeback\":0},\"failcnt\":0,\"limit\":2105860096},\"blkio_stats\":{\"io_service_bytes_recursive\":[],\"io_serviced_recursive\":[],\"io_queue_recursive\":[],\"io_service_time_recursive\":[],\"io_wait_time_recursive\":[],\"io_merged_recursive\":[],\"io_time_recursive\":[],\"sectors_recursive\":[]}}\n\n582\n{\"read\":\"2015-05-23T05:03:15.412531749Z\",\"network\":{\"rx_bytes\":648,\"rx_packets\":8,\"rx_errors\":0,\"rx_dropped\":0,\"tx_bytes\":648,\"tx_packets\":8,\"tx_errors\":0,\"tx_dropped\":0},\"cpu_stats\":{\"cpu_usage\":{\"total_usage\":329912723,\"percpu_usage\":[61402741,116102576,53758803,98648603],\"usage_in_kernelmode\":130000000,\"usage_in_usermode\":20000000},\"system_cpu_usage\":75861300000000,\"throttling_data\":{\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}},\"memory_stats\":{\"usage\":401408,\"max_usage\":655360,\"stats\":{\"active_anon\":53248,\"active_file\":4096,\"cache\":8192,\"hierarchical_memory_limit\":18446744073709551615,\"hierarchical_memsw_limit\":18446744073709551615,\"inactive_anon\":0,\"inactive_file\":0,\"mapped_file\":0,\"pgfault\":6326,\"pgmajfault\":0,\"pgpgin\":2216,\"pgpgout\":2174,\"rss\":163840,\"rss_huge\":0,\"swap\":0,\"total_active_anon\":53248,\"total_active_file\":4096,\"total_cache\":8192,\"total_inactive_anon\":0,\"total_inactive_file\":0,\"total_mapped_file\":0,\"total_pgfault\":6326,\"total_pgmajfault\":0,\"total_pgpgin\":2216,\"total_pgpgout\":2174,\"total_rss\":163840,\"total_rss_huge\":0,\"total_swap\":0,\"total_unevictable\":0,\"total_writeback\":0,\"unevictable\":0,\"writeback\":0},\"failcnt\":0,\"limit\":2105860096},\"blkio_stats\":{\"io_service_bytes_recursive\":[],\"io_serviced_recursive\":[],\"io_queue_recursive\":[],\"io_service_time_recursive\":[],\"io_wait_time_recursive\":[],\"io_merged_recursive\":[],\"io_time_recursive\":[],\"sectors_recursive\":[]}}\n```\n\n**Additional info**:\n"},{"labels":["api",null,null],"text":"For day-to-day use and simple scripting purposes It'd be great if the --filter function was extended with filters on more columns.\n\nSpecifically:\n\n```\n$ docker ps --filter image=myname/test \n```\n\nWould be great so we can kill all our tests in one go like so:\n\n```\n$ docker ps --filter image=myname/test -q | xargs docker rm -f\n```\n\nThis is helpful specifically in this combination because I want only image id's to be returned, and |grep thus doesn't work.\n\nOther filters that would make sense to me:\n\n_For images_\n- Repository (with tag)\n- Age? (--filter agemore=4h --filter ageless=2w)\n\n_For containers_\n- Image (with tag)\n- Name (this is implemented by the way https://github.com/docker/docker/issues/10897, but undocumented)\n- Age? (as above)\n- Status (running, exited, etc)\n\n**references**\nI found this ticket: https://github.com/docker/docker/pull/11904 which describes something that sounds similar but (I think) is actually for the bash completion (only).\n"},{"labels":["api",null,null],"text":"As a frequent exporter of docker filesystems, I want an option to tell `docker cp` to copy symlinks as literals, so that my filesystem archives receive the symlinks that my containers contain.\n\nMaybe `docker cp -a`?\n"},{"labels":["api"],"text":"This kind of defeats the purpose of having an API in the first place and is completely unnecessary since the client and the server are typically the same binary.\n"},{"labels":["api",null],"text":"With #10874 I wanted to make sure that the client sent an explicit `no` when you use `--restart=no`, unfortunately in \"fixing\" this issue the \"fix\" on that issue also changed the default value from `--restart=\"\"` to `--restart=\"no\"` which undoes all the advantage of having `--restart=no` pass through `RestartPolicy: \"no\"`. It means that we're once again in a situation where:\n\n```\ndocker run -it ubuntu\n```\n\nand:\n\n```\ndocker run --restart=no -it ubuntu\n```\n\ncannot be distinguished at the server. Previously they could not be distinguished because they would both show up to the API as `RestartPolicy: \"\"`. I filed #10874 with the intention that the first case continue to result in `RestartPolicy: \"\"` and the second case result in `RestartPolicy: \"no\"` so that they could be distinguished.\n\nUnfortunately the change that was actually pushed instead means that in both cases the API will see `RestartPolicy: \"no\"` and they're still indistinguishable.\n"},{"labels":["api",null,null],"text":"**Problem**\n\nThe docker api logs are lacking and can be verbose and not useful.\n\n**Solution**\n\nReview the logging calls in https://github.com/docker/docker/tree/master/api/server and use our standard log package `github.com/Sirupsen/logrus` to make meaningful log messages.\n\nIt could be helpful to remove all existing log calls and then go through and log meaning requests, warnings, errors, and debug messages for the API.\n"},{"labels":["api",null,null],"text":"According to the wikipedia example, DELETE on a resource with no parameters should delete all instances of that resource. Currently, it throws an error saying the null id could not be found:\n\n```\ncloudscaling@mngmt2:~> curl -X DELETE http://localhost:2375/images/\nNo such image:\ncloudscaling@mngmt2:~> curl -X DELETE http://localhost:2375/containers/\nNo such container:\n```\n\n[Wiki](http://en.wikipedia.org/wiki/Representational_state_transfer#Example)\n"},{"labels":["api",null,null],"text":"It is bizarre to me that there is a containers/resize endpoint, but that those parameters are not available to be set on container creation or start. In addition, _calling resize doesn't even work_ - you need to restart the container as well, making the whole flow for creating a TTY of a certain size nigh impossible in the usual Docker flow.\n"},{"labels":["api",null,null],"text":"Generally, a docker command instantiation makes several http requests to a running registry. Processing these requests in the registry server to sessionize the request flow is a non-trivial problem. While we have a proposed `Docker-Command` header in https://github.com/dmcgowan/docker/pull/18, it would be smart to include a unique token for each command execution that is added in a header to support trivial sessionization.\n\nUse cases of these session identifiers include producing usable metrics for private registries or added to outgoing webhooks (docker/distribution#42) for later processing.\n\nThe header would consist of the command that was run (not the entire cli, ie \"push\" or \"pull\") and a session id generated at the start of each instantiation of the docker client process. An example of such a header might be as follows:\n\n```\nDocker-Command: push 3eed4669-d1e8-4753-9420-998e530386b1\n```\n\nThe header could be added to all requests, from the client to the engine and beyond. If taken that far, such a header could support distributed debugging or begin to enable [dapper](http://research.google.com/pubs/pub36356.html)-like analysis.\n"},{"labels":["api",null,null,null],"text":"I use the Docker API, and when I run this request, the tags doesn't return.\n\n```\nGET /images/{id}/json\n```\n\nThis information is given when I list all images.\n\nWhat's the best practices to get image's tags information ?\n"},{"labels":["api",null,null],"text":"Sometimes you have really important containers, like data only containers, that you don't want accidentally deleted.  `docker rm -f $(docker ps -qa)` is just too easy to type sometimes and then, \"oh !@#!\", it's all gone.  (Well not really because you can find your data in `/var/lib/docker/vfs`).  Anyhow, I propose we add the following:\n\n`docker run/create --lock=true ...`\n`docker lock CID`\n`docker unlock CID`\n\nIf one was to do `docker rm CID` and CID was locked it wouldn't delete and exit with an error code.  Start/stop/restart should still work.  This flag is the equivalent of EC2's `DisableApiTermination` flag.  In order to delete a locked container you must first run `docker unlock CID`.\n"},{"labels":["api",null,null,null,null],"text":"The `docker export` command and corresponding API endpoint allow the client to get an archive of the container's root filesystem. This is useful for squashing an entire set of image layers into one, but there's currently no way to get just the file system diff for a container.\n\nThis could be achieved by adding an optional parameter to the container export API endpoint and an optional flag to the `docker export` command: `diff=1` This would instruct the runtime to only return the layer diff for the container rather than the entire filesystem.\n## Why is this useful?\n\nIt would allow for additional functionality in tools which are used to build images like the `docker build` command. Layer archives could be collected by the client, checksums computed for each layer archive, and for images to be built using a new content-addressable format.\n"},{"labels":["api",null],"text":"Currently the `docker cp` command supports copying a file/directory from inside container to the client. I propose that we create a complementary command, perhaps `docker add` or overloading of the `docker cp` command, which does the opposite: copy from `HOSTPATH` to `CONTAINER:PATH`\n## Why is this useful?\n1. It would clear the way for the `docker build` subsystem to be completely removed from the\n   Docker daemon.\n   \n   Most of the functionality of `docker build` is already possible with the API, as every line of a\n   Dockerfile simply creates a container with the current build config, modifies the filesystem of the\n   container in some way (either by ADD/COPY of some resource or by executing a command), then\n   commits the changes as a new Image. All of this is possible with the current Docker Remote API\n   except for ADDing resources to the container.\n   \n   In a brave new world, builds of new images could be orchestrated remotely over the API and\n   ultimately give more power to users who want/need extra functionality in their builds.\n2. Allows for updating containers with miscellaneous data.\n   \n   Such functionality would make it possible for files to be dynamically loaded into a newly created\n   or running container. Things like TLS certificates, keys, or other configuration files could be added\n   to a container before it starts or while it is running, adding all sorts of new possibilities to\n   configuration management tools and scripts.\n"},{"labels":["api",null],"text":"Currently we can only inspect a single image or container. It would be great as part of the listing of all images or containers to be able to specify a parameter, something like '/images/json?inspect=true' which will return all images/containers in their 'inspected format' instead of the summary we get now. Thoughts?\n"},{"labels":["api",null,null],"text":"It would be nice if \"docker images -f\" could also filter by images that were not pushed to the repository after its creation whether by commit, build or import / load.\n\n``` sh\ndocker images -f 'not-pushed=true'\n```\n"},{"labels":["api",null,null,null],"text":"Currently there is no way to attach to an existing exec. If I run `docker exec -di my_container bash`, there is no way to attach to this process, using the command line or the API.\n\nWhat are the steps needed to have such a feature implemented (maybe `docker exec attach :exec_id`)?\n"},{"labels":["api"],"text":"When one calls `/containers/(id)/start` with a command that does not exist (provided to `/containers/create`), the server replies with `HTTP/1.1 500 Internal Server Error` with a payload that explains the failure.\n\nIn contrast, when one calls  `/exec/(id)/start` with a non-existing command (provided to\n`/containers/(id)/exec`), the server answers `HTTP/1.1 200 OK` but embeds in the _docker.raw-stream_ the error `2014/11/30 19:37:16 docker-exec: failed to exec: exec: \"`_⟨command⟩_`\": executable file not found in $PATH`.  I think it would be better for `/exec/(id)/start` to return a status of 500 as well.\n"},{"labels":["api",null,null],"text":"Docker Remote API already provides a WebSocket endpoint to attach to a container's tty with a WebSocket connection (`/containers/(id)/attach/ws` — although not documented).\n\nIt would be great to have this functionality for execs as well. It would let people attach to exec ttys with standard WebSocket libraries and totally avoid HTTP hijacking.\n"},{"labels":["api",null,null],"text":"I came across this when working on the Ruby docker-api gem. If you attempt to start a random Exec instance the response will be a 200. Shouldn't this be a 404?\n\nhttps://gist.github.com/tduffield/21a64cd272962b4345fe\n"},{"labels":["api",null],"text":"It is too complex to set up authenticated https binding. Using ssh subsystem functionality would mean no additional authentication is needed. You can get std in and out and tunnel it to existing http calls, but both client and server have to understand this.\n"},{"labels":["api",null,null],"text":"Currently there is no unique event for when a container is automatically restarted by the daemon.  Such an event _can_ be determined from the sequence of events for a container:\n- restart - die, start, restart\n- stop - die, stop\n- start - start\n- abend - die, start\n\nTrick is to simply track \"die, start\" sequences and check for at some later time the absence or presence of a restart event for the container in question (ugly).  A unique event would be nice, eg:\n- abend - die, start, _autorestarted_ or whatever\n\nUse case is that docker does a nice job of hiding containers that abend by just restarting them.  It would be nice to trap that event to get an idea that it is happening.\n\nDiscussed here on forum:\n\nhttps://forums.docker.com/t/docker-events-when-container-automatically-restarted/356\n"},{"labels":["api"],"text":"I'm trying to mount volumes from other containers. The example format in the [ v1.15 docs](https://docs.docker.com/reference/api/docker_remote_api_v1.15/#start-a-container) doesn't seem to work:\n\n```\nPOST /containers/(id)/start\n{\n    \"VolumesFrom\": [\"data\"],\n    ...\n}\n```\n\nHowever, following the same pattern as `/containers/create` does work:\n\n```\nPOST /containers/(id)/start\n{\n    \"HostConfig\": {\n        \"VolumesFrom\": [\"data\"]\n    }\n    ...\n}\n```\n\nLet me know if I'm missing something obvious here, thanks.\nOther info:\n\n```\n$ uname -a\nDarwin CRP10795M 13.4.0 Darwin Kernel Version 13.4.0: Sun Aug 17 19:50:11 PDT 2014; root:xnu-2422.115.4~1/RELEASE_X86_64 x86_64\n```\n\n```\n$ docker version\nClient version: 1.3.1\nClient API version: 1.15\nGo version (client): go1.3.3\nGit commit (client): 4e9bbfa\nOS/Arch (client): darwin/amd64\nServer version: 1.3.1\nServer API version: 1.15\nGo version (server): go1.3.3\nGit commit (server): 4e9bbfa\n```\n\n```\n$ docker -D info\nContainers: 4\nImages: 116\nStorage Driver: aufs\n Root Dir: /mnt/sda1/var/lib/docker/aufs\n Dirs: 124\nExecution Driver: native-0.2\nKernel Version: 3.16.4-tinycore64\nOperating System: Boot2Docker 1.3.1 (TCL 5.4); master : 9a31a68 - Fri Oct 31 03:14:34 UTC 2014\nDebug mode (server): true\nDebug mode (client): true\nFds: 21\nGoroutines: 18\nEventsListeners: 0\nInit Path: /usr/local/bin/docker\n```\n"},{"labels":["api"],"text":"The API to pull an image is a bit inconsistent.\nIE POST /images/create?fromImage=xxx.xx/asd/qwe\nWhen the pull fails it still returns http status 200, and the response body seems like some sort of pseudo-json like\n{\"status\":\"Pulling repository aaa.com/ns/name\"}\n{\"errorDetail\":{\"message\":\"Error: image ns/name not found\"},\"error\":\"Error: image ns/name not found\"}\n\nwhere it should probably be like \n{\"status\":\"Pulling repository aaa.com/ns/name\",\n\"errorDetail\":{\"message\":\"Error: image ns/name not found\"},\"error\":\"Error: image ns/name not found\"}\n\nand the response status probalby a 422\n\n\"The 422 (Unprocessable Entity) status code means the server understands the content type of the request entity (hence a 415(Unsupported Media Type) status code is inappropriate), and the syntax of the request entity is correct (thus a 400 (Bad Request) status code is inappropriate) but was unable to process the contained instructions.\"\n"},{"labels":["api",null],"text":"After reading through everyone's feedback on https://github.com/docker/docker/issues/8664, I propose adding to docker the metadata equivalent of a \"time last-modified\" metadata common on filesystems. This wouldn't require additional logging or filtering.\n\nThe current state metadata is like this:\n\n```\n\"State\": {\n    \"ExitCode\": 0,\n    \"FinishedAt\": \"0001-01-01T00:00:00Z\",\n    \"Paused\": false,\n    \"Pid\": 19967,\n    \"Restarting\": false,\n    \"Running\": true,\n    \"StartedAt\": \"2014-10-20T10:53:50.649532096Z\"\n},\n```\n\nSo with my proposal here, we could have a new state datapoint for \"ModifiedAt\":\n\n```\n\"State\": {\n    \"ExitCode\": 0,\n    \"FinishedAt\": \"0001-01-01T00:00:00Z\",\n    \"Paused\": false,\n    \"Pid\": 19967,\n    \"Restarting\": false,\n    \"Running\": true,\n    \"StartedAt\": \"2014-10-20T10:53:50.649532096Z\",\n    \"ModifiedAt\": \"2014-10-20T10:55:50.649532096Z\"\n},\n```\n\nOn container start, ModifiedAt would be set to the same at StartedAt. And docker exec calls on a running container would update the ModifiedAt field.\n\nthoughts? @jpetazzo @crosbymichael smells ok? :-)\n"},{"labels":["api"],"text":"With docker 1.11, a POST to /containers/$id/start with {\"PublishAllPorts\": true} would start the container and bind exposed ports as expected.\n\nAfter upgrading to 1.12, the container no longer binds any ports.\n\nAPI docs show no changes in this area - did something change, or is this a regression?\n"},{"labels":["api",null,null],"text":"Right now the remote API does not allow running clients with a newer API version than the daemon.\n\n```\n$ docker ps\n2014/08/26 14:21:03 Error response from daemon: client and server don't have same version (client : 1.13, server: 1.12)\n```\n\nThis message is misleading/incorrect. The code in question is [daemon.go:1057](https://github.com/docker/docker/blob/c4a190db0c7020ee39672421d1bbca3678f86683/api/server/server.go#L1057), which is checking to see that the client API is **newer** than the server API, not different. That code would happily allow running a client which is older than the server.\n\nThis brings me to the next point, why does it allow running an older client, but not a newer one?\nThis is extremely irritating to work with as I have to keep a separate client which is older than all the remote servers I end up working with.\nThe remote API changes between versions are usually so trivial, that in my opinion, this restriction is not warranted.\n\nCan we either:\n1. Fix the message to indicate that the client API is newer than the server API.\n2. Remove the restriction altogether and just display a warning.\n\nI would much prefer # 2.\n"},{"labels":["api",null,null],"text":"Make `docker cp` work more like `scp`\n\n`Usage: docker cp CONTAINER:PATH HOSTPATH`\n## Proposed\n\n1 Allow the `PATH` to contain standard filesystem wildcards, and then expand them on the container side.\n2 Allow the `HOSTPATH` to be the resulting filename _if_ the daemon sends it a single file. \n## right now\n\n`HOSTPATH` is a dir, which will even be created for you - rather than the name of the resulting file, and wildcards are not expanded.\n\n```\ntmp $ mkdir sven\ntmp $ docker cp sven:/etc/* sven\n2014/08/25 14:22:37 Error response from daemon: Could not find the file /etc/* in container sven\ntmp $ docker cp sven:/etc/passwd sven/banana\ntmp $ ls sven/\nbanana  passwd\ntmp $ more sven/*\n\n*** sven/banana: directory ***\n\ntmp $ cd sven\nsven $ docker cp sven:/etc/* .\n2014/08/25 14:22:23 Error response from daemon: Could not find the file /etc/* in container sven\n```\n"},{"labels":["api",null,null],"text":"Here are some calls and their endpoints:\n- List images: `/images/json`\n- Get image: `/images/{{image}}/json`\n- Get image history `/images/{{image}}/history`\n\nFirst of all having `json` in the URL does not make sense. Either get that json/xml information from `Accept-Type` header or a query string like `?output=json` (or even worse, use `.json` extension at the end of the URI).\n\nBy having URLs like I listed above you just made `history` a same-level or same-type of  thing as `json`, which is not correct. (and \"get image history\" does not end with `.../json` either.)\n\nIf this would be my API I would go for:\n- List images: `/images`\n- Get image: `/images/{{image}}`\n- Get image history `/images/{{image}}/history`\n\nI just looked at these 3 calls in the entire API and found that problem, I will be updating this issue as I go.\n\nFixing this would be a breaking API change, just leaving this here for future reference.\n"},{"labels":["api"],"text":"`/image/json` call responds `Created` field with UNIX epoch:\n\n``` json\n[{\"Created\":1405979233,\"Id\":\"ba5877dc9beca5a0af9521846e79419e98575a11cbfe1ff2ad2e95302cff26bf\",\"ParentId\":\"2318d26665eff33e9f91c4c99036751afb40eb58f944a585372bec1407828ad3\",\"RepoTags\":[\"ubuntu:latest\"],\"Size\":0,\"VirtualSize\":192735895}\n```\n\n`/image/{{name}}/json` call responds `Created` field with ISO 8601 String.\n\n``` json\n{...\n  \"Created\": \"2014-07-21T21:47:13.032415435Z\",\n...}\n```\n\nThis doesn't make sense. I am having really hard time writing an API client due to different deserialization of DateTime formats because you have more than one DateTime format in the API.\n\n(I'm using API v1.13)\n"},{"labels":["api"],"text":"I am using the [Dockerode](https://github.com/apocas/dockerode) npm module to interface with the Docker API on a local machine.\n\nIf I specify an integer PortBindings value when calling the API to start an existing container (i.e. POST /containers/(id)/start), it fails to take effect. For instance, if my passed config is:\n\n``` javascript\n{ \"Binds\":[\"/var/lib/mongo/data:/data/db\"],\"PortBindings\":{\"27017/tcp\":[{\"HostPort\":27017}]} }\n```\n\nthen it fails, but if it is:\n\n``` javascript\n{ \"Binds\":[\"/var/lib/mongo/data:/data/db\"],\"PortBindings\":{\"27017/tcp\":[{\"HostPort\":\"27017\"}]} }\n```\n\nthen it works (notice the 27017 is a string in the second version). This was confusing because I expected that the port number, being a native integer, would be valid and correct. \n\nI had to cast my Integer to a String in order to have it take effect (but not before spending a large amount of time narrowing down the issue).\n"},{"labels":["api",null],"text":"In addition to work in #5893 and related issues. \n# Refactoring Docker Remote API Client\n## What's wrong\n\nThe docker remote api isn't easy to use because:\n- There's no official client to the API\n- Much of the validation the CLI provides is in the CLI code, not the\n  API layer\n- The documentation doesn't always show a proper mapping of CLI commands\n  to API calls (e.g. `docker run` involves multiple steps)\n- The CLI code is cluttered with many concerns and makes understanding\n  how to use the API properly by example difficult\n- Marshaling/Unmarshaling in Go should use the same structures as the\n  internal code for easier code sharing (i.e. dont require consumers to\n  implement a `type Containers struct` for unmarshalling the output of\n  `docker ps`)\n## How to fix\n\nPropose:\n- Creating an official API client for use in the CLI tool\n- Exposing proper validation from the API layer or in the API client\n- Simplifying the CLI code and breaking commands down into smaller files\n  so they're easier to understand.\n- Leverage pre-existing types when (un)serializing calls from the API\n## Proposed implementation\n\nSee https://gist.github.com/mcculloughsean/5c1dd3cc674e6fd583f5#file-proposal-go for example code. \n### Creating an official client\n\nComposes ['Call'](https://github.com/docker/docker/blob/403df1765abfd3ac62b7f6b8bd709fb0d691d8c8/api/client/utils.go#L42-L42) with commands to create a fetcher per endpoint in the API with proper unmarshalling.\n### Reimplement CLI in terms of API client\n\nUse existing types for marshaling/unmarshaling JSON data for use in Go\ncode.\n\nMove formatting to methods for CLI stringification.\n\nCreate helper methods to generate valid query strings.\n### Push validations down to API as much as possible\n\nRemove all checks from the CLI level that can easily live in the API\nlayer.\n\nCreate a common pattern for passing validation errors back up through\nthe API pipeline (maybe by switching unmarshaling strategy based on http\nstatus code)\n\nEnsure that validation failure messages are verbose. e.g.:\n\n``` bash\n$curl -v -H \"Content-Type: application/json\" -d \"{\\\"Hostname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"Memory\\\":0,\\\"MemorySwap\\\":0,\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":true,\\\"AttachStderr\\\":true,\\\"PortSpecs\\\":null,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":null,\\\"Cmd\\\":[\\\"date\\\"],\\\"Image\\\":\\\"repository.snc1/candyland/echo-fedora\\\",\\\"Volumes\\\":{\\\"/tmp\\\":{}},\\\"WorkingDir\\\":\\\"\\\",\\\"DisableNetwork\\\":false,\\\"ExposedPorts\\\":{\\\"22/tcp\\\":{}}}\" http://localhost:12345/containers/create?name=foo\n* About to connect() to localhost port 12345 (#0)\n*   Trying ::1... Connection refused\n*   Trying 127.0.0.1... connected\n* Connected to localhost (127.0.0.1) port 12345 (#0)\n> POST /containers/create?name=foo HTTP/1.1\n> User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.15.3 zlib/1.2.3 libidn/1.18 libssh2/1.4.2\n> Host: localhost:12345\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 340\n>\n< HTTP/1.1 201 Created\n< Content-Type: application/json\n< Date: Thu, 31 Jul 2014 21:54:33 GMT\n< Content-Length: 90\n<\n{\"Id\":\"2d3a1faaa6d83680ddb4164dc39755ef18fab37b4bf66e88f62bd00168547faa\",\"Warnings\":null}\n* Connection #0 to host localhost left intact\n* Closing connection #0\n\n$curl -v -H \"Content-Type: application/json\" -d \"{\\\"Hostname\\\":\\\"\\\",\\\"User\\\":\\\"\\\",\\\"Memory\\\":0,\\\"MemorySwap\\\":0,\\\"AttachStdin\\\":false,\\\"AttachStdout\\\":true,\\\"AttachStderr\\\":true,\\\"PortSpecs\\\":null,\\\"Tty\\\":false,\\\"OpenStdin\\\":false,\\\"StdinOnce\\\":false,\\\"Env\\\":null,\\\"Cmd\\\":[\\\"date\\\"],\\\"Image\\\":\\\"repository.snc1/candyland/echo-fedora\\\",\\\"Volumes\\\":{\\\"/tmp\\\":{}},\\\"WorkingDir\\\":\\\"\\\",\\\"DisableNetwork\\\":false,\\\"ExposedPorts\\\":{\\\"22/tcp\\\":{}}}\" http://localhost:12345/containers/create?name=foo\n* About to connect() to localhost port 12345 (#0)\n*   Trying ::1... Connection refused\n*   Trying 127.0.0.1... connected\n* Connected to localhost (127.0.0.1) port 12345 (#0)\n> POST /containers/create?name=foo HTTP/1.1\n> User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.15.3 zlib/1.2.3 libidn/1.18 libssh2/1.4.2\n> Host: localhost:12345\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 340\n>\n< HTTP/1.1 500 Internal Server Error\n< Content-Type: text/plain; charset=utf-8\n< Date: Thu, 31 Jul 2014 21:54:35 GMT\n< Content-Length: 53\n<\nAbort due to constraint violation: constraint failed\n```\n\nThe second error message isn't useful. The dockerd logs themselves\naren't useful either:\n\n```\n[debug] server.go:999 Calling POST /containers/create\n2014/07/31 21:54:33 POST /containers/create?name=foo\n[ead17ee3] +job create(foo)\n[error] mount.go:11 [warning]: couldn't run auplink before unmount:\nexec: \"auplink\": executable file not found in $PATH\n[ead17ee3] -job create(foo) = OK (0)\n[debug] server.go:999 Calling POST /containers/create\n2014/07/31 21:54:35 POST /containers/create?name=foo\n[ead17ee3] +job create(foo)\nAbort due to constraint violation: constraint failed\n[ead17ee3] -job create(foo) = ERR (1)\n[error] server.go:1025 Error: Abort due to constraint violation:\nconstraint failed\n[error] server.go:90 HTTP Error: statusCode=500 Abort due to constraint\nviolation: constraint failed\n```\n"},{"labels":["api"],"text":"It would be super helpful if the documentation for this endpoint explained or listed a small note about what each of the parameters actually do and what the possible values for properties who's values are objects.\n\nI am aware that this is the same object gleamed from `docker inspect` however to my knowledge this structure isn't precisely described in any part of the documentation. \n\nFor example, the documentation has the following text:\n\n```\n {\n         \"Hostname\":\"\",\n         \"User\":\"\",\n         \"Memory\":0,\n         \"MemorySwap\":0,\n         \"AttachStdin\":false,\n         \"AttachStdout\":true,\n         \"AttachStderr\":true,\n         \"PortSpecs\":null,\n         \"Tty\":false,\n         \"OpenStdin\":false,\n         \"StdinOnce\":false,\n         \"Env\":null,\n         \"Cmd\":[\n                 \"date\"\n         ],\n         \"Image\":\"base\",\n         \"Volumes\":{\n                 \"/tmp\": {}\n         },\n         \"WorkingDir\":\"\",\n         \"DisableNetwork\": false,\n         \"ExposedPorts\":{\n                 \"22/tcp\": {}\n         }\n    }\n```\n\nI think we should denote what the possible values of the properties such as `ExposedPorts`, `Volumes`, and `Cmd` in the section for this endpoint, or describe the configuration structure elsewhere and link to it from here, and similiar endpoints that utilize it like the inspection endpoint (/containers/(id)/json)\n"},{"labels":["api"],"text":"\"docker inspect mycontainer\" does not show container's IPv6 address:\n\n```\n\"NetworkSettings\": {\n    \"Bridge\": \"docker0\",\n    \"Gateway\": \"172.17.42.1\",\n    \"IPAddress\": \"172.17.0.8\",\n    \"IPPrefixLen\": 16,\n    \"PortMapping\": null,\n    \"Ports\": {}\n},\n```\n\nthe ifconfig output inside the container:\n\n```\nroot@5f54af0a7db0:/# ifconfig\neth0  Link encap:Ethernet  HWaddr 96:79:64:33:6f:17\n      inet addr:172.17.0.9  Bcast:0.0.0.0  Mask:255.255.0.0\n      inet6 addr: 2a11:4f8:140:2425:9479:64ff:fe33:6f17/64 Scope:Global\n      inet6 addr: fe80::9479:64ff:fe33:6f17/64 Scope:Link\n      UP BROADCAST RUNNING  MTU:1500  Metric:1\n      RX packets:13 errors:0 dropped:4 overruns:0 frame:0\n      TX packets:7 errors:0 dropped:0 overruns:0 carrier:0\n      collisions:0 txqueuelen:1000\n      RX bytes:1490 (1.4 KB)  TX bytes:586 (586.0 B)\n```\n\nIt would be nice to have a key \"IPv6Address\" under \"NetworkSettings\".\n"},{"labels":["api",null,null],"text":"Would it be possible to \"pin\" a container so that it needs to have an extra flag passed to it (something like `--purge`) in order for the container to actually be deleted via `docker rm` or similar commands?\n"},{"labels":["api",null],"text":"There are a few issues that ask for specific hooks, but none of them have apparently been fully addressed. The ones that are closed were promised a \"generic\" hooks mechanism for all commands/events.\n\nA few usecases from reading the issues:\n- shutdown hook (EXITPOINT ?) for gracefulness (#2100)\n- start hook (#252 is a bit old, and #3317)\n\nFrom https://github.com/GoogleCloudPlatform/kubernetes/issues/140#issuecomment-48602271:\n\n> [...] we felt there were two cases we wanted to handle:\n> - hooks that either need the container context (and as such executing outside the process namespace would be pointless), or if interrupted by container shutdown would not be internally inconsistent. Pre-termination is a good example\n> - hooks that should be outside of a container, because they need to continue to run even if a container fails. Deploy across multiple containers is a good example, or post-termination.\n\nPlease feel free to comment with more.\n\nIt makes sense to offer hooks for greater customization, however, this might affect the current way of doing things (see the `exec` discussion in https://github.com/dotcloud/docker/issues/3317#issuecomment-31273101)\n\nFor solutions, there was a mention of \"predefined paths\" for executables.\n\nSome hooks (start and shutdown) would be more useful if they were executed synchronously (unlike how `docker events` fires currently).\n\nWe need to define what hooks should be implemented in docker and what should be done externally via docker events.\n"},{"labels":["api"],"text":"When a build fails, the http request returns a 200 response.  A failure response would be more appropriate.  An example http response from a failure:\n\n``` clj\n{:status 200,\n :body \"{\\\"stream\\\":\\\"Step 0 : FROM java\\\\n\\\"}\n        {\\\"status\\\":\\\"Pulling repository java\\\"}\n        {\\\"errorDetail\\\":{\\\"message\\\":\\\"HTTP code: 404\\\"},\\\"error\\\":\\\"HTTP code: 404\\\"}\"}\n```\n"},{"labels":["api"],"text":"When calling the `build` endpoint (in 1.12), the returned string is a sequence of json objects rather than a json array.  This causes problems when using some generic http libraries, which detect the content type (sent as \"application/json\") and parse the response body automatically, causing them to return only the first json object or to report an error.\n\nExample response:\n\n``` json\n{\"stream\":\"Step 1...\"}\n{\"stream\":\"...\"}\n{\"error\":\"Error...\", \"errorDetail\":{\"code\": 123, \"message\": \"Error...\"}}\n```\n\nValid json would be:\n\n``` json\n[{\"stream\":\"Step 1...\"},\n {\"stream\":\"...\"},\n {\"error\":\"Error...\", \"errorDetail\":{\"code\": 123, \"message\": \"Error...\"}}]\n```\n"},{"labels":["api",null],"text":"Using gradle-docker I have the option of using either the REST API to build an image or the `docker` command line tool.  When I choose the REST API option I am able to create images tagged with capital letters.  However, when I attempt the same operation using the client I see:\n\n```\nCommand line [docker build -t tc.you.pds/dropwizardBase /home/ubuntu/github.com/pds-deployment/common/build/docker/dropwizardBase] returned:\n  2014/07/10 23:58:25 Invalid repository name (dropwizardBase), only [a-z0-9-_.] are allowed\n```\n\nWhile I'm not sure I completely understand why capital letters are forbidden, at the very least it seems that the behavior should be consistent.\n"},{"labels":["api"],"text":"This is an edge case, but it should be more consistent on the returns of an out-of-sync client and server.  `docker build` seems to run regardless of version difference.  `docker run` just silently fails because it tries to fetch from the index.  `docker images` finally gives an error that should have been encountered on the first interaction with the docker server.\n\nOutput of the three commands (when docker client was 1.13 and server was 1.12):\n\n``` console\n$ docker build -t infosiftr/jbilling .\nSending build context to Docker daemon 328.6 MB\nSending build context to Docker daemon \nStep 0 : FROM java\n ---> f14d9b4cde6f\nStep 1 : ADD jbilling-community-3.1.0/ /usr/local/jbilling/\n ---> Using cache\n ---> 1520b79e1eb8\nStep 2 : WORKDIR /usr/local/jbilling/bin\n ---> Running in 0036197d8bfc\n ---> 9085b16f76c5\nRemoving intermediate container 0036197d8bfc\nStep 3 : RUN chmod +x *.sh\n ---> Running in 81604d05b1a5\n ---> 9f7f442c623c\nRemoving intermediate container 81604d05b1a5\nStep 4 : CMD [\"./startup.sh\"]\n ---> Running in ef39f2dc039e\n ---> 85cf958acdf1\nRemoving intermediate container ef39f2dc039e\nSuccessfully built 85cf958acdf1\n$ docker run -it --rm --name jbill infosiftr/jbilling\nUnable to find image 'infosiftr/jbilling' locally\nPulling repository infosiftr/jbilling\n2014/07/07 15:49:41 HTTP code: 404\n$ docker images\n2014/07/07 15:49:56 Error response from daemon: client and server don't have same version (client : 1.13, server: 1.12)\n```\n\nRelevant version stuffs (after restarting docker server):\n\n``` console\n$ docker version\nClient version: 1.1.0\nClient API version: 1.13\nGo version (client): go1.3\nGit commit (client): 79812e3\nServer version: 1.1.0\nServer API version: 1.13\nGo version (server): go1.3\nGit commit (server): 79812000\n$ docker -D info\nContainers: 2\nImages: 188\nStorage Driver: btrfs\nExecution Driver: native-0.2\nKernel Version: 3.12.21-gentoo-r1\nDebug mode (server): false\nDebug mode (client): true\nFds: 10\nGoroutines: 10\nEventsListeners: 0\nInit SHA1: 51b8dd8c22b5c2bbfdc550b0a6bb1cb2df838169\nInit Path: /usr/libexec/docker/dockerinit\nSockets: [unix:///var/run/docker.sock]\n$ uname -a\nLinux minas-morgul 3.12.21-gentoo-r1 #1 SMP Fri Jun 6 15:17:15 MDT 2014 x86_64 AMD Phenom(tm) II X6 1090T Processor AuthenticAMD GNU/Linux\n```\n"},{"labels":["api"],"text":"Sent a POST /container/create with an empty body.. Its sending HTTP 500 (server error) back, which isn't correct imho.\n\nShould send something like bad request.\n\nI'd like to help. Where can this be fixed?\n"},{"labels":["api",null,null],"text":"As an initial use-case, this would allow `docker images --help` to show the user supported parameters for the --filter flag. Though this API could allow for other similar use-cases.\n\nSee some conversation on https://github.com/dotcloud/docker/pull/6162\n"},{"labels":["api"],"text":"Hi,\n\nthe Docker cli supports image names like `<registry>:<port>/<image>:<tag>`. This established a common pattern to specify images like that.\nSince Docker only parse the registry when providing ImageSrc parameter but requires the tag as additional parameter, pretty much all docker clients need to implement the parsing. I was about to add this to kubernetes.\nThis is not only bad because the duplicated work but even pushes out the interpretation of that string to clients which might cause lots of confusing in case this will ever change.\n"},{"labels":["api"],"text":"The docs don't make it very clear that this endpoint does two things which require two different set of parameters:\n- Pull from registry: fromImage, tag\n- Create from local file: fromSrc, repo\n\nAnd it's unclear/undefined what happens if fromImage or repo includes a tag.\n\nBeside that, fromImage and repo are both image names ('fully qualified' if you want). Calling them 'image' here but 'repo' there is confusing.\nGuess it's up for discussion if the api should be changed, but at least this should get documented.\n\nAnother thing are the responses: What happens if another client is already pulling an image? Which response code will it return?\n"},{"labels":["api"],"text":"When the command is parseable as JSON, the resulting JSON type is returned by inspect and API.\n\nExample: `true` converted to boolean\n\n```\n$ docker run busybox true; docker inspect `docker ps -l -q` | grep \\\"Path\\\"\n    \"Path\": true,\n```\n\nExample: `99` converted to a number\n\n```\n$ docker run busybox 99; docker inspect `docker ps -l -q` | grep \\\"Path\\\"\n    \"Path\": 99,\n```\n\nExample: `{\"a\": \"map\"}` converted to a Hash (for fun)\n\n```\n$docker run busybox '{\"a\": \"map\"}'; docker inspect `docker ps -l -q` | grep -A 2 \\\"Path\\\"\n    \"Path\": {\n        \"a\": \"map\"\n    },\n```\n"},{"labels":["api"],"text":"While trying to automatically digest the api with ActiveRecord I ran into an issue with the number first hash keys. rails/activeresource#138\n\n```\n\"Ports\":{\n  \"4500/tcp\":[\n    {\n      \"HostIp\":\"0.0.0.0\",\n      \"HostPort\":\"4500\"\n    }\n  ]\n}\n```\n\nIt seems to me that ActiveRecord is/will not be the only thing thats going to have this issue. While this will not effect everything, I do think its of some importance to have an API layer that is easily digestible and programmatically object mappable. \n\nSomething kinda like this?\n\n```\n\"Ports\":{\n  \"tcp\":[\n    {\n      \"SourcePort\":\"4500\",\n      \"HostIp\":\"0.0.0.0\",\n      \"HostPort\":\"4500\"\n    }\n  ]\n}\n```\n"},{"labels":["api",null,null,null],"text":"Systemd does a lot of stuff.  Docker does a lot of stuff.  That stuff may or may not overlap.  I don't really care.  I just need to solve one very specific problem.  I just need a sane way to launch Docker containers in a systemd environment as a system service.  As it stands today, the only way I know how is to do `docker start -a` or `docker run ...` without `-d`.  Then dockerd launches the container in the background and systemd essentially monitors the docker client.  Two problems with this.  First, whether or not the docker client is running says very little about whether the actual container is running.  Second, I'm left with a rather large `docker run` process in memory that's not providing much value except to stream stdout/stderr to journald.\n\nSo I hacked up the below script to make things better, or really just to see if it was possible to make things better since the script is just a dirty hack.  You don't really need to read the script, just skip down and I'll explain what it does.\n\n``` bash\n#!/bin/bash\nset -e\n\nID=$(/usr/bin/docker \"$@\")\nPID=$(docker inspect -f '{{.State.Pid}}' $ID)\n\ndeclare -A SRC DEST\n\nfor line in $(grep slice /proc/$PID/cgroup); do\n        IFS=: read _ NAME LOC <<< \"$line\"\n        SRC[${NAME##name=}]=$LOC\ndone \n\nfor line in $(grep slice /proc/$$/cgroup); do\n        IFS=: read _ NAME LOC <<< \"$line\"\n        DEST[${NAME##name=}]=$LOC\ndone\n\nfor type in ${!SRC[@]}; do\n        from=/sys/fs/cgroup/${type}${SRC[$type]}\n        to=/sys/fs/cgroup/$type/\"${DEST[$type]}\"/$(basename \"${SRC[$type]}\")\n\n        echo $from \"=>\" $to\n        mkdir -p $to\n        for p in $(<$from/cgroup.procs); do\n                echo $p > $to/cgroup.procs\n        done\ndone\n\necho $PID > /var/run/test.pid\n```\n\nThen I wrote the following unit file\n\n```\n[Unit]\nDescription=My Service\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nExecStart=/opt/bin/docker-wrapper.sh run -d busybox /bin/sh -c \"while true; do echo Hello World; sleep 1; done\"\nType=forking\nPIDFile=/var/run/test.pid\n\n[Install]\nWantedBy=multi-user.target\n```\n\nSo what this does (and I know it's a hack, but I wanted to see if my proposal has any chance of working) is that after the container is launched, I look up the PID of the container and all of its cgroups.  I then create child cgroups of the systemd cgroups and then move the PIDs from the original cgroups to the systemd child cgroups.  After that is done I then write the PID of the container to a file.  I end up with systemd cgroups being the parent, then a child cgroup under that.  Looking something like below\n\n```\n  ├─test.service\n  │ └─docker-8a0ff7503e0fca4f44d48f76a24cbcae82079818e3ad4d0d707ccf5765698184.scope\n  │   ├─19103 /bin/sh -c while true; do echo Hello World; sleep 1; done\n  │   └─19169 sleep 1\n```\n\nAlso, since I told systemd to use a PIDFile, systemd is monitoring the PID 1 of the container because I wrote it to a file.   So now if I do either `docker stop` or `systemctl stop` things just work (at least they seem to do) and I don't have a useless docker client hanging around in memory  Now if you look at the script, you'll notice I'm just moving the PIDs, not the settings, so yeah, total hack that defeats the purpose of the original cgroup, but that's not the point right now.\n\nHere's what I propose to make systemd and docker integration a tad bit better.  When you want to run docker in a systemd unit you run `docker run/start --yo-dawg-use-my-cgroups-as-your-parent ...` which will read the current `/proc/$$/cgroup` of the client and pass it to dockerd.  Dockerd now just creates its cgroups as a child of the cgroups passed in, if the subsystem exists.  I think this means we can remove the systemd cgroup code and just use the cgroup fs based code (but docker will still have to write to the name=systemd fs).  So now systemd can setup the parent cgroups however it wishes and Docker can setup the child cgroups how ever it wishes.\n\nIs this the best solution?  Probably not.  But it seems a lot better than what we have today and it solves a current pain point.\n\nIs this just plain stupid or already been thought of and shot down?\n"},{"labels":["api",null],"text":"The current Remote API has a number issues (#5722, #5278, #2786, #3037, #1011, #3622, #2949, etc) that make it award to use. I propose that the following issues be addressed in a new version of the API. This new API will breaking but I believe going forward the benefit of these changes will outweigh the cost IMHO. \n1. Change POST request that don't have payload to GET requests.\n2. Utilize Server-Side-Events for blocking operations and use JSON data for event data.\n3. Standardize error response and return a JSON object that encapsulates error messages.\n4. Avoid using \"/json\" in request URL and instead rely on \"Accept\" header.\n5. Return appropriate Content-Type header information.\n6. Use \"camelCase\" or \"PascalCase\" for JSON property names but not both.\n7. For PascalCase, two letter property names should not be capitalized (Change \"ID\" to \"Id\", and \"OS\" to \"Os\"). Doing so would make the JSON easier to process.\n8. Stream content type should be specific. If returning octet-stream that's a gzip file then use \"application/gzip) ([RFC 6713](http://www.rfc-editor.org/rfc/rfc6713.txt))\n9. Break the Remote API documentation page into smaller pages.\n10. Add JSON schema definitions for JSON objects.\n11. Add HATEOAS support?\n\nI have started a new repository [wiki page](https://github.com/saden1/docker-api/wiki) to track this proposal. I have also done a first take on revamping the List Containers request and would love feedback. \n\nhttps://github.com/saden1/docker-api/wiki/List-Containers\n\nIs this something the docker team is interested in doing?\n"},{"labels":["api",null,null],"text":"1. The \"/images/create\" request is a POST request but nothing is actually being posted. Either change the query parameters into JSON post payload for or change the request type to a GET request.\n2. The first chunk of the response contains a status JSON data that ends with \"\\r\\n\" but subsequent chunks don't end with a new line character therefore making difficult to parse the response. Bellow is the raw response I am seeing:\n   \n   ``` json\n   {\"status\":\"Pulling repository base\"}\\r\\n\n   {\"status\":\"Pulling image (ubuntu-quantl) from base\",\"progressDetail\":{},\"id\":\"b750fe79269d\"}{\"status\":\"Pulling image (ubuntu-quantl) from base, endpoint: https://cdn-registry-1.docker.io/v1/\",\"progressDetail\":{},\"id\":\"b750fe79269d\"}{\"status\":\"Pulling dependent layers\",\"progressDetail\":{},\"id\":\"b750fe79269d\"}{\"status\":\"Download complete\",\"progressDetail\":{},\"id\":\"27cf78414709\"}{\"status\":\"Download complete\",\"progressDetail\":{},\"id\":\"b750fe79269d\"}{\"status\":\"Download complete\",\"progressDetail\":{},\"id\":\"b750fe79269d\"}\n   ```\n3. The \"/images/create\" response property names don't conform to the general pascal casing used by Docker Remote API. Change response to conform to this casing:\n   \n   ``` json\n   {\"Status\":\"Pulling blah\", \"Error\": \"blah\", \"ProgressDetail\": \"blah\" }\n   ```\n4. The \"/images/create\" is a blocking operation that could take some time. Instead of blocking you should utilize command/query pattern for the request. The create image request should return a token/id for the request and allow the user to query the status of the request. Break the API down to:\n   \n   ```\n   Request:  \"/images/create\"\n   Response: \"{\"Status\": \"Creating Image ....\", \"Id\": \"abc\", \"Error\": [true|false]}\"\n   ```\n   \n   ```\n   Request: \"/images/create/status?Id=abc\n   Response: \"[\n     {\"Status\": \"Creating Image ....\", \"Id\": \"abc\", \"Error\": [true|false]}\n   ]\"\n   ```\n"},{"labels":["api",null],"text":"http://docs.docker.io/en/latest/reference/api/docker_remote_api_v1.10/#tag-an-image-into-a-repository\n\nDoesn't describe how to set the tag on the image...just allows you to provide the image repo.\n"},{"labels":["api",null],"text":"When retrieving the logs for a container that had output a long line with no breaks the `docker logs` command will either crash or hang. \n\nThe `echo $(printf '=%.0s' {1..1000})` command was run to output a string of characters of varying lengths. The threshold seems to be around the size of a 16-bit signed integer. Running the following commands work as expected:\n\n``` no-highlight\n$ docker run -d ubuntu echo $(printf '=%.0s' {1..32768})\n$ docker logs <container_id>\n============================================....<32768 times>\n```\n\nIncreasing the number of characters by one results in the following error:\n\n``` no-highlight\n$ docker run -d ubuntu echo $(printf '=%.0s' {1..32769})\n$ docker logs <container_id>\n\npanic: runtime error: makeslice: len out of range\n\ngoroutine 6 [running]:\nruntime.panic(0x9e5da0, 0x12e9800)\n        /usr/local/go/src/pkg/runtime/panic.c:266 +0xb6\ngithub.com/dotcloud/docker/utils.StdCopy(0x7f9eb72d4168, 0xc210000008, 0x7f9eb72d4168, 0xc210000010, 0x7f9eb72d5cd8, ...)\n        /go/src/github.com/dotcloud/docker/utils/stdcopy.go:116 +0x348\ngithub.com/dotcloud/docker/api.func·015(0x0, 0x0)\n        /go/src/github.com/dotcloud/docker/api/client.go:2250 +0x1da\ngithub.com/dotcloud/docker/utils.func·002()\n        /go/src/github.com/dotcloud/docker/utils/utils.go:38 +0x2e\ncreated by github.com/dotcloud/docker/utils.Go\n        /go/src/github.com/dotcloud/docker/utils/utils.go:39 +0xa7\n\ngoroutine 1 [chan receive]:\ngithub.com/dotcloud/docker/api.(*DockerCli).hijack(0xc2100468c0, 0xa759a0, 0x4, 0xc210046070, 0x6c, ...)\n        /go/src/github.com/dotcloud/docker/api/client.go:2276 +0x98a\ngithub.com/dotcloud/docker/api.(*DockerCli).CmdLogs(0xc2100468c0, 0xc21000a020, 0x1, 0x1, 0x0, ...)\n        /go/src/github.com/dotcloud/docker/api/client.go:1565 +0x934\nreflect.callMethod(0xc2100b92a0, 0x7f9eb7134ab8)\n        /usr/local/go/src/pkg/reflect/value.go:676 +0x17b\nreflect.methodValueCall(0xc21000a020, 0x1, 0x1, 0xc2100b92a0, 0x7f9eb72d4101)\n        /usr/local/go/src/pkg/reflect/asm_amd64.s:26 +0x24\ngithub.com/dotcloud/docker/api.ParseCommands(0xc2100bb120, 0x4, 0xc2100bb127, 0x14, 0xc21000a010, ...)\n        /go/src/github.com/dotcloud/docker/api/client.go:69 +0x31f\nmain.main()\n        /go/src/github.com/dotcloud/docker/docker/docker.go:151 +0x1f5f\n\ngoroutine 3 [syscall]:\nos/signal.loop()\n        /usr/local/go/src/pkg/os/signal/signal_unix.go:21 +0x1e\ncreated by os/signal.init·1\n        /usr/local/go/src/pkg/os/signal/signal_unix.go:27 +0x31\n```\n\nIncreasing the number of characters by more than a few causes the command to hang:\n\n``` no-highlight\n$ docker run -d ubuntu echo $(printf '=%.0s' {1..33000})\n$ docker logs <container_id>\n...does not return\n```\n### Additional details\n\n``` no-highlight\nOperating System: Ubuntu 12.04\n\n$ uname -a \nLinux macbuntu 3.11.0-18-generic #32~precise1-Ubuntu SMP Thu Feb 20 17:52:10 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux\n\n$ docker version\nClient version: 0.9.0\nGo version (client): go1.2.1\nGit commit (client): 2b3fdf2\nServer version: 0.9.0\nGit commit (server): 2b3fdf2\nGo version (server): go1.2.1\nLast stable version: 0.9.0\n\n$ docker info\nContainers: 138\nImages: 58\nDriver: aufs\n Root Dir: /var/lib/docker/aufs\n Dirs: 334\nUsername: asheehan\nRegistry: [https://index.docker.io/v1/]\nWARNING: No swap limit support\n```\n"},{"labels":["api"],"text":"Running 0.9 on ubuntu precise:\n\nIf I link a container to another, the env gets set properly (and connectivity works) but the `Links` attribute is `null`:\n\n```\n$ docker run -d -p 1234 --name backend ubuntu sleep 3600\nc08bd8d09cb44b202910b21aeb0d6c9d2450ed441481e57c7cfa8a78c529a4c0\n\n$ docker run -d --link backend:be --name frontend ubuntu /bin/sh -c 'env; sleep 3600'\nfb14354e907d2054c0878d5bbca3bab0b72a61a3b4af47f9172d14e60ac8f47b\n\n$ docker inspect backend|grep Links\n        \"Links\": null,\n\n$ docker inspect frontend|grep Links\n        \"Links\": null,\n\n$ docker logs frontend\nBE_PORT_1234_TCP_PORT=1234\nBE_PORT_1234_TCP_PROTO=tcp\nHOSTNAME=fb14354e907d\nHOME=/\nBE_PORT_1234_TCP=tcp://172.17.0.2:1234\nBE_PORT=tcp://172.17.0.2:1234\nBE_NAME=/frontend/be\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nPWD=/\nBE_PORT_1234_TCP_ADDR=172.17.0.2\n```\n\nDuring my tests, I could restarting the container as well as docker and the env still get restored as expected. Even after stopping the 'frontend', restarting docker, starting it again everything seemed fine from a user perspective. BUT I found this issues because I'm still investigating why some containers have lost their links by just restarting them. So this might be related but I'm still looking.\n"},{"labels":["api"],"text":"I have a docker host running 0.8.1 with devicemapper backend on 3.8 ubuntu precise and get this on the containers/json endpoint:\n\n```\n{\n  \"Status\": \"Exit 0\",\n  \"Ports\": [],\n  \"Names\": [\n    \"/sharp_brattain\"\n  ],\n  \"Image\": -9223372036854776000,\n  \"Id\": \"09906a9649d279dc7991dd1e58dbdcc372f9f9e14304549628fbcef21c398785\",\n  \"Created\": 1392262739,\n  \"Command\": \"/bin/sh -c #(nop) CMD [sh -c /docker-registry/test/dockertest.sh]\"\n},\n```\n\nImage is \"-9223372036854776000\" (hex: -0x80000000000000c0L), but `docker inspect` (or`curl /containers/09906a9649d279dc7991dd1e58dbdcc372f9f9e14304549628fbcef21c398785/json`) shows the correct image hash:\n\n```\n...\n\"Image\": \"228745108e70710d07397eb1ba7fded83e144bf2190edfad3296efe955b56f10\",\n...\n```\n"},{"labels":["api"],"text":"When a client using version X of the protocol invokes the remote API, the server returns elements defined in versions greater than X.   Some clients may break due to unexpected elements in the response.\n\nFor example, the HostConfig element of the 'inspect' response is new to 1.8.  Yet a request for 1.7 unexpectedly returns the HostConfig element.  e.g. the below will contain HostConfig:\ncurl http://127.0.0.1:4243/v1.7/containers/CONTAINERID/json\n\nThis is the only example of the issue that I've noticed.   I filed the bug to raise the design question - i.e. is docker open- or closed-schema by design?\n"},{"labels":["api"],"text":"If you have containers with cmd \"true\" and get a list of all containers from the API, the string \"true\" gets converted to true:\n\n```\n$ curl http://192.168.100.64:4243/containers/json?all=1|grep -i true\n[{\"Command\":true,\"Created\":1394217266,\"Id\":\"2f6343c95930e4e9b6ef065478a03112b11a6ab1ddea58cecfc022fa8702218f\",\"Image\":\"busybox:latest\",\"Names\":[\"/high_euclid7\"],\"Ports\":[],\"Status\":\"Exit 0\"},\n....\n```\n\nIt seems like the same error doesn't happen with the /containers/<id>/json endpoint, this one correctly keeps it as a string.\n\nUbuntu running docker 0.8.1 both server and client.\n"},{"labels":["api",null,null],"text":"Since I can't seem to figure out how to add this support, here's the idea:\n\nIt would be great if the /info endpoint would include any data related to the following:\n- BridgeIface\n- BridgeIP\n- BridgeNetwork\n- BridgeNetmask\n\nGiven the fact that both BridgeIface and BridgeIP are represented in config.go, I figure this is doable. From there, I'd assume the remaining attributes could be determined and published.\n"},{"labels":["api"],"text":"You can reproduce by listening on the events api\n`docker run busybox sh`\nexit out of the container\nno event is sent for the stop, kill, die or whatever\n"},{"labels":["api",null],"text":"Right now the docker push command has lots of great output when using the CLI, but sometimes you don't need that much information, like when you are scripting something, or you are using the API. When this happens it would be nice if there was a  less verbose output that you could use. Docker build already has a similar command, so maybe we can use something similar.\n\n/cc @vieux \n"},{"labels":["api"],"text":"As far as I know there's no way to do this; it would be nice to be able to say something like:\n\n```\n$ docker commit /home/me/foo/\n```\n\nto commit only the changes under that directory.\n"},{"labels":["api"],"text":"docker run & pull seem to get random auth errors, see the following :\n\n<pre>\nlsoave@basenode:~$ docker run -i -t ubuntu bash\nUnable to find image 'ubuntu' (tag: latest) locally\nPulling repository ubuntu\n2014/01/03 23:06:59 Authentication is required.\n\nlsoave@basenode:~$ docker pull  ubuntu \nPulling repository ubuntu\nPlease login prior to push:\nLogin against server at https://index.docker.io/v1/\nUsername (lgsd):          \n2014/01/03 23:10:57 Error: Wrong login/password, please try again\n\nlsoave@basenode:~$ docker pull  ubuntu \nPulling repository ubuntu\n8dbd9e392a96: Download complete \nb750fe79269d: Download complete \n27cf78414709: Download complete \n\nlsoave@basenode:~$ docker images\nREPOSITORY             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu                 12.04               8dbd9e392a96        8 months ago        128 MB\nubuntu                 latest              8dbd9e392a96        8 months ago        128 MB\nubuntu                 precise             8dbd9e392a96        8 months ago        128 MB\nubuntu                 12.10               b750fe79269d        9 months ago        175.3 MB\nubuntu                 quantal             b750fe79269d        9 months ago        175.3 MB\n\nlsoave@basenode:~$ docker version\nClient version: 0.7.2\nGo version (client): go1.2\nGit commit (client): 28b162e\nServer version: 0.7.2\nGit commit (server): 28b162e\nGo version (server): go1.2\nLast stable version: 0.7.2\n\n</pre>\n\n\nPlease note that on the second `docker pull  ubuntu` it didn't ask me for any password, just get the images silently.\n"},{"labels":["api",null],"text":"I'm trying to use the docker remote API to build images/containers, referring to the document:  http://docs.docker.io/en/latest/api/docker_remote_api_v1.7/\n\nI was unable to find information on  \"ExposedPorts\" for creating a container and \"PortBindings\" for starting a container.\n\nThere is no such parameter \"ExposedPorts\" for the creating a container and\nthere is no parameter \"PortBindings\" for starting a container.\n"},{"labels":["api"],"text":"Hi,\n\nRunning docker 0.6.7 on Ubuntu 13.04.\n\nI built a container whose CMD executes a uwsgi process (also tried with other executables). I run without detaching, and sigproxy is True.\n\nHitting Ctrl-C seems to have no effect over the running container and the only way to leave it or kill it is with `docker kill` and `docker stop`...\n\nIs this a known issue?\n"},{"labels":["api"],"text":"I'm using Ruby gem  'docker-api' with a Docker daemon running on a remote server.\n\nI ran into timeout issue when I want to get output from running a command inside the container.  \n# create an image\n\nimage = Docker::Image.create('fromImage'=>'base')\n# insert a local file into the image\n\nimage.insert_local('localPath'=>['/root/docker_scripts/install_prereqs.sh', '/root/docker_scripts/weaver_script.sh'], 'outputPath'=>'/tmp/')   \n# get the image id from the response\n\nimage_data = eval(\"image.json\")\nputs image.json\nimage_id = image_data[\"id\"]\ninputs = Hash.new\ninputs[\"Image\"] = image_id\ninputs[\"Cmd\"] = ['ls -al']\n# create a container with the image id and the command 'ls -al'\n\nmyContainer = Docker::Container.create(inputs)\n# start the container and stream the output\n\nmyContainer.tap(&:start).attach {|stream,chunk| puts \"#{stream}: #{chunk}\"}\n\nRESPONSE: \nread time out reached\n.docker_9f738e00-3424-0131-e558-525400c6ff8e [Status: failed]\n"},{"labels":["api"],"text":"I'm scripting Docker, but basically you can reproduce this by programmatically `fork/exec`ing `docker attach` with a stdin you write to once immediately after starting the process then closing it.\n\nThe strace when you write to stdin right away:\n\n```\nProcess 6134 attached\nread(0,\n```\n\nJust hangs reading stdin, forever.\n\nThe strace when you **add a 5 second sleep before writing**:\n\n![lol](https://dl.dropbox.com/s/67xmmvpfd5tca7l/1._vagrantpackervmware__ssh_20131108_235501.png)\n\nAs you can see, it worked.\n\nCrazy, but I think you have a race condition in reading the stdin somewhere.\n"},{"labels":["api"],"text":"Picture shows it. I did this manually here but in practice I'm actually doing this as fast as it'll go programmatically. It runs into a lot of problems of just randomly NOT executing my command.\n\nThe container was run with: `docker run -d -i -t -v '/tmp:/host' ubuntu /bin/bash`\n\n![lol](https://dl.dropbox.com/s/i5plrv7n3094mqh/1._vagrantpackervmware__bash_20131108_224427.png)\n"},{"labels":["api"],"text":"Going by the [remote API docs](http://docs.docker.io/en/latest/api/docker_remote_api_v1.6/), containers should respond with an `Id` key in their objects. In 0.6.4, the case of `Id` seems to be inconsistent amongst calls (e.g. create returns `Id`, inspect returns `ID`).\n\nFrom a cursory glance of master, it seems to fix this inconsistency so `ID` is always returned (though I haven't tested this) but the docs still seem to be out of date. Is `ID` the preferred case?\n"},{"labels":["api"],"text":"I use the API/1.5 to handle docker issues.And i need to start many different dockers with port direction(localhost:hostPort==>dockerInnerIP:GuestPort),every second time the operation will must be fail, the Error description in my application reports that the connection to localhost:hostPort is reset by peer,it seems that the port direction doesn't works well?\n"},{"labels":["api",null,null,null,null],"text":"Use case: mount a volume from host to container for use by apache as www user.\nThe problem is currently all mounts are mounted as root inside the container.\nFor example, this command\n docker run -v /tmp:/var/www ubuntu stat -c \"%U %G\" /var/www\nwill print \"root root\"\n\nI need to mount it as user www inside the container.\n"},{"labels":["api"],"text":"When requesting a listing of filesystem changes (/containers/(container id)/changes) from a container that has no current changes, the response is `null`. This violates [RFC 4627](http://www.ietf.org/rfc/rfc4627.txt), which requires the root of a JSON document to be either an object or an array.\n"},{"labels":["api"],"text":"currently, docker only support 'run' command; \nbut sometimes, we need a 'create' command to create a container only, and we can use 'start' command to start it later.\n\nI'm not sure wheather this is reasonable?\n"},{"labels":["api",null],"text":"During Docker Hack Day we discussed options around Docker having the ability to automatically attach to all containers and provide their output to a single stream that can then be sent to an external service such as syslog.\n\nA couple of scenarios came about:\n- leave it up to a client application to attach to the streams; but this needs to be done with care in order to not lose any output between starting the container and attaching to the log stream\n- implement the logic within docker; but how to provide it in a general enough way so it can be used for miscellaneous use-cases\n\nAdditionally, Docker has two facilities for getting information: `events` and `attach`.  The `events` command output appears to be for logging docker actions and `attach` appears to be for output generated by the containerized application.  Is extending attach the right place for this feature?\n\nFinally, attaching to `stdin` doesn't seem to apply here, should \"attach all\" explicitly exclude stdin?\n\nPlease share your thoughts.\n\nThanks!\n"},{"labels":["api"],"text":"This is using \"Docker version 0.6.1, build 5105263\". A machine I was running Docker on ran out of disk space (due to an application suddenly starting to write tons of data to STDOUT, which filled up docker's logs). Afterwards, the Docker service showed all containers in \"Ghost\" state, but querying one of the containers for gives a different containers' data: Slightly anonymized data:\n\n```\n# docker -H 127.0.0.1:4243 inspect c93c9275ee208469539ada5490e5d2aac22a12176e2e054b5dd86381f6e506b4\n[{\n    \"ID\": \"c93c9275ee208469539ada5490e5d2aac22a12176e2e054b5dd86381f6e506b4\",\n    \"Created\": \"2013-09-26T01:55:12.659262553Z\",\n    \"Path\": \"ipython\",\n    \"Args\": [\n        \"notebook\",\n        \"--ip='*'\",\n        \"--profile=julia\"\n    ],\n    \"Config\": {\n        \"Hostname\": \"c93c9275ee20\",\n        \"User\": \"\",\n        \"Memory\": 0,\n        \"MemorySwap\": 0,\n        \"CpuShares\": 0,\n        \"AttachStdin\": true,\n        \"AttachStdout\": true,\n        \"AttachStderr\": true,\n        \"PortSpecs\": [\n            \"8998\"\n        ],\n        \"Tty\": true,\n        \"OpenStdin\": true,\n        \"StdinOnce\": false,\n        \"Env\": [\n            \"HOME=/\",\n            \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n        ],\n        \"Cmd\": [\n            \"ipython\",\n            \"notebook\",\n            \"--ip='*'\",\n            \"--profile=julia\"\n        ],\n        \"Dns\": null,\n        \"Image\": \"julia-container\",\n        \"Volumes\": {\n            \"/files\": {}\n        },\n        \"VolumesFrom\": \"\",\n        \"WorkingDir\": \"/files\",\n        \"Entrypoint\": null,\n        \"NetworkDisabled\": false,\n        \"Privileged\": false\n    },\n    \"State\": {\n        \"Running\": true,\n        \"Pid\": 7353,\n        \"ExitCode\": 0,\n        \"StartedAt\": \"2013-09-26T01:55:12.670801169Z\",\n        \"Ghost\": true\n    },\n    \"Image\": \"25c106e096be4c09540fabd2a7b41ae65aa8c4ff4c56881089bde7e38e689008\",\n    \"NetworkSettings\": {\n        \"IPAddress\": \"172.17.0.30\",\n        \"IPPrefixLen\": 16,\n        \"Gateway\": \"172.17.42.1\",\n        \"Bridge\": \"docker0\",\n        \"PortMapping\": {\n            \"Tcp\": {\n                \"8998\": \"49182\"\n            },\n            \"Udp\": {}\n        }\n    },\n    \"SysInitPath\": \"/usr/bin/docker\",\n    \"ResolvConfPath\": \"/etc/resolv.conf\",\n    \"Volumes\": {\n        \"/files\": \"/home/ubuntu/files/XXX\"\n    },\n    \"VolumesRW\": {\n        \"/files\": true\n    }\n```\n\nHowever, looking at the config.json file:\n\n```\n cat /var/lib/docker/containers/c93c92ee208469539ada5490e5d2aac22a12176e2e054b5dd86381f6e506b4/config.json\n{\"ID\":\"c93c9275ee208469539ada5490e5d2aac22a12176e2e054b5dd86381f6e506b4\",\"Created\":\"2013-09-26T01:55:12.659262553Z\",\"Path\":\"ipython\",\"Args\":[\"notebook\",\"--ip='*'\",\"--profile=julia\"],\"Config\":{\"Hostname\":\"c93c9275ee20\",\"User\":\"\",\"Memory\":0,\"MemorySwap\":0,\"CpuShares\":0,\"AttachStdin\":true,\"AttachStdout\":true,\"AttachStderr\":true,\"PortSpecs\":[\"8998\"],\"Tty\":true,\"OpenStdin\":true,\"StdinOnce\":false,\"Env\":[\"HOME=/\",\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"],\"Cmd\":[\"ipython\",\"notebook\",\"--ip='*'\",\"--profile=julia\"],\"Dns\":null,\"Image\":\"julia-container\",\"Volumes\":{\"/files\":{}},\"VolumesFrom\":\"\",\"WorkingDir\":\"/files\",\"Entrypoint\":null,\"NetworkDisabled\":false,\"Privileged\":false},\"State\":{\"Running\":true,\"Pid\":7353,\"ExitCode\":0,\"StartedAt\":\"2013-09-26T01:55:12.670801169Z\",\"Ghost\":false},\"Image\":\"25c106e096be4c09540fabd2a7b41ae65aa8c4ff4c56881089bde7e38e689008\",\"NetworkSettings\":{\"IPAddress\":\"172.17.0.18\",\"IPPrefixLen\":16,\"Gateway\":\"172.17.42.1\",\"Bridge\":\"docker0\",\"PortMapping\":{\"Tcp\":{\"8998\":\"49170\"},\"Udp\":{}}},\"SysInitPath\":\"/usr/bin/docker\",\"ResolvConfPath\":\"/etc/resolv.conf\",\"Volumes\":{\"/files\":\"/home/ubuntu/files/XXX\"},\"VolumesRW\":{\"/files\":true}}\n```\n\nNote that while some of the data is correct (e.g. volume information), the host/port mapping is wrong. In fact that host/port combination belongs to a different container:\n\n```\n# /var/lib/docker/containers/239f51c779b701500cc699585c64c78850f079c89f41de3c5c8583ebb1467a31/config.json\n{\"ID\":\"239f51c779b701500cc699585c64c78850f079c89f41de3c5c8583ebb1467a31\",\"Created\":\"2013-09-26T16:38:07.26415542Z\",\"Path\":\"ipython\",\"Args\":[\"notebook\",\"--ip='*'\",\"--profile=julia\"],\"Config\":{\"Hostname\":\"239f51c779b7\",\"User\":\"\",\"Memory\":0,\"MemorySwap\":0,\"CpuShares\":0,\"AttachStdin\":true,\"AttachStdout\":true,\"AttachStderr\":true,\"PortSpecs\":[\"8998\"],\"Tty\":true,\"OpenStdin\":true,\"StdinOnce\":false,\"Env\":[\"HOME=/\",\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"],\"Cmd\":[\"ipython\",\"notebook\",\"--ip='*'\",\"--profile=julia\"],\"Dns\":null,\"Image\":\"julia-container\",\"Volumes\":{\"/files\":{}},\"VolumesFrom\":\"\",\"WorkingDir\":\"/files\",\"Entrypoint\":null,\"NetworkDisabled\":false,\"Privileged\":false},\"State\":{\"Running\":true,\"Pid\":13248,\"ExitCode\":0,\"StartedAt\":\"2013-09-26T16:38:07.27774869Z\",\"Ghost\":false},\"Image\":\"25c106e096be4c09540fabd2a7b41ae65aa8c4ff4c56881089bde7e38e689008\",\"NetworkSettings\":{\"IPAddress\":\"172.17.0.30\",\"IPPrefixLen\":16,\"Gateway\":\"172.17.42.1\",\"Bridge\":\"docker0\",\"PortMapping\":{\"Tcp\":{\"8998\":\"49182\"},\"Udp\":{}}},\"SysInitPath\":\"/usr/bin/docker\",\"ResolvConfPath\":\"/etc/resolv.conf\",\"Volumes\":{\"/files\":\"/home/ubuntu/files/YYY\"},\"VolumesRW\":{\"/files\":true}}\n```\n\nIn my tests it seems that the `config.json` file is accurate while the information returned by the docker daemon is not.\n"},{"labels":["api",null],"text":"Due to the implementation of api.go [which reads only](https://github.com/dotcloud/docker/blob/master/api.go#L1106-L1120) `/etc/group`, it is impossible to rely on other auth mechanisms (e.g. LDAP, NIS).\n\n``` go\ngroups, err := ioutil.ReadFile(\"/etc/group\")\nif err != nil {\n        return err\n}\nre := regexp.MustCompile(\"(^|\\n)docker:.*?:([0-9]+)\")\nif gidMatch := re.FindStringSubmatch(string(groups)); gidMatch != nil {\n        gid, err := strconv.Atoi(gidMatch[2])\n        if err != nil {\n                return err\n        }\n        utils.Debugf(\"docker group found. gid: %d\", gid)\n        if err := os.Chown(addr, 0, gid); err != nil {\n                return err\n        }\n}\n```\n\nInstead, the [`getgrnam`](http://man7.org/linux/man-pages/man3/getgrnam.3.html) syscall should be used to determine, whether a `docker` group exists or not.\n\nThe implemenation of [`lookup_unix.go`](http://golang.org/src/pkg/os/user/lookup_unix.go) in the [`user`](http://golang.org/pkg/os/user/) Go package might serve as inspiration on how to do this.\n"},{"labels":["api"],"text":"The project should include a go client lib for the remote api as a first class entity.\n\nIf no one else is working on this, I'd like to tackle this.  I have a branch with some progress on this.\n"},{"labels":["api"],"text":"It'd be sweet to be able to run different commands on the same container. \n\nI think ideally, `docker run IMAGE`, could optionally take a container ID instead. \n\nSometimes the container are built up over time, so one time I'd like to run a server on it, another time, execute a script.\n"},{"labels":["api",null],"text":"Currently when doing a commit on a container to update an image, the configuration the image had is not kept.\n\nI think there should be an option to drop the previous config and a default to keep it.\n"},{"labels":["api"],"text":"GET /containers/json returns objects with an \"Id\" key, but GET /containers/{id}/json returns objects with an \"ID\" key. Should standardize on one way of capitalizing.\n"}]