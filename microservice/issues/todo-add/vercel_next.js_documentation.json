[{"labels":[null,null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nI know there is `config` export for pages and api routes. They are partially described in [api-middlewares#custom-config](https://nextjs.org/docs/api-routes/api-middlewares#custom-config) or in [amp-support](https://nextjs.org/docs/advanced-features/amp-support/introduction) for example.\r\n\r\nI was searching for documentation on that `config` export but I couldn't find it.\r\nAlso: is a typescript type available for the `config` export?\r\n\r\n## To Reproduce\r\n\r\nLook at the next.js docs and search for documetation on `config` export for pages or api routes\r\n\r\n## Expected behavior\r\n\r\nThere is no such documentation on the `config` export"},{"labels":[null,null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nDocs and code are out of sync. See \r\n\r\nhttps://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\r\n\r\nand\r\n\r\nhttps://github.com/Timer/next.js/blob/canary/packages/next/next-server/server/render.tsx#L611\r\n\r\n## To Reproduce\r\n\r\n```\r\nexport async function getStaticProps(ctx: any) {\r\n  console.log(ctx) // no `preview` at all in ctx\r\n```\r\n\r\n## Expected behavior\r\n\r\nSee https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation . \r\n\r\n\"preview is true if the page is in the preview mode and false otherwise. See the Preview Mode documentation\"\r\n"},{"labels":[null,"documentation"],"text":"API Routes also have access to the preview data added by Preview Mode in `req.previewData`. Our docs should be updated to reflect that."},{"labels":[null,null,"documentation"],"text":"In our current `canary` release `Link` no longer requires to know the path of a page for client side transitions. We should update our docs to reflect that the usage of the `as` parameter is now optional."},{"labels":[null,null,"documentation",null],"text":"Add a new example called `fast-refresh` to our examples folder that showcases the different features and behaviors of [Fast Refresh](https://nextjs.org/docs/basic-features/fast-refresh).\r\n\r\nUse this removed example for inspiration: https://github.com/vercel/next.js/pull/16497 \r\n\r\nOnce the example is ready, add a link to it in our docs."},{"labels":[null,"documentation",null],"text":"Updates to documentation that were requested by feedback by using the feedback inputs in the Next.js site and in our other community channels (GitHub Discussions, issues):\r\n\r\n- Add missing title to: https://nextjs.org/docs/advanced-features/custom-error-page - The current page doesn't have an `h1` in the beginning, which affects the search results to Algolia looking for content there.\r\n- Remove data-fetch example from the `getInitialProps` docs as it's now using `getStaticProps` and update the example to no longer have `node-fetch` in dependencies.\r\n- Mention PWA on docs. We currently have search results for \"Progressive Web App\" in our search input but not for PWA as it's never mentioned.\r\n- Add caveats to API Routes and mention that next export can't be used with them.\r\n- Reduce the redundancy of next export docs that make it a bit more annoying to navigate (caveats and deployment docs)\r\n"},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen using getServerSideProps, the staticPrefix seems to be disabled for that page.\r\n\r\n## To Reproduce\r\n\r\nEnable staticPrefix in next.config.js\r\n\r\n```js\r\nexport async function getServerSideProps(context) {\r\n  return {\r\n    props: { translations: [] },\r\n  }\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe page keeps working and applies the staticPrefix.\r\n\r\n## Actual behavior\r\n\r\nThe page requests the static resources without the prefix applied.\r\n\r\n## System information\r\n\r\n- OS: Azure\r\n- Browser (if applies): Chrome\r\n- Version of Next.js: 9.5.2\r\n- Version of Node.js: 12\r\n\r\n## Additional context\r\n\r\nI have not debugged thoroughly, but removing `getServerSideProps` fixed the problem."},{"labels":[null,null,"documentation"],"text":"A migration guide for a common application with detailed steps of what has to be done if you want to move your current app in create-next-app to Next.js would be very useful for a lot of new users."},{"labels":[null,null,null,"documentation"],"text":"We should add a note to the headers documentation mentioning that if a header is already set successive ones with the same key will override the value "},{"labels":[null,"documentation"],"text":"Lots of users miss that they can write server side code in `getStaticProps` and `getServerSideProps`.\r\n\r\nWe also see numerous issues about people trying to fetch API routes. We need to fix this in the documentation by making this one of the **first things** we have in the docs."},{"labels":[null,null,"documentation"],"text":"Our Fast Refresh docs currently say that `useEffect` will re-run after every code change, even if it has no dependencies. This is not only to ensure you always write resilient code, because it's also enforced by React Strict Mode. We should mention this and link to the strict mode docs.\r\n\r\nMore on this Twitter thread: https://twitter.com/tvernon_tech/status/1289192339819249666"},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nThe SASS support of next-js only works for `*.scss` files not `*.sass` files.\r\n\r\n## To Reproduce\r\n\r\nCreate a `*.sass` files in your code and import it in any page if its `*.module.sass` or in `_app.[js|tsx]` if it contain global styles i.e. `*.sass`. You will start getting an error when running the dev server.\r\n\r\n```bash\r\nSassError: Expected newline.\r\n```\r\n\r\nBut if you change them to `scss` extension it starts working again. Although the CSS documentation states that any of the 2 extensions can be used it works only for `scss`.\r\n\r\n## Expected behavior\r\n\r\nIt should work for both extensions.\r\n\r\n## Screenshots\r\n\r\nN/A\r\n\r\n## System information\r\n\r\n- OS: macOS,\r\n- Browser (if applies) [e.g. chrome ]\r\n- Version of Next.js: 9.4.4\r\n- Version of Node.js: 12.x"},{"labels":[null,null,"documentation"],"text":"`--profile` enables production profiling for React and was released in [Next.js 9.5](https://nextjs.org/blog/next-9-5#production-react-profiling)"},{"labels":[null,"documentation"],"text":""},{"labels":[null,"documentation"],"text":"# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nA common URL pattern for blogs and websites coming from Wordpress is `/year/month/day/slug`. To redirect pages that match this to a different page, the path matching would look like this:\r\n\r\n```javascript\r\n{\r\n  source: '/:year/:month/:day/:post',\r\n  destination: '/blog/:post',\r\n  permanent: true,\r\n},\r\n```\r\n\r\nThis however matches generated Next.js files (for example, `/_next/static/css/b9c315e24bcc3c2b5b54.css` which results in effectively breaking the built website (dev mode doesn't match this pattern).\r\n\r\n## Describe the solution you'd like\r\n\r\nBy adding more finegrained matchers like Regex strings, you could restrict the matching to look for numbers only. Using the example above, in the `vercel.json` file I can currently write `\"\\/\\\\d{4}\\/\\\\d{2}\\/\\\\d{2}\\/(.+)\\/?\"` to only match blog posts. \r\n\r\n## Describe alternatives you've considered\r\n\r\nI can achieve this by leveraging platform-specific files such as `vercel.json` but it would be nice to have support for this out of the box!\r\n"},{"labels":[null,null,"documentation"],"text":"From our docs:\r\n\r\n> Next.js supports ES2020 dynamic import() for JavaScript. With it you can import JavaScript modules (inc. React Components) dynamically and work with them. They also work with SSR.\r\n>\r\n> You can think of dynamic imports as another way to split your code into manageable chunks.\r\n\r\nThe above is right, but the entire page only shows examples with `next/dynamic`, which can **only** be used for React Components, and you may end up thinking it's possible to use it with modules, in which case you'll need `import()` instead. We have to be more clear about the differences here."},{"labels":[null,"documentation"],"text":"We have multiple CSS examples, like tailwind, emotion, styled-components, e.t.c, but currently we don't mention them in the documentation. Adding this examples should help people that go to our docs looking for one of the popular libraries but fail in the process."},{"labels":[null,null,"documentation"],"text":"It has been mentioned multiple times on feedback that in the [documentation for Built-In CSS Support](https://nextjs.org/docs/basic-features/built-in-css-support) we don't really recommend CSS Modules over CSS-in-JS, therefore we create confusion about what should be used if both methods handle the same thing.\r\n\r\nWe should update the page to be clear about the advantages of CSS Modules over css-in-js, mainly being that you don't need JS to add the CSS as CSS Modules are concatenated into many minified and code-split `.css` files. Ideally users should end up thinking that CSS Modules are the preferred solution, but any CSS-in-JS library is also an option. "},{"labels":[null,null,null,"documentation"],"text":"We need to add documentation for the new ISR feature (`revalidate` property) for the `getStaticProps` lifecycle."},{"labels":[null,"documentation"],"text":"We currently don't have documentation about what the Next.js build output looks like from an architectural standpoint, this might be useful to add sometime. (it's not a public API that people should use)"},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nAdding `getStaticProps` overrides folder settings set within `exportPathMap` in `next.config.js`. \r\n\r\nI'm essentially trying to get my html files to be output in `/directory/index.html` rather than `/directory.html`. Unfortunately even I set my `exportPathMap` to do so, as soon as the `getStaticProps` function is added in my script, the setting is overridden and the file will be output at `directory.html`\r\n\r\n## To Reproduce\r\n\r\n```\r\ngit clone https://github.com/creativiii/next-js-export-bug\r\ncd next-js-export-but\r\nnpm run build\r\nnpm run export\r\n```\r\n\r\nThen check the `out` directory.\r\n\r\n## Expected behavior\r\n\r\n`page-1` and `page-2` should be respectively exported in `/page-1/index.html` and `/page-2/index.html`. Instead `page-2` is exported as `page-2.html`.\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]: WSL Ubuntu 20.04\r\n- Version of Next.js: [e.g. 6.0.2] 9.4.4\r\n- Version of Node.js: [e.g. 10.10.0] LTS 12\r\n\r\n"},{"labels":[null,null,"documentation"],"text":"Our docs on catch all routes say the following:\r\n\r\n> Catch all routes can be made optional by including the parameter in double brackets ([[...slug]]).\r\n>\r\n>For example, pages/post/[[...slug]].js will match /post, /post/a, /post/a/b, and so on.\r\n\r\nWhich is very similar to what catch all routes already does, with the difference that it now includes the `/post` example, which is the only difference, but we aren't clear on that.\r\n\r\nTodo: update the section to be clear about the difference so you don't have to figure it out yourself."},{"labels":[null,"documentation"],"text":"Raised in feedback, the following page is a 404 but that shouldn't be the case: https://nextjs.org/docs/tag/v9.2.2/basic-features/pages.\r\n\r\nIt's used in https://nextjs.org/docs/basic-features/pages for the top notification.\r\n\r\nI'm currently working on the fix as I write the issue 🕵️ "},{"labels":[null,null,"documentation",null],"text":"Documentation for custom routes was released some days ago (https://github.com/vercel/next.js/pull/14887). We should also add one example for every documentation page to better show how it works.\r\n\r\nThe following three examples are required:\r\n\r\n- [ ] `rewrites` For [docs/api-reference/next.config.js/rewrites.md](https://github.com/vercel/next.js/blob/canary/docs/api-reference/next.config.js/rewrites.md)\r\n- [ ] `redirects` For [docs/api-reference/next.config.js/redirects.md](https://github.com/vercel/next.js/blob/canary/docs/api-reference/next.config.js/redirects.md)\r\n- [ ] `headers` For [docs/api-reference/next.config.js/headers.md](https://github.com/vercel/next.js/blob/canary/docs/api-reference/next.config.js/headers.md)\r\n\r\nEvery example should contain very basic content and focus only on the feature it's about, showing how it works for multiple use cases that are currently not covered by the documentation. After the example is complete, add a link to it at the beginning of the page in docs.\r\n\r\nFeel free to open a PR and I'll review it asap."},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\n[Step 4](https://github.com/vercel/next.js/tree/canary/examples/cms-sanity#step-4-set-up-environment-variables) of the [readme](https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md) says, i have to create a env variable named `SANITY_PROJECT_ID` but to work locally with `yarn dev` it has to be `NEXT_PUBLIC_SANITY_PROJECT_ID` (as well?) \r\n\r\nSince i was not aware of this part of the next.js config, i was confused why it wasn’t working. Since i could access all env variables within my code, but not on runtime.\r\n\r\n## To Reproduce\r\n\r\nFollow the [steps](https://github.com/vercel/next.js/tree/canary/examples/cms-sanity#step-4-set-up-environment-variables) of the [Readme](https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md) to install & run the example.\r\n\r\n## Expected behavior\r\n\r\nFollow the readme and have a functioning project running with `yarn dev`\r\n\r\n## Screenshots\r\n\r\nWithout the `NEXT_PUBLIC_SANITY_PROJECT_ID` variable in the `.env.local` file:\r\n![image](https://user-images.githubusercontent.com/1867543/86346498-4abb7100-bc5d-11ea-83fa-23406fe6dec6.png)\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Chrome\r\n- Version of Next.js: v9.4.4\r\n- Version of Node.js: v.13.8.0\r\n"},{"labels":[null,"documentation"],"text":"From feedback, I've seen that the usage of `outDir` is not clear about how it can be changed:\r\n\r\n![image](https://user-images.githubusercontent.com/4278345/85882818-907fc180-b7a5-11ea-8ee8-2a3144e4bce1.png)\r\n"},{"labels":[null,"documentation",null],"text":"We should have more examples about our core features, one of those is [Environment Variables](https://nextjs.org/docs/basic-features/environment-variables).\r\n\r\nThe example should be added to the examples folder and linked by our docs"},{"labels":[null,"documentation"],"text":"Our current `next/router` docs (https://nextjs.org/docs/api-reference/next/router) use a combination between the `useRouter` hook and the `Router` object, ideally most examples should show the usage with `useRouter` as that's usually what you would need."},{"labels":[null,null,"documentation"],"text":"Currently, we only explain to use CSS Modules in the err.sh link. The error message does not provide guidance on what to do next, only the problem.\r\n\r\nSee the messages in this file:\r\nhttps://github.com/vercel/next.js/blob/canary/packages/next/build/webpack/config/blocks/css/messages.ts\r\n\r\nWe should update the error messages displayed to the user very clear that there's an alternative so they're not stuck thinking Next.js cannot import CSS."},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nI upgraded to next@9.4.5-canary.12 from next@9.4.4 because of https://github.com/vercel/next.js/issues/14186\r\nEverything works with `next dev`. However, `next build` fails with:\r\n```js\r\nUnhandled error during request: TypeError: Cannot read property 'add' of undefined\r\n    at new _default ([HIDDEN_PATH]/node_modules/next/dist/next-server/lib/side-effect.js:1:407)\r\n    at d ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:36:320)\r\n    at $a ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:39:16)\r\n    at a.b.render ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:44:476)\r\n    at a.b.read ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:44:18)\r\n    at renderToStaticMarkup ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:54:462)\r\n    at renderDocument ([HIDDEN_PATH]/node_modules/next/dist/next-server/server/render.js:3:594)\r\n    at renderToHTML ([HIDDEN_PATH]/node_modules/next/dist/next-server/server/render.js:48:72)\r\n    at async renderReqToHTML ([HIDDEN_PATH]/.next/serverless/pages/[...slug].js:24441:22)\r\n    at async Object.exportPage [as default] ([HIDDEN_PATH]/node_modules/next/dist/export/worker.js:12:92)\r\nError occurred prerendering page \"/[...slug]\". Read more: https://err.sh/next.js/prerender-error\r\nTypeError: Cannot read property 'add' of undefined\r\n    at new _default ([HIDDEN_PATH]/node_modules/next/dist/next-server/lib/side-effect.js:1:407)\r\n    at d ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:36:320)\r\n    at $a ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:39:16)\r\n    at a.b.render ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:44:476)\r\n    at a.b.read ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:44:18)\r\n    at renderToStaticMarkup ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:54:462)\r\n    at renderDocument ([HIDDEN_PATH]/node_modules/next/dist/next-server/server/render.js:3:594)\r\n    at renderToHTML ([HIDDEN_PATH]/node_modules/next/dist/next-server/server/render.js:48:72)\r\n    at async renderReqToHTML ([HIDDEN_PATH]/.next/serverless/pages/[...slug].js:24441:22)\r\n    at async Object.exportPage [as default] ([HIDDEN_PATH]/node_modules/next/dist/export/worker.js:12:92)\r\nUnhandled error during request: TypeError: Cannot read property 'add' of undefined\r\n    at new _default ([HIDDEN_PATH]/node_modules/next/dist/next-server/lib/side-effect.js:1:407)\r\n    at d ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:36:320)\r\n    at $a ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:39:16)\r\n    at a.b.render ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:44:476)\r\n    at a.b.read ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:44:18)\r\n    at renderToStaticMarkup ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:54:462)\r\n    at renderDocument ([HIDDEN_PATH]/node_modules/next/dist/next-server/server/render.js:3:594)\r\n    at renderToHTML ([HIDDEN_PATH]/node_modules/next/dist/next-server/server/render.js:48:72)\r\n    at async renderReqToHTML ([HIDDEN_PATH]/.next/serverless/pages/_error.js:10604:22)\r\n    at async Object.exportPage [as default] ([HIDDEN_PATH]/node_modules/next/dist/export/worker.js:12:92)\r\nError occurred prerendering page \"/404\". Read more: https://err.sh/next.js/prerender-error\r\nTypeError: Cannot read property 'add' of undefined\r\n    at new _default ([HIDDEN_PATH]/node_modules/next/dist/next-server/lib/side-effect.js:1:407)\r\n    at d ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:36:320)\r\n    at $a ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:39:16)\r\n    at a.b.render ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:44:476)\r\n    at a.b.read ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:44:18)\r\n    at renderToStaticMarkup ([HIDDEN_PATH]/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:54:462)\r\n    at renderDocument ([HIDDEN_PATH]/node_modules/next/dist/next-server/server/render.js:3:594)\r\n    at renderToHTML ([HIDDEN_PATH]/node_modules/next/dist/next-server/server/render.js:48:72)\r\n    at async renderReqToHTML ([HIDDEN_PATH]/.next/serverless/pages/_error.js:10604:22)\r\n    at async Object.exportPage [as default] ([HIDDEN_PATH]/node_modules/next/dist/export/worker.js:12:92)\r\n> Build error occurred\r\nError: Export encountered errors on following paths:\r\n\t/404\r\n\t/[...slug]\r\n    at exportApp ([HIDDEN_PATH]/node_modules/next/dist/export/index.js:22:1166)\r\n    at runMicrotasks (<anonymous>)\r\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\r\n    at async build ([HIDDEN_PATH]/node_modules/next/dist/build/index.js:38:218)\r\n22:36:52.954  \r\nerror Command failed with exit code 1.\r\n```\r\nOur projects builds fine up until 9.4.4 (current stable) but canary fails.\r\n\r\n## To Reproduce\r\n\r\n~I don't understand enough the error to be able to reproduce it.\r\nWe don't have a custom 404 not _error pages which makes it even more confusing.\r\nAny hint where to look at would be appreciated so I can try to repro this (project is private, so I can't share it :/)~\r\n*Edit:* Alright, I started moving files around and commenting code and this is what it came down to:\r\n1. Create an empty NextJS app (next@9.4.5-canary.12)\r\n2. Create empty page (this is what I have):\r\n```javascript\r\n// pages/[...slug].js\r\nconst CatchAllPages = () => {\r\n  return <div>Test</div>\r\n}\r\nexport const getStaticPaths = async () => {\r\n  return {\r\n    paths: [],\r\n    fallback: true,\r\n  }\r\n}\r\nexport const getStaticProps = async (ctx) => {\r\n  return {\r\n    props: {},\r\n  }\r\n}\r\nexport default CatchAllPages\r\n```\r\n3. Create a custom `_document.js`:\r\n```javascript\r\nimport * as React from 'react'\r\nimport Document, {\r\n  Html,\r\n  Head as HeadContainer,\r\n  Main,\r\n  NextScript,\r\n} from 'next/document'\r\nimport Head from 'next/head'\r\n\r\nconst SomeComponent = React.memo(() => {\r\n  return (\r\n    <>\r\n      <Head>\r\n        <script\r\n          dangerouslySetInnerHTML={{ __html: '// this does not matter' }}\r\n        ></script>\r\n      </Head>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default class CustomDocument extends Document {\r\n  render() {\r\n    return (\r\n      <Html>\r\n        <HeadContainer />\r\n        <body>\r\n          <Main />\r\n          <NextScript />\r\n          <SomeComponent />\r\n        </body>\r\n      </Html>\r\n    )\r\n  }\r\n}\r\n```\r\n4. Run `next build`\r\n\r\nApparently this has something to do with using `next/head` when rendering a component (e.g: in above `SomeComponent` which could live outside in `src/components`) in the `Html` tag in `body`.\r\n\r\n## Expected behavior\r\n\r\nIt should build or provide a better error message. If using `next/head` is no longer allowed in `Html` or in `_document` then it should display a better error with a link to some NextJS doc describing the issue (as it does with other error messages)\r\n\r\n## System information\r\n\r\n- OS: MacOS\r\n- Version of Next.js: next@9.4.5-canary.12\r\n- Version of Node.js: 12.18.0\r\n\r\n## Additional context\r\n\r\nWorks with 9.3.x & 9.4.4\r\n"},{"labels":[null,"documentation"],"text":"# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nWe released the `reactStrictMode` option to enable React Strict Mode quite a bit ago but I noticed the docs are currently missing.\r\n\r\n## Describe the solution you'd like\r\n\r\nAdd documentation for this options, more information on what it is / how it works can be found here: https://nextjs.org/blog/next-9-1-7#react-strict-mode-compliance-and-opt-in\r\n"},{"labels":[null,null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\nFast refresh is not working when using named exports alongside default export.\r\n\r\n## To Reproduce\r\n- Setup new next project using next init\r\n- Go to `pages/index.js` and remove export default from your function component \r\n```js\r\nexport default function Home() {...}\r\n// to\r\nfunction Home() {...}\r\n```\r\n- export something alongside your component as default\r\n```js\r\n// end of the file\r\nlet a = 2;\r\nexport { a, Home as default};\r\n```\r\n\r\n## Expected behavior\r\n\r\nFast refresh should work\r\n\r\n## System information\r\n\r\n- OS:  Linux\r\n- Browser Chromium latest\r\n- Version of Next.js:  9.4.1\r\n- Version of Node.js: 12.16.3\r\n\r\n"},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nValues of environment variables are sometimes altered. We noticed a secret key containing a \"$\" character was read without this character\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Use a custom \".env\" file on localhost\r\n\r\n## Expected behavior\r\n\r\nWe have been using .env files configured using \"dotenv\" npm module and `next.config.js` publicRuntimeConfig/serverRuntimeConfig since a few months and everything worked as expected. Since yesterday, a api route in our app could not generate accessTokens for a specific service anymore. It did work in our Heroku deployment, which uses the same environment variables (Set by heroku). After a few hours of debubbing, we noticed that a environment variable containing a \"$\"-character, was read without it:\r\n\r\nOriginal value in .env: xxxxxxxxx$XXXXX\r\nValue in process.env during runtime: xxxxxxxxxXXXXX\r\n\r\n## Screenshots\r\n\r\n-\r\n\r\n## System information\r\n\r\n- OS: macOS 10.15.4\r\n- Browser (if applies): -\r\n- Version of Next.js: 9.4.1\r\n- Version of Node.js: 13.14.0\r\n\r\n## Additional context\r\n\r\nIt could be that other characters are also affected, although this was the only one that broke our configuration.\r\n"},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nFast Refresh does not support unnamed function components ([closed issue](https://github.com/zeit/next.js/issues/12891)), yet the warning provided does not mention this.\r\n\r\n## To Reproduce\r\n\r\n`pages/index.js`:\r\n\r\n```\r\nimport '../src/somefile'\r\n\r\nexport default () => null;\r\n```\r\n\r\nThen edit and save `somefile`.\r\n\r\n### Works\r\n\r\n```\r\nimport '../src/somefile'\r\n\r\nconst Page = () => null;\r\n\r\nexport default Page;\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe warning should mention that Fast Refresh does not support unnamed function components.\r\n\r\n## System information\r\n\r\n- Version of Next.js: 9.4.1\r\n\r\n## Additional context\r\n\r\nI know that the warning was only introduced in 9.4.1 (and is a huge improvement on the error in 9.4.0), so it will most likely be subject to near future iterations. Here's how I read it:\r\n\r\n> Fast Refresh will perform a full reload when you edit a file that's imported by modules outside of the React tree.\r\n\r\nProbably my ignorance, but I was a bit confused about what \"modules outside of the React tree\" mean here. Does this mean the React components tree? Is `somefile` outside of the react tree? I mean, there is a dependency graph, but it is not a tree.\r\n\r\n> You might have a file which renders a React component but also exports a value that is imported by a non-React component.\r\n\r\nFirst, files don't 'render' a React component - files 'export' react components.\r\n\r\nI don't really understand whether this is said within the context of the whole dependency graph or what? Does this mean that if I have a file that exports a react component, but also some function (or a type like Props) that is then imported in a test, that will break Fast Refresh\r\n\r\n> Consider migrating the non-React component export to a separate file and importing it into both files.\r\n\r\nWhat's a \"non-React component`? An angular one?\r\n\r\n> It is also possible you are using class components at the top-level of your application, which disables Fast Refresh.\r\n\r\nThis is also unclear. What constitutes the \"top-level of your application\"? Some options:\r\n\r\n- A page's default export\r\n- `pages/_app.js`\r\n- `pages/_document.js`\r\n\r\n> Fast Refresh requires at least one function component in your React tree.\r\n\r\nThat is clear and the reproduction case above comply with this.\r\n\r\nAnyhow, while there is a place for improvement in my view to other parts of the warning, I believe my issue would be solved if the last line would say:\r\n\r\n> Fast Refresh requires at least one _named_ function component in your React tree.\r\n\r\nYet I'm not sure this is correct. Is it any odd function component that needs to be named, or the one exported from a page?"},{"labels":[null,null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen aliasing folders, Webpack won't resolve root level `index.js` files.\r\n\r\nDoesn't resolve:\r\n```js\r\nimport \"~store\";\r\n```\r\nResolves:\r\n```js\r\nimport \"~store/index\";\r\n```\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior:\r\n\r\n1. Create a `jsconfig.json` file:\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"es6\",\r\n    \"module\": \"commonjs\",\r\n    \"baseUrl\": \"src\",\r\n    \"paths\": {\r\n      \"~store/*\": [\"store/*\"]\r\n    }\r\n  }\r\n}\r\n```\r\n2. Create an IIFE in an `index.js` file within `src/store`\r\n```\r\n(() => console.log(\"Hello\"))();\r\n```\r\n3. Attempt to import the file within a `page` file:\r\n```\r\nimport \"~store\";\r\n\r\nexport default () => <h1>Test Page</h1>\r\n```\r\n\r\nResults in:\r\n![](https://i.imgur.com/ro7qBSm.png)\r\n\r\nIf you change the import to include `index`, then it works:\r\n```\r\nimport \"~store/index\";\r\n\r\nexport default () => <h1>Test Page</h1>\r\n```\r\n\r\nResults in:\r\n![](https://i.imgur.com/oFipoAS.png)\r\n\r\n## Expected behavior\r\n\r\nWebpack should automatically resolve root-level `index.js` imports.\r\n\r\n## System information\r\n\r\n- OS: LMDE 4\r\n- Version of Next.js: v9.4.0\r\n- Version of Node.js: 10\r\n\r\n## Other\r\n\r\nPossibly unrelated to the above, but I also found a warning being thrown from `hot-dev-client` when changing and saving the `Test Page` text to `Test` (and vice-versa) for some reason:\r\n![](https://i.imgur.com/HU4RA7S.png)\r\n"},{"labels":["documentation"],"text":"# Bug report\r\n\r\nI updated nextjs from `9.3.6` to `9.4.0`.\r\n\r\n## Describe the bug\r\n\r\nAfter updating I do not get typescript errors anymore checked during buildtime. This was working in `9.3.6`. \r\n\r\n## To Reproduce\r\n\r\nAs I have quite a complex mono repository, I'm unable to provide the source of that.\r\nMajor differences to a stock configuration is a custom babel configuration:\r\n\r\n```js\r\nmodule.exports = {\r\n  presets: [],\r\n  plugins: [\r\n    'lodash',\r\n    '@babel/proposal-class-properties',\r\n    'react-intl-auto',\r\n    'babel-plugin-graphql-tag'\r\n  ],\r\n  env: {\r\n    test: {\r\n     presets: [\r\n       '@babel/typescript',\r\n         [ '@babel/preset-env',\r\n           {\r\n           targets: {\r\n             node: process.versions.node\r\n           }\r\n         }\r\n         ],\r\n       '@babel/preset-react'\r\n     ]\r\n    },\r\n    nodeTs: {\r\n      presets: [\r\n        '@babel/typescript',\r\n        '@babel/preset-react',\r\n        [\r\n          '@babel/preset-env',\r\n          {\r\n            targets: {\r\n              node: process.versions.node\r\n            }\r\n          }\r\n        ]\r\n      ]\r\n    },\r\n    nextjs: {\r\n      presets: ['next/babel']\r\n    }\r\n  }\r\n}\r\n```\r\nAnd a custom next.config.ts:\r\n```ts\r\n/* eslint-disable @typescript-eslint/no-var-requires */\r\nconst path = require('path')\r\n\r\nconst withDevTool = (nextConfig: any = {}) => {\r\n  return {\r\n    ...nextConfig,\r\n    webpack(config: any, options: any) {\r\n      const { dev } = options\r\n      if (dev) {\r\n        config.devtool = 'eval-source-map'\r\n      }\r\n      if (typeof nextConfig.webpack === 'function') {\r\n        return nextConfig.webpack(config, options)\r\n      }\r\n      return config\r\n    },\r\n  }\r\n}\r\n\r\nexport default () => {\r\n  const optimizedImages = require('next-optimized-images')\r\n\r\n  const withTM = require('next-transpile-modules')([\r\n    'query-string',\r\n    'imask/esm',\r\n   /** ..some more private modules */\r\n  ])\r\n\r\n  const withCustomBabelConfigFile = require('next-plugin-custom-babel-config')\r\n  const withCSS = require('@zeit/next-css')\r\n\r\n  const withBundleAnalyzer = require('@next/bundle-analyzer')({\r\n    enabled: process.env.ANALYZE === 'true',\r\n  })\r\n\r\n  return withDevTool(\r\n    withBundleAnalyzer(\r\n      optimizedImages(\r\n        withCustomBabelConfigFile(\r\n          withCSS(\r\n            withTM({\r\n              babelConfigFile: path.resolve(\r\n                path.join(__dirname, '../../../../babel.config.js')\r\n              ),\r\n              distDir: 'dist',\r\n            })\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n}\r\n```\r\n\r\nI'm using a custom server with additional express middleware.\r\n\r\n```ts\r\n// This file doesn't go through babel or webpack transformation.\r\n// Make sure the syntax and sources this file requires are compatible with the current node version you are running\r\n// See https://github.com/zeit/next.js/issues/1245 for discussions on Universal Webpack or universal Babel\r\nimport 'dotenv/config'\r\nimport express from 'express'\r\nimport next from 'next'\r\nimport { defaultMiddleware } from '../index'\r\nimport { appConfig } from './appConfig'\r\n\r\nconst applicationFactory = (): void => {\r\n  const dev = process.env.NODE_ENV !== 'production'\r\n  const conf = dev\r\n    ? // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n      require('./next.config').default()\r\n    : {\r\n        distDir: 'dist',\r\n      }\r\n  const app = next({\r\n    dev,\r\n    conf,\r\n  })\r\n  const handle = app.getRequestHandler()\r\n  app.prepare().then(() => {\r\n    const server = express()\r\n    const proxyInstance = defaultMiddleware(server, appConfig)\r\n    server.get('*', (req, res) => {\r\n      return handle(req, res)\r\n    })\r\n    const port = process.env.PORT || 3000\r\n    // @ts-ignore\r\n    const listener = server.listen(port, (err: Error) => {\r\n      if (err) {\r\n        throw err\r\n      }\r\n      // tslint:disable-next-line:no-console\r\n      console.log(`> Ready on http://localhost:${port}`)\r\n    })\r\n    listener.on('upgrade', (req: any, socket: any, ...rest: any) => {\r\n      socket.on('error', (error: any) => {\r\n        console.error(error)\r\n      })\r\n      proxyInstance.upgrade(req, socket, ...rest)\r\n    })\r\n  })\r\n}\r\n\r\nexport default applicationFactory\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\nTypescript errors should be reported.\r\n\r\n## System information\r\n\r\n- OS:  Windows\r\n- Version of Next.js: 9.4.0\r\n- Version of Node.js: 12.13.1\r\n"},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\nI was having routing issues in my application after implementing Multi Zones. I went back to the docs' example and noticed the bug was also there. \r\n\r\nI hosted it on Now using the exact same example as the docs:\r\nhttps://github.com/zeit/next.js/tree/canary/examples/with-zones\r\n\r\nI'm not savvy enough to understand the origin of the bug. Where is this coming from?\r\n\r\n## Describe the bug\r\n\r\nVisiting the link [https://test-paul-with-zones-app.now.sh/blog/post/1](https://test-paul-with-zones-app.now.sh/blog/post/1) fails when request from the browser. It works only when navigating to it client-side (Next Link)\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to '[https://test-paul-with-zones-app.now.sh/blog/post/1](https://test-paul-with-zones-app.now.sh/blog/post/1)'\r\n2. See a 404 page\r\n3. Go to [https://test-paul-with-zones-app.now.sh/blog](https://test-paul-with-zones-app.now.sh/blog)\r\n4. Click on Post 1\r\n5. The page shows correctly\r\n\r\n## Expected behavior\r\n\r\nThe page should load and not show a 404\r\n"},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nIt isn't possible to have an `_error.tsx` file in the `/pages` folder without also having a `404.tsx` file. When running `next dev`, it works fine, but as soon as you run `next build`, the following error appears:\r\n\r\n```\r\nAutomatically optimizing pages ...\r\nError occurred prerendering page \"/404\". Read more: https://err.sh/next.js/prerender-error:\r\nError: Error for page /_error: pages with `getServerSideProps` can not be exported. See more info here: https://err.sh/next.js/gss-export\r\n```\r\n\r\nAccording to the official Next.js Blog, it should not be a problem to have a `_error.tsx` without a `404.tsx`: https://nextjs.org/blog/next-9-3#automatic-static-optimization-for-404\r\n\r\nThe reason I do not want a static 404 page is so that I can catch routes with a trailing slash and redirect accordingly to the route without a trailing slash. This must be done on the server.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create an `_error.tsx` file with a `getServerSideProps()` function.\r\n2. Run `next build`.\r\n\r\n## Expected behavior\r\n\r\nThe error message says that it is trying to export the `_error.tsx` file even though it obviously shouldn't be. The application should still build. As soon as I add a `404.tsx` file or remove the `_error.tsx` file, it builds without a problem.\r\n\r\n## System information\r\n\r\n- OS: macOS and Alpine Linux (Docker)\r\n- Version of Next.js: 9.3\r\n- Version of Node.js: 13.13.0 and 14.0.0\r\n\r\n## Additional context\r\n\r\nJust in case it might be of any use, here is the code from my `_error.tsx` file:\r\n\r\n```\r\nimport React, { useEffect } from 'react';\r\nimport { GetServerSideProps } from 'next';\r\nimport Head from 'next/head';\r\nimport Router from 'next/router';\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport useStandardHeaderTags from '../lib/useStandardHeaderTags';\r\nimport TitleElement from '../components/TitleElement';\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      textAlign: 'center'\r\n    }\r\n  })\r\n);\r\n\r\ninterface Props {\r\n  statusCode: number;\r\n}\r\n\r\nconst Error: React.FC<Props> = ({ statusCode }) => {\r\n  const classes = useStyles();\r\n  const title = statusCode === 404 ? '404' : 'Error';\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        {useStandardHeaderTags(title)}\r\n      </Head>\r\n      <Container className={classes.root}>\r\n        <TitleElement text={title} />\r\n\r\n        {statusCode === 404\r\n          ? 'The page you are looking for could not be found.'\r\n          : 'An error occurred.'}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps: GetServerSideProps = async ({ res, req }) => {\r\n  const statusCode = res ? res.statusCode : 404;\r\n\r\n  if (statusCode === 404) {\r\n    if (req.url.match(/\\/$/)) {\r\n      const withoutTrailingSlash = req.url.substr(0, req.url.length - 1);\r\n      if (res) {\r\n        res.writeHead(303, {\r\n          Location: withoutTrailingSlash\r\n        });\r\n        res.end();\r\n      }\r\n      else {\r\n        Router.push(withoutTrailingSlash);\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    props: {\r\n      statusCode\r\n    }\r\n  };\r\n};\r\n\r\nexport default Error;\r\n```\r\n"},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\n`next build` fails with the error in the title after updating to 9.3.4 with a custom PostCSS config following the current documentation\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a `postcss.config.js` with the contents specified [here](https://nextjs.org/docs/advanced-features/customizing-postcss-config)\r\n2. Update to 9.3.4\r\n3. No more builds!\r\n\r\n## Expected behavior\r\n\r\nDocumentation needs to be updated with the correct \"base\" PostCSS config for 9.3.4. I know you apparently removed `postcss-flexbugs-fixes`, but I have no idea what else might have changed.\r\n"},{"labels":["documentation"],"text":"**update: managed to activate the grid with autoprefixer comment in the scss.** \r\n\r\n# Bug report\r\nthe docs state \"**New CSS features are automatically compiled for Internet Explorer 11 compatibility: Grid Layout and Gap property** \"\r\n\r\n## Describe the bug\r\ni have installed next 9.3 and added various ie11 browserlist configs like so: \r\n```\r\n  \"browserslist\": \">0.3%, ie 11\"\r\n``` \r\n\r\ntested on a simple grid component - did not work. \r\n\r\n## To Reproduce\r\nuse any grid layout with ie11 in the supported browsers. \r\n\r\n## Expected behavior\r\nIE11 to show a grid layout\r\n\r\nis there something missing in my config ? the docs did not elaborate and there is no example folder for this. "},{"labels":["documentation"],"text":"# Bug report\r\n\r\nThe [documentation on data fetching](https://github.com/zeit/next.js/blob/canary/docs/basic-features/data-fetching.md) mentions that `getServerSideProps` will be executed client side when using next/link. Was next/router forgotten to be mentioned in the documentation? For `getStaticProps`, next/router is already mentioned.\r\n\r\nWhile at it: there is an incomplete sentence on the same doc page:\r\n\r\n> and the result cannot be cached by a CDN without extra ."},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\nWhen using `next/head` for adding og tags to the page, \r\nI am using \r\n`<meta property=\"og:title\" content=\"...\" />`\r\n\r\nFor some other tags like `name=\"title\"` , I am using\r\n`<meta name=\"title\" content=\"...\" />`\r\n\r\nBoth of these work fine and are added to the `head`.\r\n\r\nThe problem arises when I need to override these from a child component.\r\nIn this case, the `<meta name=\"title\" ... />` gets overridden correctly, but a new entry is added for `<meta property=\"og:title\" ... />`\r\n\r\nTo circumvent this, I have figured out that i can pass a `key` to the `<meta property-=\"...\"  />,` in which case it gets correctly overridden.\r\n\r\nIs this understanding correct?\r\nmeta tags with name are deduped by default, otherwise we need to pass in a key\r\nIs this behaviour documented anywhere?\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n```\r\nfunction Parent() {\r\n  return (\r\n    <>\r\n    <Head>\r\n      <meta name=\"n1\" content=\"content1\" />\r\n      <meta property=\"p1\" content=\"content2\" />\r\n    </Head>\r\n    <Child />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction Child() {\r\n  return (\r\n    <Head>\r\n      <meta name=\"n1\" content=\"content1\" />\r\n      <meta property=\"p1\" content=\"content2\" />\r\n    </Head>\r\n  )\r\n}\r\n```\r\n\r\n## Expected behavior\r\nthe <head> tag should have these meta tags:\r\n```\r\n<meta name=\"n1\" content=\"content1\" />\r\n<meta property=\"p1\" content=\"content2\" />\r\n```\r\n\r\nbut instead this is what I see:\r\n```\r\n<meta name=\"n1\" content=\"content1\" /> \r\n<meta property=\"p1\" content=\"content2\" />\r\n<meta property=\"p1\" content=\"content2\" />\r\n```\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Chrome\r\n- Version of Next.js: 9.1.4\r\n\r\n## Additional context\r\n\r\n"},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nRunning `npm init next-app` creates a new Next.js project that uses Yarn, rather than npm. Given, the fact that I'm using npm to create the project, and the docs offer two options for getting started, one with npm and one with Yarn, this is completely unexpected behavior.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Read getting started docs\r\n2. Choose the `npm` option\r\n3. Run `npm init next-app`\r\n4. Get a project that uses Yarn\r\n\r\n## Expected behavior\r\n\r\nIt should create a project that uses npm for package management.\r\n\r\nHere ya go, Tim!"},{"labels":["documentation"],"text":"In Next.JS 9.1.7, the CLI output has been redesigned and it shows '_size_' and '_first load size_' for each page now. It would be really helpful if someone can throw some light on what are these values, how are they calculated and what all modules are included while calculating these sizes. I cannot find documentation around this. "},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nStyling a CSS grid using built-in CSS support does not compile to CSS with prefixes for IE 11. \r\n\r\n## To Reproduce\r\n\r\nI created a Next.js project using `npm init next-app`, then added two pages demonstrating basic CSS grids:\r\n- [Repo](https://github.com/htunnicliff/nextjs-ie-11-broken-grid)\r\n- [Demo: CSS grid using global CSS import](https://no-ms-grid.htunnicliff.now.sh/global-css)\r\n- [Demo: CSS grid using CSS modules](https://no-ms-grid.htunnicliff.now.sh/modules)\r\n\r\n## Expected behavior\r\nCSS containing Grid Layouts should be automatically compiled for Internet Explorer 11 compatibility. (https://nextjs.org/docs/advanced-features/customizing-postcss-config#default-behavior)\r\n\r\n## Screenshots\r\n\r\nGlobal CSS demo in IE 11\r\n<img width=\"961\" alt=\"Global CSS demo in IE 11\" src=\"https://user-images.githubusercontent.com/7614039/74359088-7655c180-4d77-11ea-82fd-aae1b29312c2.png\">\r\n\r\nGlobal CSS demo in Edge\r\n<img width=\"965\" alt=\"Global CSS demo in Edge\" src=\"https://user-images.githubusercontent.com/7614039/74359213-b9b03000-4d77-11ea-9bef-41a5dcf6d7c5.png\">\r\n\r\n\r\n## System information\r\n\r\n- OS: Windows\r\n- Browser: IE 11\r\n- Version of Next.js: 9.2.1\r\n\r\n## Additional context\r\n\r\nAttempts to configure a specific browserslist key have not produced the expected output either:\r\n```json\r\n\"browserslist\": [\">0.3%\", \"ie 11\", \"not op_mini all\"]\r\n```"},{"labels":["documentation"],"text":"# Examples bug report\r\n\r\n## Example name\r\n\r\nGetting Started/Lazy Loading Modules\r\nhttps://nextjs.org/learn/excel/lazy-loading-modules/analyze-result\r\n\r\n## Describe the bug\r\n\r\nDocumentation says \"As you have seen, the firebase modules are contained inside the pages/index.js and pages/p/[id].js bundles.\"\r\nThis does not appear to be the case with NextJS 9.2.\r\nPresumably the NextJS 9.2 improved code splitting strategy has invalidated some of the description in the example.\r\n\r\n## To Reproduce\r\n\r\nFollow the steps in the Getting Started guide for the \"Lazy Loading Modules\" example.\r\n\r\n## Expected behavior\r\n\r\nThe text in the example (Getting Started - Lazy Loading Modules) should reflect new optimized code-splitting behavior.\r\n\r\n## Screenshots\r\n![2020-01-26](https://user-images.githubusercontent.com/11898246/73170472-9750cc80-4152-11ea-8831-08f7a695b8a9.png)\r\n\r\n## System information\r\n\r\n- OS: Ubuntu 18.04 LTS\r\n- Browser: firefox 72.0.2 Windows\r\n- NextJS: 9.2.1\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n"},{"labels":[null,"documentation"],"text":"## Describe the bug\r\n\r\nThere are no docs to be found on Logging. Also, the default configuration for production doesn't output access logs.\r\n\r\n## To Reproduce\r\n\r\nSearch official docs and observe there is nothing about logging.\r\n\r\n![Screen Shot 2019-12-29 at 1 00 47 PM](https://user-images.githubusercontent.com/487897/71561398-891c6d00-2a3b-11ea-85a7-33ed7f7788ef.png)\r\n\r\n\r\n## Expected behavior\r\n\r\nI expect to see extensive docs about logging.\r\n\r\nAlso, I expect to see access logs in my docker/kubernetes pod logs by default.\r\n\r\n## Screenshots\r\n\r\n![Screen Shot 2019-12-29 at 1 01 16 PM](https://user-images.githubusercontent.com/487897/71561425-e2849c00-2a3b-11ea-9303-626cd9a63c7f.png)\r\n\r\n\r\n## System information\r\n- Version of Next.js: 9.1.6\r\n\r\n## Additional context\r\n\r\nRelated issue #5512 \r\n"},{"labels":["documentation"],"text":"# Examples bug report\r\nThere is a bug on the **Fetching Data for Pages** section of the NextJS Learn on the official website\r\n## Example name\r\n`TypeError: Cannot read property 'medium' of null`\r\n\r\n## Describe the bug\r\nIn the sample API, the keyword used was 'batman'. Apparently all batman shows have image object return values other than null.\r\nHowever, when I changed the keyword to 'power', some of the shows did not have image object and they returned null.\r\nFor such shows where there are no images, this line (in [id].js page):\r\n`<img src={props.show.image.medium} />` breaks and throws the TypeError shown above.\r\n\r\n## To Reproduce\r\n1. Change the API link in the 'pages/index.js' to:\r\n`'https://api.tvmaze.com/search/shows?q=power'`\r\n2. On the browser, when the when the power shows have rendered, click on the second item on the list (The Power).\r\n3. See error\r\n\r\n## Expected behavior\r\nYou will be faced with an error screen like this:\r\n![error](https://user-images.githubusercontent.com/49484425/71109272-24544d80-21c5-11ea-884e-e864dc3496dc.PNG)\r\n\r\n\r\n## To Fix\r\nTaking into consideration, that some shows may be returning null values under their image property, I had to use optional chaining (an experimental feature) to take care of that. (there are other simpler logic to take care of null)\r\n\r\n**Sample show without Image:**\r\n![showWithoutImage](https://user-images.githubusercontent.com/49484425/71109548-b65c5600-21c5-11ea-93ee-f9ea0e4fb27c.PNG)\r\n\r\n**Sample show with Image:**\r\n![showWithImage](https://user-images.githubusercontent.com/49484425/71109534-afcdde80-21c5-11ea-9b85-55c6412ffb05.PNG)\r\n\r\n\r\n## System information\r\n- OS: [ Windows]\r\n- Browser (if applies) [Chromium-based]\r\n- Version of Next.js: [9.1.5]\r\n\r\n## Additional context\r\n"},{"labels":["documentation"],"text":"Looking at many SSG specific features being built into Nextjs (especially https://github.com/zeit/next.js/issues/9524) , here's what I think is the biggest issue in using Nextjs for SSG.\r\n\r\nThe problem is that Nextjs entire documentation and manuals are written from the perspective of a server-side rendering framework. They are not geared around the usecase of someone wanting to either quickly get started..or someone who is working with a Nextjs SSG and wanted help on some SSG contextual aspect. \r\n\r\nFor example, the entire section of \"Prefetching Pages\", \"Custom server and routing\", and many more is not relevant for a SSG usecase. In fact on the left side - there is no section for \"static site generation\". The documentation page of Nextjs lets people think that this is not a usecase that Nextjs supports. \r\n\r\nI dont believe there is any real way the two usecases can be merged in docs without massive cognitive overload for the user. \r\n\r\nThe documentation subsites should be entirely different for SSG and SSR usecases. Its ok if section are duplicated (which can be included in both sites from \"common docs\"). "},{"labels":["documentation",null],"text":"# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\n`next export` allows me to export static HTML files. What's missing is a way to also export other dynamic content referenced by those static HTML files like images.\r\n\r\n## Describe the solution you'd like\r\n\r\nAPI routes allow me to render dynamic content like images. Next.js should support static export for API routes to make this content available for static sites.\r\n\r\n## Describe alternatives you've considered\r\n\r\nBoth alternatives I've considered don't seem practical to me:\r\n\r\n- Implement a custom export script which calls the API routes and stores the content in the exported directory.\r\n- Call the API route lamda function in exportPathMap.\r\n\r\n## Additional context\r\n\r\nMaybe there is a reason why this is not possible. In this case a short explanation in https://err.sh/zeit/next.js/api-routes-static-export would be great."},{"labels":["documentation"],"text":"# Bug report\r\n\r\nbuild error with components folder in pages folder\r\n\r\n\r\n## Describe the bug\r\n\r\nI wanted to create custom nav component with home page, so I created a nav component in pages/index/components/nav.js \r\n\r\nnav.js\r\n\r\n```js\r\nimport React from 'react'\r\n\r\nconst Nav = ({list}) => (\r\n\r\n    <div>\r\n        {list.map(item => <p>item</p>)}\r\n    </div>\r\n)\r\n\r\nexport default Nav\r\n\r\n```\r\n\r\nwhen I try to build the project `next build`, it has this following error\r\n\r\n```\r\nError occurred prerendering page \"/index/components/nav\": TypeError: Cannot read property 'map' of undefined\r\n    at Nav (/Users/jay/Downloads/my-app/.next/server/static/gvH9SPsJWVGjX-v1v6eEN/pages/index/components/nav.js:116:31)\r\n    at d (/Users/jay/Downloads/my-app/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:36:498)\r\n    at Za (/Users/jay/Downloads/my-app/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:39:16)\r\n    at a.b.render (/Users/jay/Downloads/my-app/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:44:476)\r\n    at a.b.read (/Users/jay/Downloads/my-app/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:44:18)\r\n    at renderToString (/Users/jay/Downloads/my-app/node_modules/react-dom/cjs/react-dom-server.node.production.min.js:54:364)\r\n    at render (/Users/jay/Downloads/my-app/node_modules/next/dist/next-server/server/render.js:81:16)\r\n    at Object.renderPage (/Users/jay/Downloads/my-app/node_modules/next/dist/next-server/server/render.js:323:20)\r\n    at /Users/jay/Downloads/my-app/.next/server/static/gvH9SPsJWVGjX-v1v6eEN/pages/_document.js:431:21\r\n    at Generator.next (<anonymous>)\r\n```\r\n\r\nWhen I moved components folder out of pages folder, it does not have this issues anymore\r\n\r\n## To Reproduce\r\n\r\n1. create index folder under pages\r\n2. create components folder under index folder\r\n3. create nav.js file under components folder\r\n```js\r\nimport React from 'react'\r\n\r\nconst Nav = ({list}) => (\r\n\r\n    <div>\r\n        {list.map(item => <p>item</p>)}\r\n    </div>\r\n)\r\n\r\nexport default Nav\r\n```\r\n4. `next build`\r\n"},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nAfter deploying the tutorial project at https://nextjs.org/learn/excel/static-html-export/deploying-the-app. The resulting deployment on Now only works when clicking links. Hitting refresh on any page apart from the index will result in a 404 (as the file does not exist on the server). This appears to be because when testing locally with `serve` the html extension is stripped, but in Now this does not happen. In any case the static site should not depend on the server stripping the html extension.\r\n\r\n## To Reproduce\r\n\r\nFollow the tutorial at https://nextjs.org/learn/excel/static-html-export.\r\n\r\n- After deploying to Now go to the index page\r\n- Click the about link\r\n- Hit the refresh button\r\n\r\nA 404 is encountered\r\n\r\n## Expected behavior\r\n\r\nThe about page should reload\r\n"},{"labels":["documentation"],"text":"Hey folks 👋 \r\n\r\nI've seen a couple of cases of words like \"simple\", \"easily\" and \"just\" (and some other variations) in your docs. @carolstran explained in her blog post [How to remove condescending language from documentation](https://dev.to/meeshkan/how-to-remove-condescending-language-from-documentation-4a5p) why that can make some people feel frustrated and isolated while reading documentation with these words. \r\n\r\nIf you agree and allow me to proceed I can open a PR adapting the docs by removing these words or rephrasing the sentences where they are used.\r\n\r\nFor more reference on this topics you can also check [Jim Fisher's Don't Say Simply talk from Write the Docs Prague 2018](https://www.youtube.com/watch?v=gsT2BBWBVmM)\r\n\r\nThank you in advance and please let me know your thoughts about this 😄 "},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nUsing Next 9's routing solution for a Universal App, \"router.query\" for post-SSR client-side navigation is never populated even if `asPath` contains a query string for any of the following\r\nrouter access methods:\r\n```\r\nimport { SingletonRouter, useRouter, withRouter } from 'next/router';\r\n```\r\n\r\n## To Reproduce\r\n\r\nPerform an initial navigation to `/search?term=hello`, the server rendered page's router information contains a populated \"query\":\r\n```\r\nconst router = useRouter();\r\nconsole.log({ router }); // asPath: \"/search?term=hello\", pathname: \"/search\", query: { term: \"hello\" }\r\n```\r\n\r\nThen navigate to the same pathname, with a different query string: `/search?term=bye`. At this point Router empties \"query\", but has the correct new `asPath`:\r\n```\r\nconst router = useRouter();\r\nconsole.log({ router }); // asPath: \"/search?term=hello\", pathname: \"/search\", query: {}\r\n```\r\n\r\n## Expected behavior\r\n\r\nFor the client side navigation to a route with specified query parameters such as `/search?term=bye`, `router.query` contains the parsed query string.\r\n\r\nIf this is not expected, it would be helpful to better document this behavior and the correct approach on the client. I would prefer to always access routing information off of the available hook / HOC rather than off window on the client to avoid a split-brain solution between the client and the server.\r\n"},{"labels":["documentation"],"text":"I recently needed a feature allowing me to remove `if...else statement` from build output via a`webpack.DefinePlugin` ([DOCS](https://webpack.js.org/plugins/define-plugin/)) server vs browser condition\r\n\r\nI looked into Next.js source and happily found a `process.browser` in [webpack-config](https://github.com/zeit/next.js/blob/canary/packages/next/build/webpack-config.ts)\r\n\r\n```typescript\r\nlet webpackConfig: webpack.Configuration = {\r\n  // ...\r\n  plugins: [\r\n    // ...\r\n    new webpack.DefinePlugin({\r\n      // ...\r\n      'process.browser': JSON.stringify(!isServer)\r\n    })\r\n  ]\r\n};\r\n```\r\n\r\nI have done the tutorial and tried searching for this `process.browser`in the docs.  \r\nI found a lot of \"injectable\" `process.env[...]` related documentation, but nothing related to default build targets related variables.\r\n\r\nI tested it and it's doing exactly what I needed.\r\n\r\nDemo:  \r\n```typescript\r\nconst api: API = process.browser ? require(\"../api/proxy\").api : require(\"../api/auth\").api;\r\n```\r\n`api/proxy.ts`\r\n```typescript\r\nexport const api: API = {\r\n  find: (id: string) => fetch(`/api/resource/${id}`), // regexp \\/api\\/resource\\/\r\n  // ...\r\n};\r\n```\r\n\r\n`api/auth.ts`\r\n```typescript\r\nconst backendUrl = `${process.env.SECRET_BACKEND}/api/${process.env.SECRET_BACKEND_VERSION}`;\r\n\r\nexport const api: API = {\r\n  find: async (id: string) => {\r\n    const refs = await fetch(\r\n      // regexp \\/refs\\?access_token=\r\n      `${backendUrl}/refs?access_token=${process.env.SECRET_BACKEND_ACCESS_TOKEN}`\r\n    );\r\n    return fetch(`${backendUrl}/resource/${id}`, {\r\n      headers: {\r\n        Authorization: `Token ${process.env.SECRET_BACKEND_ACCESS_TOKEN}`,\r\n        ref: (await refs.json()).master\r\n      }\r\n    });\r\n  }\r\n  // ...\r\n};\r\n```\r\n\r\n`rm -rf .next`\r\n`npm run build`\r\n`cd next`\r\n\r\n```sh\r\ngrep \\/api\\/resource\\/ . -rl --exclude-dir=cache \r\n\r\n./static/OQ9_IPyl2LC8X7moS4k5r/pages/index.js\r\n```\r\n\r\n```sh\r\ngrep \\/refs\\?access_token= . -rl --exclude-dir=cache \r\n\r\n./serverless/pages/index.js\r\n```\r\n\r\n* is the process.browser meant to be private ?\r\n* is there a less hacky or more default way to implement this kind of build-target-toggle that I missed in the documentation ?\r\n* If no, and no, should this make its way to documentation ?"},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nThe `pathname` returned from `useRouter` doesn't match the description of this data in the [readme](https://github.com/zeit/next.js#routing).\r\n\r\nI'm unsure if this is a bug, or simply incomplete information in the current docs. Regardless, this is a point of semi-regular confusion on our team.\r\n\r\n## To Reproduce\r\n\r\n1. Create the following page:\r\n```tsx\r\n[locale]/posts/[id].tsx\r\n```\r\n\r\n2. Within this page, use `useRouter`:\r\n\r\n```tsx\r\nimport { useRouter } from 'next/router'\r\n\r\nconst Page = () => {\r\n  const router = useRouter()\r\n  console.log(router)\r\n\r\n  return (<h1>Example</h1>)\r\n}\r\n\r\nexport default Page\r\n```\r\n\r\n3. Visit this page in the browser, with some query string (i.e. `/fr/posts/abc?q=123`)\r\n4. View the log (either server logs, or in the browser console):\r\n```ts\r\n{\r\n  route: \"/[locale]/posts/[id]\",\r\n  pathname: \"/[locale]/posts/[id]\",\r\n  query: {\r\n    locale: \"fr\",\r\n    id: \"abc\",\r\n    \"q\": \"123\"\r\n  },\r\n  asPath: \"/fr/posts/abc?q=123\"\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nBased on the following descriptions of these values:\r\n\r\n> - `route` - String of the current route\r\n> - `pathname` - String of the current path excluding the query string\r\n> - `asPath` - String of the actual path (including the query) shows in the browser\r\n> [Reference](https://github.com/zeit/next.js#routing)\r\n\r\nI would expect the following `useRouter` results:\r\n\r\n```diff\r\n{\r\n  route: \"/[locale]/posts/[id]\",\r\n- pathname: \"/[locale]/posts/[id]\",\r\n+ pathname: \"/fr/posts/abc\",\r\n  query: {\r\n    locale: \"fr\",\r\n    id: \"abc\",\r\n    \"q\": \"123\"\r\n  },\r\n  asPath: \"/fr/posts/abc?q=123\"\r\n}\r\n```\r\n\r\n## Screenshots\r\n\r\nN/A\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: N/A[e.g. chrome, safari]\r\n- Version of Next.js: `9.0.7`\r\n\r\n## Additional context\r\n\r\nNone\r\n"},{"labels":[null,null,"documentation"],"text":"# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI see `Head.rewind()` being used in several examples (e.g. [the apollo example](https://github.com/zeit/next.js/blob/ba246446ef8069e160c3a9a010549e89e222dd1e/examples/with-apollo/lib/apollo.js)) but I don't really understand what it does and can't find documentation about it.\r\n\r\n## Describe the solution you'd like\r\n\r\nIf possible, I would like some documentation about it. What happens if I omit it? Could it be possible to have a concrete example?\r\n"},{"labels":["documentation"],"text":"Despite 'opting out' of static optimization, production build still fails owing to (one assumes) validation for that functionality.\r\n\r\nError as follows:\r\n\r\n```\r\nWarning: You have opted-out of Automatic Static Optimization due to `getInitialProps` in `pages/_app`.\r\nRead more: https://err.sh/next.js/opt-out-auto-static-optimization\r\n\r\n> Build error occurred\r\nError: automatic static optimization failed: found pages without a React Component as default export in [...list of files]\r\n```\r\n## To Reproduce\r\n\r\nAdd getInitialProps method to pages/_app class.\r\n\r\n/pages/example/index.tsx:\r\n\r\n```\r\nimport { TestOne, TestTwo } from './components';\r\n...\r\nexport default class Example extends Page {\r\nrender() {\r\n  <React.Fragment>\r\n    <TestOne />\r\n    <TestTwo />\r\n  </React.Fragment>\r\n}\r\n```\r\n/pages/example/components.tsx:\r\n\r\n```\r\nexport class TestOne extends React.Component {\r\n...\r\n}\r\n...\r\nexport class TestTwo extends React.Component {\r\n...\r\n}\r\n```\r\n\r\nAttempt production build.\r\n\r\n## Expected behavior\r\n\r\nA warning, but for the build to succeed.\r\n\r\n## System information\r\n\r\nnext@9.0.8\r\n\r\n## Additional context\r\n\r\nWe upgraded from next 8 to next 9 owing to its superior typescript offering. However, we are also using some legacy code that we have not been in a position to change to date which makes Static Optimization problematic. We are clearly not following React best practice, and also not using next routing as intended, so I realise that this is happening because we are off-message and we are working on fixing this within our own context.\r\n\r\nHowever, I still consider this a bug, as there is the implication that the pages check is being run in the background even when not necessary which will needlessly increase build time and possibly cause problems for other users trying to suppress the optimization for similar legacy reasons.\r\n"},{"labels":["documentation"],"text":"[API routes](https://github.com/zeit/next.js#api-routes) were introduced some time ago and they are a very important feature especially for the people building their API in custom servers. This new lesson will be focused in teaching their usage as APIs for Next.js pages.\r\n\r\nThe lesson will be included alongside the lessons in `basics`, and it should show the usage of multiple api routes with at least a `get` and a `post` request."},{"labels":["documentation"],"text":"As some users get confused as to why we create a tsconfig.json and force certain options. "},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\nWhen a Next.js app is configured to use Express server, the application will work in localhost, but when it is deployed to now, the Express server route fails.\r\n\r\nA clear and concise description of what the bug is.\r\n\r\n## To Reproduce\r\nConfigure the Next.js project as follows:\r\n\r\nnow.json\r\n```\r\n{\r\n    \"version\": 1,\r\n    \"name\": \"App\",\r\n    \"builds\": [\r\n        {\r\n            \"src\": \"package.json\",\r\n            \"use\": \"@now/next\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nIn the package.json it contains the following script\r\n\r\n```\r\n{\r\n  \"dependencies\": {\r\n    \"@zeit/next-css\": \"^1.0.1\",\r\n    \"@zeit/next-sass\": \"^1.0.1\",\r\n    \"bootstrap\": \"^4.3.1\",\r\n    \"express\": \"^4.17.1\",\r\n    \"js-cookie\": \"^2.2.0\",\r\n    \"jwt-decode\": \"^2.2.0\",\r\n    \"next\": \"^9.0.3\",\r\n    \"node-sass\": \"^4.12.0\",\r\n    \"now\": \"^16.1.1\",\r\n    \"react\": \"^16.8.6\",\r\n    \"react-bootstrap\": \"^1.0.0-beta.11\",\r\n    \"react-dom\": \"^16.8.6\",\r\n    \"recompose\": \"^0.30.0\"\r\n\r\n...\r\n  },\r\n  \"scripts\": {\r\n    \"dev\": \"node server.js\",\r\n    \"build\": \"next build\",\r\n    \"now-build\": \"next build\",\r\n    \"start\": \"NODE_ENV=production node server.js\"\r\n  }\r\n}\r\n```\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nAny Next.js project build with this configuration will work in localhost, but when deployed to now, the Express server routes will stop working.\r\n\r\n## Expected behavior\r\n\r\nExpected a Next.js deployed to Zeit Now can use the Express server as SSR.\r\nZeit document link [https://zeit.co/guides/custom-next-js-server-to-routes/?query=express#the-old-custom-server-method](https://zeit.co/guides/custom-next-js-server-to-routes/?query=express#the-old-custom-server-method)\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows] - Tested in Windows 10 and 10/Pro\r\n- Browser (if applies) [e.g. chrome, safari] - IE, Edge, Chrome\r\n- Version of Next.js: [e.g. 6.0.2] - 9.0.3\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n"},{"labels":["documentation"],"text":"> \"Your `<Link>`'s `as` value is incompatible with the `href` value. This is invalid.\"\r\n\r\nRef: https://spectrum.chat/next-js/general/linking-static-page-routes~a3f0b5f2-397e-4a98-bb95-f98bdf5ddd65\r\n\r\nThis needs a err.sh link explaining how to solve it."},{"labels":["documentation"],"text":"`static` and `api` directories are special too.\r\n\r\nat https://nextjs.org/learn/basics/using-shared-components/the-component-directory\r\n\r\n![image](https://user-images.githubusercontent.com/2733862/62372331-e15c4b00-b53f-11e9-8b13-b14db876d2ef.png)\r\n\r\n\r\n"},{"labels":["documentation"],"text":"We should explain the need for this file.\n\nCloses [a Spectrum thread](https://spectrum.chat/next-js/general/what-is-the-purpose-of-next-env-d-ts~ac4c7ca0-aacb-4bfe-ad23-81315fa040af)."},{"labels":["documentation"],"text":"# Examples bug report\r\n\r\n## Example name\r\n\r\nE1-static-export\r\n\r\n## Describe the bug\r\n\r\nI was following the static export tutorial. On the step to generate the individual post pages, after modifying the next.config.js, when running `npm run export` the generated static .html files all have empty `h1` elements. When loading the index page and using client-based navigation, the titles appear, but only the post body is shown on reload of the post page.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. `git clone https://github.com/zeit/next-learn-demo.git`\r\n2. `npm install`\r\n3. Follow the Export into a Static HTML App [completing the Exporting Other Pages step](https://nextjs.org/learn/excel/static-html-export/exporting-other-pages)\r\n4. `npm run build`\r\n5. `npm run export`\r\n6. `cd out`\r\n7. `serve -p 8080`\r\n\r\n## Expected behavior\r\n\r\nThe titles specified in the next.config.js should have been baked into the static .html files.\r\n\r\n## System information\r\n\r\n- OS: Windows 7\r\n- Version of Next.js: 9.0.2\r\n"},{"labels":["documentation"],"text":"Users have trouble understand how to handle HTTP methods, even though this is normal Node.js HTTP request handling we should document it for ergonomics.\r\n\r\nRef:\r\nhttps://spectrum.chat/next-js/general/restrict-methods-with-next-api-routes~534c1e77-3f93-4bf5-a2ec-74cc3f2d2a6a\r\nhttps://spectrum.chat/next-js/general/post-api-routes~abf984ab-3d6a-46b3-9173-7f1a074f6e0f"},{"labels":["documentation",null],"text":"# Examples bug report\r\n\r\n## Example name\r\n\r\nTypeScript\r\n\r\n## Describe the bug\r\n\r\nDuring the TypeScript example, the instructions are suppose to produce a compile error in the server console because of inaccurate configuration. Then later in the exercise, correct the configuration for the userAgent to successfully display in the browser window. However, using Firefox and Chrome, my userAgent displays correctly the entire time.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Follow the example instructions here:\r\nhttps://nextjs.org/learn/excel/typescript\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## System information\r\n\r\n- OS: Windows 10\r\n- Browser: FireFox Developer Edition 69.0b4 (64-bit)\r\n- Version of Next.js: 9.0.2"},{"labels":[null,"documentation"],"text":"See https://github.com/zeit/next.js/pull/7961#issuecomment-514083852"},{"labels":[null,"documentation"],"text":"# Bug report\r\n\r\nIt was time-consuming and little frustrating to figure out minor adjustments to get Next 9's new routing to play nice with now and now-cli locally.  \r\n\r\n## To Reproduce\r\n\r\nUpdate a production app deployed on now 2 to v9+ and then attempt to use the new dynamic routing.\r\n\r\n## Expected behaviour\r\n\r\nGiven that Now and Next are both published by Zeit, tighter documentation updates, or references with regards to upgrading.\r\n\r\n## Additional context\r\n\r\nWhile I eventually managed, by going through the updated docs, the blog post, the upgrade  / migrate notes, and then the updated examples folder, which was the key.\r\n\r\n1. for others looking for an answer, using @now/next@canary as per the example, and removing your custom routes object, now automatically handles dynamic routes defined in the new way introduced in Next 9.  (ie:  `post/[id]/index.js` `post/[id]/comment.js`)\r\n\r\n2. This isn't just a moan, but a suggestion to sett a policy for updating docs, examples and deployment specifics together with the release.  \r\n\r\nTotally Love NEXT and after a tumultuous 6 months with the upgrade to now 2,  having just got NEXT 9 setup and working, I'm feeling the same zen and hopefulness about js that I felt when I first found NEXT.\r\n"},{"labels":["documentation"],"text":"This is more of an issue with the documentation than the component itself, but the `<Link>` component is very easy to accidentally abuse to create inaccessible markup, as I’ve recently experienced while working with other developers on Next projects.\r\n\r\nIn the [Using a component that supports onClick](https://github.com/zeit/next.js#using-a-component-that-supports-onclick) section, the documentation describes how the `<Link>` component can be used on any element that supports `onClick`, without also pointing out that doing so without appropriate ARIA attributes, styling, and keyboard handlers makes the element inaccessible to assistive technology and keyboard users. There’s a note about `passHref` and SEO, but as currently written it implies that adding `href` to a `<div>` would be a sufficient solution, which isn’t true.\r\n\r\nThe best practice is to use the `<a>` element for **all** links, but sometimes it’s necessary for a specific project to build a custom link with `role=\"link\"` and custom JavaScript, so I understand the utility of ensuring `<Link>` works on non-`<a>`'s. But it should at least attempt to throw a warning when a developer misuses it. For example, if they wrap it around a `<button>` or a `<div>` with no `role`. Even if there are no changes to the Next codebase itself, the documentation should make this pitfall clear to developers."},{"labels":["documentation"],"text":"Reported here: https://twitter.com/sudhirmith/status/1149706325854576640\r\n\r\nhttps://nextjs.org/docs#amp-behavior-with-next-export\r\n\r\nThis section needs to be updated to mention it outputs without the subdirectory as per the new behavior: https://github.com/zeit/next.js/blob/canary/UPGRADING.md#next-export-no-longer-exports-pages-as-indexhtml"},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen I set the value of a `publicRuntimeConfig` property from an environment variable, it is `undefined` when buiding and starting a production bundle. It worked fine with Next.js v8.\r\n\r\n## To Reproduce\r\n\r\n**package.json**\r\n\r\n```\r\n  \"scripts\": {\r\n    \"build\": \"next build\",\r\n    \"dev\": \"TEST_ENV='a value' next\",\r\n    \"start\": \"TEST_ENV='a value' next start\"\r\n  },\r\n  \"dependencies\": {\r\n    \"next\": \"^9.0.0\",\r\n    \"react\": \"^16.8.6\",\r\n    \"react-dom\": \"^16.8.6\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.5.0\"\r\n  }\r\n```\r\n\r\n**.babelrc**\r\n\r\n```\r\n{\r\n    \"presets\": [\r\n        \"next/babel\"\r\n    ]\r\n}\r\n```\r\n\r\n**next.config.js**\r\n\r\n```\r\nmodule.exports = {\r\n  publicRuntimeConfig: {\r\n    TEST_ENV: process.env.TEST_ENV\r\n  }\r\n}\r\n```\r\n\r\n**pages/index.js**\r\n\r\n```\r\nimport getConfig from \"next/config\";\r\n\r\nconst TEST_ENV = getConfig().publicRuntimeConfig.TEST_ENV;\r\n\r\nexport default () => <div>{`TEST_ENV=${TEST_ENV}`}</div>;\r\n```\r\n\r\nThen run:\r\n\r\n```\r\nyarn build && yarn start\r\n```\r\n\r\n## Expected behavior\r\n\r\nWhen running a `yarn build && yarn start`, the `TEST_ENV` value should appear in the index page as it does when downgrading to the version `8.1.0` or when running `yarn dev`.\r\n\r\n"},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nDifferent origin request don't resolve. Error seems to be swallowed.\r\n\r\nSame origin requests to `/api/subscribe` work fine. Different origin requests to `/api/subscribe` return a generic 400 error no matter what I try and log or respond with.\r\n\r\n## To Reproduce\r\n\r\n1. `git clone https://github.com/state-matters/web.git`\r\n2. Check out the `develop` branch\r\n3. `npm install`\r\n4. `npm run start:dev`\r\n5. Go to localhost:3000/subscribe and complete to form\r\n6. Open insomnia and POST to localhost:3000/api/subscribe with the following json\r\n```\r\n{\r\n  \"email\": \"email@email.com\",\r\n  \"first\": \"first\",\r\n  \"last\": \"last\"\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nI would expect to be able to post to `/api/subscribe` from both the same origin and not. It's strange that I'm not able to post outside.\r\n\r\n## System information\r\n\r\n- Version of Next.js: 9.0.0\r\n"},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nThe README contains this line:\r\n\r\n> To serve static files from the root directory you can add a folder called public and reference those files from the root, e.g: /robots.txt.\r\n\r\nHowever #7771 made this feature experimental. It should either be removed from the readme or the experimental flag to enable it should be mentioned.\r\n\r\n## To Reproduce\r\n\r\nRead README (https://github.com/zeit/next.js)\r\n\r\n## Expected behavior\r\n\r\nShould not include experimental features or should mention that the feature is experimental.\r\n\r\n## Screenshots\r\n\r\nN/A\r\n\r\n## System information\r\n\r\nN/A\r\n\r\n## Additional context\r\n\r\nN/A\r\n"},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\nIn the docs it says that \r\n![docs](https://user-images.githubusercontent.com/14829154/60832448-8fd0d280-a1c4-11e9-9303-8a9882b4f1c7.png)\r\n\r\nbut when I tried to use that types for req and res I got this:\r\n![2019-07-08_21-05](https://user-images.githubusercontent.com/14829154/60832474-a0814880-a1c4-11e9-8ee7-b44b6787dd77.png)\r\n\r\n## System information\r\n\r\n- OS: [Linux]\r\n- Browser (if applies) [chrome]\r\n- Version of Next.js: [e.g. 9.0.0]\r\n\r\nOr do I do something incorrectly?\r\n"},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nAfter having upgraded to v9 this morning we noticed that CSP was failing. Upon further investigation, it turned out that `ctx.req` and `ctx.res` were returning `undefined` in `_document.js` (or .ts) when calling `getInitialProps`.\r\n\r\nThis has been reproduced by combining the basic custom-document example as well as the custom-server example.\r\n\r\n## To Reproduce\r\n\r\nhttps://codesandbox.io/s/next9-getinitialprops-bug-f1lj7\r\n\r\n## Expected behavior\r\n\r\n`req` and `res` should have content.\r\n\r\n## Screenshots\r\n\r\nServer logs:\r\n![image](https://user-images.githubusercontent.com/47538444/60831940-bec95300-a188-11e9-8a10-9db79335d396.png)\r\n\r\n## System information\r\n\r\n- OS: MacOS / Linux (codesandbox + node:10-alpine tested)\r\n- server-side issue\r\n- Version of Next.js: 9.0.0\r\n"},{"labels":["documentation",null],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nDynamic route params are not available during SSR or when exporting pages in combination with `useRouter`\r\n\r\n## To Reproduce\r\n\r\n1. Set up the [dynamic routing example](https://github.com/zeit/next.js/tree/canary/examples/dynamic-routing)\r\n2. Add a `console.log(id)` statement to the `/post/[id]/index.js` page.\r\n3. The console output when navigating to /post/first **by clicking a link** is correctly `first`.\r\n4. However, **when reloading** http://localhost:3000/post/first, the console output will be `undefined` and _then_ `first`. Also the SSR'd source will be different from the client-side render.\r\n5. (The same behavior will show on statically exported pages)\r\n\r\n## Expected behavior\r\n\r\n`useRouter` should also return the correct query when running server-side or during export.\r\n\r\nIt should still re-render statically exported pages including additional query params however!\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of Next.js: 9.0.0\r\n"},{"labels":[null,"documentation"],"text":"Hi,\r\nWould like to request for documentation using breakpoint/debugging. \r\nSeems some of the recommended ways on the internets are out of date now (on Spectrum / SO, etc..). \r\nSome documentation from Zeit would be awesome.."},{"labels":["documentation"],"text":"Hi! I've just started reading the docs. This link is broken (missing):\r\n\r\n![Screen Shot 2019-03-13 at 08 03 01](https://user-images.githubusercontent.com/20521892/54263378-9b8af000-4568-11e9-9a8f-49fed316b740.png)\r\n\r\n\r\nI think it's important because it's the very first basic example provided in the documentation and this can drive people away. "},{"labels":["documentation"],"text":"Could you please add api reference to the documentation with a detailed description of each method for each entity? To go through the documentation without the ability to see immediately available api, spoils the blood.\r\nAs here https://reactjs.org/docs/react-api.html or here https://vuejs.org/v2/api/\r\nAttempting to sort out and collect piece of information from the documentation, learn, and source code and types, spends a lot of time"},{"labels":["documentation"],"text":"# Bug report\r\n\r\n## Describe the bug\r\n\r\nSetting the config distDir to a directory outside your Next project causes page titles to render in the browser and not server side.\r\n\r\n## To Reproduce\r\n\r\nI cloned the material-ui next esample to reproduce this but its not necessary:\r\nhttps://github.com/mui-org/material-ui/tree/master/examples/nextjs\r\n\r\nIf you make a simple Next app with a custom _app.js and _document.js and pages/index.js you can test this (those files may not even be needed honestly). make a next.config.js and set the distDir to some directory outside the Next project directory:\r\n\r\n// next.config.js\r\n```\r\nmodule.exports = {distDir: '../functions/next'};\r\n\r\n```\r\n\r\ncopy all your Next dependencies into that directory and run npm install. Go back to your Next directory and build your next app. change the head in a few places and test it out, it will never server side render your page titles.\r\n\r\n\r\n## Expected behavior\r\nPage titles should always be server side rendered if possible, regardless of the distDir config\r\n\r\n## Screenshots\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n - Version of Next.js: 7.0.2\r\n\r\n## Additional context\r\n"},{"labels":[null,"documentation"],"text":"# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nThere's quite a bit of confusion on how Next.js handles routing as is slightly different from most routing frameworks out there. The reason for this is that Next.js by design has a constraint that we won't ship a routes manifest of every possible route in the application.\r\n\r\n## Describe the solution you'd like\r\n\r\nI've written a pretty complete comment about how `<Link>` works with custom parameters etc. It can be found here: https://github.com/zeit/next.js/issues/2833#issuecomment-414919347\r\n\r\nMost of that comment can be used in the docs.\r\n"},{"labels":["documentation"],"text":"Filed using the bug report template as there is no issue template for documentation/website issues (maybe there should be an issue for that)\r\n\r\n## Describe the bug\r\nThere is currently no real documentation for `next/router`, the closest thing is a brief section that is for some reason located under https://nextjs.org/docs/#intercepting-popstate \r\n\r\n## To Reproduce\r\n1. Look for documentation on usage of `next/router`\r\n2. Notice there is no documentation on the full API and usage of `next/router`\r\n\r\n## Expected behavior\r\nThere is documentation on the full API and usage of `next/router`\r\n\r\n"},{"labels":["documentation"],"text":"> Currently it doesn't explain what Component and Container do, and what props they take, if any.\r\n\r\n#4145"},{"labels":["documentation"],"text":"Hi,\r\n\r\nCould you recommend us the best practices to deploy applications in production with nextjs?\r\n\r\nWe are thinking in strategies like: canary deployment, blue/green deployment... We have several doubts to handle BUILD_ID.\r\n\r\nRight now, with this kind of strategies we are facing with this error: INVALID_BUILD_ID, because in some moment of the deployment we have at least two different versions of the application.\r\n\r\nfor example:\r\n\r\nOn a Canary deployment, at one point we have 2 differents versions, The balancer send a client to \r\nversion A, but then when the client need other resources, the balancer could send this request to a \r\nserver with version B. At this point the client receive an 500 error when the app fetch resources like serp.js, _error.js, _document.js, and the webpage is not loaded correctly.\r\n\r\n\r\n_next/f6bff019-9550-4029-99fa-2b33a50045f6/page/index.js  ---> old (previous deployment)\r\n\r\n_next/005b2202-c5b2-4de6-afd8-1c8451d16ab3/page/index.js  ---> new (current deployment)\r\n\r\n\r\nUntil now, we have tested:\r\n\r\n1. Rename the BUILD_ID to have the same hash in both versions, but we think is a bad practice, because we think that the client's cache will not be refreshed how is expected.\r\n2. Sticky sessions is the most reliable, but we are handle a stateless app as an app with state, and really is not true.\r\n3. We could put on front a CDN that caches the BUILD_ID, but we are not sure that the time we should assign for the cache of the js files.\r\n\r\nKind regards,"},{"labels":[null,"documentation"],"text":"It is not clear how to effectively optimise the usage and bundling of many assets within a next.js application. Typically webpack offers great power around this as you can use various loader chains to reference, load and optimise assets in place. Since the docs say to avoid adding webpack loaders when manipulating the configuration it isn't so obvious how we should go about managing assets and optimisation of those assets in an efficient manner.\r\n\r\nThere are two main parts that I see which I would love to see solutions and documentation for:\r\n\r\n1. How do we avoid having to maintain a large global assets folder as opposed to keeping assets close to where they are actually needed? I've seen the babel-plugin suggestion however it strikes me as counter-intuitive that a babel plugin is hitting the filesystem and especially emitting new files. This seems absolutely like the job for the bundler and/or framework (what I see next.js as). *This also has the caveat that it only works for imports from js modules whereas the power we get from webpack to have any file references (ie. css `url()`) detected and managed within the dependency graph is a huge win.*\r\n2. How should we optimise these assets when building or developing a next.js application?\r\n\r\nIs it on the roadmap to improve the asset management story of next.js? The more decisions about this stuff that can be moved away from user code (great example being needing to prefix CDN urls manually) the better."},{"labels":["documentation"],"text":"In Slack and in issues there comes repeatedly the question of how to do stuff differently server-side vs. client-side. I added a note in Wiki related to this: https://github.com/zeit/next.js/wiki/FAQ but it's obviously not clear enough.\r\n\r\nI think it would be nice to add to README:\r\n- that e.g in `getInitialProps` you can use `process.browser` var to check where you are (which AFAIK is better than `!!ctx.req` because this one still returns `true` on the first client-side render...?)\r\n- that `componentDidMount` only runs client-side, so can add client-only code there. More generally, precise which React lifecycle methods are client-only.\r\n- or suggest to use something like <NoSSR> component in render, or other libraries which render server-side only above-the-fold (link to examples, e.g https://github.com/zeit/next.js/tree/master/examples/progressive-render?)\r\n- note that these should hopefully be exceptions, and it's nice to strive for code which is as universal as possible"},{"labels":["documentation"],"text":"A quick brain dump of all the questions that arose while getting started with `next.js`. Some of these might be answered already and I just haven't looked hard enough. \r\n\r\n## How `next.js` improves performance\r\nAs I see it a major responsibility of the `next.js` build process and server is performance improvements.\r\nSome are documented and some not and there doesn't seem to be a central place to look up all that is done.\r\n\r\nI'd like to see a comprehensive list (possibly with reasoning and resources) of all the steps the build process and server takes inherently (e.g. compression, HTTP headers, minification, code splitting, etc.). And also steps it doesn't take (yet), pitfalls and configuration/extensions that the end user might have to implement by themselves. The Wiki might be a good place for such a list.\r\n\r\n## Configuration File\r\nThe `README.md`'s [custom configuration](https://github.com/zeit/next.js#custom-configuration) section seems incomplete in terms of describing what keys the exported object from `next.config.js` accepts. Based on present documentation there is only one key `webpack`. Is that all there is for the moment?\r\n\r\n## Programmatic API\r\nA start to document `next.js`' programmatic API is taken in section [Custom server and routing](https://github.com/zeit/next.js#custom-server-and-routing) of `README.md`. What I'm missing is proper documentation for instance methods like `getRequestHandler()`, `render()` etc.\r\n\r\n---\r\n\r\nI'm more than happy to help with improvements but would like some suggestions and pointers from somebody more familiar with the matter. Also maybe the community has more points to add to the list.\r\n\r\n> Documentation is like sex: when it is good, it is very, very good; and when it is bad, it is better than nothing."}]