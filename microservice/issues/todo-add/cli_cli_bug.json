[{"labels":["bug"],"text":"### Describe the bug\r\n\r\nI just installed `gh` on my work machine using Homebrew, and no commands are returning output for me. It works just fine on my personal machine though. I'm not sure how to go about getting more information for this bug report since I can't get any output.\r\n\r\nThis easily could just be something wrong with my machine's configuration, but without any error diagnostics from `gh`, it's hard to figure that out 😔\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `brew install gh`\r\n2. Try any command\r\n3. Nothing is printed out\r\n\r\n### Expected vs actual behavior\r\n\r\nNo `gh` commands are working even though I successfully installed `gh`. Expected to see output.\r\n\r\n### Logs\r\n\r\n```\r\n$ brew install gh\r\n==> Downloading https://homebrew.bintray.com/bottles/gh-1.0.0.catalina.bottle.tar.gz\r\n==> Downloading from https://d29vzk4ow07wi7.cloudfront.net/77b42bd6b610134ee3b407304a816ddbbcb03a38b527dbd00c25df74a3623606?response-content-disposition=attachment%3Bfilename%3D%22gh-1.0.0.catalina.bottle.tar.gz%22&Policy=eyJTdGF0ZW1lbnQiOiBbeyJSZXNvdXJjZSI6Imh0dHAqOi8vZD\r\n######################################################################## 100.0%\r\n==> Pouring gh-1.0.0.catalina.bottle.tar.gz\r\n==> Caveats\r\nBash completion has been installed to:\r\n  /usr/local/etc/bash_completion.d\r\n\r\nzsh completions have been installed to:\r\n  /usr/local/share/zsh/site-functions\r\n==> Summary\r\n🍺  /usr/local/Cellar/gh/1.0.0: 60 files, 16.2MB\r\n$ gh\r\n$ gh\r\n$ gh repo\r\n$ gh -h\r\n$ brew install gh\r\nWarning: gh 1.0.0 is already installed and up-to-date\r\nTo reinstall 1.0.0, run `brew reinstall gh`\r\n$ brew reinstall gh\r\n==> Downloading https://homebrew.bintray.com/bottles/gh-1.0.0.catalina.bottle.tar.gz\r\nAlready downloaded: /Users/sfriedman/Library/Caches/Homebrew/downloads/69182b34d20e61d9730f79b34bb788b5d9871baf8e2b45d6c29cdc4f1a67b5ec--gh-1.0.0.catalina.bottle.tar.gz\r\n==> Reinstalling gh\r\n==> Pouring gh-1.0.0.catalina.bottle.tar.gz\r\n==> Caveats\r\nBash completion has been installed to:\r\n  /usr/local/etc/bash_completion.d\r\n\r\nzsh completions have been installed to:\r\n  /usr/local/share/zsh/site-functions\r\n==> Summary\r\n🍺  /usr/local/Cellar/gh/1.0.0: 60 files, 16.2MB\r\n$ gh -h\r\n$ which gh\r\n/usr/local/bin/gh\r\n```\r\n"},{"labels":["bug",null,null],"text":"I believe `gh pr status` redirects output into `less` doesn't providing coloring instead writes ascii characters. How can I fix it? can I also redirect it into `emacs` ? Please note that even my `EDITOR` variable is `emacsclient -t`, `less` is considered.\r\n\r\n```\r\n$ gh pr status\r\n\r\nRelevant pull requests in ebloc/eBlocBroker\r\n\r\n^[[0;1;39mCurrent branch\r\n^[[38;5;242m  There is no pull request associated with [master]\r\n\r\n^[[0;1;39mCreated by you\r\n^[[38;5;242m  You have no open pull requests\r\n\r\n^[[0;1;39mRequesting a code review from you\r\n^[[38;5;242m  You have no pull requests to review\r\n```"},{"labels":["bug",null],"text":"When inside a git repo where HEAD is not attached to a branch, I want to now check out a PR:\r\n\r\n```\r\ngh pr checkout 559\r\ncould not determine current branch: git: not on any branch\r\n```\r\n\r\nWhy in the world shouldn't I be able to check out a PR without first checking out some random branch?"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\nWhen creating an issue through the github CLI, you get the opportunity to select an issue template.\r\nThis issue template should also assign labels. if applicable as it does on the website, however the CLI does not do this.\r\n\r\n```\r\ngh version 1.0.0 (2020-09-16)\r\nhttps://github.com/cli/cli/releases/tag/v1.0.0\r\n```\r\n### Steps to reproduce the behavior\r\n\r\n1. Enter command `gh issue create` for a repo that has an issue template\r\n2. Select issue template that assigns labels to an issue\r\n3. Fill out the expected fields as you would on the website\r\n4. Create the issue\r\n5. View the issue on the website, and see no label has been added\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected:\r\nI expect that the label is added to the issue, when creating an issue from a template, that normally would assign labels to the issue.\r\n\r\nActual:\r\nNo label was added to the issue, and it has to be done manually\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n\r\n\r\n### Edit\r\nThis issue was not created using the GH CLI\r\n"},{"labels":["bug"],"text":"\r\n\r\nAt the bottom of the page \r\n![image](https://user-images.githubusercontent.com/58238450/93730742-ef33bc00-fb97-11ea-806f-8390e7f74329.png)\r\nIt says download for windows, I'm pretty sure it should be download for macOS as it's a msi file.\r\n\r\n\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n#1871 "},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nI have a workflow where I work on a branch (e.g. `document-feature-flags-GH-401`) locally and add a prefix when pushing it to GitHub (e.g. `opdavies-document-feature-flags-GH-401`). This means that in most cases, my local branch name does not match the remote branch name, but the local branch is tracking the remote branch.\r\n\r\nFor example, if I run `git branch -vv`:\r\n\r\n```\r\ndocument-feature-flags-GH-401          24849ad69 [origin/opdavies-document-feature-flags-GH-401] Document the use of feature flags\r\n```\r\n\r\nIn this situation, the CLI currently assumes that the remote branch name is `document-feature-flags-GH-401`, and not the remote tracking branch name. This could be solved by making this the default behaviour and checking for the remote branch's name when creating the PR, or by allowing the option to specify the branch name using an argument similar to `--base` for the base branch.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create a branch (e.g. `test`)\r\n1. Push it to GitHub using a different name (`git push -u test:test2`)\r\n3. Run `gh pr create` and see that it uses the local branch name rather than the remote one\r\n\r\n        Creating pull request for test into develop\r\n\r\n### Expected vs actual behavior\r\n\r\nUse the remote tracking branch name rather than the local one.\r\n\r\n### Logs\r\n\r\n```\r\n~/Code/clients/xxx test [24849ad69] * $ git push origin -u test:test2\r\nTotal 0 (delta 0), reused 0 (delta 0)\r\nremote: \r\nremote: Create a pull request for 'test2' on GitHub by visiting:\r\nremote:      https://github.com/odwd/xxx/pull/new/test2\r\nremote: \r\nTo github.com:odwd/xxx.git\r\n * [new branch]          test -> test2\r\nBranch 'test' set up to track remote branch 'test2' from 'origin' by rebasing.\r\n                                                                                                                                                                                           \r\n~/Code/clients/xxx test [24849ad69] * $ gh pr create                 \r\nWarning: 1 uncommitted change\r\n\r\nCreating pull request for test into develop in odwd/xxx\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n![image](https://user-images.githubusercontent.com/4723091/93720369-64be6e80-fb3d-11ea-977a-1efdca2b5146.png)\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Install fish completions `gh completion --shell fish > ~/.config/fish/completions/gh.fish` & restart fish\r\n2. Type `gh t` (or something else that will have no results)\r\n3. Tab\r\n\r\n### Expected vs actual behavior\r\n\r\nIt should, you know, not error horribly like it does now.\r\n\r\n### Logs\r\n\r\nWith a single underscore:\r\n\r\n```\r\n0 LoganDark ~ gh _Array index out of bounds\r\n~/.config/fish/completions/gh.fish (line 20):     set comps $results[1..-2]\r\n                                                                        ^\r\nin function '__gh_perform_completion'\r\n\tcalled on line 54 of file ~/.config/fish/completions/gh.fish\r\n\twith parameter list 'gh _'\r\n\r\nin command substitution\r\n\tcalled on line 52 of file ~/.config/fish/completions/gh.fish\r\n\r\nin function '__gh_prepare_completions'\r\n\tcalled on standard input\r\n\r\nin command substitution\r\n\tcalled on standard input\r\n\r\nArray index out of bounds\r\n~/.config/fish/completions/gh.fish (line 23):     set --global __gh_comp_results $results[1..-2]\r\n                                                                                             ^\r\nin function '__gh_prepare_completions'\r\n\tcalled on standard input\r\n\r\nin command substitution\r\n\tcalled on standard input\r\n\r\n(standard_in) 1: parse error\r\n(standard_in) 1: parse error\r\ntest: Missing argument at index 2\r\n(standard_in) 1: parse error\r\n(standard_in) 1: parse error\r\n(standard_in) 1: parse error\r\n(standard_in) 1: parse error\r\ntest: Missing argument at index 2\r\n```\r\n\r\nI can see `gh __complete c` and `gh __complete t` both work fine (first one returns results, second one doesn't). But the completion script doesn't handle that correctly it seems."},{"labels":["bug"],"text":"# Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n## Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### ###Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n# Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen running `gh pr view --repo realm/SwiftLint` or `gh pr view -R realm/SwiftLint`, the argument is not recognized. I get the error message:\r\n\r\n```\r\nargument required when using the --repo flag\r\n\r\nUsage:  gh pr view [<number> | <url> | <branch>] [flags]\r\n\r\nFlags:\r\n  -w, --web   Open a pull request in the browser\r\n```\r\n\r\ngh version 1.0.0 (2020-09-16)\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Run `gh pr show --repo realm/SwiftLint`\r\n1. Receive an unexpected error message: `argument required when using the --repo flag`.\r\n\r\nI had already set the repo to my `sethfri/SwiftLint` fork before running into this issue, which I was prompted to set the first time I ran `gh pr view`. I'm not sure if that's necessary to reproduce the bug, as I'm not sure how to reset my repo without the command working.\r\n\r\n### Expected vs actual behavior\r\n\r\nI expected the command to take in `realm/SwiftLint` as the repo argument, but it does not seem to recognize it.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n\r\n```\r\n$ gh pr view\r\n? Which should be the base repository (used for e.g. querying issues) for this directory? sethfri/SwiftLint\r\nno open pull requests found for branch \"master\"\r\n$ gh pr view\r\nno open pull requests found for branch \"master\"\r\n$ gh pr view -h\r\nDisplay the title, body, and other information about a pull request.\r\n\r\nWithout an argument, the pull request that belongs to the current branch\r\nis displayed.\r\n\r\nWith '--web', open the pull request in a web browser instead.\r\n\r\n\r\nUSAGE\r\n  gh pr view [<number> | <url> | <branch>] [flags]\r\n\r\nFLAGS\r\n  -w, --web   Open a pull request in the browser\r\n\r\nINHERITED FLAGS\r\n      --help              Show help for command\r\n  -R, --repo OWNER/REPO   Select another repository using the OWNER/REPO format\r\n\r\nLEARN MORE\r\n  Use 'gh <command> <subcommand> --help' for more information about a command.\r\n  Read the manual at https://cli.github.com/manual\r\n\r\n$ gh pr view -R realm/SwiftLint\r\nargument required when using the --repo flag\r\n\r\nUsage:  gh pr view [<number> | <url> | <branch>] [flags]\r\n\r\nFlags:\r\n  -w, --web   Open a pull request in the browser\r\n\r\n$ gh pr view --repo realm/SwiftLint\r\nargument required when using the --repo flag\r\n\r\nUsage:  gh pr view [<number> | <url> | <branch>] [flags]\r\n\r\nFlags:\r\n  -w, --web   Open a pull request in the browser\r\n\r\n$ gh pr view --repo \"realm/SwiftLint\"\r\nargument required when using the --repo flag\r\n\r\nUsage:  gh pr view [<number> | <url> | <branch>] [flags]\r\n\r\nFlags:\r\n  -w, --web   Open a pull request in the browser\r\n\r\n$ gh pr view --repo realm/SwiftLint\r\nargument required when using the --repo flag\r\n\r\nUsage:  gh pr view [<number> | <url> | <branch>] [flags]\r\n\r\nFlags:\r\n  -w, --web   Open a pull request in the browser\r\n```"},{"labels":["bug"],"text":"### Describe the bug\n\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\n\n### Steps to reproduce the behavior\n\n1. Type this '...'\n2. View the output '....'\n3. See error\n\n### Expected vs actual behavior\n\nA clear and concise description of what you expected to happen and what actually happened.\n\n### Logs\n\nPaste the activity from your command line. Redact if needed.\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nPackaging for Alpine Linux, using go=1.15.2-r0 with musl libc\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `go test -v ./...`\r\n\r\nAPKBUILD to reproduce:\r\n\r\n```sh\r\n# Contributor: Leo <thinkabit.ukim@gmail.com>\r\n# Maintainer: Leo <thinkabit.ukim@gmail.com>\r\npkgname=github-cli\r\npkgver=1.0.0\r\npkgrel=0\r\npkgdesc=\"CLI for dealing with GitHub\"\r\noptions=\"net chmod-clean\" # Need to fetch modules and clean them up\r\nurl=\"https://cli.github.com\"\r\narch=\"all !mips !mips64\"\r\nlicense=\"MIT\"\r\ndepends=\"git\"\r\nmakedepends=\"go\"\r\nsubpackages=\"\r\n\t$pkgname-doc\r\n\t$pkgname-bash-completion\r\n\t$pkgname-zsh-completion\r\n\t$pkgname-fish-completion\r\n\t\"\r\nsource=\"https://github.com/cli/cli/archive/v$pkgver/github-cli-$pkgver-$pkgver.tar.gz\"\r\nbuilddir=\"$srcdir/cli-$pkgver\"\r\n\r\nbuild() {\r\n\tCGO_CPPFLAGS=\"$CPPFLAGS\" \\\r\n\tCGO_CFLAGS=\"$CFLAGS\" \\\r\n\tCGO_CXXFLAGS=\"$CXXFLAGS\" \\\r\n\tCGO_LDFLAGS=\"$LDFLAGS\" \\\r\n\t\\\r\n\tmake GH_VERSION=\"v$pkgver\" bin/gh manpages\r\n\tbin/gh completion -s bash | install -Dm0644 /dev/stdin \\\r\n\t\tshare/bash-completion/completions/gh\r\n\tbin/gh completion -s zsh | install -Dm0644 /dev/stdin \\\r\n\t\tshare/zsh/site-functions/_gh\r\n\tbin/gh completion -s fish | install -Dm0644 /dev/stdin \\\r\n\t\tshare/fish/completions/gh.fish\r\n}\r\n\r\ncheck() {\r\n\tgo test -v ./...\r\n}\r\n\r\npackage() {\r\n\tinstall -Dm755 bin/gh \"$pkgdir\"/usr/bin/gh\r\n\r\n\tmkdir -p \"$pkgdir\"/usr\r\n\tcp -r share \"$pkgdir\"/usr\r\n}\r\n\r\nsha512sums=\"c4b9c041ff8e63551ea6d94ec65017f8d264bc5b5c5b70b0525fcaea672c34f5e6aa57d096decef35891fb8d51a732c15835b0354e712b9dda353b7c869988c4  github-cli-1.0.0-1.0.0.tar.gz\"\r\n```\r\n### Expected vs actual behavior\r\n\r\nThat it passes\r\n\r\n### Logs\r\n\r\n```\r\n=== RUN   Test_typeForFilename\r\n=== RUN   Test_typeForFilename/ball.tar\r\n    upload_test.go:65: typeForFilename() = application/octet-stream, want application/x-tar\r\n=== RUN   Test_typeForFilename/ball.tgz\r\n=== RUN   Test_typeForFilename/ball.tar.gz\r\n=== RUN   Test_typeForFilename/ball.tar.bz2\r\n=== RUN   Test_typeForFilename/archive.zip\r\n=== RUN   Test_typeForFilename/app.js\r\n=== RUN   Test_typeForFilename/apple.dmg\r\n=== RUN   Test_typeForFilename/package.rpm\r\n=== RUN   Test_typeForFilename/package.deb\r\n=== RUN   Test_typeForFilename/myfile\r\n--- FAIL: Test_typeForFilename (0.00s)\r\n    --- FAIL: Test_typeForFilename/ball.tar (0.00s)\r\n    --- PASS: Test_typeForFilename/ball.tgz (0.00s)\r\n    --- PASS: Test_typeForFilename/ball.tar.gz (0.00s)\r\n    --- PASS: Test_typeForFilename/ball.tar.bz2 (0.00s)\r\n    --- PASS: Test_typeForFilename/archive.zip (0.00s)\r\n    --- PASS: Test_typeForFilename/app.js (0.00s)\r\n    --- PASS: Test_typeForFilename/apple.dmg (0.00s)\r\n    --- PASS: Test_typeForFilename/package.rpm (0.00s)\r\n    --- PASS: Test_typeForFilename/package.deb (0.00s)\r\n    --- PASS: Test_typeForFilename/myfile (0.00s)\r\nFAIL\r\nFAIL\tgithub.com/cli/cli/pkg/cmd/release/shared\t0.027s\r\n?   \tgithub.com/cli/cli/pkg/cmd/release/upload\t[no test files]\r\n```\r\n\r\nMore specifically:\r\n\r\n```\r\n=== RUN   Test_typeForFilename/ball.tar\r\n    upload_test.go:65: typeForFilename() = application/octet-stream, want application/x-tar\r\n```"},{"labels":["bug"],"text":"### Describe the bug\n\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\n\n### Steps to reproduce the behavior\n\n1. Type this '...'\n2. View the output '....'\n3. See error\n\n### Expected vs actual behavior\n\nA clear and concise description of what you expected to happen and what actually happened.\n\n### Logs\n\nPaste the activity from your command line. Redact if needed.\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nIf you clone e.g. https://github.com/HackSoc/uno by typing `gh repo clone hacksoc/uno`, then the remote URL will refer to `hacksoc/uno.git` when it should be capitalised as `HackSoc/uno.git`. This means that GitHub will complain at you when you push:\r\n\r\n```\r\nremote: This repository moved. Please use the new location:\r\nremote:   git@github.com:HackSoc/uno.git\r\n```\r\n\r\n```console\r\n$ gh --version\r\ngh version 1.0.0 (2020-09-16)\r\nhttps://github.com/cli/cli/releases/tag/v1.0.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Clone a repo via `gh repo clone` with uncanonical capitalisation\r\n2. Observe that the remote that gets configured has the same uncanonical capitalisation\r\n\r\n### Expected vs actual behavior\r\n\r\n`gh` should use the canonical capitalisation for remote URLs, regardless of the capitalisation used in the shorthand `username/repo` input."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThis is not about the GitHub CLI. This is about the MSI installer for the 64-bit version of GitHub CLI.\r\n\r\nGitHub CLI version: 1.0.0\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Using the 64-bit version of Windows and download the MSI for 64-bit\r\n2. Open the MSI file and going through every setup phrases\r\n3. The default installation location sets to \"C:\\Program Files (x86)\\GitHub CLI\", not  \"C:\\Program Files\\GitHub CLI\".\r\n\r\n### Expected vs actual behavior\r\n\r\nThe MSI file expected to be 64-bit since the `gh` executable which included in the installation is 64-bit executable, but the MSI file was actually 32-bit, so the default installation location sets to Program Files (x86).\r\n"},{"labels":["bug"],"text":"gh version 1.0.0 (2020-09-16)\r\n\r\nSetup: a \"bare\" git repository with multiple remotes and multiple git worktrees. For example: both https://github.com/llvm/llvm-project and https://github.com/apple/llvm-project\r\n\r\nProblem: Unlike similar git workflows, `gh` asks the user to pick a \"base repository\" which is tied to the bare repository, not branches nor worktrees.\r\n\r\nWorkaround: create a wrapper around `gh` that tries to set `GH_REPO` as needed. In short, the script will extract the GitHub URL from git and pass it to gh: `git config remote.$(git config branch.$(git branch --show-current).remote).url`\r\n\r\nFinally, and unless I missed something, the \"base repository\" feature seems undocumented.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nExecuting the command ``make`` produces an error (look below). My Go version is 1.11.2.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Execute the command ``make``.\r\n\r\n### Expected vs actual behavior\r\n\r\nNo error should occur.\r\n\r\n### Logs\r\n\r\n```Bash\r\n$ make\r\ngo: finding github.com/stretchr/testify v1.2.1\r\ngo: finding github.com/mgutz/ansi v0.0.0-20170206155736-9520e82c474b\r\ngo: finding github.com/Netflix/go-expect v0.0.0-20180615182759-c93bf25de8e8\r\ngo: finding github.com/kr/pty v1.1.4\r\ngo: finding github.com/prometheus/tsdb v0.7.1\r\ngo: finding github.com/go-logfmt/logfmt v0.4.0\r\ngo: finding github.com/hinshun/vt10x v0.0.0-20180616224451-1954e6464174\r\ngo: finding github.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90\r\ngo: finding github.com/golang/protobuf v1.2.0\r\ngo: golang.org/x/tools@v0.0.0-20180917221912-90fa682c2a6e: unrecognized import path \"golang.org/x/tools\" (https fetch: Get https://golang.org/x/tools?go-get=1: net/http: TLS handshake timeout)\r\ngo: finding github.com/beorn7/perks v1.0.0\r\ngo: finding github.com/mattn/go-isatty v0.0.8\r\ngo: finding golang.org/x/net v0.0.0-20181220203305-927f97764cc3\r\ngo: finding gopkg.in/resty.v1 v1.12.0\r\ngo: finding github.com/davecgh/go-spew v1.1.1\r\ngo: finding golang.org/x/sys v0.0.0-20190530182044-ad28b68e88f1\r\ngo: finding github.com/prometheus/common v0.4.0\r\ngo: finding github.com/ghodss/yaml v1.0.0\r\ngo: finding github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b\r\ngo: finding github.com/mattn/go-colorable v0.1.2\r\ngo: finding github.com/kr/pretty v0.1.0\r\ngo: finding google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8\r\ngo: finding golang.org/x/crypto v0.0.0-20190530122614-20be4c3c3ed5\r\ngo: finding gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127\r\ngo: finding github.com/opentracing/opentracing-go v1.1.0\r\ngo: finding github.com/golang/protobuf v1.3.1\r\ngo: finding golang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8\r\ngo: finding golang.org/x/net v0.0.0-20190522155817-f3200d17e092\r\ngo: finding github.com/fatih/color v1.7.0\r\ngo: finding github.com/rogpeppe/fastuuid v0.0.0-20150106093220-6724a57986af\r\ngo: finding gopkg.in/yaml.v2 v2.0.0-20170812160011-eb3733d160e7\r\ngo: finding github.com/prometheus/procfs v0.0.0-20190507164030-5867b95ac084\r\ngo: finding golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3\r\ngo: finding google.golang.org/grpc v1.19.0\r\ngo: google.golang.org/genproto@v0.0.0-20180817151627-c66870c02cf8: git fetch -f origin refs/heads/*:refs/heads/* refs/tags/*:refs/tags/* in /app/go/pkg/mod/cache/vcs/26a87f1f98bf8dc5c7cc993ae482130124a209733b26a31049fb271506456a24: exit status 128:\r\n        fatal: write error: No space left on device\r\n        fatal: index-pack failed\r\ngo: error loading module requirements\r\nflag provided but not defined: -trimpath\r\nusage: go build [-o output] [-i] [build flags] [packages]\r\nRun 'go help build' for details.\r\nMakefile:30: recipe for target 'bin/gh' failed\r\nmake: *** [bin/gh] Error 2\r\n```\r\n"},{"labels":[null,"bug",null],"text":"When logging into an GitHub Enterprise server with a command like:\r\n`gh auth login --hostname github.mydomain.com`\r\n\r\nAnd then choosing to supply a token, the \"tip\" displayed is:\r\n```\r\nTip: you can generate a Personal Access Token here https://github.com/settings/tokens\r\n```\r\n\r\nInstead of `github.com`, this should use the hostname supplied."},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n```\r\ngh version 1.0.0 (2020-09-16)\r\nhttps://github.com/cli/cli/releases/tag/v1.0.0\r\n```\r\n\r\nWhen using the `gh repo view` command in iTerm2 and the mac Terminal app it shows it with navigation working using the arrow keys. Clicking down scrolls the README.d\r\n\r\n![image](https://user-images.githubusercontent.com/11860880/93651403-bead2000-f9e7-11ea-8162-47fc91c789b9.png)\r\n![image](https://user-images.githubusercontent.com/11860880/93651432-d08ec300-f9e7-11ea-82e4-cf8727d2d058.png)\r\n\r\nBut if I do the same inside of the vscode integrated terminal the scrolling doesn't work\r\n\r\n![image](https://user-images.githubusercontent.com/11860880/93651460-e9977400-f9e7-11ea-9c3d-18ba1bd84af3.png)\r\n\r\n`^[OB` appears every time I click on the down arrow.\r\n\r\nI tried running this with `zsh` without any config and the same happens.\r\nDidn't know if I should open the ticket here or in vscode.\r\nOpened here since other scrolling programs work in both (like raw `less`).\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Open a small integrated terminal in viscose\r\n2. Run `gh repo view`\r\n3. Try to scroll\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect to scroll the README\r\n\r\n### Logs\r\n\r\n```\r\ngh repo view\r\n# push down arrow\r\n```\r\n\r\n"},{"labels":["bug"],"text":"There appears to be a missing space in the subject line in `gh` when carrying it to github.com\r\n\r\nI highlighted the space in .com and here it is compared to CLI:\r\n![Screen Shot 2020-09-18 at 12 26 20 PM](https://user-images.githubusercontent.com/14828183/93650856-5a6c6b00-f9ab-11ea-83df-7ca3b8d55377.png)\r\n\r\nConsole logs show a space:\r\n![Screen Shot 2020-09-18 at 12 26 45 PM](https://user-images.githubusercontent.com/14828183/93650858-5b9d9800-f9ab-11ea-9b3b-c42648d4874c.png)\r\n\r\nv1.0.0, OSX"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nWhen trying to create a Pull Request through `gh pr create`, I run into the following error:\r\n```\r\npull request create failed: GraphQL error: Head sha can't be blank, Base sha can't be blank, No commits between master and conftest-app-metrics, Head ref must be a branch\r\n```\r\n\r\n```\r\ngh version 1.0.0 (2020-09-16)\r\nhttps://github.com/cli/cli/releases/tag/v1.0.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Fork a repo\r\n2. Clone and set origin and upstream\r\n3. Create a branch and commit some changes\r\n4. Run the following: `gh pr create --fill`\r\n\r\n### Expected vs actual behavior\r\n\r\nI would have expected to see the PR created. Instead it results in the following error message.\r\n```\r\npull request create failed: GraphQL error: Head sha can't be blank, Base sha can't be blank, No commits between master and conftest-app-metrics, Head ref must be a branch\r\n```\r\n\r\n### Logs\r\n\r\n```\r\n$ DEBUG=api gh pr create --fill                                                                     \r\n[git remote -v]                                                  \r\n[git config --get-regexp ^remote\\..*\\.gh-resolved$]\r\n* Request at 2020-09-18 16:23:58.899000113 -0600 MDT m=+0.032056143\r\n* Request to https://api.github.com/graphql\r\n> POST /graphql HTTP/1.1\r\n> Host: api.github.com\r\n> Accept: application/vnd.github.antiope-preview+json\r\n> Authorization: token \r\n> Content-Type: application/json; charset=utf-8\r\n> User-Agent: GitHub CLI 1.0.0\r\n\r\n{\r\n    \"query\": \"\\n\\tquery RepositoryInfo($owner: String!, $name: String!) {\\n\\t\\trepository(owner: $owner, name: $name) {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\towner { login }\\n\\t\\t\\thasIssuesEnabled\\n\\t\\t\\tdescription\\n\\t\\t\\tviewerPermission\\n\\t\\t\\tdefaultBranchRef {\\n\\t\\t\\t\\tname\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\",\r\n    \"variables\": {\r\n        \"name\": \"bitly\",\r\n        \"owner\": \"bitly\"\r\n    }\r\n}\r\n< HTTP/1.1 200 OK\r\n< Access-Control-Allow-Origin: *\r\n< Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset\r\n< Cache-Control: no-cache\r\n< Content-Security-Policy: default-src 'none'\r\n< Content-Type: application/json; charset=utf-8\r\n< Date: Fri, 18 Sep 2020 22:24:36 GMT\r\n< Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin\r\n< Server: GitHub.com\r\n< Status: 200 OK\r\n< Strict-Transport-Security: max-age=31536000; includeSubdomains; preload\r\n< Vary: Accept-Encoding, Accept, X-Requested-With\r\n< X-Accepted-Oauth-Scopes: repo\r\n< X-Content-Type-Options: nosniff\r\n< X-Frame-Options: deny\r\n< X-Github-Media-Type: github.antiope-preview; format=json\r\n< X-Github-Request-Id: \r\n< X-Oauth-Client-Id: \r\n< X-Oauth-Scopes: gist, read:org, repo\r\n< X-Ratelimit-Limit: 5000\r\n< X-Ratelimit-Remaining: 4951\r\n< X-Ratelimit-Reset: 1600469053\r\n< X-Ratelimit-Used: 49\r\n< X-Xss-Protection: 1; mode=block\r\n\r\n{\r\n    \"data\": {\r\n        \"repository\": {\r\n            \"id\": \"MDEwOlJlcG9zaXRvcnkxNzYxMDE4\",\r\n            \"name\": \"bitly\",\r\n            \"owner\": {\r\n                \"login\": \"bitly\"\r\n            },\r\n            \"hasIssuesEnabled\": true,\r\n            \"description\": \"Bitly core repository\",\r\n            \"viewerPermission\": \"WRITE\",\r\n            \"defaultBranchRef\": {\r\n                \"name\": \"master\"\r\n            }\r\n        }\r\n    }\r\n}\r\n* Request took 512.90788ms\r\n[git symbolic-ref --quiet --short HEAD]\r\n[git status --porcelain]\r\n[git config --get-regexp ^branch\\.conftest-app-metrics\\.(remote|merge)$]\r\n[git show-ref --verify -- HEAD refs/remotes/jharshman/conftest-app-metrics refs/remotes/origin/conftest-app-metrics refs/remotes/bitly/conftest-app-metrics refs/remotes/jharshman/conftest-app-metrics refs/remotes/mrwoof/conftest-app-metrics]\r\n[git -c log.ShowSignature=false log --pretty=format:%H,%s --cherry origin/master...conftest-app-metrics]\r\n* Request at 2020-09-18 16:23:59.506737366 -0600 MDT m=+0.639793409\r\n* Request to https://api.github.com/graphql\r\n> POST /graphql HTTP/1.1\r\n> Host: api.github.com\r\n> Accept: application/vnd.github.antiope-preview+json\r\n> Authorization: token \r\n> Content-Type: application/json; charset=utf-8\r\n> User-Agent: GitHub CLI 1.0.0\r\n\r\n{\r\n    \"query\": \"\\n\\tquery PullRequestForBranch($owner: String!, $repo: String!, $headRefName: String!) {\\n\\t\\trepository(owner: $owner, name: $repo) {\\n\\t\\t\\tpullRequests(headRefName: $headRefName, states: OPEN, first: 30) {\\n\\t\\t\\t\\tnodes {\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\tnumber\\n\\t\\t\\t\\t\\ttitle\\n\\t\\t\\t\\t\\tstate\\n\\t\\t\\t\\t\\tbody\\n\\t\\t\\t\\t\\tmergeable\\n\\t\\t\\t\\t\\tauthor {\\n\\t\\t\\t\\t\\t\\tlogin\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcommits(last: 1) {\\n\\t\\t\\t\\t\\t\\ttotalCount\\n\\t\\t\\t\\t\\t  nodes {\\n\\t\\t\\t\\t\\t\\t  commit {\\n\\t\\t\\t\\t\\t\\t\\t  oid\\n\\t\\t\\t\\t\\t\\t\\t\\tstatusCheckRollup {\\n\\t\\t\\t\\t\\t\\t\\t\\t  contexts(last: 100) {\\n\\t\\t\\t\\t\\t\\t\\t\\t    nodes {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  ...on StatusContext {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  context\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tstate\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  targetUrl\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t...on CheckRun {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tstatus\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconclusion\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tstartedAt\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcompletedAt\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdetailsUrl\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t  }\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\turl\\n\\t\\t\\t\\t\\tbaseRefName\\n\\t\\t\\t\\t\\theadRefName\\n\\t\\t\\t\\t\\theadRepositoryOwner {\\n\\t\\t\\t\\t\\t\\tlogin\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\theadRepository {\\n\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tisCrossRepository\\n\\t\\t\\t\\t\\tisDraft\\n\\t\\t\\t\\t\\tmaintainerCanModify\\n\\t\\t\\t\\t\\treviewRequests(first: 100) {\\n\\t\\t\\t\\t\\t\\tnodes {\\n\\t\\t\\t\\t\\t\\t\\trequestedReviewer {\\n\\t\\t\\t\\t\\t\\t\\t\\t__typename\\n\\t\\t\\t\\t\\t\\t\\t\\t...on User {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tlogin\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t...on Team {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\ttotalCount\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treviews(last: 100) {\\n\\t\\t\\t\\t\\t\\tnodes {\\n\\t\\t\\t\\t\\t\\t\\tauthor {\\n\\t\\t\\t\\t\\t\\t\\t  login\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tstate\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\ttotalCount\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tassignees(first: 100) {\\n\\t\\t\\t\\t\\t\\tnodes {\\n\\t\\t\\t\\t\\t\\t\\tlogin\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\ttotalCount\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tlabels(first: 100) {\\n\\t\\t\\t\\t\\t\\tnodes {\\n\\t\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\ttotalCount\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tprojectCards(first: 100) {\\n\\t\\t\\t\\t\\t\\tnodes {\\n\\t\\t\\t\\t\\t\\t\\tproject {\\n\\t\\t\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tcolumn {\\n\\t\\t\\t\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\ttotalCount\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tmilestone{\\n\\t\\t\\t\\t\\t\\ttitle\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\",\r\n    \"variables\": {\r\n        \"headRefName\": \"conftest-app-metrics\",\r\n        \"owner\": \"bitly\",\r\n        \"repo\": \"bitly\"\r\n    }\r\n}\r\n< HTTP/1.1 200 OK\r\n< Access-Control-Allow-Origin: *\r\n< Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset\r\n< Cache-Control: no-cache\r\n< Content-Security-Policy: default-src 'none'\r\n< Content-Type: application/json; charset=utf-8\r\n< Date: Fri, 18 Sep 2020 22:24:36 GMT\r\n< Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin\r\n< Server: GitHub.com\r\n< Status: 200 OK\r\n< Strict-Transport-Security: max-age=31536000; includeSubdomains; preload\r\n< Vary: Accept-Encoding, Accept, X-Requested-With\r\n< X-Accepted-Oauth-Scopes: repo\r\n< X-Content-Type-Options: nosniff\r\n< X-Frame-Options: deny\r\n< X-Github-Media-Type: github.antiope-preview; format=json\r\n< X-Github-Request-Id:\r\n< X-Oauth-Client-Id:\r\n< X-Oauth-Scopes: gist, read:org, repo\r\n< X-Ratelimit-Limit: 5000\r\n< X-Ratelimit-Remaining: 4950\r\n< X-Ratelimit-Reset: 1600469053\r\n< X-Ratelimit-Used: 50\r\n< X-Xss-Protection: 1; mode=block\r\n\r\n{\r\n    \"data\": {\r\n        \"repository\": {\r\n            \"pullRequests\": {\r\n                \"nodes\": []\r\n            }\r\n        }\r\n    }\r\n}\r\n* Request took 192.253972ms\r\n* Request at 2020-09-18 16:23:59.699880362 -0600 MDT m=+0.832936377\r\n* Request to https://api.github.com/graphql\r\n> POST /graphql HTTP/1.1\r\n> Host: api.github.com\r\n> Accept: application/vnd.github.antiope-preview+json\r\n> Authorization: token \r\n> Content-Type: application/json; charset=utf-8\r\n> User-Agent: GitHub CLI 1.0.0\r\n\r\n{\r\n    \"query\": \"\\n\\t\\tmutation PullRequestCreate($input: CreatePullRequestInput!) {\\n\\t\\t\\tcreatePullRequest(input: $input) {\\n\\t\\t\\t\\tpullRequest {\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\turl\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\",\r\n    \"variables\": {\r\n        \"input\": {\r\n            \"baseRefName\": \"master\",\r\n            \"body\": \"\",\r\n            \"draft\": false,\r\n            \"headRefName\": \"conftest-app-metrics\",\r\n            \"repositoryId\": \"MDEwOlJlcG9zaXRvcnkxNzYxMDE4\",\r\n            \"title\": \"conftest app metrics\"\r\n        }\r\n    }\r\n}\r\n< HTTP/1.1 200 OK\r\n< Access-Control-Allow-Origin: *\r\n< Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset\r\n< Cache-Control: no-cache\r\n< Content-Security-Policy: default-src 'none'\r\n< Content-Type: application/json; charset=utf-8\r\n< Date: Fri, 18 Sep 2020 22:24:36 GMT\r\n< Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin\r\n< Server: GitHub.com\r\n< Status: 200 OK\r\n< Strict-Transport-Security: max-age=31536000; includeSubdomains; preload\r\n< Vary: Accept-Encoding, Accept, X-Requested-With\r\n< X-Accepted-Oauth-Scopes: repo\r\n< X-Content-Type-Options: nosniff\r\n< X-Frame-Options: deny\r\n< X-Github-Media-Type: github.antiope-preview; format=json\r\n< X-Github-Request-Id: \r\n< X-Oauth-Client-Id: \r\n< X-Oauth-Scopes: gist, read:org, repo\r\n< X-Ratelimit-Limit: 5000\r\n< X-Ratelimit-Remaining: 4949\r\n< X-Ratelimit-Reset: 1600469053\r\n< X-Ratelimit-Used: 51\r\n< X-Xss-Protection: 1; mode=block\r\n\r\n{\r\n    \"data\": {\r\n        \"createPullRequest\": {\r\n            \"pullRequest\": null\r\n        }\r\n    },\r\n    \"errors\": [\r\n        {\r\n            \"type\": \"UNPROCESSABLE\",\r\n            \"path\": [\r\n                \"createPullRequest\"\r\n            ],\r\n            \"locations\": [\r\n                {\r\n                    \"line\": 3,\r\n                    \"column\": 4\r\n                }\r\n            ],\r\n            \"message\": \"Head sha can't be blank, Base sha can't be blank, No commits between master and conftest-app-metrics, Head ref must be a branch\"\r\n        }\r\n    ]\r\n}\r\n* Request took 458.545525ms\r\npull request create failed: GraphQL error: Head sha can't be blank, Base sha can't be blank, No commits between master and conftest-app-metrics, Head ref must be a branch\r\n```"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen running something like `gh issue list --label foo`, issues with label `Foo` are not returned despite labels being case-insensitive on the GitHub web site both in terms of searching and creating, i.e. you can't create a label that differs only by case.\r\n\r\nAssignee, author, and milestone queries are case-insensitive, however. I can pass \"HEATHS\" and get the same results as \"heaths\".\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. cd to your repo and type `gh issue list --label <some-label>` where `<some-label>` exists but diffs by case\r\n\r\n### Expected vs actual behavior\r\n\r\nIssues with a label that differs by case are not returned.\r\n\r\n### Logs\r\n\r\nNothing very interesting it seems, but just in case it helps (against https://github.com/Azure/azure-sdk-for-net):\r\n\r\n```bash\r\ngh issue list --author HEATHS --milestone \"[2020] october\" --label Search\r\n```\r\n```text\r\n[git remote -v]\r\n[git config --get-regexp ^remote\\..*\\.gh-resolved$]\r\n* Request at 2020-09-18 14:40:25.6551043 -0700 PDT m=+0.232960001\r\n* Request to https://api.github.com/graphql\r\n* Request took 288.2938ms\r\n* Request at 2020-09-18 14:40:25.9453834 -0700 PDT m=+0.523239101\r\n* Request to https://api.github.com/graphql\r\n* Request took 277.8304ms\r\n\r\nShowing 5 of 5 issues in Azure/azure-sdk-for-net that match your search\r\n\r\n#15135  Create sample showing how to use ETags in ...  (Client, Search)             about 4 days ago\r\n#14588  Regenerate the Search SDK to pick up any n...  (Client, Search)             about 50 minutes ago\r\n#12457  SearchResources do not clean up indexers o...  (Client, Search, Test Debt)  about 14 days ago\r\n#12374  Implement/generate IndexingParameters mode...  (Client, Search)             about 15 days ago\r\n#11593  Search: Rename/customize IndexBatch rather...  (Client, Search)             about 10 days ago\r\n```"},{"labels":["bug"],"text":"user@system> gh auth login --with-token < mytoken\r\ncould not validate token: HTTP 401: Bad credentials (https://api.github.com/)\r\n\r\nuser@system> gh --version\r\ngh version 1.0.0 (2020-09-16)\r\nhttps://github.com/cli/cli/releases/tag/v1.0.0\r\n\r\n\r\n\r\nI might add that this token works just fine accessing the REST API via curl"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nUsing the default login flow, you are taken to\r\n\r\nhttps://github.com/login/device/confirmation\r\n\r\nThen, unless you allow your browser to download and run proprietary javascript from github, the button labeled \"Authorize github\" is disabled.\r\n\r\n```\r\n$ gh --version\r\ngh version 1.0.0 (2020-09-16)\r\nhttps://github.com/cli/cli/releases/tag/v1.0.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```\r\n$ gh auth login\r\n? What account do you want to log into?  [Use arrows to move, type to filter]\r\n> GitHub.com\r\n  GitHub Enterprise Server\r\n? What account do you want to log into? GitHub.com\r\n- Logging into github.com\r\n? How would you like to authenticate?  [Use arrows to move, type to filter]\r\n> Login with a web browser\r\n  Paste an authentication token\r\n? How would you like to authenticate? Login with a web browser\r\n\r\n! First copy your one-time code: XXXX-XXXX\r\n- Press Enter to open github.com in your browser...\r\n```\r\n\r\nPress enter. After your browser opens, make sure it is configured not to run proprietary/nonfree javascript from github. For example, use the LibreJS extension ( https://www.gnu.org/software/librejs/ ), NoScript, uMatrix, or simply disable javascript in the browser settings.\r\n\r\nEnter the one-time code. The next page is https://github.com/login/device/confirmation, which has the disabled button needed to proceed.\r\n\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected:\r\nI'm allowed to click the button to authorize github cli.\r\n\r\nActual:\r\nThe button is disabled, there is no obvious way to proceed and use github cli without running nonfree javascript.\r\n\r\n### Workarounds\r\n\r\nI found there are workarounds.\r\n\r\nWhen you run \"gh auth login\", select the non-default \"Paste an authentication token.\" The github website doesn't require running nonfree js to login and get an authentication token.\r\n\r\nAlternatively, you can open the browser console on the broken page (https://github.com/login/device/confirmation) and run \"document.getElementById(\"js-oauth-authorize-btn\").removeAttribute('disabled');\""},{"labels":["bug"],"text":"I am still getting used to the cli but its intuitive to use. \r\n\r\nDon't know if it's me but when i created a repo, it set the main branch to master. While in Github settings I set this to be main as it's gonna be the new default. How could i change this?"},{"labels":["bug"],"text":"I don't know if it is a bug or not but  I think this should not happen as mostly all the repositories that one creates is public. And I don;t know any flag that could help me change the behavior of default repository creation process using [Github Cli]( https://cli.github.com/)"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"I upgraded GitHub Cli to the newest version (1.0.0) previously I had (0.9.0 as I remember, can be wrong) and I'm not able to create a PR.\r\n\r\nBefore the upgrade the commands like `gh pr create -f` works without any problems. Right now I have following error:\r\n\r\n```\r\nerror checking for existing pull request: GraphQL error: Your token has not been granted the required scopes to execute this query. The 'name' field requires one of the following scopes: ['read:org', 'read:discussion'], but your token has only been granted the: ['repo'] scopes. Please modify your token's scopes at: https://github.com/settings/tokens.\r\n```\r\n\r\nI don't remember the whole process that I followed when I started using GitHub Cli (it was from the version 0.1.0) so I'm slightly confused what is wrong.\r\n\r\nIn the tokens I don't have any token related to GitHub Cli.\r\n\r\nI noticed that you introduced the `gh auth` commands. I tried with login and refresh but have a following information `read-only token in GITHUB_TOKEN cannot be modified`.\r\n\r\nCould you tell me what I can do with this? It's probably not related directly to the GitHub Cli but before upgrading to 1.0.0 I didn't have any problems to use it.\r\n\r\nI checked the documentation and existing issues but I didn't find anything that could help me to solve this issue.\r\n\r\nThank you!"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nThe merge command does not work in a repo with direct pushes disabled and only squashed merges allowed.\r\nThis repo is hosted on a corporate github server.\r\n\r\n### Steps I used\r\n\r\n1. 'git checkout -b workingBranch'\r\n2. 'git commit -am \"testCommit\"'\r\n3. 'git push -u'\r\n4. 'gh pr create --title \"testCommit\" -b \"\" -H workingBranch'\r\n5. 'gh pr merge <pr number> --squash'\r\n\r\n### Error\r\n\r\n```\r\nAPI call failed: Could not merge because a Git pre-receive hook failed.\r\n\r\ngithub-pre-receive-hooks/restrict-master-only-pr.sh: failed with exit status 1\r\nChanges to the master branch must be made by Pull Request. Direct pushes, edits, or merges are not allowed.\r\n```\r\n\r\nThe error seems quite weird to me, as I'm trying to merge a PR and get the error that I have to use a PR...\r\nDid I miss anything or do I have to change anything with the restrictions?"},{"labels":["bug",null],"text":"I was trying to install `gh` on ubuntu 20 and I run \r\n`sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0` as described from the  [documentation](https://github.com/cli/cli/blob/trunk/docs/install_linux.md)\r\n\r\n### Error\r\nI got this message `gpg: keyserver receive failed: Server indicated a failure\r\n`\r\n### Logs\r\n`Executing: /tmp/apt-key-gpghome.Kr7mQdYGPK/gpg.1.sh --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0`\r\n`gpg: keyserver receive failed: Server indicated a failure`\r\n\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI am on Ubuntu 20.04 LTS Focal Fossa. When I hit the command \"sudo apt install gh\", it says \"E: Unable to locate package gh\".\r\nI tried searching for package on ubuntu distribution site, but the only packages that got listed are \"ghc, ghc-doc, ghc-prof, ghdl etc.\" Help me, please.\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["bug",null,null],"text":"### Describe the bug\r\n\r\nOn Windows 10, after successfully authenticate using the cli, I tried to run the command `gh repo view TS-RnD/entitlement` and it displayed the following error message:\r\n\r\n![image](https://user-images.githubusercontent.com/55927613/93583373-aca59000-f99b-11ea-89a2-0e5d736ae728.png)\r\n\r\n### Steps to reproduce the behavior\r\nFollow the commands I ran on the cli in the same order:\r\n\r\n![image](https://user-images.githubusercontent.com/55927613/93583426-c050f680-f99b-11ea-97c5-36a09820758b.png)\r\n\r\nIt is the same for HTTPS:\r\n![image](https://user-images.githubusercontent.com/55927613/93583622-0312ce80-f99c-11ea-8087-0e25bedfc832.png)\r\n\r\n### Expected vs actual behavior\r\n\r\nI should be able to run `gh repo view TS-RnD/entitlement` after succesfully authenticate with the cli.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\n`gh --version == 1.0.0`\r\n\r\nI always get `no open pull requests found for branch ...` even though there is an open pull request. Other commands like `gh pr status` return the correct output. Also `gh pr <number> checks` return the correct output.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this `'gh pr checks'`\r\n2. View the output `'no open pull requests found for branch ...'`\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect to see the status of my PR.\r\n\r\n### Screenshot\r\n\r\n![image](https://user-images.githubusercontent.com/43181252/93575845-c5bc3a00-f9b7-11ea-9267-46ab77275472.png)\r\n\r\n"},{"labels":["bug"],"text":"Running WSL2 & cli 1.0\r\n`cd /mnt/c && gh repo view`\r\nreturns the following error:\r\n```\r\nfatal: not a git repository (or any parent up to mount point /mnt)\r\nStopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).\r\ngit: exit status 128\r\n```\r\nAlthough I understand that the command should fail, the output message should be more user friendly."},{"labels":["bug"],"text":"No help displayed when using gh --help, gh -h, gh help, gh /?.\r\n\r\nAs a good CLI inspired by the Linux/Unix heritage, the tool should help the user with the commands and parameters it supports. The user should not need to RTFM to be able to use a command line tool.\r\n\r\n\r\nI'm running in Windows 10, using cmder.\r\nBut when I'm running **gh.exe**, the help is displayed."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThe `gh pr checks` command causes the `unknown command \"checks\" for \"gh pr\"` error.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```bash\r\n$ gh pr checks\r\n```\r\n\r\n```bash\r\nunknown command \"checks\" for \"gh pr\"\r\n\r\nUsage:  gh pr <command> [flags]\r\n\r\nAvailable commands:\r\n  checkout\r\n  close\r\n  create\r\n  diff\r\n  list\r\n  merge\r\n  ready\r\n  reopen\r\n  review\r\n  status\r\n  view\r\n```"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThe `gh pr list` command causes the `invalid memory address or nil pointer dereference` error.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```bash\r\n$ gh pr list\r\n```\r\n\r\n```bash\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x38 pc=0x16d9ec6]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/cli/cli/api.CheckScopes.func1.1(0xc0006eba00, 0x2e, 0xc000545a30, 0xc000425760)\r\n\tgithub.com/cli/cli/api/client.go:107 +0x86\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n\tgithub.com/cli/cli/api/client.go:143\r\ngithub.com/cli/cli/api.AddHeaderFunc.func1.1(0xc0006eba00, 0x203000, 0xc000545a10, 0xc000425760)\r\n\tgithub.com/cli/cli/api/client.go:59 +0xb4\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n\tgithub.com/cli/cli/api/client.go:143\r\ngithub.com/cli/cli/api.AddHeader.func1.1(0xc0006eba00, 0x203000, 0xc000545a00, 0xc000425760)\r\n\tgithub.com/cli/cli/api/client.go:45 +0xbd\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n\tgithub.com/cli/cli/api/client.go:143\r\ngithub.com/cli/cli/api.AddHeader.func1.1(0xc0006eba00, 0xc0005459f0, 0xc00081e810, 0x100e708)\r\n\tgithub.com/cli/cli/api/client.go:45 +0xbd\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n\tgithub.com/cli/cli/api/client.go:143\r\nnet/http.send(0xc0006eba00, 0x1abc1c0, 0xc000010358, 0x0, 0x0, 0x0, 0xc000010430, 0x189ec71, 0x1, 0x0)\r\n\tnet/http/client.go:252 +0x43e\r\nnet/http.(*Client).send(0xc000288ab0, 0xc0006eba00, 0x0, 0x0, 0x0, 0xc000010430, 0x0, 0x1, 0x6)\r\n\tnet/http/client.go:176 +0xfa\r\nnet/http.(*Client).do(0xc000288ab0, 0xc0006eba00, 0x0, 0x0, 0x0)\r\n\tnet/http/client.go:699 +0x44a\r\nnet/http.(*Client).Do(...)\r\n\tnet/http/client.go:567\r\ngithub.com/cli/cli/api.Client.GraphQL(0xc000288ab0, 0xc00039f200, 0x1f6, 0x0, 0x17b6c40, 0xc0000103d8, 0x0, 0x0)\r\n\tgithub.com/cli/cli/api/client.go:244 +0x322\r\ngithub.com/cli/cli/api.RepoNetwork(0xc000010368, 0xc000459d80, 0x3, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x104af9e, ...)\r\n\tgithub.com/cli/cli/api/queries_repo.go:191 +0x423\r\ngithub.com/cli/cli/context.ResolveRemotesToRepos(0xc00031b4e0, 0x3, 0x4, 0xc000010368, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\tgithub.com/cli/cli/context/context.go:74 +0x32b\r\ngithub.com/cli/cli/command.determineBaseRepo(0xc000010368, 0x1fead00, 0x1acc800, 0xc00011bb00, 0x0, 0x0, 0x2, 0x0)\r\n\tgithub.com/cli/cli/command/root.go:343 +0x1cd\r\ngithub.com/cli/cli/command.prList(0x1fead00, 0x2033088, 0x0, 0x0, 0x0, 0x0)\r\n\tgithub.com/cli/cli/command/pr.go:202 +0xc2\r\ngithub.com/spf13/cobra.(*Command).execute(0x1fead00, 0x2033088, 0x0, 0x0, 0x1fead00, 0x2033088)\r\n\tgithub.com/spf13/cobra@v1.0.0/command.go:842 +0x453\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x1fe8840, 0xc0000201c0, 0x2, 0x2)\r\n\tgithub.com/spf13/cobra@v1.0.0/command.go:950 +0x349\r\nmain.main()\r\n\tgithub.com/cli/cli/cmd/gh/main.go:72 +0x2bd\r\n```\r\n\r\n"},{"labels":["bug"],"text":"**Description**: I'm unable to add query parameters for api requests.\r\n\r\n**Example:** `gh api users/binyamin/repos` outputs a long list, and I can't limit the number of items returned. Ideally, I would add the `per_page` query param\r\n**CLI version**: 1.0.0 🎉\r\n\r\nShould `--field` or `--raw-field` perform this?"},{"labels":["bug",null],"text":"CLI version: 1.0.0 🚀\r\nRelated: #695\r\n\r\n### Describe the bug\r\n- `gh <tab>` does not offer completions, even after running `gh completion --shell powershell |Out-String |Invoke-Expression`.\r\n- However, `gh <command> <tab>` _does_ offer completions.\r\n\r\n### Steps to reproduce the behavior\r\n1. Open Powershell\r\n2. Type `gh `\r\n3. Press tab.\r\n4. No completion occurs.\r\n\r\n### Expected vs actual behavior\r\nExpected <kbd>gh</kbd> + <kbd>tab</kbd> to complete.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug",null],"text":"repo: https://github.com/caelwithcats/test\r\n\r\n```bash\r\n$ gh repo view\r\ncaelwithcats/test\r\nDon't worry about this repo\r\n\r\n  :+1:                                                                        \r\n                                                                              \r\n  :smile:                                                                     \r\n\r\nView this repository on GitHub: https://github.com/caelwithcats/test\r\n```\r\nThe emojis show as the original markdown but if you add a unicode emoji the emoji's will show:\r\n```\r\n😃\r\n```\r\nOS: Linux mint 20\r\nGH version 1.0.0 (2020-09-16)\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nI tried to create a new repository via CLI using a different name than the project folder name, but it seems that CLI ignores this name and always uses the folder name as the repository name to be created.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. ``mkdir test-repo && cd test-repo && git init``\r\n2. ``gh repo create``\r\n3. Type a repository name that's not equal to the folder name.\r\n\r\n### Expected vs actual behavior\r\n\r\nI was expecting that a repository would be created with the repository name that I had typed.\r\n\r\n### Logs\r\n\r\n``gh repo create``  \r\n\r\n``? Repository name repo   ``\r\n``? Repository description   `` \r\n``? Visibility Private  ``\r\n``? This will create 'test-repo' in your current directory. Continue?  Yes  ``\r\n``✓ Created repository dayvsonsales/test-repo on GitHub  ``\r\n``✓ Added remote git@github.com:dayvsonsales/test-repo.git  ``\r\n\r\n### Additional\r\n\r\nI did a quick search in cli code and I found that in ``cli/create.go`` in line 218 it ignores the newName variable and just call ``repoToCreate.RepoName()`` method instead.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nI've been testing `gh` for quite a while now, and even in v0.12.0 when I ran `gh pr create -w` the branch was pushed to my `origin` remote automatically. I was never asked (my clone uses `origin` for my fork and `upstream` for the main). Now in v1.0, I was asked:\r\n\r\n> Which should be the base repository (used for e.g. querying issues) for this directory?\r\n\r\nIt listed both endpoints, and since the message above reads, \"e.g. for querying issues\", I chose `upstream`.\r\n\r\nIt then printed and acted on accordingly,\r\n\r\n> Opening github.com/Azure/azure-sdk-for-net/compare/master...issue15108 in your browser.\r\n\r\nThat's not where my topic branch was even pushed to manually and has a tracking branch set up. I previously ran `git push -u origin issue15108` which completed successfully.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Make changes and commit to repo\r\n2. Push topic branch to `origin` with tracking branch set up\r\n3. Run: `gh pr create -w`\r\n\r\n### Expected vs actual behavior\r\n\r\n* Expected: Browser is opened with my topic branch on my origin targeting master on upstream\r\n* Actual: Browser is opened with my topic branch *name* from upstream targeting master, and topic branch does not exist in upstream.\r\n\r\n### Logs\r\n\r\nNothing more was printed than what I typed above.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nAn error occurred on login \r\n\r\n```\r\n➜ gh --version\r\ngh version 1.0.0 (2020-09-16)\r\nhttps://github.com/cli/cli/releases/tag/v1.0.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `gh auth login`\r\n2. on `What account do you want to log into?` select > `GitHub.com`\r\n3. on `How would you like to authenticate?` select > `Login with a web browser`\r\n4. on `Choose default git protocol` select > `HTTPS`\r\n\r\n### Expected vs actual behavior\r\n\r\n**expected:** login with no errors\r\n**actual behavior:** logged in and displayed an error \r\n`error using api: Post \"https://api.github.com/graphql\": net/http: TLS handshake timeout` \r\n\r\n### Logs\r\n\r\n```\r\n➜ gh auth login\r\n? What account do you want to log into? GitHub.com\r\n- Logging into github.com\r\n? How would you like to authenticate? Login with a web browser\r\n\r\n! First copy your one-time code: 7D8F-FD8D\r\n- Press Enter to open github.com in your browser... \r\n\r\n✓ Authentication complete. Press Enter to continue...\r\n\r\n? Choose default git protocol HTTPS\r\n- gh config set -h github.com git_protocol https\r\n✓ Configured git protocol\r\n\r\nerror using api: Post \"https://api.github.com/graphql\": net/http: TLS handshake timeout\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nRunning `gh pr create` fails with an error.\r\n\r\nWe are running GitHub Enterprise 2.20.16. Per the docs this should be a supported version:\r\n\r\n> GitHub CLI supports GHES 2.20 and above.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Setup token auth\r\n2. Clone a repository\r\n3. Run `gh pr create` and see an error \r\n\r\n```\r\n~/R/python-stuff (test|✔) $ gh pr create\r\n? Where should we push the 'test' branch? ndempkowski/python-stuff\r\nerror checking for existing pull request: GraphQL error: Field 'statusCheckRollup' doesn't exist on type 'Commit'\r\n```\r\n\r\nMy auth status shows all should be good here:\r\n\r\n```\r\n~/R/python-stuff (test|✔) $ gh auth status\r\ngit.hubteam.com\r\n  ✓ Logged in to git.hubteam.com as ndempkowski (~/.config/gh/hosts.yml)\r\n  ✓ Git operations for git.hubteam.com configured to use ssh protocol.\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect to be able to create a PR, instead we see an error.\r\n\r\n### Logs\r\n\r\nSee above\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nTrying to login to a GitHub Enterprise server with a certificate signed by a private CA fails due to unknown certificate authority. My GHE is running on 2.21.6.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type `gh auth login --hostname myserver.example.com --web`\r\n2. View the output: `failed to authenticate via web browser: Post \"https://myserver.example.com/login/device/code\": x509: certificate signed by unknown authority`\r\n3. Similar results when trying with web-token, just the results become: `could not validate token: Get \"https://myserver.example.com/api/v3/\": x509: certificate signed by unknown authority`\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected: be able to login to GitHub Enterprise signed by a private CA.\r\nActual: failure message on not trusting the certificate.\r\n\r\n### Logs\r\n\r\n```\r\n$ gh auth login --hostname myserver.example.com --web\r\n- Logging into myserver.example.com\r\n\r\nfailed to authenticate via web browser: Post \"https://myserver.example.com/login/device/code\": x509: certificate signed by unknown authority\r\n\r\n$ echo \"<my-token-redacted>\" | gh auth login --hostname myserver.example.com --with-token\r\ncould not validate token: Get \"https://myserver.example.com/api/v3/\": x509: certificate signed by unknown authority\r\n```"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this 'gh pr checks'\r\n2. I see the output\r\n<img width=\"951\" alt=\"Captura de Pantalla 2020-09-17 a la(s) 14 35 06\" src=\"https://user-images.githubusercontent.com/14032267/93506680-fbe3b600-f8f2-11ea-9721-42ff3fee43d4.png\">\r\n3. The urls are incomplete\r\n\r\n### Expected vs actual behavior\r\n\r\nI would expect to have the complete url so that I can click on it and see it in the browser, but it is incomplete.\r\n\r\n"},{"labels":["bug",null,null],"text":"`rpm-ostree install gh`\r\n\r\n1. With GPG check enabled: `failed to lookup digest in keyring for /var/cache/rpm-ostree/repomd/gh-cli-32-x86_64/packages/gh_1.0.0_linux_amd64.rpm`\r\n2. Without GPG check: `Unsupported path: /usr/local/bin/gh; See https://github.com/projectatomic/rpm-ostree/issues/233`"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nI've configured enterprise GitHub auth, but when I run a command like `gh repo clone \"ndempkowski/python-stuff\"` which refers to an enterprise repository, it seems like the cli assumes that I want to resolve against github.com. This leads to an error instead of my repo being cloned.\r\n\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Authorize as an enterprise user with token auth (I think this also affects web-based login)\r\n2. Try to clone an enterprise repo using the `OWNER/REPO` format\r\n3. Get an error about authentication.\r\n\r\nExample:\r\n\r\n```\r\n~/Repos [1] $ gh --version\r\ngh version 1.0.0 (2020-09-16)\r\nhttps://github.com/cli/cli/releases/tag/v1.0.0\r\n~/Repos $ gh repo clone \"ndempkowski/python-stuff\"\r\nnon-200 OK status code: 401 Unauthorized body: \"{\\\"message\\\":\\\"This endpoint requires you to be authenticated.\\\",\\\"documentation_url\\\":\\\"https://docs.github.com/v3/#authentication\\\"}\"\r\n```\r\n\r\nYet my auth status is shown as correctly configured:\r\n```\r\n~/Repos [1] $ gh auth status\r\ngit.hubteam.com\r\n  ✓ Logged in to git.xxxxxxx.com as ndempkowski (~/.config/gh/hosts.yml)\r\n  ✓ Git operations for git.xxxxxxx.com configured to use ssh protocol.\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect to be able to clone a repo using the `OWNER/REPO` format instead of seeing an error.\r\n\r\n### Logs\r\n\r\nSee above\r\n"},{"labels":["bug"],"text":"\r\n### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\nI cancelled a gh pr create command midway through and now any/all github pr commands result in the following error:\r\n\r\n```\r\ngh pr view  \r\nGraphQL error: Field 'statusCheckRollup' doesn't exist on type 'Commit'\r\n```\r\n\r\n*Every gh pr command returns this error message now. I have no way to succeed*\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this 'gh pr create`\r\n2. Go through the first step\r\n3. Cancel the pr creation\r\n4. Type output 'gh pr create'\r\n5. Select the base\r\n6. Witness the following output 'GraphQL error: Field 'statusCheckRollup' doesn't exist on type 'Commit''\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect to be able to run the commands and cancel at anytime without entering a state where I can no longer use gh pr.\r\n\r\n### Logs\r\n\r\n```\r\ngh pr create \r\n? Which should be the base repository (used for e.g. querying issues) for this directory? <redacted>\r\n? Where should we push the '<redacted>' branch? Cancel\r\ngh pr create \r\n? Where should we push the '<redacted> branch? <redacted>\r\nerror checking for existing pull request: GraphQL error: Field 'statusCheckRollup' doesn't exist on type 'Commit'\r\n```"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nWith iterm2's Solarized Dark theme, the current default theme is unreadable in commands like:\r\n\r\n+ `gh repo view`\r\n+ `gh issue view`\r\n\r\n```\r\ngh version 1.0.0 (2020-09-16)\r\nhttps://github.com/cli/cli/releases/tag/v1.0.0\r\n```\r\n\r\nThis is due to the fact that the dark text colors blend in with the background. See screenshots.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Change item2 to use the Solarized Dark theme\r\n2. Run the commands above\r\n3. Try to read the output\r\n\r\n### Expected vs actual behavior\r\n\r\nReadable output\r\n\r\n### Screenshots\r\n\r\n<img width=\"1179\" alt=\"Screen Shot 2020-09-17 at 12 37 57 PM\" src=\"https://user-images.githubusercontent.com/1188552/93501187-1b72e280-f8e3-11ea-9145-d35cba066424.png\">\r\n\r\n<img width=\"1179\" alt=\"Screen Shot 2020-09-17 at 12 40 24 PM\" src=\"https://user-images.githubusercontent.com/1188552/93501208-20d02d00-f8e3-11ea-96df-edc3220f61eb.png\">\r\n\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n`gh --version`.\r\n ```\r\ngh --version\r\ngh version 0.11.1 (2020-07-29)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.1\r\n```\r\n\r\n\r\nI have installed gh via brew in my mac ,while trying to auth its saying unknown command\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '`gh auth login'`\r\n2. View the output 'unknown command \"auth\" for \"gh\"'\r\n3. See error: Usage:  gh <command> <subcommand> [flags]\r\n\r\nAvailable commands:\r\n  alias\r\n  api\r\n  completion\r\n  config\r\n  gist\r\n  help\r\n  issue\r\n  pr\r\n  repo\r\n\r\n\r\n### Expected vs actual behavior\r\n\r\nit should start interactive login as per docs below\r\nhttps://cli.github.com/manual/gh_auth_login\r\n\r\n```\r\n$ gh auth login\r\n# => do an interactive setup\r\n```\r\n\r\n### Logs\r\n\r\n gh auth login\r\nunknown command \"auth\" for \"gh\"\r\n\r\nUsage:  gh <command> <subcommand> [flags]\r\n\r\nAvailable commands:\r\n  alias\r\n  api\r\n  completion\r\n  config\r\n  gist\r\n  help\r\n  issue\r\n  pr\r\n  repo\r\n\r\n\r\n\r\nalso I tried below options but nothing works\r\n\r\n```\r\n$ gh auth login --with-token < mytoken.txt\r\n# => read token from mytoken.txt and authenticate against github.com\r\n\r\n$ gh auth login --hostname enterprise.internal --with-token < mytoken.txt\r\n# => read token from mytoken.txt and authenticate against a GitHub Enterprise Server instance\r\n```\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nOutput of issues w/ zero configuration looks inappropriate. `NO_COLOR=1 gh issue list` fixes the issue but I have no idea why gh tries to use colors if it can't.\r\n\r\n```\r\n$ gh --version\r\ngh version 1.0.0 (2020-09-16)\r\nhttps://github.com/cli/cli/releases/tag/v1.0.0\r\n\r\n$ echo $TERM\r\nxterm-256color\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this 'gh issue list'\r\n2. View the output\r\n![image](https://user-images.githubusercontent.com/1256298/93493554-b1733100-f914-11ea-9489-a84db068e9c9.png)\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\n1. gh should not use color output in unsupported terminal emulators\r\n2. It seemed obvious to me that the Gnome Terminal (xterm-256color) is supported, but it isn't.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n\r\n\r\n```\r\nESC[0;32m#15157ESC[0m  [NFR]: Lazy write for Session Adapters                                                                     ESC[38;5;242m(5.0, new feature request)                         ESC[m  ESC[38;5;242mabout 1 day agoESC[m\r\nESC[0;32m#15156ESC[0m  [BUG]: return in the variable name                                                                         ESC[38;5;242m(bug, external dependency, status: unverified)     ESC[m  ESC[38;5;242mabout 2 days agoESC[m\r\nESC[0;32m#15154ESC[0m  [NFR]: Add Method getInherits in Acl\\Memory : Get Role Herits                                              ESC[38;5;242m(new feature request)                              ESC[m  ESC[38;5;242mabout 3 days agoESC[m\r\nESC[0;32m#15151ESC[0m  [NFR]: Bind AbstractValidator to Closure in a CallbackValidator to change message etc...                   ESC[38;5;242m(new feature request)                              ESC[m  ESC[38;5;242mabout 6 days agoESC[m\r\nESC[0;32m#15148ESC[0m  [BUG]: When updating including a relation, the relation destination is not updated                         ESC[38;5;242m(bug, discussion)                                  ESC[m  ESC[38;5;242mabout 6 days agoESC[m\r\nESC[0;32m#15141ESC[0m  [BUG]: use memcached to store sessions ,but cannot work well for first serveral times(15?)                 ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 14 days agoESC[m\r\nESC[0;32m#15139ESC[0m  [BUG]: phalcon3.4.5 Execute findFirst|find when the transaction is rolled back，throw new RuntimeExcep...  ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 16 days agoESC[m\r\nESC[0;32m#15135ESC[0m  [NFR]: In Mvc Models, after* event of related models gets fired before main entity's after* event          ESC[38;5;242m(new feature request)                              ESC[m  ESC[38;5;242mabout 21 days agoESC[m\r\nESC[0;32m#15133ESC[0m  [BUG]: Null cannot be set in the source parameter when firing an event.                                    ESC[38;5;242m(6.0, breaks bc, bug)                              ESC[m  ESC[38;5;242mabout 6 days agoESC[m\r\nESC[0;32m#15125ESC[0m  [BUG]: When saving [],0,'0',false in cache null is returned                                                ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 1 month agoESC[m\r\nESC[0;32m#15121ESC[0m  WebTools generated scaffold controller raises exception in phalcon core with Notice: Undefined index: ...  ESC[38;5;242m                                                   ESC[m  ESC[38;5;242mabout 6 days agoESC[m\r\nESC[0;32m#15120ESC[0m  [BUG]: \\Phalcon\\Http\\Response\\CookiesInterface::set options parameter                                      ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 1 month agoESC[m\r\nESC[0;32m#15119ESC[0m  [BUG]: \\Phalcon\\Db\\Adapter\\AdapterInterface::getInternalHandler expects \\PDO                               ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 1 month agoESC[m\r\nESC[0;32m#15118ESC[0m  [BUG]: phalcon4 crypt performance                                                                          ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 1 month agoESC[m\r\nESC[0;32m#15117ESC[0m  [BUG]: Controller::initialize() is skipped in some cases                                                   ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 27 days agoESC[m\r\nESC[0;32m#15113ESC[0m  [BUG]: Aggregate queries generated through Model static methods ignore transaction parameter               ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 1 month agoESC[m\r\nESC[0;32m#15111ESC[0m  [BUG]: Cache getKeys() return with prefix                                                                  ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 2 months agoESC[m\r\nESC[0;32m#15108ESC[0m  [NFR]: Object Oriented Phalcon\\Text helper                                                                 ESC[38;5;242m(new feature request)                              ESC[m  ESC[38;5;242mabout 2 months agoESC[m\r\nESC[0;32m#15107ESC[0m  [BUG]: Application crash due to update php 7.4.8                                                           ESC[38;5;242m(bug)                                              ESC[m  ESC[38;5;242mabout 1 month agoESC[m\r\nESC[0;32m#15102ESC[0m  [BUG]: Phalcon route Exception when uri contains arabic letters                                            ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 2 months agoESC[m\r\nESC[0;32m#15099ESC[0m  [NFR]: Per-Collection and Per-Route Middleware for Micro                                                   ESC[38;5;242m(new feature request)                              ESC[m  ESC[38;5;242mabout 2 months agoESC[m\r\nESC[0;32m#15097ESC[0m  dispatcher forward method dispatch other controller method failed                                          ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 2 months agoESC[m\r\nESC[0;32m#15096ESC[0m  [NFR]: cphalcon/phalcon/Validation/Validator/Alnum.zep                                                     ESC[38;5;242m(need script to reproduce, new feature request)    ESC[m  ESC[38;5;242mabout 1 month agoESC[m\r\nESC[0;32m#15094ESC[0m  [BUG]: Installation instructions for Ubuntu 20.04 no longer valid                                          ESC[38;5;242m(enhancement)                                      ESC[m  ESC[38;5;242mabout 17 days agoESC[m\r\nESC[0;32m#15090ESC[0m  [BUG]: Phalcon\\Mvc\\Model::cloneResultMap(): __clone method called on non-object in Phalcon/Mvc/Model/Q...  ESC[38;5;242m(bug, need script to reproduce, status: unverified)ESC[m  ESC[38;5;242mabout 7 days agoESC[m\r\nESC[0;32m#15088ESC[0m  [BUG]: Cannot access private property Phalcon\\\\Http\\\\Message\\\\ServerRequest::$attributes                   ESC[38;5;242m(4.1.0, bug, status: unverified)                   ESC[m  ESC[38;5;242mabout 3 months agoESC[m\r\nESC[0;32m#15082ESC[0m  debian package - PHP FPM require php-psr                                                                   ESC[38;5;242m(bug)                                              ESC[m  ESC[38;5;242mabout 28 days agoESC[m\r\nESC[0;32m#15074ESC[0m  [BUG]: afterFetch method in the model does not work when using model paginator                             ESC[38;5;242m(discussion, enhancement)                          ESC[m  ESC[38;5;242mabout 2 months agoESC[m\r\nESC[0;32m#15073ESC[0m  [NFR]: \\Phalcon\\Validation::setDefaultMessages implementation                                              ESC[38;5;242m(new feature request)                              ESC[m  ESC[38;5;242mabout 1 month agoESC[m\r\nESC[0;32m#15070ESC[0m  [BUG]: \\Phalcon\\Forms\\Form->bind the whitelist doesn't work for getValue                                   ESC[38;5;242m(bug, status: unverified)                          ESC[m  ESC[38;5;242mabout 3 months agoESC[m\r\n````\r\n"},{"labels":["bug",null,null,null],"text":"### Describe the bug\r\n\r\nThe `PAGER` support mentioned in #528 seems not to work in Cygwin, at least with `zsh` shell and `PAGER=less`: only part of the output comes to be shown.  Setting `PAGER=` causes `gh issue list` to work fine on Cygwin.\r\n\r\n### Steps to reproduce the behavior\r\n\r\nRun a Cygwin shell, zsh, and type the following:\r\n```sh\r\nPAGER=less gh issue list\r\n```\r\n\r\nHere's a sample output:\r\n```sh\r\n(my prompt) PAGER=less gh issue list\r\n\r\nShowing 30 of 46 open issues in edemaine/comingle\r\n\r\n#109  Delete empty room withou...  (blocked)          about 48 minutes ago\r\n#108  Full screen rooms                               about 1 day ago\r\n#107  Onbeforeunload confirm%\r\n(my prompt)\r\n```\r\nThe `%` appears in reverse video.\r\n\r\nThe results are nondeterministic. Here's another run:\r\n```sh\r\n(my prompt) PAGER=less gh issue list             (master ?$)\r\n\r\nShowing 30 of 46 open issues in edemaine/comingle\r\n\r\n#109  Delete empty room withou...  (blocked)          about 54 minutes ago\r\n#108  Full screen rooms                               about 1 d%\r\n(my prompt)\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nOn the other hand, the following works fine:\r\n```sh\r\n(my prompt) PAGER= gh issue list              (master ?$)\r\n\r\nShowing 30 of 46 open issues in edemaine/comingle\r\n\r\n#109  Delete empty room withou...  (blocked)          about 54 minutes ago\r\n#108  Full screen rooms                               about 1 day ago\r\n#107  Onbeforeunload confirmat...                     about 1 day ago\r\n#106  Jitsi keyboard shortcuts     (Jitsi)            about 3 days ago\r\n#104  Log/tracking presence                           about 8 days ago\r\n#100  Regex search for rooms                          about 12 days ago\r\n#99   Shrinking grey names                            about 8 days ago\r\n#98   Finding raised hands                            about 8 days ago\r\n#97   Reordering room tabs wit...                     about 13 days ago\r\n#96   Move Name entry                                 about 13 days ago\r\n#94   Error handling when crea...                     about 13 days ago\r\n#92   Auto unmaximize                                 about 14 days ago\r\n#89   Deleting rooms                                  about 15 days ago\r\n#80   Dragging tab into a diff...                     about 23 days ago\r\n#79   Whiteboard alternatives                         about 23 days ago\r\n#76   Preserve Jitsi state whe...  (Jitsi, priority)  about 1 day ago\r\n#75   Screen share annotation ...  (Jitsi)            about 27 days ago\r\n#74   Drag links/URLs into tabset  (easy)             about 27 days ago\r\n#70   Fix Jitsi's tile view re...  (Jitsi)            about 27 days ago\r\n#68   Lower hand automatically...                     about 1 month ago\r\n#67   Lock room                    (blocked)          about 15 days ago\r\n#66   http warning                 (easy)             about 27 days ago\r\n#65   Meeting Permissions tab      (blocked)          about 6 days ago\r\n#64   Useful text in permalinks                       about 1 month ago\r\n#61   Show everyone's Jitsi jo...  (Jitsi)            about 26 days ago\r\n#58   Multiple windows/devices...                     about 1 month ago\r\n#57   Track names over time (AKA)                     about 1 month ago\r\n#56   Wikipedia tab type                              about 1 month ago\r\n#55   Layout helper button                            about 1 month ago\r\n#53   Auth and user types          (priority)         about 23 days ago\r\n```\r\n"},{"labels":[null,"bug",null],"text":"### Describe the bug\r\n\r\nWhen authentication using a web browser and Github Enterprise, I am redirected to localhost with `redirect_uri_mismatch`  and the message: `The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application`\r\n\r\nOn `gh version 1.0.0 (2020-09-16)`\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type\r\n```\r\n$ DEBUG=oauth gh auth login -h ghe.myorg.net\r\n- Logging into ghe.myorg.net\r\n? How would you like to authenticate? Login with a web browser\r\nPOST https://ghe.myorg.net/login/device/code\r\nopen https://ghe.myorg.net/login/oauth/authorize?client_id=...&redirect_uri=http%3A%2F%2Flocalhost%3A56852%2F&scope=repo+read%3Aorg+gist&state=...\r\n- Press Enter to open ghe.myorg.net in your browser...\r\n```\r\n\r\n2. Takes me to \r\n\r\n```\r\nhttp://localhost/?error=redirect_uri_mismatch&error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&error_uri=https%3A%2F%2Fdeveloper.github.com%2Fenterprise%2F2.18%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-authorization-request-errors%2F%23redirect-uri-mismatch&state=...\r\n```\r\n\r\nWhich displays \"ERR_CONNETION_REFUSED\" in Chrome/MacOS\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect to be logged in using OAuth.\r\nAs a workaround personal Access tokens works for authenticating, but then commands like `gh pr status` aren't working (see https://github.com/cli/cli/issues/597)\r\n"},{"labels":["bug",null,null],"text":"### Describe the bug\r\n\r\nOn the windows installer, you cannot click Back once you get to the 'ready to install' page of the wizard.\r\nYou can click Back on the other pages and it will take you back.\r\n\r\nI understand that [go-msi](https://github.com/mh-cbon/go-msi) is being used and of course the WiX Toolset so bug may be in one of those projects.\r\n\r\n`gh_1.0.0_windows_amd64.msi`\r\n\r\nhttps://github.com/cli/cli/releases/tag/v1.0.0\r\n\r\nI have tested on Windows 10 machine.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Run .msi installer wizard\r\n2. Click Next on first screen\r\n3. Agree to license agreement and click Next\r\n4. Choose install location and click Next\r\n5. On 'ready to install' page, click Back (nothing happens).\r\n\r\n### Expected vs actual behavior\r\n\r\nYou should be able to click Back on the 'ready to install' page and it should go to previous screen. You would want to do this for example, to change the install location."},{"labels":["bug",null],"text":"When authenticating github.com on Linux (Ubuntu) I am getting a parser error when opening the browser to enter the one-time code.\r\n\r\n![Screen Shot 2020-09-16 at 9 04 25 AM](https://user-images.githubusercontent.com/14828183/93381186-ff484600-f7fb-11ea-808e-86cac5c6e312.png)\r\n\r\nThe authentication worked, but I thought this should be surfaced.\r\n\r\nv1.0.0\r\n\r\n"},{"labels":["bug",null,null],"text":"The error affects the following commands:\r\n- `gh pr create`\r\n- `gh pr status`\r\n- `gh pr checks`\r\n\r\nand looks like:\r\n```\r\nGraphQL error: field 'statusCheckRollup' doesn't exist on type 'Commit'\r\n```\r\n\r\nA solution would entail an approach similar to my spike at https://github.com/cli/cli/pull/1102"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nError when using zsh autocomplete on brew installed version of CLI on Mac (gh version 0.12.0 (2020-09-08))\r\n\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this 'gh pr [tab]' or 'gh issue [tab]'\r\n1. See error…\r\n\r\n        _arguments:comparguments:325: invalid option definition: (-R --repo)-R[Select another repository using the `[HOST/]OWNER/REPO` format]:\r\n\r\n### Expected vs actual behavior\r\n\r\nI would expect this to display the autocomplete options for the command in question.  Up until recently this has worked fine.  I believe I updated recently, but can't be certain.\r\n\r\nMay be an issue specific to me, but unsure how to tell, or debug.\r\n\r\n### Logs\r\n\r\nUnsure where to access logs.\r\n"},{"labels":["bug",null,null],"text":"Just installed the Debian package and found the executable at `/usr/local/bin/gh`, which is wrong; should be `/usr/bin/gh`.\r\n\r\n_Originally posted by @jglick in https://github.com/cli/cli/pull/1615#issuecomment-689157222_\r\n\r\nSee also: #377"},{"labels":["bug"],"text":"I am not sure if this is a bug or documentation is unclear. I am trying to create new release for gh cli, so far all my attempts have been unsuccessful.\r\n\r\nThis is the command I am trying (what I understood from docs)\r\n`gh api repos/:owner/:repo/releases -F \"tag_name=v1.2.3 target_commitish=develop\"`\r\n\r\nIt throws `tag_name` invalid error\r\n\r\n```\r\n{\r\n  \"message\": \"Validation Failed\",\r\n  \"errors\": [\r\n    {\r\n      \"resource\": \"Release\",\r\n      \"code\": \"custom\",\r\n      \"field\": \"tag_name\",\r\n      \"message\": \"tag_name is not a valid tag\"\r\n    },\r\n    {\r\n      \"resource\": \"Release\",\r\n      \"code\": \"custom\",\r\n      \"field\": \"tag_name\",\r\n      \"message\": \"tag_name is not well-formed\"\r\n    },\r\n    {\r\n      \"resource\": \"Release\",\r\n      \"code\": \"custom\",\r\n      \"message\": \"Published releases must have a valid tag\"\r\n    }\r\n  ],\r\n  \"documentation_url\": \"https://docs.github.com/rest/reference/repos#create-a-release\"\r\n}\r\ngh: Validation Failed (HTTP 422)\r\n\r\n```\r\n\r\n`gh cli` has very little documentation about api calls, it doesn't make it easy either.\r\n\r\nCould someone point me here in the right direction\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen trying to download an asset from a release, the attempt leads to a 400 error at the point when the GET request to the binary is performed.\r\n\r\nAffected version:\r\n```\r\n$ gh --version\r\n[--version] -> [--version]\r\ngh version 0.12.0-86-gb34fe81 (2020-09-14)\r\nhttps://github.com/cli/cli/releases/latest\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Perform `gh release download {tag}` on a private or public repository with existing release (incl. assets)\r\n2. No files are downloaded\r\n3. Look for `HTTP 400: 400 Bad Request ` in the ouput\r\n\r\n### Expected vs actual behavior\r\n\r\nThe command is expected to return successfully (exit 0) after downloading all specified assets in the command line parameters.\r\n\r\n### Logs\r\n\r\n```\r\n~/go/src/github.com/cli/cli $ gh release download v0.12.0 -p '*_checksums.txt'\r\n[git remote -v]\r\n* Request at 2020-09-14 13:25:35.327152 +0200 CEST m=+0.034618508\r\n* Request to https://api.github.com/graphql\r\n* Request took 393.165624ms\r\n* Request at 2020-09-14 13:25:35.720638 +0200 CEST m=+0.428107757\r\n* Request to https://api.github.com/repos/cli/cli/releases/tags/v0.12.0\r\n* Request took 188.494005ms\r\n* Request at 2020-09-14 13:25:35.910262 +0200 CEST m=+0.617733060\r\n* Request to https://api.github.com/repos/cli/cli/releases/assets/25147130\r\n⣾ * Request took 343.963773ms\r\n* Request at 2020-09-14 13:25:36.254302 +0200 CEST m=+0.961775820\r\n* Request to https://github-production-release-asset-2e65be.s3.amazonaws.com/212613049/d4883d00-f1be-11ea-9a48-8e2cc1789ed7?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200914%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200914T112536Z&X-Amz-Expires=300&X-Amz-Signature=ce673ce259e2ea2b24c25f06d0dfaedf542fe7b1488d0066f3daa012bdec1965&X-Amz-SignedHeaders=host&actor_id=6597626&key_id=0&repo_id=212613049&response-content-disposition=attachment%3B%20filename%3Dgh_0.12.0_checksums.txt&response-content-type=application%2Foctet-stream\r\n⣻ * Request took 479.564398ms\r\nHTTP 400: 400 Bad Request (https://github-production-release-asset-2e65be.s3.amazonaws.com/212613049/d4883d00-f1be-11ea-9a48-8e2cc1789ed7?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200914%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200914T112536Z&X-Amz-Expires=300&X-Amz-Signature=ce673ce259e2ea2b24c25f06d0dfaedf542fe7b1488d0066f3daa012bdec1965&X-Amz-SignedHeaders=host&actor_id=6597626&key_id=0&repo_id=212613049&response-content-disposition=attachment%3B%20filename%3Dgh_0.12.0_checksums.txt&response-content-type=application%2Foctet-stream)\r\n```\r\n"},{"labels":["bug"],"text":"When I am checking out to a PR that does not exist, I am getting a GraphQL error.\r\n\r\n> GraphQL error: Could not resolve to a PullRequest with the number of 45.\r\n\r\nThe error message should not include **GraphQL error** in the begging :thinking:\r\n\r\n### Screenshot\r\n![image](https://user-images.githubusercontent.com/26922866/92991936-92376680-f504-11ea-874f-cc3ce0a55a3a.png)\r\n"},{"labels":["bug",null,null],"text":"### Describe the bug\r\n\r\nInstallation instructions fail on Debian buster.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Follow instructions under [Linux Installation Instructions](https://github.com/cli/cli/blob/trunk/docs/install_linux.md)\r\n\r\n2. On Debian buster, `sudo apt-add-repository -u https://cli.github.com/packages` sets the repository distro to the release name (`buster`), which does not seem to exist.\r\n\r\n3. Attempting to update the Apt cache fails with a 404 error.\r\n\r\n### Steps to fix the error\r\n\r\n1. Edit `/etc/apt/sources.list` and rename the distro name to `stable` (from `buster`).\r\n\r\nIt seems like specifying the complete repository string as a parameter to `apt-add-repository` would do the trick, at least for Debian users:\r\n\r\n`sudo apt-add-repository -u \"deb https://cli.github.com/packages stable main\"`\r\n\r\n### Expected vs actual behavior\r\n\r\nSeamless installation was to be expected, but manual editing of `/etc/apt/sources.list` was necessary.\r\n\r\n### Logs\r\n\r\nLog from `aptitude` before editing of `/etc/apt/sources.list`:\r\n\r\n```\r\n# aptitude update\r\n...\r\nErr https://cli.github.com/packages buster Release\r\n  404  Not Found [IP: 185.199.108.153 443]\r\n...\r\n```\r\n\r\nLog after editing `/etc/apt/sources.list`:\r\n\r\n```\r\n# aptitude update\r\n...\r\nHit https://cli.github.com/packages stable InRelease\r\n...\r\n```\r\n\r\n\r\n\r\n\r\n"},{"labels":["bug",null,null],"text":"The `gh` CLI is reporting that a new version - 0.12.0 - is available, but running `scoop update` is not updating it. Looking at https://github.com/cli/scoop-gh, I see that the repo hasn't been updated.\r\n\r\nIn addition to doing that, I also recommend adding auto-upgrade information like I did with `vswhere` here: https://github.com/ScoopInstaller/Main/blob/02d450dfe1a50eda9e3118012203d9b95417071b/bucket/vswhere.json#L11-L17\r\n\r\nYou could do the same with GitHub releases since you publish a ZIP: https://github.com/cli/cli/releases/download/v0.12.0/gh_0.12.0_windows_amd64.zip. GitHub Releases are supposedly natively supported by Scoop for autoupdate, though I've not tried it myself.\r\n\r\nThis would obviate the need to update cli/scoop-gh, though doing so makes sure that scoop users get the latest version when they install initially."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThe `org/repo` method of specifying where things are happening is ambiguous when you can have multiple github instances.\r\n\r\n### Steps to reproduce the behavior\r\n\r\nSee https://github.com/cli/cli/issues/1645 for more info\r\n\r\n```console\r\n$ gh pr create\r\n\r\nCreating pull request for my-branch into master in internal-org/some-repo\r\n```\r\n\r\n```console\r\n$ gh --version\r\ngh version 0.11.1-137-gb9292f5 (2020-08-24)\r\nhttps://github.com/cli/cli/releases/latest\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nI'd expect fully qualified URLs unless it's github.com, so:\r\n\r\n- `github.com/org/repo@branch` -> `branch in org/repo`\r\n- `ghe.com/org/repo@branch` -> `branch in ghe.com/org/repo`\r\n\r\nAlso I'd expect the Pull Request branch (not the base branch) to specify its host/org/repo unless they are the same as the base branch's host and org (but maybe it already does that)."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n`gh --shell bash completion` fails after upgrading to v0.12\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Ubuntu 18.04.5 LTS with v0.12\r\n2. Type `gh --shell bash completion`\r\n2. See error\r\n``` bash\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x110 pc=0xb4c726]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/spf13/cobra.(*Command).Runnable(...)\r\n\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v1.0.0/command.go:1313\r\ngithub.com/cli/cli/pkg/cmdutil.IsAuthCheckEnabled(0x0, 0x17)\r\n\t/home/runner/work/cli/cli/pkg/cmdutil/auth_check.go:36 +0x26\r\nmain.main()\r\n\t/home/runner/work/cli/cli/cmd/gh/main.go:97 +0xe28\r\n```\r\nand bash completion does not work\r\n\r\n"},{"labels":["bug"],"text":"When there are mixed git remotes (some pointing to `github.com`, some pointing to GHE instances), we only scope down to the first hostname we find and ignore the others.  This is by design https://github.com/cli/cli/pull/1258/files#diff-15cce7299aae8810bcab9b0bf9a2fdb1R36\r\n\r\nHowever, it should be possible to use GH_HOST to explicitly choose a host. Right now, GH_HOST is not respected with parsing git remotes.\r\n\r\nOriginally reported in https://github.com/cli/cli/issues/1645#issuecomment-690305533"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n`$ gh version 0.12.0-49-gf30bc5b (2020-09-09)`\r\n\r\nI have been using the CLI for some time and its really great :). I was looking to contribute to some open issues and stumbled upon [#1110](https://github.com/cli/cli/issues/1110). In order to reproduce the error given in the issue you have to run the following:\r\n`$ gh -R cli/cli issue view 1110`. This leads to runtime error and an ugly message is displayed (see logs below). \r\n\r\nThe error is quite a corner case and requires the user to give very bad input. \r\n### Steps to reproduce the behaviour\r\n\r\n1. Type this:\r\n```\r\n$ gh -R cli/cli issue view 1110\r\nor\r\n$ gh -w view repo cli/cli\r\n```\r\n\r\n\r\n### Expected vs actual behavior\r\n\r\nI would like a nice error message to be displayed. \r\n\r\nFrom debugging the code the error seems to be rooted here, where cmd is set to nil and the following if statement fails to catch the error.\r\n\r\nhttps://github.com/cli/cli/blob/33e11f02e46339a4cab0d85da0f368bd8e8df480/cmd/gh/main.go#L53-L54\r\n\r\nThen we try to dereference a null pointer later on:\r\n\r\nhttps://github.com/cli/cli/blob/33e11f02e46339a4cab0d85da0f368bd8e8df480/cmd/gh/main.go#L95-L97\r\n\r\nThe value of `err` returned from `rootCmd.Traverse(expandedArgs)`, in the second sample case is:\r\n`\"unknown shorthand flag: 'w' in -w\"`.\r\n\r\nI propose we display something like this:\r\n```\r\n$ gh -w view repo cli/cli\r\n$ failed to parse the command:  unknown shorthand flag: 'w' in -w\r\n```\r\n\r\nI think this only requires a small fix and I'm going to create a pull request with my proposed changes after posting this. \r\n\r\n### Logs\r\n\r\n```\r\ncli/cli $ gh -R cli/cli issue view 1110\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x110 pc=0x1734456]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/spf13/cobra.(*Command).Runnable(...)\r\n\tgithub.com/spf13/cobra@v1.0.0/command.go:1313\r\ngithub.com/cli/cli/pkg/cmdutil.IsAuthCheckEnabled(0x0, 0xc0002be430)\r\n\tgithub.com/cli/cli/pkg/cmdutil/auth_check.go:36 +0x26\r\nmain.main()\r\n\tgithub.com/cli/cli/cmd/gh/main.go:95 +0x63a\r\n```\r\n\r\n ```\r\ncli/cli $ gh -w view repo cli/cli\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x110 pc=0x174da86]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/spf13/cobra.(*Command).Runnable(...)\r\n\tgithub.com/spf13/cobra@v1.0.0/command.go:1313\r\ngithub.com/cli/cli/pkg/cmdutil.IsAuthCheckEnabled(0x0, 0x17)\r\n\tgithub.com/cli/cli/pkg/cmdutil/auth_check.go:36 +0x26\r\nmain.main()\r\n\tgithub.com/cli/cli/cmd/gh/main.go:97 +0xe36\r\n ```\r\n\r\n\r\n"},{"labels":["bug"],"text":"I've been trying to use Github CLI to create PRs to a gh-pages branch in a CI/CD.\r\n\r\nThis has been my latest attempt:\r\n\r\n```\r\ngh repo clone MatrixAI/TypeScript-Demo-Lib /tmp/TypeScript-Demo-Lib;\r\ncd /tmp/TypeScript-Demo-Lib;\r\ngh repo fork --remote true;\r\ngit checkout gh-pages;\r\nfind . -mindepth 1 -maxdepth 1 ! -name \".git\" -exec rm -r \"{}\" \\;;\r\nmv /tmp/docs/* .;\r\ngit commit -am \"Updated Docs\";\r\ngh pr create --base \"gh-pages\" --fill;\r\n```\r\n\r\nHowever the last command keeps failing with:\r\n\r\n```\r\nfatal: could not read Username for 'https://github.com': No such device or address\r\n```\r\n\r\nYou can see the job here: https://gitlab.com/MatrixAI/open-source/typescript-demo-lib/-/jobs/725071215\r\n\r\n**Is there a more easier way for a CI system to do automatic creation of PRs to gh-pages?** I had tried with the same repo to `gh-pages` but it kept saying that the PR must come from a different branch.\r\n\r\nAssuming the CI user only has these env variables set:\r\n\r\n```\r\nGIT_AUTHOR_EMAIL\r\nGIT_AUTHOR_NAME\r\nGIT_COMMITTER_EMAIL\r\nGIT_COMMITTER_NAME\r\nGITHUB_TOKEN\r\n```\r\n\r\nThere is no other git configuration files at all."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThe output of `gh issue list` is not showing enough length of issue name to recognize what the issue is about, it is too short for preview. \r\nThe issue is in current pre-release candidate - 0.12.0-pre.1. In version 0.11.1, it was working properly.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this 'gh issue list'\r\n2. You can see that in output issue name is not of enough length.\r\n\r\n### Expected vs actual behavior\r\n\r\nIt should at least use the enough screen real estate to make the issue name visible. Right now, it is only using half the space available."},{"labels":["bug"],"text":"### I am excited to be able to create an issue in a GitHub repo from my terminal. \r\n\r\n```shell\r\n$ gh --version\r\ngh version 0.11.1 (2020-07-28)\r\n```\r\n\r\n**Take a look.**\r\n\r\nI have described the normal behavior ie with nano, and abnormal behavior with VS Code\r\n\r\n## Normal Working with nano as the default text editor\r\nWhen I am using the nano as the default editor, everything is working perfectly as expected.\r\n\r\n![Screenshot from 2020-09-02 08-34-37](https://user-images.githubusercontent.com/66209958/91928002-8d023c80-ecf8-11ea-8fc3-868380817b9c.png)\r\n\r\n**The issue is successfully created with the description I wrote using nano**\r\n\r\n![Screenshot from 2020-09-02 08-35-03](https://user-images.githubusercontent.com/66209958/91928039-a1463980-ecf8-11ea-99e7-49a533ba691f.png)\r\n\r\n##  Now the problem occurs when I use  VS Code as the default editor\r\n\r\n**Take a look at the two subsequent GIFs:** (30 s each )\r\n\r\n1. _Creating an issue when VS code is a default text editor_\r\n\r\n![gh_cli_issue1](https://user-images.githubusercontent.com/66209958/91927819-254bf180-ecf8-11ea-8df6-6120e9c796fd.gif)\r\n\r\n2. _Opening the issue in the browser, to find that the issue body/description typed in VS Code, did not get received_\r\n\r\n![ghcli2](https://user-images.githubusercontent.com/66209958/91927905-52000900-ecf8-11ea-9205-ecffd9aba141.gif)\r\n\r\nIt has been a few months, I started using GitHub, and I am a fresher. If this issue is due to any mistake that I am making, then please guide me with the solution.\r\n\r\n# 🙏🥰 Thanks a ton for the amazing thing that GitHub is... \r\n\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen using the `gh pr status` command the review status is now correct if the review has been re-requested\r\n`gh version 0.11.1 (2020-07-29)`\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Open a pr and assign someone to review.\r\n2. Wait for the pr to be approved.\r\n3. Re request the review after to made additional changes.\r\n4. Run `gh pr status` on the branch for that PR\r\n\r\n### Expected vs actual behavior\r\n\r\nI woud expect that the status showed in the listo requests is `request`\r\nThe actual status showed is `approved`\r\n\r\n### Logs\r\n\r\n```\r\n➜ gh pr status\r\n\r\nRelevant pull requests in <reponame>\r\n\r\nCurrent branch\r\n  #1299  title... [branch]\r\n  ✓ Checks passing ✓ Approved\r\n\r\nCreated by you\r\n  #1299  title... [branch]\r\n  ✓ Checks passing ✓ Approved\r\n\r\nRequesting a code review from you\r\n  You have no pull requests to review\r\n\r\n➜ gh pr view 1299\r\ntitle\r\nOpen • blackjid wants to merge 6 commits into master from branch\r\n\r\nReviewers: <reviewer> (Requested)\r\nAssignees: blackjid\r\n\r\nView this pull request on GitHub: <url>\r\n\r\n➜ gh --version\r\ngh version 0.11.1 (2020-07-29)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.1\r\n```"},{"labels":["bug",null],"text":"When creating a PR using the command gh pr create --title \"$($msg): Batch($i)\" --body \"$Body\" -a $Assignee\r\n\r\nGH complains as follows: gh : error adding remote: fatal: remote fork already exists.\r\n\r\n . . . I know the fork already exists.  I forked it (6 months ago). Is gh pr create assuming I need to delete all my forks for each pr creation? Why not just use the fork that I just pushed to?\r\n\r\ngh version 0.11.1 (2020-07-28)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.1\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\ngh version 0.11.1 (2020-07-28)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.1\r\n\r\nRun `gh repo fork --remote`.\r\n\r\nThe behavior is wildly different between powershell and the command line if the repo is already forked\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1.  `gh repo fork --remote` in the command line on a repo you already have forked\r\n1.  `gh repo fork --remote` again in powershell\r\n\r\n### Expected vs actual behavior\r\n\r\nThe command line version just reports the fork already exists and does nothing.\r\n\r\nThe powerhsell version, however, goes ahead and does the upstream/origin update.\r\n\r\nThe behavior should not be so vastly different between the two version.  I have to call `powershell gh repo fork --remote` to get the behavior I want.  Having to spin up a new console host just to get a fork seems... weird.\r\n\r\n### Logs\r\n\r\n```\r\nD:\\temp\\gh\\winforms>gh repo fork --remote\r\nChadNedzlek/winforms already exists\r\nD:\\temp\\gh\\winforms>powershell gh repo fork --remote\r\n- Forking dotnet/winforms...\r\n! ChadNedzlek/winforms already exists\r\n✓ Renamed origin remote to upstream\r\n✓ Added remote origin\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n`gh version 0.11.1 (2020-07-28)`\r\n\r\nIf there's no permission to request a reviewer, cli shows that pull request creation failed, while it is really created. \r\n\r\n### Steps to reproduce the behavior\r\n\r\n![image](https://user-images.githubusercontent.com/134564/91307124-35bf1200-e7b6-11ea-93c0-c764fbd61d4c.png)\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect my command to be a noop if it partly fails.\r\n\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n\r\n```\r\n─[15:55] evg@desk ~/dev/esy ‹master›\r\n╰─$ gh pr create --fill -r andreypopp\r\nEnumerating objects: 30, done.\r\nCounting objects: 100% (30/30), done.\r\nDelta compression using up to 12 threads\r\nCompressing objects: 100% (16/16), done.\r\nWriting objects: 100% (16/16), 2.01 KiB | 2.01 MiB/s, done.\r\nTotal 16 (delta 14), reused 0 (delta 0), pack-reused 0\r\nremote: Resolving deltas: 100% (14/14), completed with 13 local objects.\r\nTo github.com:evxn/esy.git\r\n   e9b0946c..1337727f  HEAD -> master\r\nBranch 'master' set up to track remote branch 'master' from 'fork'.\r\nfailed to create pull request: GraphQL error: evxn does not have the correct permissions to execute `RequestReviews`\r\n╭─[15:58] evg@desk ~/dev/esy ‹master›\r\n╰─$ gh pr create --fill -a andreypopp                                                                                 1 ↵\r\na pull request for branch \"evxn:master\" into branch \"master\" already exists:\r\nhttps://github.com/esy/esy/pull/1159\r\n╭─[15:58] evg@desk ~/dev/esy ‹master›\r\n╰─$ gh --version                                                                                                      1 ↵\r\ngh version 0.11.1 (2020-07-28)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.1\r\n```"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nToday, whilst filling out a PR, I accidentally selected 'continue in browser' instead of 'submit'. Unfortunately, I was greeted with an [HTTP 414 `Request-URI too large`](https://http.cat/414) error in my browser:\r\n\r\n<img width=\"411\" alt=\"nginx http 414 error page\" src=\"https://user-images.githubusercontent.com/1781907/91238579-fedbf400-e702-11ea-8834-f214abfc75b1.png\">\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `gh pr create`\r\n2. Select `e` to edit the body, and type a lot of text (the repo I was submitting a PR against had a PR template, which is quite lengthy)\r\n3. Select 'continue in browser'\r\n4. 💥 💥 💥\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected behavior: The CLI should warn that it cannot continue in the browser; and/or possibly remove the option since it will not succeed.\r\nActual behavior: HTTP 414\r\n\r\nNotably, [RFC 3986](https://tools.ietf.org/html/rfc3986) doesn't define a maximum length for URIs. Normally this would be a barrier to better CLI behavior. However, various parts of the stack internally _do_ have length limits (implicitly in at least one case, possibly explicitly as well), so we should be able to track down what a safe limit might be, and take appropriate action in the CLI when a PR would exceed that.\r\n\r\n### Logs\r\n\r\n```\r\n❯ gh pr create\r\n\r\nCreating pull request for ahayworth-<redacted>-fix-customers into master in github/<redacted>\r\n\r\n? Title Update <redacted>\r\n? Body <Received>\r\n? What's next? Continue in browser\r\nEnumerating objects: 15, done.\r\nCounting objects: 100% (15/15), done.\r\nDelta compression using up to 12 threads\r\nCompressing objects: 100% (7/7), done.\r\nWriting objects: 100% (8/8), 1.51 KiB | 1.51 MiB/s, done.\r\nTotal 8 (delta 4), reused 0 (delta 0), pack-reused 0\r\nremote: Resolving deltas: 100% (4/4), completed with 4 local objects.\r\nremote:\r\nremote: Create a pull request for 'ahayworth-<redacted>-fix-customers' on GitHub by visiting:\r\nremote:      https://github.com/github/<redacted>/pull/new/ahayworth-<redacted>-fix-customers\r\nremote:\r\nTo github.com:github/<redacted>\r\n * [new branch]          HEAD -> ahayworth-<redacted>-fix-customers\r\nBranch 'ahayworth-<redacted>-fix-customers' set up to track remote branch 'ahayworth-<redacted>-fix-customers' from 'origin'.\r\nOpening github.com/github/<redacted>/compare/master...ahayworth-<redacted>-fix-customers in your browser.\r\n```\r\n"},{"labels":["bug"],"text":"![image](https://user-images.githubusercontent.com/98482/91228098-4788b280-e6ed-11ea-9206-35ae2ca6262a.png)\r\n\r\neither fix the ansi stuff or just disable this formatting if windows is noticed"},{"labels":["bug"],"text":"**gjgg###** Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.hgh\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```\r\ngh repo fork\r\n? Would you like to add a remote for the fork? Yes\r\n✓ Renamed origin remote to upstreamr the fork? (Y/n) y     !! (y is automatically entered, which what I don't want!)\r\n```\r\n\r\nI want `gh repo fork` not to rename origin remote to upstream.\r\n\r\nAlso not the spelling mistake `upstreamr`\r\n\r\n\r\ngh version 0.11.1 (2020-07-28)"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nAs you can see when viewing a PR on GitHub.com, the instructions to view the PR locally state to use the command \"`gh pr checkout <PULL_REQUEST_ID>`\"\r\n\r\n![image](https://user-images.githubusercontent.com/6047293/90403082-52fa2f00-e098-11ea-8b03-5161650ea3f4.png)\r\n\r\nThe syntax, which is current as of version 1.13.4, is actually `gh pr <PULL_REQUEST_ID>`\r\n\r\nIt is not immediately obvious from the CLI response what the correct syntax is\r\n\r\nWhen using the suggested syntax CLI responds with\r\n\r\n```\r\nFetching pull request #checkout into branch pr-checkout\r\nfatal: Can't fetch pull request checkout.\r\n```\r\n\r\n### Expected vs actual behavior\r\n**Actual behavior:** \r\nGitHub.com displays incorrect syntax when instructing how to use GitHub CLI\r\n\r\n**Expected behavior:**\r\nGitHub.com displays correct syntax (`gh pr <PULL_REQUEST_ID>`)\r\n\r\n"},{"labels":["bug"],"text":"### Issue\r\n\r\nUnable to upgrade gh via brew\r\n\r\n### Logs\r\n\r\n```\r\nA new release of gh is available: 0.9.0 → v0.11.1\r\nhttps://github.com/cli/cli/releases/tag/v0.11.1\r\n\r\n◢◤ GenerateMetal-iOS  bugs/new-issues brew upgrade gh\r\nUpdating Homebrew...\r\n==> Auto-updated Homebrew!\r\nUpdated 1 tap (homebrew/core).\r\n==> Updated Formulae\r\nUpdated 25 formulae.\r\n\r\n==> Upgrading 1 outdated package:\r\ngithub/gh/gh 0.9.0 -> 0.11.1\r\n==> Upgrading github/gh/gh 0.9.0 -> 0.11.1\r\n==> Downloading https://github.com/cli/cli/releases/download/v0.11.1/gh_0.11.1_macOS_amd64.tar.gz\r\nAlready downloaded: /Users/omarojo/Library/Caches/Homebrew/downloads/83b9aed9f14075dcc69b25a1f78a0c07e9057969ff8d3e220460652814e7b472--gh_0.11.1_macOS_amd64.tar.gz\r\n==> Caveats\r\nBash completion has been installed to:\r\n  /usr/local/etc/bash_completion.d\r\n\r\nzsh completions have been installed to:\r\n  /usr/local/share/zsh/site-functions\r\n==> Summary\r\n🍺  /usr/local/Cellar/gh/0.11.1: 43 files, 17.3MB, built in 8 seconds\r\n==> `brew cleanup` has not been run in 30 days, running now...\r\nRemoving: /usr/local/Cellar/gh/0.9.0... (39 files, 16.8MB)\r\nError: Permission denied @ apply2files - /usr/local/lib/node_modules/yo/node_modules/extglob/lib/.DS_Store\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nGithub supports having a default template a PR for all repositories in an organization: \r\nhttps://docs.github.com/en/github/building-a-strong-community/creating-a-default-community-health-file\r\n\r\nWhen creating a PR with gh, this is not respected.\r\nI think it would be cool if it was respected.\r\n\r\nVersion: `gh version 0.11.1 (2020-07-28)`\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create a repo named `.github`\r\n2. Put a `.github/pull_request_template.md` in the `.github` repo.\r\n3. Make a PR in another repo in that org in a browser, see that it uses that template\r\n4. Make a PR in another repo in that org with gh, see that it doesn't use the template\r\n\r\n### Expected vs actual behavior\r\n\r\nI would like the default template thing to work, but I suspect it won't be easy or perhaps not reasonably possible to implement.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nwhen i try to use\r\n```\r\ngh pr create\r\n```\r\n i get an error\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. clone any repo\r\n2. switch to new branch\r\n3. press `gh pr create`\r\n\r\n### Expected vs actual behavior\r\n\r\n- expected\r\nprompt the regular github cli flow\r\n\r\n- actual\r\nan error throw to the console \r\n\r\n\r\n### Logs\r\n\r\n```\r\ngh pr create\r\n\r\nCreating pull request for *****  into master in *****\r\n\r\n? Title (Add ability for more then one invalid attributes)                                                                                                          p\r\nanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x1728325]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/AlecAivazis/survey/v2/terminal.(*RuneReader).ReadLine(0xc0004706c0, 0x0, 0x0, 0xc000010018, 0x1abd2c0, 0xc000010020, 0xc0004706c0)\r\n        github.com/AlecAivazis/survey/v2@v2.0.7/terminal/runereader.go:56 +0x435\r\ngithub.com/AlecAivazis/survey/v2.(*Input).Prompt(0xc00041ecb0, 0xc000459388, 0x0, 0x0, 0x0, 0x0)\r\n        github.com/AlecAivazis/survey/v2@v2.0.7/input.go:62 +0x21b\r\ngithub.com/AlecAivazis/survey/v2.Ask(0xc0004cffc0, 0x2, 0x2, 0x17f08e0, 0xc0004c5930, 0x0, 0x0, 0x0, 0xc0004cffc0, 0xc00059f830)\r\n        github.com/AlecAivazis/survey/v2@v2.0.7/survey.go:291 +0x557\r\ngithub.com/cli/cli/command.glob..func10(0xc0004cffc0, 0x2, 0x2, 0x17f08e0, 0xc0004c5930, 0x0, 0x0, 0x0, 0xc0002629b0, 0xc0002629b0)\r\n        github.com/cli/cli/command/title_body_survey.go:58 +0x81\r\ngithub.com/cli/cli/command.titleBodySurvey(0x1fee700, 0xc0004c5930, 0xc000118340, 0x1ac62e0, 0xc00049a000, 0x0, 0x0, 0x0, 0x0, 0xc0005c2029, ...)\r\n        github.com/cli/cli/command/title_body_survey.go:204 +0x365\r\ngithub.com/cli/cli/command.prCreate(0x1fee700, 0x2034088, 0x0, 0x0, 0x0, 0x0)\r\n        github.com/cli/cli/command/pr_create.go:236 +0x24ec\r\ngithub.com/spf13/cobra.(*Command).execute(0x1fee700, 0x2034088, 0x0, 0x0, 0x1fee700, 0x2034088)\r\n        github.com/spf13/cobra@v1.0.0/command.go:842 +0x453\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x1fe9840, 0xc0000201c0, 0x2, 0x2)\r\n        github.com/spf13/cobra@v1.0.0/command.go:950 +0x349\r\nmain.main()\r\n        github.com/cli/cli/cmd/gh/main.go:72 +0x2bd\r\n```\r\n\r\n```\r\ngo version go1.14.7 darwin/amd64\r\n```\r\n\r\n```\r\ngh version 0.11.0 (2020-08-13)\r\n```\r\n\r\n```\r\nProductName:    Mac OS X\r\nProductVersion: 10.15.5\r\nBuildVersion:   19F101\r\n```"},{"labels":["bug"],"text":"When I run `gh issue create`, and go to add meta, I scroll around the options and it continues to print the line.\n\nExample:\n```\nChoose a meta option\nChoose a meta option\n\\[ ] Assignee\n\\[x] Reviewer\n```﻿\n"},{"labels":["bug"],"text":"### Describe the bug\r\n`gh version 0.11.1 (2020-07-28)`\r\nWhen using the `gh pr merge` command and selecting the rebase and merge option. It should be signing commits into the history as the commits themselves on the feature branch are signed. \r\n\r\n### Steps to reproduce the behavior\r\n\r\nHave Git Commit signing enabled.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\nSome commands like `gh repo create` and `gh repo clone` support the shorthand `REPO` format instead of the full `OWNER/REPO` format.\r\n\r\nBut this shorthand format does not work with `gh repo view [REPO]`.\r\n\r\n\r\n### Steps to reproduce the behavior\r\n1. Type this: `gh repo view [REPO]`\r\n2. Error output: `expected OWNER/REPO format`\r\n\r\n\r\n### Expected vs actual behavior\r\n`gh repo view [REPO]` command should run without error, but the above error is thrown.\r\n\r\n### Related\r\n#861 "},{"labels":["bug"],"text":"\r\n[Hina Marks 2020.txt](https://github.com/cli/cli/files/5030094/Hina.Marks.2020.txt)\r\n### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nNO_COLOR variable is ignored in \"gh issue create\"\r\n\r\ngh version 0.10.1-226-gebdd79d (2020-08-05)\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. gh issue create\r\n2. Text starting from \"Choose a template\" has ANSI colour sequences\r\n3. I tried various values for NO_COLOR including \"yes\" and \"***************\" just in case\r\n\r\nSee attached screenshot.\r\n![NO_COLOR](https://user-images.githubusercontent.com/3944577/89396889-0bbe8680-d707-11ea-801c-7070795e0fdc.png)\r\n\r\n### Expected vs actual behavior\r\n\r\nI expected all text to be plain, ie no ANSI escapes\r\n\r\n"},{"labels":["bug",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAt my job we rely on private GitHub repositories to house our code and each change goes in through a pull request. Unfortunately, when I run `gh pr create`, the CLI will by default always attempt to fork the repository, push to it, and then create a pull request. This particular operation fails with `cannot fork private repository`, which seems to be expected behavior.\r\n\r\n### Proposed solution\r\n\r\nAdd a flag to `gh pr create`, maybe called `--no-fork` (?) that would instead push to the current 'origin' remote and create a PR off it.\r\n\r\n### Additional context\r\n\r\nSo far I've been working around this with an alias that runs `git push origin --set-upstream $(git rev-parse --abbrev-ref HEAD)` before `gh pr create` which seems to 'work' but if there's a possiblity to teach `gh` to not fork it'd be really awesome :)\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen creating a PR from a fork, \r\nError: failed to create pull request: GraphQL error: The baseRefName is invalid.\r\n```\r\ngh --version                                                              1  20:06:48 \r\ngh version 0.11.1 (2020-07-28)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.1\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Fork a repo\r\n1. Make a change in master\r\n1. `gh pr create --base <PARENT_USERNAME>:master --title \"Title\" --body \"Body\"`\r\n\r\n### Expected vs actual behavior\r\n\r\n**Expected**\r\nCreate pull request successfully.\r\n\r\n**Actual**\r\nError: failed to create pull request: GraphQL error: The baseRefName is invalid.\r\n\r\nHTTP Proxy Log shows GraphQL call:\r\n```\r\n{\r\n  \"query\": \"\\n\\t\\tmutation PullRequestCreate($input: CreatePullRequestInput!) {\\n\\t\\t\\tcreatePullRequest(input: $input) {\\n\\t\\t\\t\\tpullRequest {\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t\\turl\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t}\",\r\n  \"variables\": {\r\n    \"input\": {\r\n      \"baseRefName\": \"<PARENT_USERNAME>:master\",\r\n      \"body\": \"Body\",\r\n      \"draft\": false,\r\n      \"headRefName\": \"<FORK_USERNAME>:master\",\r\n      \"repositoryId\": \"*****\",\r\n      \"title\": \"Title\"\r\n    }\r\n  }\r\n}\r\n\r\n## Response\r\n{\r\n  \"data\": {\r\n    \"createPullRequest\": null\r\n  },\r\n  \"errors\": [\r\n    {\r\n      \"type\": \"VALIDATION\",\r\n      \"path\": [\r\n        \"createPullRequest\"\r\n      ],\r\n      \"locations\": [\r\n        {\r\n          \"line\": 3,\r\n          \"column\": 4\r\n        }\r\n      ],\r\n      \"message\": \"The baseRefName is invalid.\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n**SOLUTION**\r\nThe GraphQL request works successfully after removing `<PARENT_USERNAME>:`"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nFrom within a GitHub Actions workflow, I want to delete review requests using `gh api`, but I get both an HTTP 422 response and an error message.\r\n\r\nI'm using the `gh` version provided in the Ubuntu 18.04 GitHub-hosted runners, version 0.11.0 currently.\r\n\r\n### Steps to reproduce the behavior\r\n\r\nI use\r\n\r\n```sh\r\ngh api \"repos/:owner/:repo/pulls/$prid/requested_reviewers\" \\\r\n    --method DELETE --input - --silent --include < reviewers.json\r\n```\r\n\r\nwhere `$prid` is the pull request ID and `reviewers.json` looks something like\r\n\r\n```json\r\n{\r\n  \"reviewers\": [\r\n    \"user1\",\r\n    \"user2\"\r\n  ]\r\n}\r\n```\r\n\r\nThe returned headers show that this fails with\r\n\r\n```\r\nHTTP/1.1 422 Unprocessable Entity\r\n```\r\n\r\nand I get an error\r\n\r\n```\r\njson: cannot unmarshal string into Go struct field .Errors of type struct { Message string }\r\n```\r\n\r\nBy now, I understand that the reason for the 422 is a permission issue; using curl for the same request results in the more descriptive error\r\n\r\n```json\r\n{\r\n  \"message\": \"Validation Failed\",\r\n  \"errors\": [\r\n    \"Could not resolve to a node with the global id of '<redacted>'.\"\r\n  ],\r\n  \"documentation_url\": \"https://developer.github.com/v3/pulls/review_requests/#delete-a-review-request\"\r\n}\r\n```\r\n\r\nand using a personal access token instead of `GITHUB_TOKEN` works. (I wonder why that's required, though, and asked about it [here](https://github.community/t/cannot-remove-review-request-from-within-workflow/125473?u=bewuethr).)\r\n\r\n### Expected vs actual behavior\r\n\r\nI'd probably expect the client to handle the error case more gracefully than bubbling up the json unmarshalling error, and showing the actual error message would be helpful, too.\r\n\r\n### Logs\r\n\r\nThe complete output from `--include` and the response itself:\r\n\r\n```\r\nHTTP/1.1 422 Unprocessable Entity\r\nAccess-Control-Allow-Origin: *\r\nAccess-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset\r\nContent-Length: 219\r\nContent-Security-Policy: default-src 'none'\r\nContent-Type: application/json; charset=utf-8\r\nDate: Fri, 31 Jul 2020 20:06:01 GMT\r\nReferrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin\r\nServer: GitHub.com\r\nStrict-Transport-Security: max-age=31536000; includeSubdomains; preload\r\nVary: Accept-Encoding, Accept, X-Requested-With\r\nX-Content-Type-Options: nosniff\r\nX-Frame-Options: deny\r\nX-Github-Media-Type: github.v3; format=json\r\nX-Github-Request-Id: 0404:348C:1AF3B6:2E4595:5F2479A9\r\nX-Ratelimit-Limit: 15000\r\nX-Ratelimit-Remaining: 14981\r\nX-Ratelimit-Reset: 1596228532\r\nX-Xss-Protection: 1; mode=block\r\n\r\njson: cannot unmarshal string into Go struct field .Errors of type struct { Message string }\r\n```"},{"labels":["bug",null],"text":"In PR #1432 I changed the way `cli` should be installed on Arch Linux.\r\n\r\nHowever this change isn't reflected on [Github CLI Docs Page](https://cli.github.com/manual/installation). \r\n\r\nThe [`docs`](https://github.com/cli/cli/tree/trunk/docs) folder `\"is used for documentation related to developing\"`. Is there any way that we can also update the docs on the page to avoid such situations in the future?\r\n\r\nI guess that's not the only change that isn't on the docs."},{"labels":["bug"],"text":"The help text output by `gh help` (or just `gh` with no other arguments) is just _slightly_ wider than 80 columns, but still line-wrapped at like 86 columns wide or whatever. That causes it to look especially bad in an 80-character window, without realizing any of the potential benefits from wider formatting.\r\n\r\nSpecifically, this is the output in an 80×24 terminal window:\r\n\r\n```\r\n$ gh\r\nWork seamlessly with GitHub from the command line.\r\n\r\nUSAGE\r\n  gh <command> <subcommand> [flags]\r\n\r\nCORE COMMANDS\r\n  issue:      Create and view issues\r\n  pr:         Create, view, and checkout pull requests\r\n  repo:       Create, clone, fork, and view repositories\r\n\r\nADDITIONAL COMMANDS\r\n  alias:      Create command shortcuts\r\n  api:        Make an authenticated GitHub API request\r\n  completion: Generate shell completion scripts\r\n  config:     Manage configuration for gh\r\n  gist:       Create gists\r\n  help:       Help about any command\r\n\r\nFLAGS\r\n  --help      Show help for command\r\n  --version   Show gh version\r\n\r\nEXAMPLES\r\n  $ gh issue create\r\n  $ gh repo clone cli/cli\r\n  $ gh pr checkout 321\r\n\r\nENVIRONMENT VARIABLES\r\n  GITHUB_TOKEN: an authentication token for API requests. Setting this avoids be\r\ning\r\n  prompted to authenticate and overrides any previously stored credentials.\r\n  \r\n  GH_REPO: specify the GitHub repository in \"OWNER/REPO\" format for commands tha\r\nt\r\n  otherwise operate on a local repository.\r\n  \r\n  GH_EDITOR, GIT_EDITOR, VISUAL, EDITOR (in order of precedence): the editor too\r\nl to use\r\n  for authoring text.\r\n  \r\n  BROWSER: the web browser to use for opening links.\r\n  \r\n  DEBUG: set to any value to enable verbose output to standard error. Include va\r\nlues \"api\"\r\n  or \"oauth\" to print detailed information about HTTP requests or authentication\r\n flow.\r\n  \r\n  GLAMOUR_STYLE: the style to use for rendering Markdown. See\r\n  https://github.com/charmbracelet/glamour#styles\r\n  \r\n  NO_COLOR: avoid printing ANSI escape sequences for color output.\r\n\r\nLEARN MORE\r\n  Use \"gh <command> <subcommand> --help\" for more information about a command.\r\n  Read the manual at https://cli.github.com/manual\r\n\r\nFEEDBACK\r\n  Fill out our feedback form https://forms.gle/umxd3h31c7aMQFKG7\r\n  Open an issue using “gh issue create -R cli/cli”\r\n\r\n```\r\n(The output above is collected from this version of the `gh` tool, installed on Fedora 32 from the official downloadable RPM package:)\r\n\r\n```console\r\n$ gh --version\r\ngh version 0.11.1 (2020-07-28)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.1\r\n```\r\n\r\nMy argument here is **not** that the text has to be formatted to only 80 columns wide. Only that if it _isn't_ going to fit in 80 columns, there should be no fixed-width line-wrapping, period. \r\n\r\n\r\nIdeally the output would auto-wrap to fit the current terminal width. But failing that, it would actually be better to just output one line per paragraph, without doing any wrapping. This is one of those situations where doing the _wrong_ thing ends up being worse than doing nothing."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nConsider the repository https://github.com/jenkinsci/jenkins-test-harness-htmlunit which is the official home of this library. I have a fork of it. However GH says\r\n\r\n> forked from andresrc/jenkins-test-harness-htmlunit\r\n\r\nbecause @andresrc created this repository, long ago, and whoever moved it to the @jenkinsci org when it became official decided to do so via a fork action rather than a move action. The clone under @andresrc is not active and we do not _want_ the @jenkinsci clone to be considered a fork, but AFAIK only @andresrc could fix this (by deleting his old clone) and we are out of touch. So for now we are stuck with an incorrect fork relationship.\r\n\r\nFrom explicit `git` commands, this is not a problem, we just ignore it. But `gh` insists on treating @andresrc’s clone as the default upstream, even though this is not mentioned in my remotes.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```console\r\n$ gh version\r\ngh version 0.11.0 (2020-07-16)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.0\r\n\r\n\r\nA new release of gh is available: 0.11.0 → v0.11.1\r\nhttps://github.com/cli/cli/releases/tag/v0.11.1\r\n$ git remote -v\r\nfork\tgit@github.com:jglick/jenkins-test-harness-htmlunit.git (fetch)\r\nfork\tgit@github.com:jglick/jenkins-test-harness-htmlunit.git (push)\r\norigin\tgit@github.com:jenkinsci/jenkins-test-harness-htmlunit.git (fetch)\r\norigin\tgit@github.com:jenkinsci/jenkins-test-harness-htmlunit.git (push)\r\n$ git checkout -b something\r\n$ gh pr create -w\r\n# or:\r\n$ gh pr checkout 6\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected:\r\n\r\n* `gh pr create` pushes to my @jglick fork, targeting the @jenkinsci origin\r\n* `gh pr checkout` checks out PRs filed on @jenkinsci\r\n\r\nActual:\r\n\r\n* `gh pr create` pushes to @jenkinsci (on which I happen to have write access, but I wish to use forks for all PRs)\r\n* `gh pr checkout` fails\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nThe readme instructions say to use pacman to install github-cli, however the package is not found.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Open a terminal on archlinux\r\n2. Enter the command `pacman -S github-cli`\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected behaviour: It installs from community package linked on the readme\r\n\r\nActual behaviour: \r\n\r\n```\r\nerror: target not found: github-cli\r\n```\r\n\r\n### Note\r\n\r\nIf you search on AUR there are two packages. One says it is official, but is tagged by yay as out of date as of yesterday:\r\n\r\n```\r\n❯ yay github-cli\r\n2 aur/github-cli-git 0.9.0.r156.g217998a-1 (+1 0.27) \r\n    The GitHub CLI tool\r\n1 aur/github-cli-bin 0.11.0-1 (+11 0.91) (Out-of-date: 2020-07-29) \r\n    The official GitHub CLI - binary\r\n==> Packages to install (eg: 1 2 3, 1-3 or ^4)\r\n==> \r\n```"},{"labels":["bug",null],"text":"```\r\ngh version 0.11.1 (2020-07-28)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.1\r\n```\r\n\r\nThe columnar alignment / spacing of `gh issue list` is off when the labels contain emoji.\r\n\r\n<img width=\"965\" alt=\"Screen Shot 2020-07-29 at 4 24 22 PM\" src=\"https://user-images.githubusercontent.com/599454/88863626-200afc80-d1b8-11ea-947b-97185766ab70.png\">\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nAfter `gh pr merge`, I get put back onto my default branch (which, in this case, the PR was against). However, this branch was not locally updated to have the merge present.\r\n\r\n### Steps to reproduce the behavior\r\n\r\nTerminal log (edited for prompt brevity, I only left the branch name in):\r\n\r\n```\r\n[pres-ietf-108] $ gh pr merge\r\n? What merge method would you like to use? Create a merge commit\r\n? Delete the branch locally and on GitHub? Yes\r\n✔ Merged pull request #38 (presentation for IETF 108 DPRIVE)\r\n✔ Deleted branch pres-ietf-108 and switched to branch master\r\n[master] $ git pull\r\nremote: Enumerating objects: 1, done.\r\nremote: Counting objects: 100% (1/1), done.\r\nremote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0\r\nUnpacking objects: 100% (1/1), done.\r\nFrom github.com:PowerDNS/parent-signals-dot\r\n   6436913..34a4249  master     -> origin/master\r\nUpdating 6436913..34a4249\r\nFast-forward\r\n draft-vandijk-dprive-ds-dot-signal-and-pin/presentations/bs         |   7 +\r\n .../presentations/ietf-108-dprive.md                                | 217 ++++++++++++++++++++++++++++\r\n .../presentations/template/index.html                               |  22 +++\r\n .../presentations/template/remark.min.js                            |  18 +++\r\n .../presentations/template/style.scss                               | 225 ++++++++++++++++++++++++++++++\r\n 5 files changed, 489 insertions(+)\r\n create mode 100755 draft-vandijk-dprive-ds-dot-signal-and-pin/presentations/bs\r\n create mode 100644 draft-vandijk-dprive-ds-dot-signal-and-pin/presentations/ietf-108-dprive.md\r\n create mode 100644 draft-vandijk-dprive-ds-dot-signal-and-pin/presentations/template/index.html\r\n create mode 100644 draft-vandijk-dprive-ds-dot-signal-and-pin/presentations/template/remark.min.js\r\n create mode 100644 draft-vandijk-dprive-ds-dot-signal-and-pin/presentations/template/style.scss\r\n$ gh --version\r\ngh version 0.11.0 (2020-07-16)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.0\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nI would have expected my `master` branch to have the PR merge before I did `git pull` myself.\r\n\r\n### Logs\r\n\r\nDone above as part of 'Steps to reproduce'.\r\n\r\n### Other details\r\n\r\nWhen checking if there was an open issue about this, I found #1096, which I feel is part of the same surprise - it also breaks 'I expect to end up in the merged state I asked for'.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nVersion : ```gh version 0.11.1 (2020-07-28)```\r\nImpacted command: ```gh issue list```\r\nParameter: ``` -L limit```\r\nRepo: (Private) mailoop/app\r\n\r\nRunning   ```gh issue list -L 100``` does not give the same result than ```gh issue list -L 101```\r\n\r\n### Steps to reproduce the behavior\r\n\r\nRun: ```gh issue list -L 100```\r\nAnd: ```gh issue list -L 101```\r\n\r\nOn the private repo mailoop/app the label displayed for the issue 2460 are :\r\n``` 6: Product Review, Cat: Miscellaneous ``` with limit option -L 100\r\n```   P2: 1 week, Cat: Miscellaneous``` with limit option -L 101\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected the labels do not change according to the limit option.\r\n\r\n### Logs\r\n#### Running\r\n\r\n````\r\ndate;\r\ngh issue list -L 100 | grep 2460\r\ngh issue list -L 101 | grep 2460\r\ngh issue list -L 100 | grep 2460\r\ndate;\r\n````\r\n\r\n#### I got\r\n````zsh\r\ndate  #Tue Jul 28 20:10:31 CEST 2020\r\ngh issue list -L 100 | grep 2460 #2460    OPEN    Batch Open Issue By Step        6: Product Review, Cat: Miscellaneous   2020-07-28 17:41:54 +0000 UTC\r\ngh issue list -L 101 | grep 2460 #2460    OPEN    Batch Open Issue By Step        P2: 1 week, Cat: Miscellaneous  2020-07-28 17:41:54 +0000 UTC\r\ngh issue list -L 100 | grep 2460 #2460    OPEN    Batch Open Issue By Step        6: Product Review, Cat: Miscellaneous   2020-07-28 17:41:54 +0000 UTC\r\ndate #Tue Jul 28 20:10:36 CEST 2020\r\n````\r\n\r\n\r\n#### With DEBUG set to true\r\n````\r\nexport DEBUG=true\r\n````\r\n\r\n````\r\n➜  app git:(br-2460-7ec40d8e) ✗ gh issue list -L 100\r\n[git remote -v]\r\n* Request at 2020-07-28 20:42:29.765863 +0200 CEST m=+0.049263201\r\n* Request to https://api.github.com/graphql\r\n* Request took 462.808613ms\r\n* Request at 2020-07-28 20:42:30.230648 +0200 CEST m=+0.514069034\r\n* Request to https://api.github.com/graphql\r\n* Request took 920.265448ms\r\n\r\nShowing 100 of 129 issues in Mailoop/app\r\n\r\n#2460  Batch Open Issue By Step                                                    (6: Product Review, Cat: Miscellaneous)                                     about 1 hour ago\r\nect...\r\n````\r\n\r\n````\r\n➜  gh issue list -L 101\r\n[git remote -v]\r\n* Request at 2020-07-28 20:41:28.66071 +0200 CEST m=+0.076552917\r\n* Request to https://api.github.com/graphql\r\n* Request took 539.201115ms\r\n* Request at 2020-07-28 20:41:29.20136 +0200 CEST m=+0.617227514\r\n* Request to https://api.github.com/graphql\r\n* Request took 1.023988093s\r\n* Request at 2020-07-28 20:41:30.231692 +0200 CEST m=+1.647604936\r\n* Request to https://api.github.com/graphql\r\n* Request took 299.045094ms\r\n\r\nShowing 101 of 129 issues in Mailoop/app\r\n\r\n#2460  Batch Open Issue By Step                                                    (P2: 1 week, Cat: Miscellaneous)                                            about 59 minutes ago\r\n.... ect\r\n````\r\n\r\n🤔 What Really blow my mind is the issue 2460 have been created 20 minutes ago and did never got the label  ```P2: 1 week```\r\n\r\n❓ Does anyone know a way to log the response given by the graphQL endpoint?\r\n[EDIT]: Will fork and log the output in order see the response coming from the API.\r\n\r\n### Aditionnal informations\r\n\r\n````\r\nProductName:    Mac OS X\r\nProductVersion: 10.15.3\r\nBuildVersion:   19D2064\r\n````\r\n\r\n\r\n"},{"labels":["bug",null],"text":"The milestone filter doesn't appear to work in `gh version 0.11.0 (2020-07-16)`\r\n\r\nFor example on https://github.com/Safecast/safecastapi/milestone/4\r\n\r\nI can see the issue by author\r\n\r\n```\r\n❯ gh issue list -A seanbonner | grep backup\r\n89\tOPEN\tNeed How To restore from backup\t\t2019-06-12 03:23:13 +0000 UTC\r\n```\r\n\r\nBut not by milestone\r\n\r\n```\r\n ❯ gh issue list --milestone 'AWS Migration'\r\n\r\nNo issues match your search in Safecast/safecastapi\r\n```\r\n\r\n* * *\r\n\r\n_Originally posted by @matschaffer in https://github.com/cli/cli/issues/641#issuecomment-664088480_\r\n\r\nProps to @bondanthony who [pointed this out in the original PR](https://github.com/cli/cli/pull/644#issuecomment-632733777), but we haven't spotted it; sorry!\r\n\r\nI think our `--milestone` filter should work like this:\r\n- if a number is passed, use it as milestone ID;\r\n- if a non-number is passed, look up all milestones and resolve it to an ID. This is how I expected the GitHub API to behave, but apparently it only takes IDs and special values such as `null` and `*`.\r\n\r\n/cc @eddumelendez"},{"labels":["bug"],"text":"Every time when I use `gh repo create` it creates a private repo, adds remote branches, but then it asks me for username and password. Since I use 2FA (and, you know, often passwords don't work there, so I have to generate access token again and again) it becomes very problematic for me to create repos. After that I can't use commands like `git push origin master` because I am not authorized and it asks me for username&password again. But without `gh ...` git works well, I can push/pull e t.c. "},{"labels":["bug"],"text":"### Describe the bug\r\n\r\ngh repo create\r\n✓ Created repository SachinMaharana/rust-kuberentes on GitHub\r\nUsername for 'https://github.com': SachinMaharana\r\nPassword for 'https://SachinMaharana@github.com': \r\nremote: Invalid username or password.\r\nfatal: Authentication failed for 'https://github.com/SachinMaharana/rust-kuberentes.git/'\r\nerror: Could not fetch origin\r\ngit: exit status 1\r\n\r\nEven when i gave wrong credentials, it was able to create a repo.\r\n\r\ngh version 0.10.0 (2020-06-11)\r\nhttps://github.com/cli/cli/releases/tag/v0.10.0\r\n\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. gh repo create\r\n2. ✓ Created repository SachinMaharana/rust-kuberentes on GitHub\r\nUsername for 'https://github.com': SachinMaharana\r\nPassword for 'https://SachinMaharana@github.com': \r\nremote: Invalid username or password.\r\nfatal: Authentication failed for 'https://github.com/SachinMaharana/rust-kuberentes.git/'\r\nerror: Could not fetch origin\r\ngit: exit status 1\r\n\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected to fail to create a repo if my credentials are invalid. Instead saw the repo gets created in github.com\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n```bash\r\n$ gh --version \r\ngh version 0.11.0 (2020-07-16)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```bash\r\n$ gh pr checkout 1307\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x38 pc=0x16d8016]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/cli/cli/api.CheckScopes.func1.1(0xc000646000, 0x2e, 0xc000063160, 0xc0003a6160)\r\n        /home/runner/work/cli/cli/api/client.go:107 +0x86\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n        /home/runner/work/cli/cli/api/client.go:143\r\ngithub.com/cli/cli/api.AddHeaderFunc.func1.1(0xc000646000, 0xc000a1ee70, 0xc000063130, 0xc0003a6160)\r\n        /home/runner/work/cli/cli/api/client.go:59 +0xb4\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n        /home/runner/work/cli/cli/api/client.go:143\r\ngithub.com/cli/cli/api.AddHeader.func1.1(0xc000646000, 0x203000, 0xc000063120, 0xc0003a6160)\r\n        /home/runner/work/cli/cli/api/client.go:45 +0xbd\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n        /home/runner/work/cli/cli/api/client.go:143\r\ngithub.com/cli/cli/api.AddHeader.func1.1(0xc000646000, 0xc000063100, 0xc000a1efe0, 0x100c878)\r\n        /home/runner/work/cli/cli/api/client.go:45 +0xbd\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n        /home/runner/work/cli/cli/api/client.go:143\r\nnet/http.send(0xc000646000, 0x1ab9de0, 0xc00060c098, 0x0, 0x0, 0x0, 0xc00060c0e8, 0x203000, 0x1, 0x0)\r\n        /opt/hostedtoolcache/go/1.14.4/x64/src/net/http/client.go:252 +0x43e\r\nnet/http.(*Client).send(0xc0000a48a0, 0xc000646000, 0x0, 0x0, 0x0, 0xc00060c0e8, 0x0, 0x1, 0xc00035a340)\r\n        /opt/hostedtoolcache/go/1.14.4/x64/src/net/http/client.go:176 +0xfa\r\nnet/http.(*Client).do(0xc0000a48a0, 0xc000646000, 0x0, 0x0, 0x0)\r\n        /opt/hostedtoolcache/go/1.14.4/x64/src/net/http/client.go:699 +0x44a\r\nnet/http.(*Client).Do(...)\r\n        /opt/hostedtoolcache/go/1.14.4/x64/src/net/http/client.go:567\r\ngithub.com/cli/cli/api.Client.GraphQL(0xc0000a48a0, 0xc000318000, 0x191, 0x0, 0x17b4a60, 0xc00060c0a8, 0x0, 0x0)\r\n        /home/runner/work/cli/cli/api/client.go:244 +0x322\r\ngithub.com/cli/cli/api.RepoNetwork(0xc00060c0a0, 0xc00035a280, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2036ca0, ...)\r\n        /home/runner/work/cli/cli/api/queries_repo.go:191 +0x423\r\ngithub.com/cli/cli/context.ResolveRemotesToRepos(0xc0000628b0, 0x2, 0x2, 0xc00060c0a0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n        /home/runner/work/cli/cli/context/context.go:74 +0x32b\r\ngithub.com/cli/cli/command.determineBaseRepo(0xc00060c0a0, 0x1feea80, 0x1aca300, 0xc0003c4240, 0x4, 0x0, 0x0, 0x0)\r\n        /home/runner/work/cli/cli/command/root.go:343 +0x1cd\r\ngithub.com/cli/cli/command.prFromArgs(0x1aca300, 0xc0003c4240, 0xc00060c0a0, 0x1feea80, 0xc0002b9900, 0x1, 0x1, 0x189d65c, 0x189cfd0, 0x4, ...)\r\n        /home/runner/work/cli/cli/command/pr_lookup.go:28 +0x79\r\ngithub.com/cli/cli/command.prCheckout(0x1feea80, 0xc0002b9900, 0x1, 0x1, 0x0, 0x0)\r\n        /home/runner/work/cli/cli/command/pr_checkout.go:31 +0x166\r\ngithub.com/spf13/cobra.(*Command).execute(0x1feea80, 0xc0002b98e0, 0x1, 0x1, 0x1feea80, 0xc0002b98e0)\r\n        /home/runner/go/pkg/mod/github.com/spf13/cobra@v1.0.0/command.go:842 +0x453\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x1feb600, 0xc00001e090, 0x3, 0x3)\r\n        /home/runner/go/pkg/mod/github.com/spf13/cobra@v1.0.0/command.go:950 +0x349\r\nmain.main()\r\n        /home/runner/work/cli/cli/cmd/gh/main.go:72 +0x2bd\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nInstalling via Homebrew leads to an error about how my username doesn't exist.\r\n\r\nI had previously installed 0.10.1 and didn't run into this issue.\r\n\r\n### Steps to reproduce the behavior\r\n\r\nMac OS 10.14.6\r\n\r\n`$ brew install github/gh/gh`\r\n\r\n### Logs\r\n\r\n```bash\r\nUpdating Homebrew...\r\n==> Auto-updated Homebrew!\r\nUpdated 1 tap (homebrew/core).\r\n==> Updated Formulae\r\ntox\r\n\r\n==> Installing gh from github/gh\r\n==> Downloading https://github.com/cli/cli/releases/download/v0.11.0/gh_0.11.0_macOS_amd64.tar.gz\r\nAlready downloaded: /Users/freddy/Library/Caches/Homebrew/downloads/f15250837d4e3bb27fd4c2cdb45966dc9a65bada104ff2b92aa07d8aad80b270--gh_0.11.0_macOS_amd64.tar.gz\r\nError: An exception occurred within a child process:\r\n  ArgumentError: user freddygv doesn't exist\r\n```\r\n\r\n\r\n"},{"labels":["bug"],"text":"`gh pr create -t \"autofilled\" --fill`\r\nDoes not respect the \"autofilled\" title, and fills in the default title according to the 'fill' logic.  \r\n\r\n(Have not categorised it as a bug or feature-request, because I dont know if this behaviour is intended or not)"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWe are actively developing on a fork of an archived repo.\r\n- Original archived repo: [paf31/purescript-book](https://github.com/paf31/purescript-book)\r\n- Active fork: [purescript-contrib/purescript-book](https://github.com/purescript-contrib/purescript-book)\r\n\r\n`gh pr` commands only consider the original archived repo though, and not the active fork, even when cloning from this active fork.\r\n\r\n`gh --version`: **0.11.0**\r\n\r\n### Steps to reproduce the behavior\r\n\r\n**Setup:**\r\n```\r\n> git clone https://github.com/purescript-contrib/purescript-book.git\r\n> cd purescript-book\r\n```\r\n\r\n**Problematic commands:**\r\n\r\n`gh pr list` only shows PRs made to the archived repo.\r\n```\r\n> gh pr list\r\n\r\nShowing 4 of 4 pull requests in paf31/purescript-book\r\n\r\n#141  Fix typos                                             nukisman:master\r\n#138  Update chapter8.md                                    arcz:patch-1\r\n#135  update to 0.12 and psc-package                        justinwoo:0.12-psc-package\r\n#133  Add psc-package.json files for all chapter exercises  gabejohnson:psc-package\r\n```\r\n\r\nI'd like to see this PR listed instead: https://github.com/purescript-contrib/purescript-book/pull/197\r\n\r\n`gh pr status` seems to show a configuration issue where it's treating `purescript-contrib` as a branch of `paf31` and not as a separate repo.\r\n\r\n```\r\n> gh pr status\r\n\r\nRelevant pull requests in paf31/purescript-book\r\n\r\nCurrent branch\r\n  There is no pull request associated with [purescript-contrib:master]\r\n\r\nCreated by you\r\n  You have no open pull requests\r\n\r\nRequesting a code review from you\r\n  You have no pull requests to review\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\nUpgrade from v0.10.1 to v0.11.0 via Homebrew on macOS 11.0(or 10.16) Big Sur Beta 2 fails. Installed `gh` via Homebrew.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type `brew upgrade gh` or `brew upgrade github/gh/gh`\r\n2. Output\r\n```\r\n$ brew upgrade github/gh/gh\r\nWarning: You are using macOS 10.16.\r\nWe do not provide support for this pre-release version.\r\nYou will encounter build failures with some formulae.\r\nPlease create pull requests instead of asking for help on Homebrew's GitHub,\r\nDiscourse, Twitter or IRC. You are responsible for resolving any issues you\r\nexperience while you are running this pre-release version.\r\n\r\n==> Upgrading 1 outdated package:\r\ngithub/gh/gh 0.10.1 -> 0.11.0\r\n==> Upgrading github/gh/gh 0.10.1 -> 0.11.0\r\n==> Downloading https://github.com/cli/cli/releases/download/v0.11.0/gh_0.11.0_macOS_amd64.tar.gz\r\nAlready downloaded: /Users/2JS/Library/Caches/Homebrew/downloads/f15250837d4e3bb27fd4c2cdb45966dc9a65bada104ff2b92aa07d8aad80b270--gh_0.11.0_macOS_amd64.tar.gz\r\nError: An exception occurred within a child process:\r\n  NoMethodError: undefined method `path' for nil:NilClass\r\nDid you mean?  paths\r\n```\r\n"},{"labels":["bug"],"text":"Due to the `replace` clause in the go.mod file of this repository, `go get` fails with the following errors: \r\n\r\n```\r\ngo: found github.com/cli/cli/cmd/gh in github.com/cli/cli v0.11.0\r\n# github.com/cli/cli/api\r\ngo/pkg/mod/github.com/cli/cli@v0.11.0/api/queries_issue.go:393:12: gql.MutateNamed undefined (type *graphql.Client has no field or method MutateNamed)\r\ngo/pkg/mod/github.com/cli/cli@v0.11.0/api/queries_issue.go:418:12: gql.MutateNamed undefined (type *graphql.Client has no field or method MutateNamed)\r\ngo/pkg/mod/github.com/cli/cli@v0.11.0/api/queries_repo.go:148:12: too many errors\r\n```\r\n\r\nI highly recommend either removing this replace clause [here](https://github.com/cli/cli/blob/73889e0c849f0901a5c1370f57fee38d031af193/go.mod#L32) either by contributing the changes upstream or forking the repo and changing the import path. \r\n\r\nThanks! "},{"labels":["bug"],"text":"Right now, \"environment variables\" section of `gh help` is stored as a Cobra command annotation, which don't get rendered to either man pages nor web pages. In fact, none of the annotations do.\r\n\r\nWe should expand our man + web page rendering process to include extra sections the same way these sections are printed to the terminal when running `gh help`.\r\n\r\nRef. #1370"},{"labels":["bug",null],"text":"**Issue Type**: Feature Request\r\n\r\n**Description**:\r\n\r\nSometimes(actually very frequent), it gives out somthing like:\r\n```\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x38 pc=0xada356]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/cli/cli/api.CheckScopes.func1.1(0xc0004c1000, 0x2e, 0xc0004a2a70, 0xc0003d66e0)\r\n\t/home/runner/work/cli/cli/api/client.go:107 +0x86\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n\t/home/runner/work/cli/cli/api/client.go:143\r\ngithub.com/cli/cli/api.AddHeaderFunc.func1.1(0xc0004c1000, 0x203000, 0xc0004a29e0, 0xc0003d66e0)\r\n\t/home/runner/work/cli/cli/api/client.go:59 +0xb4\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n\t/home/runner/work/cli/cli/api/client.go:143\r\ngithub.com/cli/cli/api.AddHeader.func1.1(0xc0004c1000, 0x203000, 0xc0004a29c0, 0xc0003d66e0)\r\n\t/home/runner/work/cli/cli/api/client.go:45 +0xbd\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n\t/home/runner/work/cli/cli/api/client.go:143\r\ngithub.com/cli/cli/api.AddHeader.func1.1(0xc0004c1000, 0xc0004a29b0, 0xc00047efe0, 0x40e478)\r\n\t/home/runner/work/cli/cli/api/client.go:45 +0xbd\r\ngithub.com/cli/cli/api.funcTripper.RoundTrip(...)\r\n\t/home/runner/work/cli/cli/api/client.go:143\r\nnet/http.send(0xc0004c1000, 0xebb960, 0xc0005bc100, 0x0, 0x0, 0x0, 0xc0005bc158, 0xc9e5ce, 0x1, 0x0)\r\n\t/opt/hostedtoolcache/go/1.14.4/x64/src/net/http/client.go:252 +0x43e\r\nnet/http.(*Client).send(0xc000648ab0, 0xc0004c1000, 0x0, 0x0, 0x0, 0xc0005bc158, 0x0, 0x1, 0x6)\r\n\t/opt/hostedtoolcache/go/1.14.4/x64/src/net/http/client.go:176 +0xfa\r\nnet/http.(*Client).do(0xc000648ab0, 0xc0004c1000, 0x0, 0x0, 0x0)\r\n\t/opt/hostedtoolcache/go/1.14.4/x64/src/net/http/client.go:699 +0x44a\r\nnet/http.(*Client).Do(...)\r\n\t/opt/hostedtoolcache/go/1.14.4/x64/src/net/http/client.go:567\r\ngithub.com/cli/cli/api.Client.GraphQL(0xc000648ab0, 0xc0002a8a00, 0x12f, 0x0, 0xbb7500, 0xc0005bc110, 0x0, 0x0)\r\n\t/home/runner/work/cli/cli/api/client.go:244 +0x322\r\ngithub.com/cli/cli/api.RepoNetwork(0xc0005bc108, 0xc0004a2530, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1438460, ...)\r\n\t/home/runner/work/cli/cli/api/queries_repo.go:191 +0x423\r\ngithub.com/cli/cli/context.ResolveRemotesToRepos(0xc0005bc058, 0x1, 0x1, 0xc0005bc108, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/home/runner/work/cli/cli/context/context.go:74 +0x32b\r\ngithub.com/cli/cli/command.determineBaseRepo(0xc0005bc108, 0x13efb80, 0xecbdc0, 0xc0003c7500, 0x2, 0x0, 0x0, 0x0)\r\n\t/home/runner/work/cli/cli/command/root.go:343 +0x1cd\r\ngithub.com/cli/cli/command.prFromArgs(0xecbdc0, 0xc0003c7500, 0xc0005bc108, 0x13efb80, 0xc000647440, 0x1, 0x1, 0xc9f98a, 0xc9f2fe, 0x4, ...)\r\n\t/home/runner/work/cli/cli/command/pr_lookup.go:28 +0x79\r\ngithub.com/cli/cli/command.prCheckout(0x13efb80, 0xc000647440, 0x1, 0x1, 0x0, 0x0)\r\n\t/home/runner/work/cli/cli/command/pr_checkout.go:31 +0x166\r\ngithub.com/spf13/cobra.(*Command).execute(0x13efb80, 0xc000647420, 0x1, 0x1, 0x13efb80, 0xc000647420)\r\n\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v1.0.0/command.go:842 +0x453\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x13ec700, 0xc000020090, 0x3, 0x3)\r\n\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v1.0.0/command.go:950 +0x349\r\nmain.main()\r\n\t/home/runner/work/cli/cli/cmd/gh/main.go:72 +0x2bd\r\n\r\n```\r\n\r\nI think it is because of unstable network connection.\r\n\r\nI think there should add an retry feature and it should give out a better error report like just throwing lots of code to user\r\n"},{"labels":["bug",null,null],"text":"### Describe the bug\r\n\r\n```bash\r\ngh version 0.11.0 (2020-07-16)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.0\r\n```\r\n\r\nLet's say I have a branch named `test` that has a draft PR to merge into `master` (default branch). Then, another user creates a PR to merge other changes into the `test` branch (i.e. not the default branch). When I want to checkout these changes, I'll use `gh pr checkout <id>`. Instead of creating a branch named `<username>/test` it just checks out the changes as `test`. Therefore, I cannot work on the initial draft PR since this branch now is ahead of `test`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create a branch named `test` and push changes.\r\n2. Let someone else use `test` as their base branch and let them commit and open a PR to merge into `test`.\r\n3. Use `gh pr checkout <id>` where id is the PR that the other user just created. `gh` will checkout the changes as `test` and not `<username>/test`.\r\n\r\n### Expected vs actual behavior\r\n\r\nI'd expect it to checkout the PR as `<username>/test` and not `test`.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nWhen passing `-` as a filename to `gh gist create`, it errors out to `Invalid request`\r\n\r\n### Steps to reproduce the behavior\r\n\r\nFails:\r\n```sh\r\ntree -L 2 | gh gist create -\r\nCreating gist...\r\nFailed to create gist: HTTP 422: Invalid request.\r\n```\r\n\r\nWorks:\r\n```sh\r\ntree -L 2 | gh gist create\r\nCreating gist...\r\nCreated gist\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nIt should read from the standard input, as written [in the docs](https://cli.github.com/manual/gh_gist_create)"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n❯ gh --version\r\ngh version 0.10.1 (2020-06-24)\r\nhttps://github.com/cli/cli/releases/tag/v0.10.1\r\n\r\nEvery interaction I have with private repos where I work includes the warning \r\n\r\n```Warning: gh now requires the `read:org` OAuth scope.\r\nVisit https://github.com/settings/tokens and edit your token to enable `read:org`\r\nor generate a new token for the GITHUB_TOKEN environment variable```\r\n\r\nThe token I'm using not only has read:org, it has admin:org.  I cannot give this token any more permissions than it has.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Install gh version 0.10.1\r\n2. Interact with a private repo using a token with admin:org permissions\r\n3. See error above\r\n\r\n### Expected vs actual behavior\r\n\r\nExpect - gh output without warnings\r\n\r\nActual - warnings about token permissions on every command run\r\n\r\n### Logs\r\n❯ gh pr view\r\nWarning: gh now requires the `read:org` OAuth scope.\r\nVisit https://github.com/settings/tokens and edit your token to enable `read:org`\r\nor generate a new token for the GITHUB_TOKEN environment variable\r\nThis Is a PR Title\r\nOpen • Bak3y wants to merge 2 commits into master from some-branch-name\r\n\r\nReviewers: devops (Requested)\r\n\r\nView this pull request on GitHub: https://github.com/someorg/private_repo/pull/420\r\n"},{"labels":["bug",null],"text":"The Flags section on `gh help` and the Inherited Flags section on `gh x --help` are indented more than the other sections\r\n\r\n\r\n<img width=\"575\" alt=\"Screen Shot 2020-07-07 at 9 28 28 AM\" src=\"https://user-images.githubusercontent.com/10404068/87457320-03b66f80-c5bd-11ea-9774-c9e9b392cd11.png\">\r\n\r\n<img width=\"432\" alt=\"Screen Shot 2020-07-07 at 9 28 38 AM\" src=\"https://user-images.githubusercontent.com/10404068/87457315-02854280-c5bd-11ea-9d6b-bcfc99fe32ed.png\">\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n```\r\ngh version 0.10.1 (2020-06-24)\r\nhttps://github.com/cli/cli/releases/tag/v0.10.1\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Install Ubuntu 20.04 or 18.04\r\n1. Install git-core (and other dependencies)\r\n1. Clone a github.com repo\r\n1. Create a branch and make a new commit.\r\n1. Execute the command `gh pr create` and I get this message:\r\n\r\n```\r\n[0709/144124.183292:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!\r\nMost likely you need to configure your SUID sandbox correctly\r\n```\r\n\r\nNOTE: the good news, this warning doesn't block me from using the github cli.\r\n\r\n### Expected vs actual behavior\r\n\r\nThis should not happen:\r\n\r\n```\r\n[0709/144124.183292:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!\r\nMost likely you need to configure your SUID sandbox correctly\r\n```\r\n\r\n### Logs\r\n\r\n```\r\n$ gh pr create\r\n\r\nNotice: authentication required\r\nPress Enter to open github.com in your browser... \r\n[0709/144124.183292:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!\r\nMost likely you need to configure your SUID sandbox correctly\r\nAuthentication complete. Press Enter to continue... \r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nAfter installing, every new terminal session (zsh) begins with this error:\r\n\r\n```\r\n/usr/local/etc/bash_completion.d/gh.sh:type:1456: bad option: -t\r\n```\r\n\r\nVersion: `gh version 0.10.1 (2020-06-24)`\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Use macOS + zsh (it's the default shell)\r\n2. `brew install github/gh/gh`\r\n2. Open a new terminal tab/window\r\n3. View error message"},{"labels":["bug"],"text":"Below image shows my error for 'gh pr create' command\r\n![Screenshot from 2020-07-09 03-24-30](https://user-images.githubusercontent.com/47566632/86974336-c6547b00-c193-11ea-8556-ec1438cbf73e.png)\r\n"},{"labels":["bug"],"text":"Unable to use gh from google cloud shell as gh requires a browser for auth and no browser is available within google cloud shell. \r\n\r\nI've seen \"work arounds\" discussing doing auth locally then copying ~/.config/gh/config.yml to the remote server however this isn't a viable long term option I would teach to students or promote within a company. Other web based oauth options have output a URL for the user to visit, then the user is able to copy the resulting token and paste back into the waiting CLI. I don't see sucha. feature here. \r\n\r\n### Steps to reproduce the behavior\r\n\r\n1) Open google cloud shell\r\n2) curl -sLO https://github.com/cli/cli/releases/download/v0.10.1/gh_0.10.1_linux_amd64.deb\r\n3) sudo apt install ./gh_*_linux_amd64.deb\r\n4) gh pr create\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected a URL to be output (since no web browser is present) and a prompt waiting for a token. \r\ninstead i simply see:\r\n\r\n    Notice: authentication required\r\n    Press Enter to open github.com in your browser... \r\n\r\nwith no url or way to complete the auth\r\n\r\n\r\n"},{"labels":["bug",null],"text":"One of the important uses for cli is accessibility, and for many people, colours are inaccessible. Colours are also a problem for automatic commandline processing.\r\n\r\nIt is good that the NO_COLOR environment variable is checked in utils/color.go , called from utils/utils.go .\r\n\r\nHowever the output is scrambled. The title and first 4 lines of the issue are displayed, followed by a series of blank lines.\r\n\r\n$ gh issue view 1\r\nTITLE\r\nLine 1\r\nLine 2\r\nLine 3\r\nLine 4\r\nBlank line\r\nBlank line \r\nBlank line\r\n   (etc)"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nI'm trying to use GH cli and at the first impression, I got an error\r\n\r\nI have created a repository successfully (gh opened a web browser to login).\r\nHowever, when I want to clone the repository by the command `gh repo clone`, it requires me to enter username/password then I should use `git clone` instead. See my screenshot\r\n\r\n![image](https://user-images.githubusercontent.com/10450325/86535377-17513e80-bf0a-11ea-849b-341fff93af1b.png)\r\n\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Enter command `gh repo create <repo name>`\r\n2. GH required me to enter username/password\r\n\r\n### Expected vs actual behavior\r\n\r\nI think it should clone the repo (even https or ssh) without entering username/password. (git command does it well)\r\n\r\n### Logs\r\n\r\n```\r\n 🐶 ~/code/unitest/UnitTestDemo  gh repo create NetCoreCLI\r\n✓ Created repository voquanghoa/NetCoreCLI on GitHub\r\n? Create a local project directory for voquanghoa/NetCoreCLI? No\r\n 🐶 ~/code/unitest/UnitTestDemo  gh repo clone NetCoreCLI\r\nCloning into 'NetCoreCLI'...\r\nUsername for 'https://github.com': voquanghoa\r\nPassword for 'https://voquanghoa@github.com':\r\n ✘  🐶 ~/code/unitest/UnitTestDemo  gh repo clone voquanghoa/NetCoreCLI\r\nCloning into 'NetCoreCLI'...\r\nUsername for 'https://github.com': ^C\r\n ✘  🐶 ~/code/unitest/UnitTestDemo  cat /Users/voquanghoa/.ssh/id_rsa.pub | pbcopy\r\n 🐶 ~/code/unitest/UnitTestDemo  gh repo clone voquanghoa/NetCoreCLI\r\nCloning into 'NetCoreCLI'...\r\nUsername for 'https://github.com': ^C\r\n ✘  🐶 ~/code/unitest/UnitTestDemo  git clone git@github.com:voquanghoa/NetCoreCLI.git\r\nCloning into 'NetCoreCLI'...\r\nWarning: Permanently added the RSA host key for IP address '13.250.177.223' to the list of known hosts.\r\nwarning: You appear to have cloned an empty repository.\r\n 🐶 ~/code/unitest/UnitTestDemo  gh --version\r\ngh version 0.10.1 (2020-06-24)\r\nhttps://github.com/cli/cli/releases/tag/v0.10.1\r\n 🐶 ~/code/unitest/UnitTestDemo  cd ..\r\n 🐶 ~/code/unitest  gh repo clone voquanghoa/NetCoreCLI\r\nCloning into 'NetCoreCLI'...\r\nUsername for 'https://github.com':\r\n```\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n`gh issue close some_invalid_number` goes into panic mode since the error isn't properly displayed.\r\n\r\ngh version :- v0.10.1\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this `gh issue close 102154`\r\n2. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected behaviour\r\n```bash\r\n$ gh issue close 10245\r\nGraphQL error: Could not resolve to an Issue with the number of 10245.\r\n```\r\n\r\nActual behaviour\r\n```bash\r\n$ gh issue close 10245\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x10 pc=0xb4a633]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/cli/cli/command.issueClose(0x13e0640, 0xc00028fae0, 0x1, 0x1, 0x0, 0x0)\r\n        /home/runner/work/cli/cli/command/issue.go:683 +0x573\r\ngithub.com/spf13/cobra.(*Command).execute(0x13e0640, 0xc00028fac0, 0x1, 0x1, 0x13e0640, 0xc00028fac0)\r\n        /home/runner/go/pkg/mod/github.com/spf13/cobra@v1.0.0/command.go:842 +0x453\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x13de6c0, 0xc000020090, 0x3, 0x3)\r\n        /home/runner/go/pkg/mod/github.com/spf13/cobra@v1.0.0/command.go:950 +0x349\r\nmain.main()\r\n        /home/runner/work/cli/cli/cmd/gh/main.go:55 +0x29c\r\n```\r\n### Logs\r\nSame as mentioned above.\r\n\r\n### Extra\r\nI figured out something. There is a code stub that is the root cause I believe:\r\n\r\n```go\r\nfunc issueClose(cmd *cobra.Command, args []string) error {\r\n---Initial stuff---\r\n\tissue, err := issueFromArg(apiClient, baseRepo, args[0])  // If there is an error, issue is nil\r\n\tvar idErr *api.IssuesDisabledError\r\n\tif errors.As(err, &idErr) {\r\n\t\treturn fmt.Errorf(\"issues disabled for %s\", ghrepo.FullName(baseRepo))\r\n\t} else if err != nil {\r\n\t\treturn fmt.Errorf(\"failed to find issue #%d: %w\", issue.Number, err)   // We are using issue.Number which causes the nilPointer exception\r\n\t}\r\n---Other stuff---\r\n}\r\n```"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nHello, I had configured `gh` cli on my laptop and then wanted to use it on a headless system. I copied the configuration over with `scp`:\r\n\r\n\r\n```\r\n(base)\r\n Sat  4 Jul - 13:12  ~ \r\n  scp -r ~/.config/gh/config.yml olga@ndnd.czbiohub.org:~\r\n```\r\n\r\nAnd this worked for a bit, but with the 0.10.1 release, I can no longer create PRs in the command line due to lack of authentication.\r\n\r\nVersion info:\r\n\r\n```\r\n(base)\r\n Sat  4 Jul - 13:09  ~/code/tabula-microcebus--olgabot/update-muscle-annotations/00_data_ingest/01_global_object   olgabot/update-muscle-annotations 3● \r\n olga@ndnd  gh --version\r\ngh version 0.10.1 (2020-06-24)\r\nhttps://github.com/cli/cli/releases/tag/v0.10.1\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type `gh or create`\r\n2. Press <kbd>Enter</kbd> to create a new authentication\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nI expected to be able to create a PR from the command line using the configuration in `~/.config/gh/config.yml`\r\n\r\n### Logs\r\n\r\n<details>\r\n\r\n\r\n```\r\n(base)\r\n ✘  Sat  4 Jul - 13:08  ~/code/tabula-microcebus--olgabot/update-muscle-annotations/00_data_ingest/01_global_object   olgabot/update-muscle-annotations 3● \r\n olga@ndnd  gh pr create\r\nNotice: additional authorization required\r\nPress Enter to open github.com in your browser...\r\n/usr/bin/xdg-open: 851: /usr/bin/xdg-open: www-browser: not found\r\n/usr/bin/xdg-open: 851: /usr/bin/xdg-open: links2: not found\r\n/usr/bin/xdg-open: 851: /usr/bin/xdg-open: elinks: not found\r\n/usr/bin/xdg-open: 851: /usr/bin/xdg-open: links: not found\r\n/usr/bin/xdg-open: 851: /usr/bin/xdg-open: lynx: not found\r\n/usr/bin/xdg-open: 851: /usr/bin/xdg-open: w3m: not found\r\nxdg-open: no method available for opening 'https://github.com/login/oauth/authorize?client_id=178c6fc778ccc68e1d6a&redirect_uri=http%3A%2F%2F127.0.0.1%3A45829%2Fcallback&scope=repo+read%3Aorg+gist&state=2096feba2f8839190b33'\r\nerror opening web browser: exit status 3\r\nPlease open the following URL manually:\r\nhttps://github.com/login/oauth/authorize?client_id=178c6fc778ccc68e1d6a&redirect_uri=http%3A%2F%2F127.0.0.1%3A45829%2Fcallback&scope=repo+read%3Aorg+gist&state=2096feba2f8839190b33\r\nIf you are on a server or other headless system, use this workaround instead:\r\n  1. Complete authentication on a GUI system;\r\n  2. Copy the contents of `~/.config/gh/hosts.yml` to this system.\r\n^C\r\n(base)\r\n ✘  Sat  4 Jul - 13:09  ~/code/tabula-microcebus--olgabot/update-muscle-annotations/00_data_ingest/01_global_object   olgabot/update-muscle-annotations 3● \r\n olga@ndnd  cat ~/.config/gh/hosts.yml\r\ngithub.com:\r\n    user: olgabot\r\n    oauth_token: 123abc\r\n```\r\n\r\n</details>"},{"labels":["bug",null],"text":"To the CLI team, Cc @martinwoodward , @mamuso .\r\n\r\nSummary\r\n-------------\r\n\r\ngh does not allow accessible login, although it otherwise addresses many of Github's accessibility problems. Fixing this bug will finally make gh important as an accessibility tool, as well as all its other uses. Pointers to the wider accessibility context for this bug are at the end of this bug report.\r\n\r\nThe recent addition to gh of OAuth-like tokens using GITHUB_TOKEN ( https://github.com/cli/cli/commit/968e17625ee9b3f4e58f56858a87e44fe3b7b5d5 ) means that a browser is no longer needed to perform login for the CLI to function for privileged operations such as opening a new bug report or a pull request. That is a great improvement, however generating the token in the first place does require a browser which defeats the purpose. In addition to being inaccessible, it's not great that the official Github CLI needs a GUI before you can use it.\r\n\r\nIt seems logical that gh could just use the OAuth API to generate a token, however this API is now deprecated: https://developer.github.com/v3/oauth_authorizations/ . Instead, we need to use the \"web applications flow\" which seems to mean \"use a browser\", https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow . Which brings us back to the accessibility problem for humans as well as automated toolchains, whose point is often not to have to do manual processes in web browsers. \r\n\r\nOne option would be for Github to un-deprecate the OAuth API, and then support it in gh with a command such as:\r\n\r\n```sh\r\n gh config get githubtoken ....  \r\n```\r\n\r\n(or perhaps \"gh api\") which would go through the OAuth process from the commandline . \r\n\r\nGithub is also deprecating password access to the API, (see https://developer.github.com/changes/2020-02-14-deprecating-password-auth/ ) but not to the git protocol. So it may be possible to use a git push, or the ssh/gpg key authentication mechanisms to gain credentials to create a token.\r\n\r\nPerhaps there is another solution altogether, but in any case it is a very real problem. \r\n\r\n\r\nWider Scope for this Bug Report\r\n--------------------------------------------\r\n\r\nThis bug report is limited to the problem with GH, however, it is particularly important since  GH is the only available Github inteface for developers who cannot use the Github web interface. As @martinwoodward and @mamuso (both Cc in this bug report) have had reported in great detail, the Github web interface is not accessible to developers with a wide range of common visual impairments. The broader aspects of this issue going back many months can be found by Github staff members \r\nusing this GUID which should be findable across internal email and database systems: Github-White-On-Black-Contrast-Accessibility-Issue-2019-2020 . "},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nI have the permissions to create a repository for MyOrg and can do so via the github web UI. The authentication for the gh cli seems to be correct in that I can view information about other repositories in the organization that are no public.  But I am unable to use the gh cli to create a new repository.\r\n \r\n### Steps to reproduce the behavior\r\n\r\n1. Type \r\n```\r\ngh repo create MyOrg/test\r\n```\r\n\r\n2. See error:\r\n```\r\ngraphql error: 'RobCannon cannot create a repository for MyOrg.'\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect the repository to be created and to see a message like:\r\n```\r\n✓ Created repository MyOrg/test on GitHub\r\n```\r\n"},{"labels":[null,"bug",null],"text":"This looks a bit similar to #1026, but I don't think it's the same.\r\n\r\n`gh` has been added to the virtual environment for GitHub actions recently; as per the [README](https://github.com/actions/virtual-environments/blob/master/images/linux/Ubuntu1804-README.md), it's version 10.1 since the 20200625.0 update of the environment.\r\n\r\nI'm using it to create a new branch and then a pull request from a GitHub Actions workflow; to authenticate, I use the [`GITHUB_TOKEN`](https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token), support for which has been added in #976.\r\n\r\nTo create a branch, I'm running this command in my workflow:\r\n\r\n```sh\r\nGITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \\\r\n    gh api repos/:owner/:repo/git/refs \\\r\n    --raw-field ref=refs/heads/sandbox-release-2020-07-03 \\\r\n    --raw-field sha=\"$(git rev-parse --verify HEAD)\"\r\n```\r\n\r\nwhich works fine.\r\n\r\nTo create the pull request, I run\r\n\r\n```sh\r\ngit fetch origin\r\ngit checkout sandbox-release-2020-07-03\r\nGITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \\\r\n    gh pr create --base sandbox --label release \\\r\n    --title 'Sandbox release 2020-07-03' --body ''\r\n```\r\n\r\nwhich also works fine.\r\n\r\nNow, I have a Slack channel listening to this repo, for PRs with the `release` label. However, the label seems to be applied to the PR after it has been created, so the Slack notification isn't triggered (see integrations/slack#1039).\r\n\r\nTo get a notification, I'm creating the PR as a draft first, then switch it to ready; this *does* trigger the notification. However, I'm running into a problem with the auth scopes required for this. This is what I run:\r\n\r\n```sh\r\ngit fetch origin\r\ngit checkout sandbox-release-2020-07-03\r\nexport GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\r\ngh pr create --base sandbox --label release --draft \\\r\n    --title 'Sandbox release 2020-07-03' --body ''\r\ngh pr ready sandbox-release-2020-07-03\r\n```\r\n\r\nEach `gh` command generates a warning:\r\n\r\n```\r\nWarning: gh now requires the `read:org` OAuth scope.\r\nVisit https://github.com/settings/tokens and edit your token to enable `read:org`\r\nor generate a new token for the GITHUB_TOKEN environment variable\r\n```\r\n\r\nand the `gh pr ready` command fails with\r\n\r\n```\r\nAPI call failed: Resource not accessible by integration\r\n```\r\n\r\nWhen I use a personal access token instead of `GITHUB_TOKEN` and give it the `read:org` OAuth scope, the PR can be marked as ready, but then everything will show up as created by my user instead of the GitHub Actions user, and it also feels like this should work out of the box.\r\n\r\nIs this something that can be fixed in `gh`? Why does marking a PR as ready even require `read:org` permissions?"},{"labels":["bug"],"text":"### Describe the bug\r\nWithout the `--web` mode, passing the project name in the project flag, works properly.\r\nHowever, using the `--web` mode, we need to pass the project path, because GitHub takes the project path as the query parameter\r\nVersion of gh: master\r\n\r\n### Example\r\nSuppose I have a project named \"My Project\" in my repo, \"testingCLI\"\r\nFor the non-web version, this works:\r\n`gh issue create -t Title -b Body -p \"My Project\"`\r\nFor the web version, I need to change it to:\r\n`gh issue create -t Title -b Body -p \"AliabbasMerchant/testingCLI/1\" --web`\r\n\r\n### Possible Solution\r\nEither:  \r\n1. We accept the project name everywhere, and convert the name to the path in the web mode (This may cause conflicts when the org and the repo has projects with the same name; But is not a breaking change)\r\n2. We accept the project path everywhere, and convert the path to the name in the normal mode (This may be a breaking change for our users, but will help determine the project much more specifically)"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nVersion: `version 0.10.1 (2020-06-24)`\r\nPR body(description) is not reflecting as empty even after removing the content completely\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. gh pr create --base master\r\n2. Enter title\r\n3. Change body (remove content completely)\r\n4. Save the file (nano editor)\r\n5. Submit\r\n\r\n### Expected vs actual behavior\r\nExpected:\r\nIf I remove the content from default PR template and save the file, it should have empty PR description after it is created.\r\n\r\nActual:\r\nPR had default template content as it is.\r\n\r\n### Logs\r\n\r\nNA\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n`gh pr create` does not support PULL_REQUEST_TEMPLATE without `.md` extension (\"old-style\" templates) (probably same thing for issues but I've haven't tested that).\r\n\r\n```bash\r\n$ ~/Downloads/gh_0.10.1_macOS_amd64/bin/gh --version\r\ngh version 0.10.1 (2020-06-24)\r\nhttps://github.com/cli/cli/releases/tag/v0.10.1\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Clone a repo with an old-style pull request or issue template (i.e. one with `.github/PULL_REQUEST_TEMPLATE` like https://github.com/CICE-Consortium/Icepack)\r\n2. Commit something, `gh pr create`, enter title, choose to edit PR description\r\n\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected: the PR template is used in the editor.\r\nActual: a oneline log of the commits of the current branch appears in the editor.\r\n\r\n---\r\n\r\nNote: maybe this is not supported on purpose, if so feel free to close.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nI can't upgrade past version 0.6.4. I was on 0.6.2, did `brew upgrade gh`, got:\r\n```bash\r\n$ brew upgrade gh\r\nWarning: You are using macOS 10.11.\r\nWe (and Apple) do not provide support for this old version.\r\nYou will encounter build failures with some formulae.\r\nPlease create pull requests instead of asking for help on Homebrew's GitHub,\r\nDiscourse, Twitter or IRC. You are responsible for resolving any issues you\r\nexperience while you are running this old version.\r\n\r\n==> Upgrading 1 outdated package:\r\ngithub/gh/gh 0.6.2 -> 0.6.4\r\n==> Upgrading github/gh/gh 0.6.2 -> 0.6.4 \r\n==> Downloading https://github.com/cli/cli/releases/download/v0.6.4/gh_0.6.4_macOS_amd64.tar.gz\r\n==> Downloading from https://github-production-release-asset-2e65be.s3.amazonaws.com/212613049/25e31200-7452-11ea-84d9-0fb78bf6944c?X-Amz-Algorithm=AWS4-HMAC-SH\r\n######################################################################## 100.0%\r\n\r\n\r\nA new release of gh is available: 0.6.4 → v0.10.1\r\nhttps://github.com/cli/cli/releases/tag/v0.10.1\r\n\r\n\r\n\r\nA new release of gh is available: 0.6.4 → v0.10.1\r\nhttps://github.com/cli/cli/releases/tag/v0.10.1\r\n\r\n\r\n\r\nA new release of gh is available: 0.6.4 → v0.10.1\r\nhttps://github.com/cli/cli/releases/tag/v0.10.1\r\n\r\n==> Caveats\r\n# --- >8 ----\r\n==> Summary\r\n🍺  /usr/local/Cellar/gh/0.6.4: 9 files, 17.1MB, built in 14 seconds\r\n==> Checking for dependents of upgraded formulae...\r\n==> No dependents found!\r\n\r\n$ gh --version\r\ngh version 0.6.4 (2020-04-01)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.4\r\n\r\n\r\nA new release of gh is available: 0.6.4 → v0.10.1\r\nhttps://github.com/cli/cli/releases/tag/v0.10.1\r\n\r\n$ brew upgrade gh\r\nWarning: You are using macOS 10.11.\r\nWe (and Apple) do not provide support for this old version.\r\nYou will encounter build failures with some formulae.\r\nPlease create pull requests instead of asking for help on Homebrew's GitHub,\r\nDiscourse, Twitter or IRC. You are responsible for resolving any issues you\r\nexperience while you are running this old version.\r\n\r\nWarning: github/gh/gh 0.6.4 already installed\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\nTry to upgrade from 0.6.2 on macOS 10.11.6...\r\n\r\n### Expected vs actual behavior\r\n\r\nGet the latest version (v0.10.1)\r\n\r\n### Logs\r\n\r\nSee above.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nIf one has a fork of a repository (but also have write access to the main repository), then `gh pr create -f` will add the personal fork as a `fork` remote, and try to push a branch there. That will ask for a username/password. But if fixed, it would also create a branch in the wrong repository.\r\n\r\ngh version 0.10.1 (2020-06-24)\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Clone a repository in an organization that you have write access to\r\n2. Ensure you have a personal fork of that repository\r\n3. Clone the original repository, and do *not* add your fork as a remote\r\n4. Check `git remote -v` at this point\r\n5. Make some change on a branch, and do `gh pr create -f`\r\n6. Check `git remote -v` at this point too\r\n\r\n### Expected vs actual behavior\r\n\r\nAt step 5, a remote named `fork` will be added and you may be prompted for credentials if you use SSH keys, which I do.\r\n\r\nI do not want a remote to be added, I want to push a branch to the repository I have cloned, since I have write access to it.\r\n\r\n### Logs\r\n\r\nThe concrete example for me was https://github.com/whatwg/fullscreen which I have a fork of.\r\n\r\nAt step 4:\r\n```\r\norigin\tgit@github.com:whatwg/fullscreen.git (fetch)\r\norigin\tgit@github.com:whatwg/fullscreen.git (push)\r\n```\r\n\r\nAt step 5:\r\n\r\n`gh pr create -f` gets stuck with a prompt:\r\n```\r\nUsername for 'https://github.com':\r\n```\r\n\r\nAt step 6:\r\n```\r\nfork\thttps://github.com/foolip/fullscreen.git (fetch)\r\nfork\thttps://github.com/foolip/fullscreen.git (push)\r\norigin\tgit@github.com:whatwg/fullscreen.git (fetch)\r\norigin\tgit@github.com:whatwg/fullscreen.git (push)\r\n```\r\n\r\n### Workaround\r\n\r\nDelete your fork."},{"labels":["bug"],"text":"I recently deleted a couple of access tokens. \r\nNow if I run: `gh pr checkout 69868` I get the error:\r\n\r\n```\r\ncould not determine base repo: graphql error: 'Resource protected by organization SAML enforcement. You must grant your personal token access to this organization., Resource protected by organization SAML enforcement. You must grant your personal token access to this organization.'\r\n```\r\n\r\nWhile I understand the problem (that my access token is no longer valid) the error message is not actionable at all. `hub` solved this much more elegantly by providing a direct link that the user can simply click and thereby create the access token.\r\n\r\nI'm not even sure what the workaround is here. Simply adding a new access token to github won't work. I also need to update the access token used by `gh` - but it's not clear to me how I do that.\r\n\r\nI have enabled SSO for all existing access tokens without success\r\n![image](https://user-images.githubusercontent.com/209966/85832787-fca3fa80-b790-11ea-90dc-a074d481cbff.png)\r\n"},{"labels":["bug"],"text":"The link for **View installation instructions →** points to\r\n\r\n```\r\nhttps://github.com/cli/cli#installation-and-upgrading\r\n```\r\n\r\nbut should probably point to\r\n\r\n```\r\nhttps://github.com/cli/cli#installation\r\n```\r\n\r\nThis link appears to have changed in f5aa2bb5ac5eb572af98d02f117b8943a9d8e313 (#730).\r\n\r\nI apologize if this is not the right place to report this issue. I didn't find a repository for <https://cli.github.com/>."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nI'm signed in to Github in my browser and have ssh auth configured.  I've cloned an opensource repo, made a change, and now I want to submit a PR just like I do when working on my company's repos.  However, it wants to submit the PR via https, and says:\r\n```\r\nUsername for 'https://github.com':\r\n```\r\n\r\n```\r\n$ gh --version\r\ngh version 0.6.4 (2020-04-01)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.4\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this:\r\n```\r\n$ git clone https://github.com/fluent/fluentd-kubernetes-daemonset\r\n$ cd fluentd-kubernetes-daemonset\r\n$ echo '# Test' >> Makefile\r\n$ git commit -am \"Test\"\r\n$ gh pr create\r\n\r\nCreating pull request for master into master in fluent/fluentd-kubernetes-daemonset\r\n\r\n? Title Test\r\n? Body <Received>\r\n? What's next? Preview in browser\r\nUsername for 'https://github.com':\r\n```\r\n\r\nNote: It also does this when I use an ssh url for the initial cloning:\r\n```\r\n$ git clone git@github.com:fluent/fluentd-kubernetes-daemonset.git\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nIt should just work, without asking for username and password again.\r\n\r\n### Logs\r\n\r\nn/a"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen you say `gh issue list` you get all the open issues in your repo.\r\n\r\nWhen you say `gh issue close 5` you close Issue #5 in your repo.\r\n\r\nThe bug, or inconsistent behavior, is when you say `gh issue list 5` is doesn't list just Issue #5, it lists all your open Issues.\r\n\r\nWho do some sub-commands on issue work with arguments and others don't?\r\n"},{"labels":["bug"],"text":"https://github.com/cli/cli/pull/976 taught `gh` to respect the `GITHUB_TOKEN` environment variable. Unfortunately, I already use this environment variable for other tools, and as such it has the absolute minimum set of scopes attached to it for security purposes.\r\n\r\nNow that `gh` has started use this environment variable, I'm getting the following error:\r\n\r\n```\r\nWarning: gh now requires the `read:org` OAuth scope.\r\nVisit https://github.com/settings/tokens and edit your token to enable `read:org`\r\nor generate a new token for the GITHUB_TOKEN environment variable\r\ngraphql error: 'Your token has not been granted the required scopes to execute this query. The 'name' field requires one of the following scopes: ['read:org', 'read:discussion'], but your token has only been granted the: ['repo'] scopes. Please modify your token's scopes at: https://github.com/settings/tokens.'\r\n```\r\n\r\nI don't want to grant this token additional scopes because it is not required for the other tools that use it.\r\n\r\nPossible solutions:\r\n- Rename `GITHUB_TOKEN` to `GITHUB_GH_TOKEN` and avoid clashes altogether\r\n- Unset `GITHUB_TOKEN` to allow OAuth flow to take precedence (i.e. create a wrapper script which invokes `GITHUB_TOKEN= command gh \"$@\"`)\r\n- Let the user specify which auth method should take precedence – in my case, I specifically do not want to use the `GITHUB_TOKEN` method\r\n\r\nThoughts?\r\n\r\n"},{"labels":["bug"],"text":"### create login page and signup page simply\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\ncli v0.10.0\r\nwhen doing: gh pr create, setting a title and no body (just enter), it's not using the available PR template.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1) gh pr create\r\n2) give a title\r\n3) enter (no body)\r\n4) submit\r\n5) open the PR link on the browser and check the PR description\r\n\r\n### Expected vs actual behavior\r\n\r\nPR is filled up with the PR template instead of an empty description.\r\nv0.8.0 worked as intended.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\nCurrently the command `gh issue list` gives different outputs for almost the same command. \r\nMore specifically,\r\n`gh issue list -a some`   ---> Gives output *No issues match your search in cli/cli*\r\n`gh issue list -a \"some\"`  ---> Gives output *No issues match your search in cli/cli*\r\n`gh issue list -a \"some-author\"`    ---->   Gives output *graphql error: 'Could not find an assignee with the login 'some-author'.'*\r\n\r\nI assume this is a parsing error, especially with the hyphen there.\r\n### Steps to reproduce the behavior\r\n\r\n```bash\r\n$ gh issue list -a some\r\n$ gh issue list -a \"some\"\r\n$ gh issue list -a \"some-author\"\r\n```\r\n\r\n### Expected vs actual behavior\r\nI expected to see the same message *No issues ...* instead of the quite cryptic *graphql error*.\r\n\r\n### Logs\r\n![Screenshot from 2020-06-13 18-18-13](https://user-images.githubusercontent.com/50791000/84569206-63451380-ada2-11ea-9793-5ab9eba4101d.png)\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThe gh-cli list command should not be separated by a colon symbol.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```bash\r\n$ go version\r\ngo version go1.14.4 darwin/amd64\r\n\r\nbuild the project and go to bin directory\r\n$ make && cd bin\r\n\r\n$ ./gh help\r\n```\r\n\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n**Actual behavior** :\r\n\r\n<img width=\"477\" alt=\"Screen Shot 2020-06-12 at 14 09 50\" src=\"https://user-images.githubusercontent.com/1158185/84470666-6a8ef300-acb6-11ea-82f3-342a66bbbecc.png\">\r\n\r\n\r\n**Expected** :\r\n\r\n<img width=\"467\" alt=\"Screen Shot 2020-06-12 at 14 06 41\" src=\"https://user-images.githubusercontent.com/1158185/84470478-02401180-acb6-11ea-8818-f6294a0fbb29.png\">\r\n\r\n\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nI can not push with gh\r\n![a](https://user-images.githubusercontent.com/58572646/84444366-9a36f000-ac0f-11ea-9e82-eae1c17031cd.PNG)\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nThe \"LEARN MORE\" section in the new help docs suggest using `gh <command> <subcommand> --help` but that results in `unknown command --help`. The usage info is printed so the user's desire is largely fulfilled despite the confusing error at the top.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. run `gh help pr status`\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected: we recommend `gh help <command> <subcommand>`\r\n\r\nActual: we recommend `gh <command> <subcommand> --help`\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nGitHub will automatically change the base of pull requests that currently have their head set to the branch being deleted if the deleting is done via the button on the pull request.\r\n\r\nFor example, if we have two PRs A and B. The base of A is `master`, the base of B is A.\r\n\r\n```\r\nmaster - A - B\r\n```\r\n\r\nIf we merge A and delete the branch via the website, GitHub automatically updates the base of PR B from A to `master`. Example:\r\n\r\n![image](https://user-images.githubusercontent.com/921609/84422595-2d265900-ac15-11ea-92b1-791e2aeacde5.png)\r\n\r\nHowever, if we use `gh pr merge --delete-branch` instead of the website, this does not happen. Instead, PR B will be closed.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create two PRs, one of which depends on the other\r\n1. Merge the dependency PR via `gh pr merge --delete-branch`\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected: base of dependent PR should be updated\r\n\r\nActual: dependent PR is closed\r\n\r\n### Logs\r\n\r\nN/A"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThere is no validation of pr and issue limit flag.\r\n\r\n### Steps to reproduce the behavior\r\n\r\ngh issue list --limit=0    \r\ngh issue list --limit=-1    \r\n\r\n### Expected vs actual behavior\r\n\r\nThe flag should be validated rather than getting the following responses:\r\n\r\ngh issue list --limit=-1                 \r\ngraphql error: '`first` on the `issues` connection cannot be less than zero.'\r\n\r\ngh issue list --limit=0 \r\ngraphql error: '`` does not appear to be a valid cursor., `` does not appear to be a valid cursor.'\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nDownload what appears to be the final v0.9.0 windows MSI release package, gh_0.9.0_windows_amd64.msi,  from GitHub, releases page. \r\n\r\n```(base) PS C:\\Users\\rnwol> gh --version\r\ngh version 0.9.0-pre (2020-05-26)\r\nhttps://github.com/cli/cli/releases/tag/v0.9.0-pre\r\n\r\nA new release of gh is available: 0.9.0-pre → v0.9.0\r\nhttps://github.com/cli/cli/releases/tag/v0.9.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Uninstall gh\r\n2. Download Windows 0.9.0 MSI release\r\n3. Install\r\n4. Use it, and be notified that the 0.9.0 release is available. \r\n\r\n### Expected vs actual behavior\r\n\r\nDid not expect CLI to tell me that a later version was available.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n<img width=\"896\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28626546/84100799-cd725700-aa36-11ea-9676-a36b90353f54.png\">\r\n#1002 \r\n\r\n### Steps to reproduce the behavior\r\n### Expected vs actual behavior\r\n\r\nShould change `master` to `trunk`\r\n\r\n`There is no pull request associated with [trunk]`\r\n\r\n![73286699-9f922180-41bd-11ea-87c9-60a2d31fd0ac-2](https://user-images.githubusercontent.com/28626546/84101258-baac5200-aa37-11ea-8a62-a633bf12dcea.png)\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\nThe way I use `git` is to stay in \"detached HEAD,\" except when working on my own feature branches. For example, I don't keep a local `master` branch, and instead just refer to `origin/master` as necessary.\r\n\r\nThis breaks `gh`:\r\n```\r\n➜ gh --version\r\ngh version DEV\r\nhttps://github.com/cli/cli/releases/latest\r\n\r\n➜ gh pr status\r\ncould not query for pull request for current branch: could not determine current branch: git: not on any branch\r\n```\r\n\r\nI built the tool via `go install github.com/cli/cli/cmd/gh` on the current latest commit (28f91cbed8dc31388585134e45a8ca92afe9a218).\r\n\r\n### Expected vs actual behavior\r\n\r\nSee above console output for actual behavior. What I expect is something like the following:\r\n\r\n```\r\n➜ gh pr status\r\n\r\nRelevant pull requests in <REPO>\r\n\r\nCurrent branch\r\n  could not query for pull request for current branch: could not determine current branch: git: not on any branch\r\n\r\nCreated by you\r\n  ...\r\n\r\nRequesting a code review from you\r\n  ...\r\n```\r\n\r\nNote that the error about not being on a branch is only relevant for the \"current branch\" section, so the `gh` tool should still output the other sections."},{"labels":["bug",null],"text":"### Describe the bug\r\nOn the web interface, lines that don't end with at least 2 spaces are not joined.\r\n\r\n```shell\r\n$ gh --version\r\ngh version 0.9.0 (2020-05-26)\r\nhttps://github.com/cli/cli/releases/tag/v0.9.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\nIf you run the following\r\ncommand it your shell,\r\ntheses lines will be joined.\r\n\r\n```shell\r\n$ gh issue -R cli/cli view 1110\r\n```"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\ngh version 0.9.0\r\n\r\n![image](https://user-images.githubusercontent.com/13553903/83835685-030bfd00-a724-11ea-9ced-f02af04d34b5.png)\r\n\r\n![image](https://user-images.githubusercontent.com/13553903/83835703-1028ec00-a724-11ea-828e-c64d8386a027.png)\r\n\r\n(`proxy` is a bash function to add `https_proxy` env when executing command)\r\n\r\n### Steps to reproduce the behavior\r\n\r\ndon't know how to reproduce, it may work or not work without any configuration changes.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nFor every subcommand I tried, like `gh pr status`, `gh` would fail with the same error:\r\n\r\n```\r\nmkdir: /Users/jordan/.config/gh: Not a directory\r\n```\r\n\r\nAs silly as it sounds, this small hurtle stopped me from using it for weeks. When I looked into it, I assumed there was some authorization step that I needed to run but I couldn't find any mention of it in the docs.\r\n\r\nAfter reading the error more carefully, I realized that `.config/gh` was a file. I'm not sure where it came from but inside were credentials. Perhaps it was an earlier version of this CLI or a remnant from hub?\r\n\r\nAnyway, renaming that file got me back up. The authorization flow is automatic—and very slick!—but since it wasn't kicking off for me, I spent some time hunting down how to kick it off.\r\n\r\n```\r\n$ gh --version\r\ngh version 0.9.0 (2020-05-26)\r\nhttps://github.com/cli/cli/releases/tag/v0.9.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```bash\r\nmv ~/.config/gh ~/.config/gh.bak # 1. Stash your credentials\r\ntouch ~/.config/gh               # 2. Create a file where it shouldn't be\r\ngh pr status                     # 3. Run a command\r\nrm ~/.config/gh                  # 4. Put things back\r\nmv ~/.config/gh.bak ~/.config/gh\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\n**Expected**: a message telling me authentication failed because a file exists where it shouldn't and a recommendation on how to move forward.\r\n\r\n**Actual**: error telling me a file is not a directory.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen merging a pull request, currently the CLI switches to the default branch of the repository instead of switching to the base branch of the PR.\r\n\r\n#### gh --version\r\n\r\n```\r\ngh version 0.9.0 (2020-05-26)\r\nhttps://github.com/cli/cli/releases/tag/v0.9.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create a PR against a branch other than master `gh pr create --base other-branch`\r\n2. Merge the PR `gh pr merge`\r\n3. Select the option to delete the local / remote branches.\r\n4. `gh` will take you back to `master`\r\n\r\n### Expected vs actual behavior\r\n\r\nI would think it would be more convenient to switch to the base branch of the PR (`other-branch`) instead of the default branch of the repository (`master`). More often than not you'll probably want to either view the merged code with the rest of the code, or start working on another PR off that same base branch, be it an epic, etc.\r\n\r\nI classified this as a bug because I would consider it a UX bug as the behavior wasn't what I was expecting.\r\n\r\nOriginal PR: https://github.com/cli/cli/pull/1095"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nI am unable to assign a milestone to a PR using the _Add Metadata_ prompt in `gh pr create`. After selecting the _Milestone_ option, it displays the list of available milestones, but upon selection it crashes with:\r\n```\r\ncould not collect title and/or body: could not prompt: could not find field matching milestone\r\n```\r\n\r\nHowever, it works fine if I specify the milestone manually via the command line flag (`--milestone`).\r\n\r\n```\r\ngh version 0.9.0 (2020-05-26)\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type `gh pr create`\r\n2. Follow the prompts until _What's next?_ and select `Add Metadata`\r\n3. Select `Milestone`\r\n4. Select known existing milestone in the list (mine is called `May 2020 Release 2`)\r\n5. Error is displayed and the command exits:\r\n```\r\ncould not collect title and/or body: could not prompt: could not find field matching milestone\r\n```\r\n\r\n### Expected vs actual behavior \r\n\r\nThe PR should be created with the milestone assigned, rather than the command failing with the error. \r\n\r\n### Logs\r\n\r\n```\r\nvalorin@Pengwin:~/dev/wordfence/www (FB9926)$ gh pr create\r\n\r\nCreating pull request for FB9926 into master in wordfence/www\r\n\r\n? Title FB9926: Update plugin to latest from repo\r\n? Body <Received>\r\n? What's next? Add metadata\r\n? What would you like to add? Milestone\r\n? Milestone May 2020 Release 2\r\ncould not collect title and/or body: could not prompt: could not find field matching milestone\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nSee typical output from `gh pr create` below. Note in particular the two lines beginning:\r\n\r\n```\r\nremote: Create a pull request for 'testinggh' on GitHub by visiting:\r\n```\r\n\r\nThese are inaccurate and unneeded when using gh pr create. Remove them.\r\n\r\n\r\n### Steps to reproduce the behavior\r\n$ gh pr create -a suztomo -f\r\nNotice: authentication required\r\nPress Enter to open github.com in your browser... \r\nEnumerating objects: 19, done.\r\nCounting objects: 100% (19/19), done.\r\nDelta compression using up to 8 threads\r\nCompressing objects: 100% (10/10), done.\r\nWriting objects: 100% (11/11), 1015 bytes | 1015.00 KiB/s, done.\r\nTotal 11 (delta 7), reused 0 (delta 0), pack-reused 0\r\nremote: Resolving deltas: 100% (7/7), completed with 6 local objects.\r\nremote: \r\nremote: Create a pull request for 'testinggh' on GitHub by visiting:\r\nremote:      https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/new/testinggh\r\nremote: \r\nTo github.com:GoogleCloudPlatform/cloud-opensource-java.git\r\n * [new branch]        HEAD -> testinggh\r\nBranch 'testinggh' set up to track remote branch 'testinggh' from 'origin'.\r\nhttps://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1430\r\n\r\n\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nIt seems that when I try to perform actions using `gh` in the CLI, it requires me to auth via a browser so I can get the proper authentication tokens set up.\r\n\r\nWhen I do this, it opens the browser, and prompts me to log in. After I log in, I'm redirected to a '127.0.0.1' URL, but in both Chrome and Safari on my Mac, I get either:\r\n\r\n```\r\nThis site can’t be reached\r\n127.0.0.1 refused to connect.\r\n```\r\n\r\nor\r\n\r\n```\r\nSafari can't connect to server\r\n```\r\n\r\nAnd when I check on open ports on my Mac, I'm not seeing any ports in the `58xxx` range that it seems the CLI is supposed to be opening to get the connection back from the browser...\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. In CLI, enter `gh pr create`\r\n2. Press Enter to open your browser (can set alternate browser with `BROWSER=` env var)\r\n3. Log into GitHub in your browser\r\n\r\n### Expected vs actual behavior\r\n\r\nI expected to be directed back to the CLI and for the authentication workflow to complete.\r\n\r\nInstead, I got the '127.0.0.1 can't be reached errors mentioned earlier.\r\n\r\n### Logs\r\n\r\n```\r\n$ gh pr create\r\nNotice: additional authorization required\r\nPress Enter to open github.com in your browser... \r\n^C\r\n```"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nWhen running gh and getting the below output:\r\n\r\n```\r\ngh pr list\r\nNotice: authentication required\r\nPress Enter to open github.com in your browser...\r\n```\r\n\r\nFirefox opens in a new window on an empty tab.\r\n\r\nVersions:\r\nFirefox: 76.0.1\r\nOSX: 10.15.4\r\nTmux: 2.9a\r\niterm: 3.3.9\r\ngh version 0.9.0 (2020-05-26)\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Start a new tmux session\r\n2. Type `gh pr list` inside of tmux\r\n3. View the output 'Press Enter to open github.com in your browser...'\r\n4. Press enter\r\n5. See empty firefox window\r\n6. No error codes from terminal (\"hangs\" at Press enter...)\r\n\r\n### Expected vs actual behavior\r\nExpected: Firefox opens up at https://github.com/login/oauth/authorize?....\r\n\r\nActual: Firefox opens up with no url, and no exit code in terminal\r\n"},{"labels":["bug"],"text":"### Describe the feature or problem you’d like to solve\r\nWhen running `gh pr review <url>` and the git folder of the repo is not in context, is necessary to pass the repo with `-R, --repo OWNER/REPO`\r\n\r\ni.e.\r\n> gh pr review https://github.com/cli/cli --aprove -R `cli/cli`\r\n\r\nwithout `-R, --repo`, is not able to infer the repository from the url\r\n\r\n### Proposed solution\r\nWould be nice to add a fallback option before trying to rely on `--repo` option to check if the command received a repo url as parameter and try to infer the `OWNER/REPO` from there"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nCloning a repository through ssh and forking it adds the fork using the `https` protocol.\r\n\r\n```\r\n❯ gh --version\r\ngh version 0.9.0 (2020-05-27)\r\nhttps://github.com/cli/cli/releases/tag/v0.9.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Make a temp directory: `cd $(mktemp -d)`\r\n2. Clone a repository via ssh: `gh repo clone git@github.com:cli/cli.git`\r\n3. Navigate into the repository: `cd cli`\r\n4. Fork the repository: `gh repo fork --remote=true`\r\n5. List all remotes: `git remote -v`\r\n\r\n### Expected vs actual behavior\r\n\r\n#### Expected behaviour\r\n\r\nThe new fork uses the ssh protocol because the repo was originally cloned through that.\r\n\r\n#### Actual behaviour\r\n\r\nThe fork was added using the https protocol:\r\n\r\n```\r\n❯ git remote -v\r\norigin\thttps://github.com/thomaseizinger/cli.git (fetch)\r\norigin\thttps://github.com/thomaseizinger/cli.git (push)\r\nupstream\tgit@github.com:cli/cli.git (fetch)\r\nupstream\tgit@github.com:cli/cli.git (push)\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nOAuth token is stored in `~/.config/gh/config.yml`\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. First use OAuth flow\r\n\r\n### Expected vs actual behavior\r\n\r\nI would not expect a secret to be stored in 'config', I would like to be able to keep my `config.yml` preferences under version control, which I cannot do without also committing this secret (or having an ever-present careful-not-to-stage diff).\r\n\r\nI notice the XDG directory specification isn't respected (it's `.config/gh` that is used whatever the value of `$XDG_CONFIG_HOME`), so it could be argued the word 'config' is arbitrary, but I still think storing secrets there is against reasonable expectations, and limits the use of the file's other preferences.\r\n\r\nIdeal would be I think to use `~/.local/share` or `~/.cache` (incidentally the defaults if `$XDG_DATA_HOME` and `$XDG_CACHE_HOME` are not set under that spec) - but at least a different file like `~/.config/gh/oauth.yml` would be an improvement.\r\n\r\n### Logs\r\n\r\nn/a\r\n"},{"labels":["bug"],"text":"The `gh repo create` command inherits from it's parent command (repo) the `-R` flag.\r\nThis flag is not appropriate in this case since the repository does not exist when as it is being created...\r\n\r\nIs there a use case for this flag I am missing?\r\nIf not, it should probably be removed from completion as it can lead to confusion more than anything.\r\n\r\nKeep up the good work!"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThe command to install CLI on Debian/Ubuntu does not work:\r\n\r\n```\r\n$ sudo apt install gh_0.9.0_linux_amd64.deb           \r\n[sudo] Mot de passe de francois : \r\nLecture des listes de paquets... Fait\r\nConstruction de l'arbre des dépendances       \r\nLecture des informations d'état... Fait\r\nE: Impossible de trouver le paquet gh_0.9.0_linux_amd64.deb\r\nE: Impossible de trouver de paquet correspondant à l'expression rationnelle « gh_0.9.0_linux_amd64.deb »\r\nE: Impossible de trouver de paquet correspondant à l'expression rationnelle « gh_0.9.0_linux_amd64.deb »\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this `sudo apt install gh_0.9.0_linux_amd64.deb`\r\n2. View the output:\r\n\r\n```\r\n[sudo] Mot de passe de francois : \r\nLecture des listes de paquets... Fait\r\nConstruction de l'arbre des dépendances       \r\nLecture des informations d'état... Fait\r\nE: Impossible de trouver le paquet gh_0.9.0_linux_amd64.deb\r\nE: Impossible de trouver de paquet correspondant à l'expression rationnelle « gh_0.9.0_linux_amd64.deb »\r\nE: Impossible de trouver de paquet correspondant à l'expression rationnelle « gh_0.9.0_linux_amd64.deb »\r\n```\r\n\r\n3. See error: it does not install the package\r\n\r\n### Expected vs actual behavior\r\n\r\nIt should install the DEB package in Debian/Ubuntu.\r\n\r\nThis command should be use instead: `sudo dpkg -i gh_0.9.0_linux_amd64.deb`\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nUsing `gh pr create` after deleting and recreating my `origin` remote appears to lead to unclear error messages and a new `remote` for one of the repository's forks being added to my git config.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n**I haven't tried to recreate this, just extrapolating from my case info below**\r\n\r\n1. Create a feature branch and add some work\r\n2. Rename the repository on github\r\n3. Update your remote by removing it and readding it\r\n4. Attempt to `gh pr create` from the feature branch\r\n\r\n### Expected vs actual behavior\r\n\r\nI would expect that I can create a pull request, in an ideal world. If something is strange with git, which I presume to be the case causing this, I would expect a better error message and *not* creating a new remote for a fork.\r\n\r\nInstead I get an obscure error message and a new remote :)\r\n\r\n### Logs\r\n\r\nI have been using the new `gh pr create` to create pull requests. Normally I push the branch up before I do this (though I'm not sure if that's actually required, I guess just my usual flow). When pushing my branch, I noticed github gave a notice: \"This repository moved. Please use the new location:\".\r\n\r\nGithub is right that I renamed that repository! I forgot. I thought it'd be good to fix that, so I `git remote rm origin` and then `git remote add origin <correct SSH URL>`.\r\n\r\nI then go to follow up with a pull request using `gh pr create`, and get the following behavior:\r\n\r\n```\r\n➜ git:(fix-ispaid) gh pr create\r\n\r\nCreating pull request for fix-ispaid into dev in chrisfosterelli/<repo name>\r\n\r\n! warning: could not compute title or body defaults: fatal: ambiguous argument 'origin/dev...fix-ispaid': unknown revision or path not in the working tree.\r\nUse '--' to separate paths from revisions, like this:\r\n'git <command> [<revision>...] -- [<file>...]'\r\ngit: exit status 128\r\n? Title Predefine isPaid so that user creation doesnt fail\r\n? Body <Received>\r\n? What's next? Submit\r\nUsername for 'https://github.com': ^C\r\n```\r\n\r\nThe error is unusual, but appears that creation can go ahead as expected. But then I get an HTTP prompt, and suspect something is wrong because I only use SSH remotes. I check the remote that I added, and notice that `gh pr create` added a *new* remote for some reason, called `fork`, which is a fork a colleague made of my repo. It's an HTTP remote.\r\n\r\nVery strange behaviour.\r\n\r\nI'm able to fix it by `git checkout dev && git pull origin dev`. Then the `gh pr create` on my feature branch works normally. Not a big deal, but thought it was worth noting 😄 \r\n\r\nI imagine this has something to do with deleting the `origin` remote causing git to no longer have the remote context about `origin/dev` until I later `git checkout dev && git pull origin dev`. In either case this has worked with normal git flow doing PRs from the web interface, so I suspect the handling here could be a bit better.\r\n\r\nThanks for reading!"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThe title says it all.\r\ngh version 0.9.0 (2020-05-26)\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create a personal access token with admin:org, admin:public_key, gist, and repo scopes.\r\n\r\n2. On my local machine, run this command:\r\n\r\n        gh config set -h github.com oauth_token MYTOKEN\r\n\r\n3. Use the cli to clone a repo:\r\n\r\n```\r\n$ gh repo clone supabase/supabase\r\n\r\nWarning: gh now requires the `read:org` OAuth scope.\r\nVisit https://github.com/settings/tokens and edit your token to enable `read:org`\r\nor generate a new token and paste it via `gh config set -h github.com oauth_token MYTOKEN`\r\n```\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nAfter installing 0.9 Windows MSI, the client reports:\r\n\r\n```\r\n>gh --version\r\ngh version 0.9.0-pre (2020-05-26)\r\nhttps://github.com/cli/cli/releases/tag/v0.9.0-pre\r\n\r\n\r\nA new release of gh is available: 0.9.0-pre → v0.9.0\r\nhttps://github.com/cli/cli/releases/tag/v0.9.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Install from https://github.com/cli/cli/releases/download/v0.9.0/gh_0.9.0_windows_amd64.msi\r\n2. Use gh\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected 0.9, got 0.9-pre\r\n\r\n### Logs\r\n\r\nAbove.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n### Platform - macOS Catalina 10.15.4\r\nInstalled from brew as instructed:\r\n```\r\nbrew install github/gh/gh\r\n\r\nbrew upgrade gh\r\n```\r\ngh version:\r\n```\r\n➜  codewind git:(master) gh version\r\ngh version 0.9.0 (2020-05-26)\r\nhttps://github.com/cli/cli/releases/tag/v0.9.0\r\n```\r\nAttempted to run a command in a git directory and there is an authentication error, much like #479 \r\n```\r\n➜  codewind git:(master) gh issue list\r\nNotice: authentication required\r\nPress Enter to open github.com in your browser...\r\nlisten tcp 192.168.1.64:0: bind: can't assign requested address\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Install gh with brew\r\n2. cd into any local git directory\r\n3. Try to run a command using gh (as shown above)\r\n\r\n### Expected vs actual behavior\r\n\r\nExpecting to see a list of issues on this repository but I am getting an authentication error\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nI can clone a repo without a problem but gh seems to return a credentials problem.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1) Clone a repository with git clone\r\n2) Change to the created folder\r\n3) Type \"gh checkout pr 1\"\r\n4) I see:\r\nhttp error, 'https://api.github.com/graphql' failed (401): 'Bad credentials'\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect the PR #1 branch to be checked out\r\n\r\n### Logs\r\n\r\n$ cd tmp\r\n/tmp$ rm -Rf bin\r\n/tmp$ git clone git@github.com:martinilevi/bin.git\r\nCloning into 'bin'...\r\nremote: Enumerating objects: 3, done.\r\nremote: Counting objects: 100% (3/3), done.\r\nremote: Compressing objects: 100% (2/2), done.\r\nremote: Total 85 (delta 0), reused 2 (delta 0), pack-reused 82\r\nReceiving objects: 100% (85/85), 190.95 KiB | 406.00 KiB/s, done.\r\nResolving deltas: 100% (34/34), done.\r\n/tmp$ cd bin/\r\n/tmp/bin(master)$ gh pr checkout 1\r\nhttp error, 'https://api.github.com/graphql' failed (401): 'Bad credentials'\r\n/tmp/bin(master)$ gh --version\r\ngh version 0.9.0 (2020-05-26)\r\nhttps://github.com/cli/cli/releases/tag/v0.9.0\r\n"},{"labels":["bug"],"text":"Hi,\r\n\r\nWhen I create a repository already initialised (`git init`), the CLI asks me for authentication. Which fails in 100% of the cases. I don't understand this authentication, much less that it fails permanently.\r\n\r\nNote, that the repository is well created on Github. So I don't know which step is in error.\r\n\r\n### Steps to reproduce\r\n\r\n```\r\n$ mkdir foobar\r\n$ cd foobar\r\n$ git init\r\n$ gh repo create\r\n```\r\n\r\n### Expected \r\n```\r\n➜  gh repo create\r\n✓ Created repository beauraF/foobar on GitHub\r\n```\r\n\r\n### Actual Behavior\r\n\r\n```\r\n➜  gh repo create\r\n✓ Created repository beauraF/foobar on GitHub\r\nUsername for 'https://github.com': beauraF\r\nPassword for 'https://beauraF@github.com':\r\nremote: Invalid username or password.\r\nfatal: Authentication failed for 'https://github.com/beauraF/foobar.git/'\r\nerror: Could not fetch origin\r\ngit: exit status 1\r\n```"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nI'm using `gh repo create...` command to  create e repo, but since it's called in a shell script, I'm trying to automatically answer question:\r\n\r\n```\r\nCreate a local project directory for StudentFinance/challenge-balmacefa? (Y/n)\r\n```\r\nFor this I tried to do:\r\n\r\n```\r\nyes | gh repo create foobar\r\n```\r\n\r\nBut the program breaks with:\r\n\r\n```sh\r\n[[68;109R^[[68;109Rpanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x171b715]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/AlecAivazis/survey/v2/terminal.(*RuneReader).ReadLine(0xc000a12360, 0x0, 0xc00019f6f0, 0xc0000ac008, 0x1a8da80, 0xc0000ac010, 0xc000a12360)\r\n        /home/runner/go/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.0.7/terminal/runereader.go:56 +0x435\r\ngithub.com/AlecAivazis/survey/v2.(*Confirm).getBool(0xc0001e0230, 0x18f9800, 0xc0003881a8, 0x182a300, 0x0, 0x0)\r\n        /home/runner/go/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.0.7/confirm.go:57 +0x169\r\ngithub.com/AlecAivazis/survey/v2.(*Confirm).Prompt(0xc0001e0230, 0xc0003881a8, 0xc0000ac000, 0x1a92f40, 0xc0000ac008, 0x1a8da80)\r\n        /home/runner/go/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.0.7/confirm.go:136 +0x156\r\ngithub.com/AlecAivazis/survey/v2.Ask(0xc0005cba28, 0x1, 0x1, 0x178b340, 0xc00050abab, 0x0, 0x0, 0x0, 0xc000438270, 0xc0001f0480)\r\n        /home/runner/go/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.0.7/survey.go:291 +0x557\r\ngithub.com/AlecAivazis/survey/v2.AskOne(...)\r\n        /home/runner/go/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.0.7/survey.go:234\r\ngithub.com/cli/cli/command.glob..func5(0xc000024140, 0x48, 0xc00050abab, 0x1, 0x1)\r\n        /home/runner/work/cli/cli/command/repo.go:485 +0xf9\r\ngithub.com/cli/cli/command.repoCreate(0x1fb1fe0, 0xc0003f4be0, 0x1, 0x5, 0x0, 0x0)\r\n        /home/runner/work/cli/cli/command/repo.go:281 +0x7f8\r\ngithub.com/spf13/cobra.(*Command).execute(0x1fb1fe0, 0xc0003f4b90, 0x5, 0x5, 0x1fb1fe0, 0xc0003f4b90)\r\n        /home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.6/command.go:840 +0x453\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x1faee00, 0x5, 0x0, 0x0)\r\n        /home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.6/command.go:945 +0x317\r\nmain.main()\r\n        /home/runner/work/cli/cli/cmd/gh/main.go:32 +0xde\r\n```\r\n### Steps to reproduce the behavior\r\n\r\n1. Type: `yes | gh repo create some_repo`\r\n2. See the repo being created and then when the cli asks for a confirmation to create the repo locally, see it break.\r\n\r\n### Expected vs actual behavior\r\n\r\n#### Actual behavior:\r\nit breaks\r\n\r\n#### Expected behavior\r\ncreate repo and confirm automatically to create the repo locally.\r\n\r\n### Question\r\n\r\nIs there another way to do this reliably? A possible option would be to add a `-y` parameter to skip waiting the confirmation.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\n`--label` flags seem to get dropped when creating an issue with `--web`\r\n\r\n```\r\n❯ gh version\r\ngh version 0.8.0 (2020-05-11)\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this `gh issue create --title foo --label bar --web`\r\n2. Note lack of assigned `bar` label on sidebar\r\n\r\n### Expected vs actual behavior\r\n\r\nTitle and body work fine. Labels seem to just go missing even though they're definitely supported via GET query params."},{"labels":["bug"],"text":"I want to run gh in an Azure DevOps or Actions workflow. The issue that I run into is that I need authentication to get this to work, and I can't copy a working config.yml to the C:\\ of the runner. Is there a way for me to set oauth_token and user via the cli if you are not authenticated?"},{"labels":["bug"],"text":"While going through the code, I found lots of variables exported from the packages, many of which are not needed to be exported. We should 'unexport' them, if not needed.  \r\nAlso, there are places where golang code conventions are not properly followed. (Eg. 'else' block when the function is returning)\r\n\r\nWe could even setup code style tests with go-lint."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nI installed `gh_0.8.0_windows_amd64.msi` on Windows 10 x64.\r\n\r\nBut the default location to be install is `C:\\Program Files (x86)\\GitHub CLI\\`.\r\nThe right location is `C:\\Program Files\\GitHub CLI\\`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Download `gh_0.8.0_windows_amd64.msi` from https://github.com/cli/cli/releases/tag/v0.8.0\r\n2. Double-click `gh_0.8.0_windows_amd64.msi`\r\n3. Accept EULA\r\n4. Click next\r\n\r\n### Expected vs actual behavior\r\n\r\nIt is expected that the default location is `C:\\Program Files\\GitHub CLI\\`.\r\n\r\n### Logs\r\n\r\n![image](https://user-images.githubusercontent.com/5567450/82132618-be73fc80-981c-11ea-89a5-76e98dd4259f.png)\r\n\r\nThe installed `gh.exe` binary is ok (it is a native x64 binary)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/5567450/82132648-e5cac980-981c-11ea-8f4b-55b0d599a5b1.png)\r\n\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nAttempt to view certain pull requests fails while attempting to print formattedReviewerState.\r\n\r\n```\r\n> gh --version\r\ngh version 0.8.0 (2020-05-11)\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\nReproduced while running `gh pr view` for a particular PR.\r\n\r\nUnfortunately I cannot share further information about the request. It is in a private repository.\r\n\r\nI can say that the PR did have reviewers (4) and that none had approved.\r\n\r\n### Expected vs actual behavior\r\n\r\nResult is a runtime failure with the output provided in the next section.\r\n\r\n### Logs\r\n\r\n```\r\nREDACTED_ISSUE_TITLE\r\nOpen • REDACTED_USER_NAME wants to merge 1 commit into master from REDACTED_BRANCH_NAME\r\n\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x173af80]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/cli/cli/command.formattedReviewerState(0xc0002837a0, 0xc0005c8e80, 0x17)\r\n\t/home/runner/work/cli/cli/command/pr.go:505 +0xf0\r\ngithub.com/cli/cli/command.prReviewerList(0xc0005c8e40, 0x20, 0x260f, 0xc000940f80, 0x3d, 0xc000357974, 0x4, 0x0, 0xc00061a480, 0x30, ...)\r\n\t/home/runner/work/cli/cli/command/pr.go:516 +0x14c\r\ngithub.com/cli/cli/command.printPrPreview(0x1a8da80, 0xc00000e018, 0xc0004664e0, 0x7ffeefbffb23, 0x4)\r\n\t/home/runner/work/cli/cli/command/pr.go:436 +0x46b\r\ngithub.com/cli/cli/command.prView(0x1fb1020, 0xc0003cd7c0, 0x1, 0x1, 0x0, 0x0)\r\n\t/home/runner/work/cli/cli/command/pr.go:346 +0x2fc\r\ngithub.com/spf13/cobra.(*Command).execute(0x1fb1020, 0xc0003cd690, 0x1, 0x1, 0x1fb1020, 0xc0003cd690)\r\n\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.6/command.go:840 +0x453\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x1faee00, 0x5, 0x0, 0x0)\r\n\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.6/command.go:945 +0x317\r\nmain.main()\r\n\t/home/runner/work/cli/cli/cmd/gh/main.go:32 +0xde\r\n```\r\n"},{"labels":["bug"],"text":"The output of `gh issue view 930` looks really garbled around the middle because the body of that issue includes some terminal escape codes which are then literally interpeted by the terminal when we render that text.\r\n\r\nAs another example, I have embedded the escape code for an audible bell in this text, which you should be able to hear if you `issue view` this issue. \u0007\r\n\r\n\r\nWhenever we show user-generated content (such as issue/PR titles, bodies, comments, etc.) we should try to escape all terminal escape sequences to ensure they never take effect in the viewing terminal."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThe editor, whether acquired from `core.editor`, `$EDITOR`, or `$VISUAL`, must be passed to the shell for expansion because the values can contain arbitrary shell expressions.  However, `gh` only performs shell splitting, which means complex invocations don't work properly as they do with Git and other standard Unix utilities (e.g., `crontab`).\r\n\r\nWhile it is very tempting to try to avoid invoking the shell through various mechanisms and parsing, it is actually required for compatibility with Git and can't be avoided.  People actually do stuff shell expressions in those variables to use different editors based on things like whether they have an X11 session or the editors available on the system (e.g., use VS Code if available, otherwise Vim).\r\n\r\nSee github/hub#2214 for more details and a PR for hub.\r\n\r\n```\r\n$ gh --version\r\ngh version 0.8.0-37-ge28e609 (2020-05-14)\r\nhttps://github.com/cli/cli/releases/latest\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type `VISUAL='f() { vim \"$@\"; };f' gh issue create`\r\n2. Specify a title.\r\n3. Choose to edit the body with your editor.\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected behavior is that `vim` is invoked.  Actual behavior is that the operation fails.\r\n\r\n### Logs\r\n\r\n```\r\n% VISUAL='f() { vim \"$@\"; };f' ~/checkouts/cli/bin/gh issue create\r\n\r\nCreating issue in bk2204/test-repo\r\n\r\n? Title Foo\r\n? Body [(e) to launch f() { vim \"$@\"; };f] could not collect title and/or body: could not prompt: exec: \"f()\": executable file not found in $PATH\r\n```"},{"labels":["bug",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nUsing `gh issue create` always prompts to use `nano` to edit the issue body rather than respecting the `$EDITOR` environment variable or the editor specified in `.gitconfig`.\r\n\r\n### Proposed solution\r\n\r\nUse the setting from `.gitconfig`, fall back to `$EDITOR` then fall back to `nano`\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen trying to use `gh pr checkout`, I was prompted to re-auth to add the `read:org` scope to the OAuth(?) app's permissions. After successfully completing that flow, the CLI still error'd thinking it's still lacking the required scopes.\r\nA second attempt at the same command worked without any problems\r\n\r\n### Expected vs actual behavior\r\n\r\n0. Given the CLI OAuth does not have the `read:org` scope\r\n1. When using `gh pr checkout` command to checkout a PR locally\r\n2. And successfully completing the automatic re-auth flow in the browser to add the missing scope\r\n3. Then it should correctly continue with the checkout flow\r\n\r\nInstead, it failed with an error.\r\n\r\n### Logs\r\n\r\n```\r\n$ gh pr checkout https://github.com/<org>/<repo>/pull/123\r\nNotice: additional authorization required\r\nPress Enter to open github.com in your browser...\r\nAuthentication complete. Press Enter to continue...\r\ngraphql error: 'Your token has not been granted the required scopes to execute this query. The 'name' field requires one of the following scopes: ['read:org', 'read:discussion'], but your token has only been granted the: ['repo'] scopes. Please modify your token's scopes at: https://github.com/settings/tokens.'\r\n\r\n$ gh pr checkout https://github.com/<org>/<repo>/pull/123\r\nSwitched to a new branch 'feature/add-deploy-readme'\r\n```"},{"labels":["bug"],"text":"I have tried `gh pr create -r reviewer1 -r reviewer2 -r reviewer3` and `gh pr create -r reviewer1, reviewer2,reviewer3` and neither one is creating pull request with multiple reviewers. Only the last reviewer is taken. I saw in the code that multiple reviewers theoretically are supported but I don't see any errors about other reviewers.\r\n\r\n```\r\n$ gh --version\r\ngh version 0.8.0 (2020-05-11)\r\nhttps://github.com/cli/cli/releases/tag/v0.8.0\r\n```"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nVersion: `gh version 0.8.0 (2020-05-11)` \r\n\r\nWhen using the new reviewers functionality during `gh pr create` in a repo that has a codeowners file, the automatic review request to the code owner is removed\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Run `gh pr create` with the `--reviewer` flag, or interactively chosen\r\n2. View the PR\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected:\r\nThe reviewer is set, in addition to the existing codeowners\r\n\r\nYou'll see two entries in a row in the PR history: \r\n> **You** requested a review from **code-owner** as a code owner\r\n\r\n> **You** requested a review from **user** and removed request for **code-owner**\r\n\r\n\r\nRealize this may be desired behavior for some flows, so maybe it needs to be configurable, but for our team at least, we often want to request from specific people in addition to the default code owners"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nVersion 0.8.0. I am trying to clone private repositories but I get an error\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Run the command `gh repo clone username/private-repo`\r\n2. Output is an error\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected to be able to clone a private repository.\r\n\r\n### Logs\r\n\r\n```\r\nCloning into 'private-repo'...\r\nremote: Repository not found.\r\nfatal: repository 'https://github.com/morbec/private-repo.git/' not found\r\nexit status 128\r\n```\r\n\r\n"},{"labels":["bug",null],"text":"When doing a release we currently fail to regenerate the marketing/manual sites because `git` wants a user to commit as. This issue covers tweaking that job to configure a user/email for git.\r\n\r\n**This might be a good time to think through having a consistent entity for automated actions; something like `cli-bot` or `gh-bot`.** What do others think?\r\n\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nI'm not sure if this is considered a bug or not, but I am unable to build the documentation (the site) using the Makefile. I've seen Issues and PRs about moving things to the [github/cli.github.com](https://github.com/github/cli.github.com) repo, but I can neither view or clone that repo. Trying to view it in GitHub gives me a 404. I assume this is because it's a private repo. Is that intentional?\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```\r\n$ make site\r\ngit clone https://github.com/github/cli.github.com.git \"site\"\r\nCloning into 'site'...\r\nERROR: Repository not found.\r\nfatal: Could not read from remote repository.\r\n\r\nPlease make sure you have the correct access rights\r\nand the repository exists.\r\nmake: *** [site] Error 128\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nI expected this command to successfully build the static site.\r\n\r\n### Logs\r\n\r\nN/A"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nI'm in a checkout of `https://github.com/maxandersen/quarkusio.github.io/tree/insights1`\r\nand `https://github.com/quarkusio/quarkusio.github.io/pull/535` are open but `gh pr view` reports\r\n`no open pull requests found for branch \"insights1\"`\r\n\r\nMy best guess is that somehow it does not like the base branch is `develop` and not master but that is just a guess.\r\n \r\n### Steps to reproduce the behavior\r\n\r\nsee above \r\n\r\n### Expected vs actual behavior\r\n\r\n`gh pr view` should show the open pull request no matter what branch it is against.\r\n\r\n"},{"labels":["bug"],"text":"```\r\n$ gh help pr\r\nWork with GitHub pull requests.\r\n\r\nA pull request can be supplied as argument in any of the following formats:\r\n- by number, e.g. \"123\";\r\n- by URL, e.g. \"https://github.com/OWNER/REPO/pull/123\"; or\r\n- by the name of its head branch, e.g. \"patch-1\" or \"OWNER:patch-1\".\r\n\r\nUSAGE\r\npr\r\n\r\nCORE COMMANDS\r\n\r\n\r\nADDITIONAL COMMANDS\r\n  checkout:   Check out a pull request in Git\r\n  close:      Close a pull request\r\n  create:     Create a pull request\r\n  list:       List and filter pull requests in this repository\r\n  reopen:     Reopen a pull request\r\n  status:     Show status of relevant pull requests\r\n  view:       View a pull request\r\n\r\nFLAGS\r\n\r\n\r\nEXAMPLES\r\n  $ gh issue create\r\n  $ gh repo clone\r\n  $ gh pr checkout 321\r\n\r\nLEARN MORE\r\n  Use \"gh <command> <subcommand> --help\" for more information about a command.\r\n  Read the manual at <http://cli.github.com/manual>\r\n\r\nFEEDBACK\r\n  Fill out our feedback form <https://forms.gle/umxd3h31c7aMQFKG7>\r\n  Open an issue using “gh issue create -R cli/cli”\r\n```\r\n\r\n1. First part looks OK;\r\n2. I have expected `gh pr` under USAGE;\r\n3. I did not expect to see core commands vs. additional commands;\r\n4. FLAGS section is rendered even though there are none;\r\n5. Examples, Learn More, and Feedback don't seem to be specific to `gh pr`.\r\n\r\nI think this was caused by #815 /cc @probablycorey "},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nVersion v0.7.0.\r\n\r\nAfter what appeared to be a successful auth I now get `Could not resolve to a User with the username ''` when trying to run a command. I'll try reinstalling, but figured I'd raise an issue for reference. Could also be good to provide a clear(er) way to reauthenticate in instances where this happens and / or a user wants to switch accounts."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen creating an issue using `gh issue create` and selecting a template, the labels associated with that template are not assigned to the issue upon creation.\r\n\r\n```\r\n$ gh version\r\ngh version 0.7.0 (2020-04-22)\r\nhttps://github.com/cli/cli/releases/tag/v0.7.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `gh issue create` (against a repo that has issue templates with labels associated with each)\r\n2. Fill in info\r\n3. Create issue without previewing in browser\r\n4. Observe that issue was not assigned labels associated with template that was chosen\r\n\r\n### Expected vs actual behavior\r\n\r\nIf a template was chosen that has labels, those labels should be assigned to the issue when created via `gh issue create`\r\n\r\n### Logs\r\n\r\n```console\r\n$ gh issue create\r\n\r\nCreating issue in intel/dffml\r\n\r\n? Choose a template Missing Documentation\r\n? Title docs: cli: edit command\r\n? Body <Received>\r\n? What's next? Submit\r\nhttps://github.com/intel/dffml/issues/616\r\n```"},{"labels":["bug"],"text":"### Describe the bug\r\nWhen a repo has issue templates, `gh issue create` shows a prompt to select a template out of them. IMO, there should be an option to make a 'blank' issue (i.e. without using any template). GitHub allows this.\r\nI know its not recommended to create 'blank' issues, but we can show a last option of \"Blank (not recommended)\" in the template-selection prompt.  \r\nOr do you all recommend to explicitly use the body and title flags instead, to create a 'blank' issue?\r\n\r\n### Additional Context\r\nAdded this in the bugs section, as it does not exactly behave like GitHub"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type `brew install github/gh/gh`\r\n2. View the output:\r\n\r\n```\r\n==> Installing gh from github/gh\r\nError: An exception occurred within a child process:\r\n  NoMethodError: undefined method `path' for nil:NilClass\r\nDid you mean?  paths\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\ngh install without error.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\ngh version 0.7.0 (2020-04-22)\r\n\r\n`gh repo fork` renames `origin` to `upstream` and sets my fork as `origin`. I want to retain `origin` untouched and add an origin named `fork`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\nI had a clone of an organization repo\r\n\r\n```console\r\n$ git remote -v\r\norigin\tssh://git@github.com/org/repo.git (fetch)\r\norigin\tssh://git@github.com/org/repo.git (push)\r\n```\r\n\r\nI forked it\r\n\r\n```console\r\n$ gh repo fork\r\n- Forking org/repo...\r\n✓ Created fork jglick/repo\r\n? Would you like to add a remote for the fork? Yes\r\n✓ Renamed origin remote to upstream\r\n✓ Added remote origin\r\n$ git remote -v\r\norigin\tgit@github.com:jglick/repo.git (fetch)\r\norigin\tgit@github.com:jglick/repo.git (push)\r\nupstream\tssh://git@github.com/org/repo.git (fetch)\r\nupstream\tssh://git@github.com/org/repo.git (push)\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nI wanted to see\r\n\r\n```console\r\n$ gh repo fork\r\n- Forking org/repo...\r\n✓ Created fork jglick/repo\r\n? Would you like to add a remote for the fork? Yes\r\n✓ Added remote fork\r\n$ git remote -v\r\nfork\tgit@github.com:jglick/repo.git (fetch)\r\nfork\tgit@github.com:jglick/repo.git (push)\r\norigin\tssh://git@github.com/org/repo.git (fetch)\r\norigin\tssh://git@github.com/org/repo.git (push)\r\n```\r\n\r\nor be prompted.\r\n\r\n### Workaround\r\n\r\n```bash\r\ngit remote rename origin fork\r\ngit remote rename upstream origin\r\n```"},{"labels":["bug"],"text":"when doing `gh pr create` on a branch with unpushed commits, the push is attempted against an https url instead of either the remote as listed in the git config or as a formatted ssh url as per settings.\r\n\r\n`git_protocol` should be respected here."},{"labels":[null,"bug"],"text":"### Describe the bug\r\n\r\nConfigured editor is not populated with contents of pull request template when running\r\n\r\n```\r\n$ gh pr create\r\n```\r\n\r\nto create a pull request in a repository that does not have  a pull request template defined in `.github`, but has a pull request template defined in a `.github` repository within the same organization (as laid out [here](https://help.github.com/en/github/building-a-strong-community/creating-a-default-community-health-file).\r\n\r\n\r\n\r\nRunning\r\n\r\n```\r\n$ gh --version\r\n```\r\n\r\nyields\r\n\r\n```\r\ngh version 0.7.0 (2020-04-22)\r\nhttps://github.com/cli/cli/releases/tag/v0.7.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Run\r\n\r\n    ```\r\n    $ git clone git@github.com:ergebnis/composer-normalize.git\r\n    ```\r\n\r\n    to clone [`ergebnis/composer-normalize`](https://github.com/ergebnis/composer-normalize), a repository that does not define its own pull request template, but has a pull request template defined in [`ergebnis/.github`](https://github.com/ergebnis/.github).\r\n\r\n2. Run\r\n\r\n     ```\r\n     $ git checkout -b fix/foo\r\n     $ touch foo\r\n     $ git add foo\r\n     $ git commit -m \"Foo\"\r\n     ```\r\n\r\n    to create a new branch, create a new file, and commit it.\r\n\r\n3. Run\r\n\r\n    ```\r\n    $ gh pr create\r\n    ```\r\n\r\n    to create a new pull request.\r\n\r\n4. Press `enter` to use suggested title\r\n5. Press `e` to launch configured editor\r\n\r\n### Expected behavior\r\n\r\nEditor is populated with content of pull request template defined in `.github` repository for corresponding organization\r\n\r\n### Actual behaviour\r\n\r\nEditor is **not** populated with content of pull request template defined in `.github` repository for corresponding organization.\r\n"},{"labels":["bug",null],"text":"I installed the client a while ago using a `.deb` and uninstalled to use the source build. When I uninstalled I was provided this error.\r\n\r\n```\r\ndpkg: warning: while removing gh, directory '/usr/local' not empty so not removed\r\n```\r\n\r\nThis is a pretty heinous bug, that could cause some major issues. And I believe if I used purge this would have happened to me.  \r\n\r\nI'm using Ubuntu 19.10. I can't remember what gh version, but I suspect the bad configuration stems from this change f2064bb0f96043cefdb8678f6ec9ff307819e75c\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected behaviour is for the packaging **NOT** to attempt removing `/usr/local/` directory wholesale\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n```bash\r\n$ gh --version\r\ngh version 0.7.0 (2020-04-22)\r\nhttps://github.com/cli/cli/releases/tag/v0.7.0\r\n```\r\n\r\nUsing `gh issue create` to create an issue in a repo which has issue templates (more than one), only the first issue template's name is displayed correctly, the others are displayed in its file names.\r\n\r\n<img width=\"510\" alt=\"Screen Shot 2020-04-25 at 8 23 50 AM\" src=\"https://user-images.githubusercontent.com/25026967/80268036-94706400-86ce-11ea-8be3-236110db2f56.png\">\r\n\r\nHere is how it looks like on browser interface.\r\n\r\n<img width=\"945\" alt=\"Screen Shot 2020-04-25 at 8 31 12 AM\" src=\"https://user-images.githubusercontent.com/25026967/80268134-3001d480-86cf-11ea-8554-e7fff6396644.png\">\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `cd` into a repo which has more than one issue templates.\r\n1. Type this `gh issue create`.\r\n2. An interactive output is shown for selection of an issue template, only first template name's is displayed correctly, others aren't.\r\n\r\n### Expected vs actual behavior\r\n\r\nAll issue templates should be displayed correctly under their YAML front matter `name` attributes.\r\n\r\n### Logs\r\n\r\nN/A.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThe `Preview in Browser` option for a new pull request (via `gh pr create`) fails with the following error when used in [WSL](https://docs.microsoft.com/en-us/windows/wsl) (I'm using the Pengwin distro on [WSL2](https://docs.microsoft.com/en-us/windows/wsl/wsl2-index)):\r\n```\r\nexec: \"xdg-open\": executable file not found in $PATH\r\n```\r\nAs a result, you lose the PR body you've typed into the editor and have to start the PR creation process again.\r\n\r\n```\r\n$ gh --version\r\ngh version 0.7.0 (2020-04-22)\r\nhttps://github.com/cli/cli/releases/tag/v0.7.0\r\n\r\n$ wslsys\r\nLocale: en_AU\r\nRelease Install Date: Sat Apr 18 18:02:48 AEST 2020\r\nBranch: rs_prerelease\r\nBuild: 19608\r\nFull Build: 19608.1000.amd64fre.rs_prerelease.200410-1438\r\nDisplay Scaling: 1\r\nWindows Theme: light\r\nWindows Uptime: 0d 13h 55m\r\nWSL Uptime: 0d 5h 16m\r\nWSL Release: Pengwin\r\nWSL Kernel: Linux 4.19.104-microsoft-standard\r\nPackages Count: 659\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Using WSL on Windows 10\r\n2. Follow the prompts in `gh pr create`\r\n3. Select the `Preview in Browser` option\r\n\r\n### Expected vs actual behavior\r\n\r\nThis error is thrown and the command exits, losing all information:\r\n```\r\nexec: \"xdg-open\": executable file not found in $PATH\r\n```\r\n\r\nIdeally it should open the browser on the host to preview the PR, as if it was run on the host directly. `wslview` is included with most WSL distros and can be used to open the browser in Windows 10. More information: https://github.com/wslutilities/wslu\r\n\r\nThe alternative would be to provide the user the option to submit the PR directly or display a URL to manually paste into the browser for the preview. \r\n\r\n### Logs\r\n\r\n```\r\nvalorin@Pengwin:~/dev/project/www (FB834)$ gh pr create\r\n\r\nCreating pull request for FB834 into master in project/project-www\r\n\r\n? Title FB834: Tweak width of invoice to/from/status for comfort\r\n? Body <Received>\r\n? What's next? Preview in browser\r\nEnumerating objects: 13, done.\r\nCounting objects: 100% (13/13), done.\r\nDelta compression using up to 4 threads\r\nCompressing objects: 100% (7/7), done.\r\nWriting objects: 100% (7/7), 1.43 KiB | 1.43 MiB/s, done.\r\nTotal 7 (delta 6), reused 0 (delta 0), pack-reused 0\r\nremote: Resolving deltas: 100% (6/6), completed with 6 local objects.\r\nremote:\r\nremote: Create a pull request for 'FB834' on GitHub by visiting:\r\nremote:      https://github.com/project/project-www/pull/new/FB834\r\nremote:\r\nTo github.com:project/project-www.git\r\n * [new branch]        HEAD -> FB834\r\nBranch 'FB834' set up to track remote branch 'FB834' from 'origin'.\r\nOpening github.com/project/project-www/compare/master...FB834 in your browser.\r\nexec: \"xdg-open\": executable file not found in $PATH\r\n```"},{"labels":["bug",null],"text":"I noticed we show empty parenthesis when a PR is not in a project column. Run `gh pr view 815 -R cli/cli` to see an example. \r\n\r\nHere is how it looks in CLI:\r\n![screen_shot_2020-04-22_at_1 51 29_pm](https://user-images.githubusercontent.com/14828183/80048419-dcfc0780-84ab-11ea-8944-68b344ddf600.png)\r\n\r\nThis PR happens to be awaiting triage:\r\n<img width=\"297\" alt=\"screen_shot_2020-04-22_at_5 53 08_pm\" src=\"https://user-images.githubusercontent.com/14828183/80048417-dbcada80-84ab-11ea-83d1-ea313ca20317.png\">\r\n\r\n\r\nExpected result: The parenthesis should be populated with something or removed if the project status is not applicable.\r\n\r\nv0.7.0, OSX\r\n\r\n"},{"labels":["bug"],"text":"### Steps to reproduce the behavior\r\n\r\n1. `gh issue create -t title -b ''`\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected: issue is created with given title and body values without further prompting.\r\n\r\nActual: there is a prompt to fill the body:\r\n```\r\nCreating issue in mislav/playground\r\n\r\n? Body [(e) to launch vim, enter to skip]\r\n```\r\n\r\nI suspect this is due our inability to distinguish between `-b ''` (body was explicitly set to an empty string) and no flag being passed (body stays as empty string as its default value)."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nVersion: 0.6.4\r\nWhen creating a repository using `gh repo create [name]`, it sets the remote using https protocol, regardless of the users settings. Unclear if there is a way to have it always default to ssh, but if there is, it is not easily findable in the docs, or it does not exist.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create git project\r\n2. add and commit to it\r\n3. run `gh repo create test`\r\n4. run `git remote -v`\r\n5. You will see https remotes\r\n\r\n### Expected vs actual behavior\r\n\r\nIt should default to the users preference, or at a minimum, allow some sort of flag to state that ssh is the users choice.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n`gh version 0.6.4 (2020-04-01)`\r\n\r\nNot sure if this counts as a bug or not but it is annoying. Someone created a PR on our repo but accidentally got the branches the wrong way around - creating one for merging master into their branch\r\n\r\nThey swiftly closed the PR but as they cannot be deleted (unless GitHub themselves intervene) this PR forever shows up when I run `gh pr status` from the master branch\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create a Pull Request but set the `base` as your branch and your compare as `master`\r\n2. Close the PR\r\n3. Run `gh pr status` from master\r\n4. See the PR listed under the `Current Branch` heading forever\r\n\r\n```\r\n/path/to/repo (master) $ gh pr status\r\n\r\nRelevant pull requests in user/repo\r\n\r\nCurrent branch\r\n  #100  I can't believe I accidentally got the branches mixed [master] - Closed\r\n\r\nCreated by you\r\n  You have no open pull requests\r\n\r\nRequesting a code review from you\r\n  You have no pull requests to review\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nUnsure to be perfectly honest what the expected behaviour would be and am happy for any inputs. Maybe just filter out closed PRs for merging master into a branch? I can't immediately see a use case where you'd ever want to see them but filtering out valid data seems a bit off all the same\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen create a new PR via `gh pr create` from a branch that hasn't been pushed, `gh` ignores the base repository, considering only forks even if the submitter can push to the main repository.\r\n\r\nThis can create unexpected situations if the submitter doesn't have a personal fork. For example, if some other contributor has a personal fork and they gave you write access, `gh pr create` will push a new branch to their repo and then create a PR to the base.\r\n\r\nI believe that selecting the base repository when the submitter can push to it is a better default, or at least a less surprising one.\r\n\r\nVersion: `gh version 0.6.4-100-g82bd7b9 (2020-04-17)` (compiled from master today)\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create a repository\r\n2. Ask someone else to fork it and give you write access to their fork\r\n3. Create a new local branch, commit some code but don't push it\r\n4. Run `gh pr create`\r\n5. Check the repository where the branch was created\r\n\r\n### Expected vs actual behavior\r\n\r\nI'd expect `gh pr create` to create a branch in the main repository if the submitter has write access to it instead of choosing someone else's fork.\r\n\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n```\r\ngh version 0.6.4 (2020-04-01)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.4\r\n```\r\n\r\nWhen a remote is added, for instance upstream, `gh repo view` and `gh repo view -w` go to the new remote and not origin\r\n\r\nSince this is a gh focused tool I think the default should be origin, so that you end up at the GH repo you started in \r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. In  a repo that has more then one remote\r\n2. type `gh repo view`\r\n3. see the data from the newest remote and not origin\r\n\r\n### Expected vs actual behavior\r\n\r\nShould point to origin by default and not most recent remote\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\ngh fails with `Not a git repository or no remote.origin.url set` even though both of those conditions are false\r\n\r\n`gh` behaves as expected. (Opens `github.com/<organization>/<repo>` in the browser). However, f I try to run any `gh` command or even `gh` with a flag like `-h` or `-v`, I get the error `Not a git repository or no remote.origin.url set`. \r\n\r\nI confirmed with `pwd` that my current directory is inside my local checkout of the repo and `git config --get remote.origin.url` prints out the correct url for the remote server. \r\n\r\nI also confirmed that  and `git remote -v` displays the ssh url: \"origin\tgit@github.com:<organization>/repo.git\"\r\n\r\nSee section \"**Logs**\" for more useful console output.\r\n\r\n**My setup:**\r\n`uname -a` outputs:\r\n`Linux Carbon 4.15.0-96-generic #97-Ubuntu SMP Wed Apr 1 03:25:46 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux`\r\n\r\nI installed gh from debian: `gh_0.6.4_linux_amd64.deb` \r\n\r\nTyping `gh --version` also gives: `Not a git repository or no remote.origin.url set`\r\n\r\n### Steps to reproduce the behavior\r\n\r\nClearly this is not an issue on other machines otherwise no one would be able to use this project but if someone were to use my machine they would find that `gh -v` prints the above mentioned error\r\n\r\n### Expected vs actual behavior\r\n\r\nI feel like I've covered this already..\r\n\r\n### Logs\r\n\r\n```\r\n> gh\r\n> Opening in existing browser session.\r\n\r\n> gh -h\r\nNot a git repository or no remote.origin.url set\r\n> gh -v\r\nNot a git repository or no remote.origin.url set\r\n> gh pr status\r\nNot a git repository or no remote.origin.url set\r\n> git config --get remote.origin.url\r\nhttps://github.com/ros-planning/moveit_msgs.git\r\n> pwd\r\n/home/mike/ws_moveit/src/moveit_msgs\r\n> git remote -v\r\norigin  https://github.com/ros-planning/moveit_msgs.git (fetch)\r\norigin  https://github.com/ros-planning/moveit_msgs.git (push)\r\n> \r\n> uname -a\r\nLinux Carbon 4.15.0-96-generic #97-Ubuntu SMP Wed Apr 1 03:25:46 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n> which gh\r\n/usr/local/bin/gh\r\n\r\n> alias gh\r\nbash: alias: gh: not found\r\n\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nThis cause segmentation fault on macOS\r\n```\r\nyes n | gh repo create test\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```\r\n➜ yes n | gh repo create test\r\n✓ Created repository Shchvova/test on GitHub\r\n? Create a local project directory for Shchvova/test? (Y/n)                                                                          ^[[36;134R^[[36;134Rpanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x17591a5]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/AlecAivazis/survey/v2/terminal.(*RuneReader).ReadLine(0xc0003d8480, 0x0, 0xc00073a2e8, 0xc0000a0008, 0x1ad96a0, 0xc0000a0010, 0xc0003d8480)\r\n\t/home/runner/go/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.0.7/terminal/runereader.go:56 +0x435\r\ngithub.com/AlecAivazis/survey/v2.(*Confirm).getBool(0xc0001c0690, 0x193bc00, 0xc00037f7a8, 0x1867c00, 0x0, 0x0)\r\n\t/home/runner/go/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.0.7/confirm.go:57 +0x16e\r\ngithub.com/AlecAivazis/survey/v2.(*Confirm).Prompt(0xc0001c0690, 0xc00037f7a8, 0xc0000a0000, 0x1ade9c0, 0xc0000a0008, 0x1ad96a0)\r\n\t/home/runner/go/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.0.7/confirm.go:136 +0x156\r\ngithub.com/AlecAivazis/survey/v2.Ask(0xc0007f7a28, 0x1, 0x1, 0x17c5b00, 0xc0006bc808, 0x0, 0x0, 0x0, 0x33, 0x33)\r\n\t/home/runner/go/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.0.7/survey.go:291 +0x557\r\ngithub.com/AlecAivazis/survey/v2.AskOne(...)\r\n\t/home/runner/go/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.0.7/survey.go:234\r\ngithub.com/cli/cli/command.glob..func5(0xc00053ad00, 0x33, 0xc0006bc808, 0x1, 0x1)\r\n\t/home/runner/work/cli/cli/command/repo.go:454 +0xec\r\ngithub.com/cli/cli/command.repoCreate(0x20170e0, 0xc000356000, 0x1, 0x1, 0x0, 0x0)\r\n\t/home/runner/work/cli/cli/command/repo.go:258 +0x7f2\r\ngithub.com/spf13/cobra.(*Command).execute(0x20170e0, 0xc0003cdb50, 0x1, 0x1, 0x20170e0, 0xc0003cdb50)\r\n\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.6/command.go:840 +0x460\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x2015400, 0x5, 0x0, 0x0)\r\n\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.6/command.go:945 +0x317\r\nmain.main()\r\n\t/home/runner/work/cli/cli/cmd/gh/main.go:32 +0xde\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nCreating repo without creating directory\r\n\r\n### Logs\r\n\r\nsee above\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nI'm trying to use VS Code as the editor. I even set all the variables in my env file\r\n\r\n>GIT_EDITOR='/Applications/Visual Studio Code.app/Contents/MacOS/Electron'\r\nEDITOR='/Applications/Visual Studio Code.app/Contents/MacOS/Electron'\r\nVISUAL='/Applications/Visual Studio Code.app/Contents/MacOS/Electron'\r\n\r\nAs you can see here, $EDITOR is set, but GH is trying to use nano.\r\n\r\n![image](https://user-images.githubusercontent.com/2198466/79050963-d942c800-7c03-11ea-8ce0-b11bda2ee538.png)\r\n \r\nWhat am I missing?"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nI had to check a pull request in one of my repos I maintain at GitHub. I recalled that the `gh` cli makes it quite easy as I don't remember the commands via `git` command line.\r\n\r\nI first used `gh` 0.6.2, but also updated to 0.6.4 via a `brew upgrade gh` on my Mac.\r\n```\r\n$ gh --version\r\ngh version 0.6.4 (2020-04-01)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.4\r\n```\r\n\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. I normally have this repo cloned already, but for a complete walkthrough:\r\n   `git clone git@github.com:hypriot/flash` and a `cd flash`\r\n2. `gh pr checkout 172`\r\n\r\n### Expected vs actual behavior\r\n\r\nI expected to have the pull request 172 checked out. Instead I got this error\r\n\r\n```\r\nPost https://api.github.com/graphql: net/http: TLS handshake timeout\r\n```\r\n\r\nI wondered why this needs a separate API, never heard about graphql. So I did what I normally do, I googled \"git checkout pull request\" and found your excellent doc https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/checking-out-pull-requests-locally which walks me through the two commands I always forget.\r\n\r\n```\r\ngit fetch origin pull/172/head:pr172\r\ngit checkout pr172\r\n```\r\n\r\n### Logs\r\n\r\nAll commands are already shown above.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nI did brew install successfully. \r\nRun `gh pr create`. It displayed:\r\n```\r\nNotice: authentication required\r\nPress Enter to open github.com in your browser...\r\n```\r\nThe browser is opened with:\r\n```\r\nhttp://127.0.0.1:52046/callback?browser_session_id=1234&code=1234&state=1234\r\n```\r\n(masked values)\r\n\r\nbut it can't access it:\r\n\r\n```\r\nFirefox can’t establish a connection to the server at 127.0.0.1:52046.\r\n```\r\n\r\nVersion: 0.6.4"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nUsing http.REST to perform a DELETE request, which results in a 204, fails in the json.Unmarshal call as the input []byte has a len length == 0\r\n\r\nLocation in code: https://github.com/cli/cli/blob/a6495a8c0d4679df94cd287bcd346781901ce1ae/api/client.go#L154\r\n\r\nUse-case is to remove a Github app grant using the equivalent of the following CURL command:\r\n\r\n```\r\ncurl -u <CLIENT_ID:CLIENT_SECRET> -X DELETE https://api.github.com/applications/<CLIENT)ID>/grant -d '{\"access_token\": \"<CLIENT_TOKEN>\"}'\r\n```\r\n\r\nPer spec and implementation, the [revoke a grant for an application](https://developer.github.com/v3/apps/oauth_applications/#revoke-a-grant-for-an-application) returns 204 on success.\r\n\r\nNOTE: Currently GH does not issue http.REST(\"DELETE\", ...) commands which is which never should as an issue.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```\r\n\thttp := api.NewClient(\r\n\t\tapi.AddHeader(\"Authorization\", fmt.Sprintf(\"Basic %s\", Base64AppID())),\r\n\t\tapi.AddHeader(\"Content-Type\", \"text/plain\"),\r\n\t)\r\n\r\n\treq := struct {\r\n\t\tAccessToken string `json:\"access_token\"`\r\n\t}{\r\n\t\tAccessToken: token,\r\n\t}\r\n\r\n\tvar resp interface{}\r\n\r\n\tpath := fmt.Sprintf(\"applications/%s/grant\", ClientID())\r\n\r\n\tbody := bytes.NewBuffer([]byte{})\r\n\tjson.NewEncoder(body).Encode(req)\r\n\r\n\terr := http.REST(\"DELETE\", path, body, &resp)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n```\r\n\r\n2. View the output '....'\r\n\r\n3. See error\r\n\r\nThe returned err value returned from the Unmarshal call:\r\n\r\n```\r\n(*json.SyntaxError)(0xc000708060)(unexpected end of JSON input)\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nThe expected behavior would be that a 204 resp is handled correctly, by not attempting to unmarshal.  \r\n\r\nA simple fix to address the issue could be to add the following check to return early\r\n\r\n```\r\n\tif resp.StatusCode == 204 && resp.ContentLength == 0 {\r\n\t\treturn nil\r\n\t}\r\n```\r\n\r\nWithin the existing code:\r\n\r\n```\r\n// REST performs a REST request and parses the response.\r\nfunc (c Client) REST(method string, p string, body io.Reader, data interface{}) error {\r\n\turl := \"https://api.github.com/\" + p\r\n\treq, err := http.NewRequest(method, url, body)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\treq.Header.Set(\"Content-Type\", \"application/json; charset=utf-8\")\r\n\r\n\tresp, err := c.http.Do(req)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\r\n\tsuccess := resp.StatusCode >= 200 && resp.StatusCode < 300\r\n\tif !success {\r\n\t\treturn handleHTTPError(resp)\r\n\t}\r\n\r\n\tif resp.StatusCode == 204 && resp.ContentLength == 0 {\r\n\t\treturn nil\r\n\t}\r\n\r\n\tb, err := ioutil.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\terr = json.Unmarshal(b, &data)\r\n\tif err != nil {\r\n\t\tspew.Dump(resp, b, err)\r\n\t\treturn err\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n```\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\nLog file containing the spew content of the response, buffer and error objects at the point of the Unmarshal failure.\r\n\r\n[dump.txt](https://gist.github.com/gertd/5420956edc21ae241d8931d4985f02be)\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n\r\nHappy to send you a PR with the proposed change.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen I run `gh repo view`, it used to open the repository in the browser. Now it does not.\r\n\r\nIt appears this was intentional as part of #690.\r\n\r\nLooking at the [documentation](https://cli.github.com/manual/gh_repo_view), I see a flag is now needed. \r\n\r\n```\r\n  -w, --web   Open repository in browser\r\n```\r\n\r\nHowever, it doesn't look like the changes were added to the options printed out when running `gh repo --help`\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `gh repo --help`\r\n2. See flag missing\r\n\r\n<img width=\"976\" alt=\"image\" src=\"https://user-images.githubusercontent.com/3806031/78625659-7fc44d00-7841-11ea-9077-2e4430cd523a.png\">\r\n\r\n\r\n### Expected vs actual behavior\r\n\r\n```\r\n  -w, --web   Open repository in browser\r\n```\r\n\r\nshould show up when a user runs `gh repo --help`\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nI recently updated to `0.6.4`. \r\n\r\nBefore upgrading `gh pr view` would open the browser to the most recently created pull request. The upgraded behavior is just to show me the URL.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n0. git push origin my_branch\r\n1. `gh pr create`\r\n2. `gh pr view`\r\n3. does not open the browser -- expected to open the browser\r\n\r\nThis is a regression from past functionality.\r\n\r\nOS X 10.15.4"},{"labels":["bug",null],"text":"`gh completion` is a command that may be used during shell initialization, and we want to avoid performing upgrade checks there (for speed) and avoid showing upgrade notifications so that people don't get any messages from gh before they ever manually invoke it in their shell.\r\n\r\nOriginally reported in https://github.com/cli/cli/issues/743"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this 'gh pr checkout 2648' to fetch this PR https://github.com/ionic-team/capacitor/pull/2648\r\n\r\n> Already on 'master'\r\n> Your branch is up to date with 'origin/master'.\r\n> fatal: Not possible to fast-forward, aborting.\r\n> exit status 128\r\n\r\n### Expected vs actual behavior\r\n\r\nIf the user used master, maybe use a new branch like username-master instead of using master, because in this case it couldn't fast-forward, but what would happen if it could? I think it will screw my master branch with the PR content.\r\nOr if not possible to create a new branch, then fail with an error saying gh pr checkout doesn't work on master branch\r\n\r\n\r\n### Logs\r\n\r\n> Already on 'master'\r\n> Your branch is up to date with 'origin/master'.\r\n> fatal: Not possible to fast-forward, aborting.\r\n> exit status 128\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen I create a PR and use command to view (`gh pr view`) I have only output with link to the PR but it's not automatically opened in new tab in the browser.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. You need to have some changes on the branch.\r\n2. Commit changes.\r\n3. Type `gh pr create` and fill all data that you want (this case, two default values)\r\n4. Type `gh pr view`\r\n\r\n### Expected vs actual behavior\r\n\r\nI'm expecting that I'll have a new tab in the browser with PR. Actual behaviour don't do it.\r\n\r\nI tested this on version `0.6.4` and previously on `0.6.3`. In previous versions this worked for me.\r\n\r\n### Logs\r\n\r\nCommand: `gh pr view`\r\n\r\nOutput:\r\n```\r\nPR TITLE MESSAGE\r\nPatrykRudnicki wants to merge 1 commit into master from BRANCH_NAME\r\nView this pull request on GitHub: https://github.com/organisation/project/pull/pr_number\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen cloning a fork, upstream protocol should match origin.\r\n\r\n### Steps to reproduce the behavior\r\n\r\nIf I forked this repo:\r\n\r\n1. `gh repo clone git@github.com:bendavies/cli.git`\r\n\r\n### Expected vs actual behavior\r\n\r\nActual:\r\n```sh\r\ngit remote -v\r\norigin\tgit@github.com:bendavies/cli.git (fetch)\r\norigin\tgit@github.com:bendavies/cli.git (push)\r\nupstream\thttps://github.com/cli/cli.git (fetch)\r\nupstream\thttps://github.com/cli/cli.git (push)\r\n```\r\n\r\nExpected:\r\n```sh\r\ngit remote -v\r\norigin\tgit@github.com:bendavies/cli.git (fetch)\r\norigin\tgit@github.com:bendavies/cli.git (push)\r\nupstream\tgit@github.com:cli/cli.git (fetch)\r\nupstream\tgit@github.com:cli/cli.git (push)\r\n```\r\n\r\n"},{"labels":["bug",null],"text":"I set up the local repo with `gh repo fork`:\r\n```sh\r\n$ gh repo fork https://github.com/Homebrew/homebrew-cask-drivers\r\n- Forking Homebrew/homebrew-cask-drivers...\r\n✓ Created fork lumaxis/homebrew-cask-drivers\r\n? Would you like to clone the fork? Yes\r\n✓ Cloned fork\r\n```\r\nThen edited on the `master` branch, committed, ran `gh pr create`.\r\n\r\n_Originally posted by @lumaxis in https://github.com/cli/cli/issues/710#issuecomment-607708771_\r\n\r\nThis is because the `upstream` remote is added without being fetched. The `upstream/master` is therefore a ref not recognized by git.\r\n\r\nPotential solution: auto-fetch from `upstream` remote when adding it."},{"labels":["bug",null],"text":"https://github.com/cli/scoop-gh/pull/3\r\n\r\nthis file is being generated incorrectly"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\ngh version 0.6.3 (2020-03-31)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.3\r\n\r\nI tried sending a PR to a repo before I had write access to it:\r\n\r\n```\r\nmy-branch> gh pr create\r\npanic: value method github.com/cli/cli/api.Repository.RepoOwner called using nil *Repository pointer\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/cli/cli/api.(*Repository).RepoOwner(0x0, 0xc000854480, 0xc)\r\n\t<autogenerated>:1 +0x97\r\ngithub.com/cli/cli/internal/ghrepo.IsSame(0x1addc40, 0xc000830160, 0x1addc40, 0x0, 0x0)\r\n\t/home/runner/work/cli/cli/internal/ghrepo/repo.go:54 +0x5d\r\ngithub.com/cli/cli/command.prCreate(0x2017b60, 0x204f078, 0x0, 0x0, 0x0, 0x0)\r\n\t/home/runner/work/cli/cli/command/pr_create.go:157 +0x27a1\r\ngithub.com/spf13/cobra.(*Command).execute(0x2017b60, 0x204f078, 0x0, 0x0, 0x2017b60, 0x204f078)\r\n\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.6/command.go:840 +0x460\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x2015400, 0x5, 0x0, 0x0)\r\n\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.6/command.go:945 +0x317\r\nmain.main()\r\n\t/home/runner/work/cli/cli/cmd/gh/main.go:32 +0xde\r\n```\r\n\r\nAfter being given push access, the error went away:\r\n\r\n```\r\nmy-branch> gh pr create\r\nCreating pull request for my-branch into master in dummy/dummy-repo\r\n\r\n? Title (this is a test)\r\n...\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Clone any repo that you don't have push access to \r\n2. Create a new branch\r\n3. type `gh pr create`\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected:\r\nA user error, suggesting a lack of write access\r\n\r\nActual:\r\nPanic (as shown above)\r\n\r\n### Logs\r\n\r\nSee above."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen opening PR with `gh pr create` it will return `a pull request for branch \"xxx\" already exists:` even if the existing PR is not to the same base.\r\n\r\n### Steps to reproduce the behavior\r\non branch X : \r\n1. `gh pr create -B branchA -t \"test\" -b \" \"`\r\n2. `gh pr create -B branchB -t \"test\" -b \" \"`\r\n3. See error : `a pull request for branch \"branch X\" already exists:`\r\n\r\n### Expected vs actual behavior\r\n\r\nIf the base branch is different (branchA != branchB), gh should create a new PR.\r\n\r\n`gh version 0.6.2 (2020-03-18)`\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen attempting to create a pr from a repo without a local `master` branch `github pr create` fails to compute title/body defaults (and presumable gets the wrong commits if local `master` != upstream `master`).\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```console\r\n> git clone https://github.com/Nemo157/cbor.nemo157.com\r\nCloning into 'cbor.nemo157.com'...\r\nremote: Enumerating objects: 26, done.\r\nremote: Counting objects: 100% (26/26), done.\r\nremote: Compressing objects: 100% (26/26), done.\r\nremote: Total 734 (delta 10), reused 4 (delta 0), pack-reused 708\r\nReceiving objects: 100% (734/734), 2.77 MiB | 3.54 MiB/s, done.\r\nResolving deltas: 100% (497/497), done.\r\n> cd cbor.nemo157.com\r\n> git checkout -b foo\r\nSwitched to a new branch 'foo'\r\n> git branch -d master\r\nDeleted branch master (was b9d93eb).\r\n> gh pr create\r\n\r\nCreating pull request for foo into master in Nemo157/cbor.nemo157.com\r\n\r\n! warning: could not compute title or body defaults: fatal: ambiguous argument 'master...foo': unknown revision or path not in the working tree.\r\nUse '--' to separate paths from revisions, like this:\r\n'git <command> [<revision>...] -- [<file>...]'\r\ngit: exit status 128\r\n? Title\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nThe remote branch should be used for computing the appropriate commits to use (`origin/master...foo` in the example above).\r\n\r\n### Logs\r\n\r\n```console\r\n> gh --version\r\ngh version 0.6.2 (2020-03-18)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.2\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nAn error is shown when requesting pr statuses.\r\n\r\n### Version\r\ngh version 0.6.2 (2020-03-18)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.2\r\n(.deb)\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this `gh pr status`\r\n2. View the output\r\n```\r\nRelevant pull requests in My/Repo\r\n\r\nCurrent branch\r\n    [...expected output]\r\n\r\nCreated by you\r\n    [...more expected outout]panic: unsupported status: \"STALE\"\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/cli/cli/api.(*PullRequest).ChecksStatus(0xc0006b98c0, 0xc0000ae008, 0xcd5538, 0xb, 0xc0006b97b0)\r\n\t/home/runner/work/cli/cli/api/queries_pr.go:126 +0x77c\r\ngithub.com/cli/cli/command.printPrs(0xed1fe0, 0xc0000ae008, 0x3, 0xc000471500, 0x3, 0x4)\r\n\t/home/runner/work/cli/cli/command/pr.go:403 +0x3cb\r\ngithub.com/cli/cli/command.prStatus(0x1408840, 0x14413c8, 0x0, 0x0, 0x0, 0x0)\r\n\t/home/runner/work/cli/cli/command/pr.go:114 +0x521\r\ngithub.com/spf13/cobra.(*Command).execute(0x1408840, 0x14413c8, 0x0, 0x0, 0x1408840, 0x14413c8)\r\n\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.6/command.go:840 +0x460\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x14075e0, 0x5, 0x0, 0x0)\r\n\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.6/command.go:945 +0x317\r\nmain.main()\r\n\t/home/runner/work/cli/cli/cmd/gh/main.go:32 +0xde\r\n```\r\n3. See error: see output above\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected the same output without the error.\r\n\r\n### Logs\r\n\r\n\\-\r\n"},{"labels":["bug",null,null],"text":"### Describe the bug\r\n\r\nThe MSI installer for _Windows 10 x64_\r\n1. suggests a wrong install folder (x86 instead of x64)\r\n1. ignores different install folder when changed by user\r\n\r\nTested with installer for 0.6.2:\r\nhttps://github.com/cli/cli/releases/download/v0.6.2/gh_0.6.2_windows_amd64.msi\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Launch .msi install file on Windows 10 x64.\r\n1. See default install location: `C:\\Program Files (x86)\\GitHub CLI` (error 1)\r\n1. Change install location to: `C:\\Program Files\\GitHub CLI`\r\n1. Finish the install process.\r\n1. See application installed in: `C:\\Program Files (x86)\\GitHub CLI` (error 2)\r\n\r\n### Expected vs actual behavior\r\n\r\n1. Default install location to be: `C:\\Program Files\\GitHub CLI`\r\n1. User changes to install location to be reflected\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nHi @mislav! Thank you for creating this. I'm trying to create the new repo via CLI, and it seems --repo is not passing the owner/repo format? It just defaults to owner/folder-name\r\n\r\nIn fact, I try to create a new repo using a different name it says repository already exists.\r\ngh version 0.6.2 (2020-03-18)\r\n\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Go to folder `reponame`\r\n2. gh create repo --repo org/reponame\r\n3. it creates owner/reponame instead\r\n\r\n### Expected vs actual behavior\r\n\r\nIt should create a repo name under the org.\r\n\r\n### Logs\r\n\r\nDoing it twice says:\r\ngraphql error: 'Name already exists on this account'\r\n\r\nEven though there's no repo name under the org, only the local repo under my own account.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nFor (to me unknown reasons), some PRs fail to be checked out as they're `rejected`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n* Using github.com:gradle/gradle\r\n* Tried to checkout PR #11568\r\n```\r\n❯ gh pr checkout 11568\r\nFrom github.com:gradle/gradle\r\n ! [rejected]                refs/pull/11568/head -> pmd_maxfailures  (non-fast-forward)\r\nexit status 1\r\n```\r\n### Expected vs actual behavior\r\n\r\nI'd expect it to either checkout the PR or have an informative error message what the problem is and how I can solve it."},{"labels":["bug",null],"text":"### Bug\r\nRepositories aren't being recognised from git to gh on a fresh install.\r\n\r\n### Version\r\n`0.6.2`\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Uninstall gh\r\n2. Clone a repository with git\r\n3. Install gh\r\n4. Navigate to git repository directory\r\n5. Attempt to work with the repo\r\n\r\n### Expected vs actual behavior\r\ngh was installed, to do more GitHub specific tasks. Instead of it working with the directories that already existed from using git commands, it produces `no git remote found for a github.com repository`.\r\n"},{"labels":["bug",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAt the moment it seems like it's not possible to create PRs from the same branch to a different base branch if a PR from the current branch already exists. You will get the following error: \r\n`a pull request for branch \"branch\" already exists:`\r\n\r\n\r\nThis is a common use case for me when I'm backporting issues. First I create a patch from a merge-base of the branches I want the patch to be included in, and then I create multiple pull requests from that branch to different base branches. It would be really nice to be able to this from the CLI - takes a lot of clicks through the interface.\r\n\r\n"},{"labels":["bug",null],"text":"Created a new repo, reverted the initial commit, added a README on GitHub.com and created a PR, but every step along the way still results in this for `gh pr status`:\r\n```\r\n➜  Q1 git:(master) gh pr status\r\nfatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\r\nUse '--' to separate paths from revisions, like this:\r\n'git <command> [<revision>...] -- [<file>...]'\r\ngit: exit status 128\r\n```\r\n\r\n_Originally posted by @tierninho in https://github.com/cli/cli/issues/282#issuecomment-600867365_"},{"labels":["bug"],"text":"1. If the branch has been already published to a GitHub remote, avoid ever auto-pushing it to a _different_ remote during `gh pr create`.\r\n\r\n2. When the branch is detected to be already published and its remote tracking branch matches the tip of the local branch, avoid doing `git push` during `gh pr create` as the operation is unnecessary.\r\n\r\nRef. https://github.com/cli/cli/issues/575 #350"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nHello, I'm not sure if this is the right place to post UI bugs on the website. I'm using Firefox (74.0), macOS Catalina (10.15.1), on a MacBook Pro (Late 2012), and I noticed that there is an overflow of commands on the manual page.\r\n\r\n<img width=\"1280\" alt=\"Screenshot 2020-03-19 at 10 31 00\" src=\"https://user-images.githubusercontent.com/795488/77052514-36fd3f00-69cd-11ea-88be-bd9e96427d55.png\">\r\n\r\nI also noticed some horizontal scrolling on the landing page:\r\n\r\n![Kapture 2020-03-19 at 10 37 59](https://user-images.githubusercontent.com/795488/77052950-de7a7180-69cd-11ea-8c26-a0a2c7db8b2b.gif)\r\n\r\nIt seems that the \"Contribute and learn more\" part is what's extending the page.\r\n\r\n### Steps to reproduce the behavior\r\n\r\nGo to the manual and landing pages.\r\n\r\n### Expected vs actual behavior\r\n\r\nExplained above."},{"labels":["bug",null],"text":"In repositories with templates, I would expect `gh issue create --web` to lead me to the template picker. We should also do this to make sure we're encouraging the use of templates 😄 "},{"labels":["bug",null],"text":"I was doing some QAing of the latest release and noticed that when I followed these steps the body didn't autofill as I expected: \r\n\r\n1. Made a single commit with a title and body: `git commit -m \"Title\" -m \"Body\" --allow-empty`\r\n1. `gh pr create`\r\n1.  accepted auto filled title\r\n1. `Enter` to skip\r\n1. Submit\r\n\r\nThe resulting PR was missing the body:\r\n\r\n<img width=\"770\" alt=\"Screen Shot 2020-03-18 at 4 03 50 PM\" src=\"https://user-images.githubusercontent.com/10404068/77015648-9c502200-6932-11ea-9d08-974a82d7c8a3.png\">\r\n\r\nWhen I did the same process, and used `e` to view it in the editor first, it worked. I would expect to be able to use enter to skip and it would still autofill \r\n\r\nLet me know if I can provide any more context!"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nBash shell completions should add a space after completing a command name.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n0. If not already, set up completions according to `gh help completion`\r\n1. Type `gh pr ch`\r\n2. Press <kbd>Tab</kbd>\r\n\r\n### Expected vs actual behavior\r\n\r\nThe word `ch` expands to `checkout` without a space after, but I think users would prefer to have a space automatically added after the word so they can easily add an argument. For comparison, `git com` <kbd>Tab</kbd> expands to `commit` with a space added after.\r\n\r\nRef. https://github.com/spf13/cobra/issues/371"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nRight after installing the GH CLI on a Ubuntu 16, using the instructions in the documentation, I run `gh` binary and see these strange characters in the Terminal as if I had typed those there: 11;rgb:00/00/00\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Download the Ubuntu 16 binary: `wget https://github.com/cli/cli/releases/download/v0.6.1/gh_0.6.1_linux_amd64.deb`\r\n2. Install according to documentation: `sudo apt install git && sudo dpkg -i gh_0.6.1_linux_amd64.deb`\r\n3. Run GH CLI: `gh`\r\n4. The input leaves some \"rgb\" garbage characters\r\n\r\n### Expected vs actual behavior\r\n\r\nI should not see these strange characters: 11;rgb:00/00/00\r\n\r\n### Logs\r\n\r\n```\r\n# gh\r\nWork seamlessly with GitHub from the command line.\r\n\r\nGitHub CLI is in early stages of development, and we'd love to hear your\r\nfeedback at <https://forms.gle/umxd3h31c7aMQFKG7>\r\n\r\nUsage:\r\n  gh [command]\r\n\r\nAvailable Commands:\r\n  help        Help about any command\r\n  issue       Create and view issues\r\n  pr          Create, view, and checkout pull requests\r\n  repo        Create, clone, fork, and view repositories\r\n\r\nFlags:\r\n      --help              Show help for command\r\n  -R, --repo OWNER/REPO   Select another repository using the OWNER/REPO format\r\n      --version           Show gh version\r\n\r\nUse \"gh [command] --help\" for more information about a command.\r\nsubcommand is required\r\n# 11;rgb:00/00/00\r\n```\r\n"},{"labels":["bug",null],"text":"**Version:**\r\ngh version DEV\r\nhttps://github.com/cli/cli/releases/latest\r\n0.6.1.r56.g58f6bef\r\n\r\nWhenever I run commands in private repositories I get no results despite being authenticated:\r\n\r\n```\r\n(master) $ gh pr list\r\nnot found\r\n(master) $ gh issue list\r\nnot found\r\n```\r\n\r\nIs the cli supposed to work only with public repositories?"},{"labels":["bug",null,null],"text":"**Problem:** running `gh pr create` would prompt the user for title, body, submit the data to the API, and ultimately fail with an API error if an open pull request for the current branch already exists. This wastes the user's time and the error message doesn't help them navigate to the PR that already exists.\r\n\r\n**Potential solution:** check for existing PR before prompting the user for any input and, if one exists, abort the operation and print the information about the existing PR.\r\n\r\n```sh\r\n$ gh pr create\r\naborted: a pull request already exists for the 'patch-1' branch\r\nhttps://github.com/OWNER/REPO/pull/123\r\n\r\n# or, alternate output:\r\n$ gh pr create\r\naborted: a pull request already exists for the 'patch-1' branch\r\nUse `gh pr view` to view the current pull request\r\n```\r\n\r\n**Considerations:**\r\n- We should allow `pr create --web` to proceed normally even if there is an existing pull request. Since the user has already opted to use the web view, and the web view will inform them of an existing pull request anyway, I don't think it's necessary to perform the check on our end."},{"labels":["bug",null],"text":"### Describe the bug\r\nSince I updated to v0.6.0, I get a `\\` on my terminal after running `gh` commands. Currently using v.0.6.1.\r\n\r\n### Steps to reproduce the behaviour\r\n1. Run any command, say `gh --version`\r\n\r\n### Expected vs actual behaviour\r\n\r\n**Expected**\r\n```\r\n>gh --version\r\ngh version 0.6.1 (2020-03-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.1\r\n>\r\n```\r\n**Actual**\r\n```\r\n>gh --version\r\ngh version 0.6.1 (2020-03-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.1\r\n>\\\r\n```"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nI'm creating a repository with access to an existing team:\r\n\r\n`gh repo create orgname/repo --team team-name`\r\n\r\nWhen pressing enter, repo is not created and cli throws graphql error:\r\n\r\n```shell\r\ngraphql error: 'Could not resolve to a node with the global id of 'MDQ6VGVhbTM0Njg1MDU='.'\r\n```\r\n### Steps to reproduce the behavior\r\n\r\n1. Make sure \"team-name\" exists as a team in the organization\r\n2. Type `gh repo create orgname/repo --team team-name`\r\n3. View the output\r\n\r\n### Expected vs actual behavior\r\n\r\n##### Expected:\r\n\r\ncreate the repo with given name and allow \"team-name\" to access it\r\n\r\n##### Actual:\r\nRepo is not created and cli throws:\r\n```shell\r\ngraphql error: 'Could not resolve to a node with the global id of 'MDQ6VGVhbTM0Njg1MDU='.'\r\n```\r\n\r\n#### CLI version\r\ngh version 0.6.1 (2020-03-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.1\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\ngh repo fork creates a new repo instead of using my already existing fork.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. fork a repo org/A  into myuser/A \r\n2. clone repo org/A\r\n3. run `gh repo fork`\r\n\r\nnow a  `myuser/A-1`  is created rather than using the existing fork.\r\n"},{"labels":["bug",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAfter revoking access from github.com/settings/applications, when I try to run any command, it errors out to `http error, 'https://api.github.com/graphql' failed (401): 'Bad credentials'`. It should instead identify this error and redirect to authentication.\r\n\r\n### Proposed solution\r\n\r\nThis is useful in cases of mistaken deletion of oauth access. User should be shown a CTA in this case, like authentication.\r\n\r\nAnother solution is to add an authentication command\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n```\r\n$ gh --version\r\ngh version 0.6.1 (2020-03-10)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.1\r\n```\r\nCannot clone my private repository.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Run `gh repo clone kawaemon/my_private_repo_name`\r\n2. See this message\r\n```\r\n$ gh repo clone kawaemon/my_private_repo_name`\r\nCloning into 'my_private_repo_name'...\r\nUsername for 'https://github.com': \r\n```\r\nI think this is git command's prompt, but I can't use this way to authenticate because I'm using 2FA.\r\nI don't know whether this is right behavior, but I hope this project to provide simple way to clone private repository.\r\n\r\nThank you."},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nI'm unable to perform the initial oauth authentication steps. `gh` originally directed me to Safari to authorize the application, as I would have expected, but the redirect back to `localhost` fails with \"page cannot be found\". I'm relatively certain the tool was supposed to stand up an http server to receive the redirect and it simply never happened. I have tried this with several versions, with and without firewall enabled, etc.\r\n\r\n```\r\ngh version 0.6.1 (2020-03-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.1\r\n```\r\n\r\nmacOS Catalina. Installed via Homebrew.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Run any command that requires authentication (e.g. `gh pr create`)\r\n2. Continue through authorization steps in browser\r\n3. Failed to load localhost address"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nAfter merging a PR. When I run `gh pr status` (from that branch), I would expect to see \"Check Passing - Merged\" (Maybe in Purple to match the GitHub UX). In 0.6.1 I see \"Check Passing - Approved\". \r\n\r\n<img width=\"290\" alt=\"Screenshot 2020-03-07 at 19 54 18\" src=\"https://user-images.githubusercontent.com/993745/76151494-73679b80-60ad-11ea-9964-11d4e95e8b08.png\">\r\n\r\n\r\n**gh version** 0.6.1 (2020-03-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.1\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create a branch\r\n2. Open a PR from that branch\r\n3. Merge the PR from that branch\r\n4. Run `gh pr status` from that branch\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected to see some indication that the PR was Merged.\r\n\r\n**Thanks for all the great work on this tool 👍 **\r\n"},{"labels":["bug"],"text":"### Invalid value for homepage on creating repo\r\n\r\ngraphql error: 'Variable $input of type CreateRepositoryInput! was provided invalid value for homepage (Argument is not defined on CreateRepositoryInput)'\r\n\r\n`$gh --version`\r\n`gh version 0.6.1 (2020-03-07)`\r\n`https://github.com/cli/cli/releases/tag/v0.6.1`\r\n\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `gh  repo create DemoGHCLI -h www.example.com`\r\n2. View the output '\r\ngraphql error: 'Variable $input of type CreateRepositoryInput! was provided invalid value for homepage (Argument is not defined on CreateRepositoryInput)''\r\n"},{"labels":["bug"],"text":"### Issue with CLI for Ubuntu\r\nCLI create the repository name with the `text` before space only.\r\n\r\n`gh version 0.6.1 (2020-03-07)`\r\n`https://github.com/cli/cli/releases/tag/v0.6.1`\r\n\r\n### Steps to reproduce\r\n\r\n> gh repo create cli github\r\n\r\nAfter executing above command:\r\n\r\n> Created repository mudassar/cli on GitHub\r\n\r\nBut it should produce this output: **Create repository mudassar/cli-github on GitHub**\r\n\r\n**Out of curiosity:** Is that intended behavior? "},{"labels":["bug"],"text":"![screenshot-2020-03-07T03:14:58 677Z](https://user-images.githubusercontent.com/646121/76135764-bebb7480-5fef-11ea-9106-8e005a569224.png)\r\n\r\nIf rxvt-unicode's background is transparent, when `gh` terminates, the terminal always receives some garbage input. The garbage received by the terminal is the alpha channel value in hex with a `/` prefix, e.g. `/cccc`, which ranges from `/0000` to `/fe00` (whatever the alpha channel value is, except for high values that are treated as completely opaque).\r\n\r\n1. Use rxvt-unicode aka urxvt\r\n2. Set background to have an alpha channel e.g. with the `~/.Xdefaults` below\r\n3. Run any gh command \r\n\r\n```\r\nURxvt.background:  [80]#dddddd\r\n```\r\nor similarly\r\n```\r\nURxvt.background:  rgba:dd00/dd00/dd00/cccc\r\n```\r\n\r\nThe `/cccc` suffix, which is the alpha channel part, appears as unexpected IO.\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected no strange IO issue causing `/cccc` to appear as stdin to the terminal.\r\n\r\n### Logs\r\n\r\nIt seems like any command is affected e.g. `gh --version`.\r\n\r\n---\r\nALPHA CHANNEL SUPPORT in `man urxvt` has info about the alpha channel setting."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n```\r\n$ git clone https://github.com/mesg-foundation/engine\r\nCloning into 'engine'...\r\nremote: Enumerating objects: 52, done.\r\nremote: Counting objects: 100% (52/52), done.\r\nremote: Compressing objects: 100% (47/47), done.\r\nremote: Total 36393 (delta 16), reused 18 (delta 5), pack-reused 36341\r\nReceiving objects: 100% (36393/36393), 25.24 MiB | 2.33 MiB/s, done.\r\nResolving deltas: 100% (22399/22399), done.\r\n$ cd engine \r\n$ gh --version\r\ngh version 0.6.1 (2020-03-06)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.1\r\n$ gh pr list\r\nyaml: unmarshal errors:\r\n  line 2: cannot unmarshal !!map into []context.configEntry\r\n\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nA list of prs"},{"labels":["bug",null],"text":"If using `gh repo create` outside an existing repo, it is created successfully:\r\n\r\n```\r\n➜  gh repo create QQQQQQQQ1\r\n✓ Created repository tierninho/QQQQQQQQ1 on GitHub\r\n✓ Added remote https://github.com/tierninho/QQQQQQQQ1.git\r\n```\r\n\r\nhowever, if you `cd` into an existing repo, attempt to create another repo, CLI attempts to use the git remote of the existing repo, like so:\r\n\r\n```\r\n➜  gh repo create QQQQQQQQ\r\n✓ Created repository tierninho/QQQQQQQQ on GitHub\r\nfatal: remote origin already exists.\r\nexit status 128\r\n```\r\n\r\nIs this intended? Feel free to close if too much of an edge case.\r\n\r\n_OSX, v0.6.1_"},{"labels":["bug",null,null],"text":"The global flags include: \r\n  `-R, --repo OWNER/REPO`   Select another repository using the OWNER/REPO format\r\n\r\nhowever this is unlikely to apply to most or all of the `gh repo` commands as I repo name/url is already needed to execute the command. \r\n\r\nFor instance, one would not use: `gh repo view https://github.com/cli/cli -R tierninho/yarn` as the `-R` flag would be ignored.\r\n\r\n_OSX, v0.6.1_"},{"labels":["bug",null],"text":"We should block fake `gh repo view [repoURL]` command by first verifying the url exists. \r\n\r\nFake repo:\r\n➜  `gh repo view` https://github.com/cli/clifsdfsdfsdf\r\nOpening github.com/cli/clifsdfsdfsdf in your browser.\r\n\r\nDoing so would mimic the `gh issue/pr view` experience, like so: \r\n➜  gh issue view 2342342343\r\ngraphql error: 'Could not resolve to an Issue with the number of 2342342343.'\r\n\r\n_OSX, v0.6.1_"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen I run `gh pr status` , I see the following error message and no other output:\r\n```\r\ngraphql error: 'Field 'statusCheckRollup' doesn't exist on type 'Commit', Field 'reviewDecision' doesn't exist on type 'PullRequest''\r\n```\r\n\r\n`gh version 0.6.1 (2020-03-04)`\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `gh pr status` (in case it matters: on a private repository in a GitHub organization)\r\n2. Error is printed to the console with no other output.\r\n\r\n### Expected vs actual behavior\r\n\r\nI'm not sure what the output of `gr pr status` should look like, but the error is definitely a sign that something is going wrong.\r\n\r\n### Logs\r\n\r\n```\r\n$ gh pr status\r\ngraphql error: 'Field 'statusCheckRollup' doesn't exist on type 'Commit', Field 'reviewDecision' doesn't exist on type 'PullRequest''\r\n```"},{"labels":["bug"],"text":"Hi!\r\nI don't think it's a bug with cli, but when listing Pull Requests with multiple labels, GitHub API returns some \"duplicated\" PRs. As you can see in the image bellow:\r\n![2020-03-05-095703_91x452_scrot](https://user-images.githubusercontent.com/1211207/75964943-5de54c80-5ec8-11ea-90b9-1a46d1aad258.png)\r\nI think we could remove the duplicates or better yet add the labels when listing the PR, so it will make sense to have the duplicates."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen creating a PR through `gh pr create`, it pushes a branch to upstream (the main repo), polluting the central project, rather than using the currently used fork -- the origin.\r\n\r\nThis is especially true is the branch has it's upstream set to origin.\r\n\r\nThis is a blocking issue for me. I never want to push my PR branch to upstream.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `gh create pr`\r\n\r\n### Expected vs actual behavior\r\n\r\nThe PR should be created with the current branch's remote branch, not in the upstream repository.\r\n\r\nThis will likely always be the origin/fork of the main repository.\r\n\r\nIt took me forever to work out why I was getting my PR branches polluting the upstream repository that everyone works against.\r\n\r\n### Logs\r\n\r\n➜  build git:(release/1.4.0) gh pr create -w\r\nEnumerating objects: 90, done.\r\nCounting objects: 100% (90/90), done.\r\nDelta compression using up to 4 threads\r\nCompressing objects: 100% (42/42), done.\r\nWriting objects: 100% (46/46), 5.22 KiB | 1.30 MiB/s, done.\r\nTotal 46 (delta 33), reused 0 (delta 0), pack-reused 0\r\nremote: Resolving deltas: 100% (33/33), completed with 32 local objects.\r\nremote:\r\nremote: Create a pull request for 'release/1.4.0' on GitHub by visiting:\r\nremote:      https://github.com/googleforgames/agones/pull/new/release/1.4.0\r\nremote:\r\nTo github.com:googleforgames/agones.git\r\n * [new branch]        HEAD -> release/1.4.0\r\nBranch 'release/1.4.0' set up to track remote branch 'release/1.4.0' from 'upstream'.\r\nOpening github.com/googleforgames/agones/compare/master...release/1.4.0 in your browser."},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\n`gh repo fork` (introduced in #549) does not detect that an existing fork already has a local remote reference, and adds a new one.\r\n\r\ngh version:\r\n```\r\ngh version 0.6.0 (2020-03-03)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Navigate to a repo that has already been forked, e.g. by `hub fork` (that means it'll have a remote with the user's name; in my case, \"waldyrious\")\r\n2. Run `gh repo fork` and accept the prompt:\r\n   ```\r\n   Homebrew/homebrew-core $ gh repo fork\r\n   Forking Homebrew/homebrew-core...\r\n   ! waldyrious/homebrew-core already exists\r\n   ? Would you like to add a remote for the fork? Yes\r\n   ✓ Remote added at fork\r\n3. Now there will be two remote references to the same fork:\r\n   ```\r\n   Homebrew/homebrew-core $ git remote -v\r\n   fork\thttps://github.com/waldyrious/homebrew-core.git (fetch)\r\n   fork\thttps://github.com/waldyrious/homebrew-core.git (push)\r\n   origin\thttps://github.com/Homebrew/homebrew-core (fetch)\r\n   origin\thttps://github.com/Homebrew/homebrew-core (push)\r\n   waldyrious\tgit@github.com:waldyrious/homebrew-core.git (fetch)\r\n   waldyrious\tgit@github.com:waldyrious/homebrew-core.git (push)\r\n   ```\r\n### Expected vs actual behavior\r\n\r\nI expected the behavior to be something like this instead:\r\n\r\n```\r\nHomebrew/homebrew-core $ gh repo fork\r\nForking Homebrew/homebrew-core...\r\n✓ waldyrious/homebrew-core already exists and has a local remote reference \"waldyrious\"\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n```bash\r\n$ gh --version\r\ngh version 0.5.7 (2020-02-20)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.7\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n2. View the output '....'\r\n3. See error\r\n\r\n```bash\r\n$ gh issue status\r\nPost https://api.github.com/graphql: read tcp 192.168.1.47:49848->13.250.168.23:443: wsarecv: An existing connection was forcibly closed by the remote host.\r\n```\r\n\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\nI search the existing issues, like #536 , but the issue is not solved.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug",null],"text":"Commands such as `pr status` inspect the current branch and check its upstream configuration to see where it's pushed while resolving the branch to the associated PR.\r\n\r\nSome branches might be pushed but have _no upstream configuration_ (simple `git push <remote> HEAD` withough `-u`). Right now mechanisms such as `prSelectorForCurrentBranch()` don't recognize such branches as being published to a remote. We should perhaps iterate over all remotes and assume one to be a push target if we find a same-named tracking branch on one. (This will perhaps be prone to false-positives, but it's a marked improvement over current behavior.)\r\n\r\nReported by @rista404 https://github.com/cli/cli/pull/567#issuecomment-593366743"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nbuild is failing\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this `make`\r\n2. View the output \r\n```bash\r\n[eduardo@fedora-ws cli]$ make\r\n# runtime/internal/atomic\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:18:6: Load redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:16:24\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:24:6: Loadp redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:22:32\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:30:6: Load64 redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:28:26\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:36:6: LoadAcq redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:34:27\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:41:6: Xadd redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:39:37\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:44:6: Xadd64 redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:42:39\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:47:6: Xadduintptr redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:45:47\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:50:6: Xchg redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:48:36\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:53:6: Xchg64 redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:51:38\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:56:6: Xchguintptr redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:54:45\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:56:6: too many errors\r\nmake: *** [Makefile:19: bin/gh] Error 2\r\n[eduardo@fedora-ws cli]$ go version\r\ngo version go1.14 linux/amd64\r\n```\r\n3. `go buidl` fails due module incompatibility \r\n\r\n### Expected vs actual behavior\r\n\r\n```bash\r\n$make\r\n$ls bin\r\ngh\r\n```\r\n\r\n### Logs\r\n\r\n```bash\r\n[eduardo@fedora-ws cli]$ go version\r\ngo version go1.14 linux/amd64\r\n\r\n[eduardo@fedora-ws cli]$ make\r\n# runtime/internal/atomic\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:18:6: Load redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:16:24\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:24:6: Loadp redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:22:32\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:30:6: Load64 redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:28:26\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:36:6: LoadAcq redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:34:27\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:41:6: Xadd redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:39:37\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:44:6: Xadd64 redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:42:39\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:47:6: Xadduintptr redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:45:47\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:50:6: Xchg redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:48:36\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:53:6: Xchg64 redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:51:38\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:56:6: Xchguintptr redeclared in this block\r\n\tprevious declaration at /usr/local/go/src/runtime/internal/atomic/atomic_amd64.go:54:45\r\n/usr/local/go/src/runtime/internal/atomic/atomic_amd64x.go:56:6: too many errors\r\nmake: *** [Makefile:19: bin/gh] Error 2\r\n\r\n[eduardo@fedora-ws cli]$ git log -2\r\ncommit fdf940eeba57740b26a4e5ea8b151720ebe94028 (HEAD, upstream/master)\r\nMerge: 704ce31 5f152a3\r\nAuthor: Nate Smith <vilmibm@github.com>\r\nDate:   Mon Mar 2 16:12:55 2020 -0600\r\n\r\n    Merge pull request #530 from doi-t/issue-467\r\n    \r\n    Ability to differentiate pull requests by their state\r\n```\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `git checkout -b my-branch-name`\r\n2. `git commit -m \"Test\"`\r\n3. `gh pr create`\r\n\r\n### Expected vs actual behavior\r\nIf you try this things on github.com, you'll get pre-filled title with the commit message, but CLI will prompt for title and won't suggest the commit message.\r\n### Logs\r\n```\r\nCreating pull request for sh7dm:test into master in cli/cli\r\n\r\n? Title <Enter>\r\ncould not collect title and/or body: could not prompt: interrupt\r\n```"},{"labels":["bug",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nRebasing is a common practice on my team for feature branches and therefore, we have a lot of force pushes in our PRs.\r\n\r\nProcess:\r\n\r\n- I had checked out this PR in the past to review/test it locally.\r\n- My colleague had made some updates and force pushed to the branch\r\n- I used `gh` to check out the branch again\r\n- I get an error\r\n\r\n```\r\n(develop) $ gh pr checkout 1\r\nremote: Enumerating objects: 119, done.\r\nremote: Counting objects: 100% (119/119), done.\r\nremote: Compressing objects: 100% (34/34), done.\r\nremote: Total 105 (delta 86), reused 90 (delta 71), pack-reused 0\r\nReceiving objects: 100% (105/105), 9.93 KiB | 564.00 KiB/s, done.\r\nResolving deltas: 100% (86/86), completed with 12 local objects.\r\nFrom github.com:my-org/repo\r\n + 458540d...f0b5ee1 feature/some-awesome-feature -> origin/feature/some-awesome-feature  (forced update)\r\nSwitched to branch 'feature/some-awesome-feature'\r\nYour branch and 'origin/feature/some-awesome-feature' have diverged,\r\nand have 10 and 26 different commits each, respectively.\r\n  (use \"git pull\" to merge the remote branch into yours)\r\nfatal: Not possible to fast-forward, aborting.\r\nexit status 128\r\n```\r\n\r\n### Proposed solution\r\n\r\nAdd a `--reset` flag to do a hard reset before trying to pull/check out the branch.\r\n\r\n```\r\ngh pr checkout 1 --reset\r\n```\r\n\r\n### Additional context\r\n\r\nN/A"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nVersion 0.5.7\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```\r\n> gh pr status\r\n\r\nRelevant pull requests in github/codeql-go\r\n\r\nCurrent branch\r\n  There is no pull request associated with [go1.14]\r\n\r\nCreated by you\r\n  #39  Go 1.14 support [sauyon:go1.14]\r\n   - Checks passing - Review required\r\n...\r\n\r\n> gr -v\r\ngithub\tgithub:github/codeql-go (fetch)\r\ngithub\tno_push (push)\r\norigin\tgit@github.com:sauyon/codeql-go (fetch)\r\norigin\tgit@github.com:sauyon/codeql-go (push)\r\nupstream\tsemmle:Semmle/go (fetch)\r\nupstream\tno_push (push)\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nThe PR list clearly shows a PR from my branch, but it isn't associated.\r\n"},{"labels":["bug"],"text":"### Issue\r\n\r\nUsing version `gh version 0.5.7 (2020-02-20)`\r\n\r\nThe Create draft pull request button isn't automatically selected when previewing PR on the web, even though the `-d` or `--draft` flag is set on the `gh pr create` command.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `gh pr create -d`\r\n2. Add title and body\r\n3. View the output https://github.com/mm326/studious-bassoon/compare/master...branch2?expand=1&title=Draft+PR\r\n\r\n### Expected vs actual behavior\r\n\r\nI expected that the create draft pull request button to be the default button when previewing a created pr from the cli when the -d flag is set.\r\n\r\nActual outcome:\r\n<img width=\"326\" alt=\"Screenshot 2020-02-27 at 16 20 35\" src=\"https://user-images.githubusercontent.com/26045935/75463525-dbb3d000-597d-11ea-8f01-fef1cf50c20b.png\">\r\n\r\nExpected outcome:\r\n<img width=\"328\" alt=\"Screenshot 2020-02-27 at 16 28 56\" src=\"https://user-images.githubusercontent.com/26045935/75463866-49f89280-597e-11ea-8c66-4949f7bb5ddd.png\">\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\n```\r\n$ gh --version\r\ngh version 0.5.7 (2020-02-20)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.7\r\n```\r\n\r\n`gh` _appears_ to conform to the [XDG basedir spec](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html) by writing to `~/.config/gh`. However, it does not respect `XDG_CONFIG_HOME` as it should. `~/.config` is the default value for XDG_CONFIG_HOME, but should only be used if XDG_CONFIG_HOME itself is unset. If it _is_ set, it should be respected.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `rm -rf ~/.config/gh` (or rename)\r\n1. `export XDG_CONFIG_HOME=$(mktemp -d)` (configure a custom config-home)\r\n1. `gh issue list` run a command to trigger authentication\r\n1. `ls ~/.config/gh` note that `gh` was re-created under `~/.config` instead of the temp directory\r\n1. `ls $XDG_CONFIG_HOME` note that nothing was written to `XDG_CONFIG_HOME`; this is where `gh/config.yml` _should_ have been written.\r\n\r\n### Expected vs actual behavior\r\n\r\nConformance to the XDG spec requires that the XDG_CONFIG_HOME variable be respected for where to write user configuration files. `gh` is writing to `~/.config` but not respecting XDG_CONFIG_HOME when it is set.\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nNot able to install in Ubuntu 16.04.6\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```\r\ncurl -O https://github.com/cli/cli/releases/download/v0.5.7/gh_0.5.7_linux_amd64.deb\r\nsudo dpkg -i gh_0.5.7_linux_amd64.deb\r\n```\r\n\r\nand got this error\r\n\r\n```\r\ndpkg-deb: error: 'gh_0.5.7_linux_amd64.deb' is not a debian format archive\r\ndpkg: error processing archive gh_0.5.7_linux_amd64.deb (--install):\r\n subprocess dpkg-deb --control returned error exit status 2\r\nErrors were encountered while processing:\r\n gh_0.5.7_linux_amd64.deb\r\n```\r\n\r\n"},{"labels":["bug",null],"text":"### Description\r\n\r\n`gh` crashes when using escape sequences to jump between words or lines. \r\n\r\nI have these key mappings set up in iTerm:\r\n\r\n<img width=\"375\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2098462/75241710-ebd57f00-57c6-11ea-84ad-2796b72c8578.png\">\r\n\r\ngh Version: `gh version 0.5.7 (2020-02-20)`\r\niTerm Version: `Build 3.3.10beta1`\r\nOS: `macOS 10.14.6 (18G3020)`\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Get into any prompt (for example `gh issue create`)\r\n2. Fire the escape sequence\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected: The prompt should let me jump around words with the escape sequences\r\nActual: It crashes :(\r\n\r\n### Logs\r\n\r\n```\r\n$ gh pr create\r\n\r\nCreating pull request for branchname into master in me/myrepo\r\n\r\n? Title See how this crashes: could not collect title and/or body: could not prompt: Unexpected Escape Sequence: ['\\x1b' 'f']\r\n```"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\n- gh version 0.5.7 (2020-02-20)                                                                                                                     https://github.com/cli/cli/releases/tag/v0.5.7\r\n\r\n- Output:\r\n`\r\nPost https://api.github.com/graphql: read tcp 10.129.47.224:64711->13.250.168.23:443: wsarecv: An existing connection was forcibly closed by the  remote host.\r\n`\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this 'gh pr list'\r\n2. View the output 'Pull requests for Darkery/AQI                                                                                                                                                                                                                                                                       There are no open pull requests   '\r\n3. Type this 'gh pr create --base master --title merge_master_04b824acbbd6020591472a4595029468307c5403 -body test'\r\n4. See error'Post https://api.github.com/graphql: read tcp 10.129.47.224:64638->13.250.168.23:443: wsarecv: An existing connection was forcibly closed by the  remote host. '\r\n\r\n### Expected vs actual behavior\r\n\r\nWhen I use cmd  `gh pr list' and then use 'gh pr create' or keep switching these two cmd, the cmd should work.\r\n\r\n### Logs\r\n\r\n```\r\nI505740@XIYN34402506A MINGW64 ~/Documents/Code/personal/AQI (merge_master_04b824acbbd6020591472a4595029468307c5403)                               $ gh pr list                                                                                                                                                                                                                                                                                        Pull requests for Darkery/AQI                                                                                                                                                                                                                                                                       There are no open pull requests                                                                                                                                                                                                                                                                     I505740@XIYN34402506A MINGW64 ~/Documents/Code/personal/AQI (merge_master_04b824acbbd6020591472a4595029468307c5403)                               $ gh pr create --base master --title merge_master_04b824acbbd6020591472a4595029468307c5403 -body test                                             Post https://api.github.com/graphql: read tcp 10.129.47.224:64638->13.250.168.23:443: wsarecv: An existing connection was forcibly closed by the  remote host.                                                                                                                                                                                                                                                                                        I505740@XIYN34402506A MINGW64 ~/Documents/Code/personal/AQI (merge_master_04b824acbbd6020591472a4595029468307c5403)                               $ gh pr create --base master --title merge_master_04b824acbbd6020591472a4595029468307c5403 -body test                                             Post https://api.github.com/graphql: read tcp 10.129.47.224:64703->13.250.168.23:443: wsarecv: An existing connection was forcibly closed by the  remote host.                                                                                                                                                                                                                                                                                        I505740@XIYN34402506A MINGW64 ~/Documents/Code/personal/AQI (merge_master_04b824acbbd6020591472a4595029468307c5403)                               $ gh pr list                                                                                                                                      Post https://api.github.com/graphql: read tcp 10.129.47.224:64711->13.250.168.23:443: wsarecv: An existing connection was forcibly closed by the  remote host.\r\n```"},{"labels":["bug",null],"text":"### Describe the bug\r\n``gh version 0.5.7 (2020-02-20)``\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create an alias ``./ssh/config``\r\n```\r\nHost gh.com\r\n   HostName github.com\r\n   User git\r\n   IdentityFile ~/.ssh/id_rsa\r\n```\r\n2. Use alias in ``git remote``\r\n3. See error\r\n\r\n### Expected vs actual behavior\r\nExpected: Creating pull request for feature-branch into master in project\r\nActual: could not determine base repository: not found\r\n"},{"labels":["bug",null],"text":"When using `gh issue create -b sometext -t sometext -w `or the equivalent cmd for `gh pr`, the `-w` flag is the only flag that is honored, leaving the form on the Github.com side blank.\r\n\r\nWe should pass the title and body if they are entered.\r\n\r\n_OSX, v0.5.6_"},{"labels":["bug",null],"text":"When creating a PR and using the `--draft` flag the repository must meet one of the following criteria:\r\n\r\n> Draft pull requests are available in public repositories with GitHub Free and GitHub Pro, and in public and private repositories with GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. \r\n\r\nelse, you are left with an error message _after_ already going through the entire process of creating a PR\r\n\r\n`failed to create pull request: graphql error: 'Draft pull requests are not supported in this repository.'`\r\n\r\nWe should surface a warning earlier if the repo does not meet such criteria, and possibly clarify the usage text in the help guide.\r\n\r\n(A borderline `bug`, so labeling it a such but feel free to change.)\r\n\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\nWhen using `gh pr list`,  A end of a title gets a text garbling if the title constructs in Japanese. \r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create PR whose title is written in Japanese like [this](https://github.com/fukugit/git-training/pull/10). \r\n2. Type this 'gh pr list'\r\n3. View the output ' [test]テストテストテストテストテストテストテストテストテストテストテス�...  '\r\n\r\n### Expected vs actual behavior\r\nA text garbling better to be none."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nTLS handshake timeout error upon first ever run of `gh issue list` after having the CLI installed.\r\n\r\n```\r\ngh version 0.5.5 (2020-02-13)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.5\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `brew install github/gh/gh`\r\n2. `gh issue list`\r\n3. Authenticate via the URL provided.\r\n4. Authentication complete. Press Enter to continue…\r\n5. Retry `gh issue list`\r\n6. Observe the error after ~10 seconds:\r\n\r\n```\r\nPost https://api.github.com/graphql: net/http: TLS handshake timeout\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nI was expecting to see the list of issues for the current working directory's repo, however it ended up error-ing on me."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nWhen running `gh pr create` there is a noticeable delay between hitting `Enter` on my keyboard and the cli showing any output. Just roughly timing it on my phone it took 5.5 seconds to display the first prompt.\r\n\r\n`gh --version` output:\r\n```\r\ngh version 0.5.5 (2020-02-13)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.5\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Run `gh pr create` \r\n2. Observe time take before cli shows output\r\n\r\n### Expected vs actual behavior\r\n\r\nThe cli should output some information quickly after I run it. If it needs to do something that blocks and takes time, a progress bar, spinner, or simple \"please wait\" message should be displayed. Ideally though, it would just be faster - maybe defer whatever work is being done to when the `pr create` action is submitted.\r\n"},{"labels":["bug",null,null],"text":"When using `gh issue list -l...` command the results are inconsistent. If a label is missing or is followed by another arg, then the output should reflect so.\r\n\r\n- `gh issue list -l`\r\n  - Result is: flag needs an argument: 'l' in -l\r\n  - Expected result as no label given ✅ \r\n\r\n- `gh issue list -l enhancement`\r\n  - Result is: Issues for cli/cli\r\n  - Expected result as valid label given ✅ \r\n\r\n- `gh issue list -l -L 1`\r\n  - Result is: Issues for cli/cli\r\n  - Not expected result as label is missing ❌ \r\n  - Expected error message saying the label is not defined.\r\n\r\n- `gh issue list-l sdfsdf`\r\n  - Result is: Issues for cli/cli  \r\n  - Not expected result as label in invalid ❌ \r\n  - Expected error message saying the label is not found among existing labels.\r\n\r\n_tested in gh version 0.5.5 (2020-02-13), OSX_"},{"labels":["bug",null,null],"text":"### Describe the bug\r\n\r\nRunning `gh pr view` or `gh pr list` causes a 500 error.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```\r\n$ gh pr view\r\nhttp error, 'https://api.github.com/graphql' failed (500): ''\r\n$ gh pr list\r\nhttp error, 'https://api.github.com/graphql' failed (500): ''\r\n$ gh --version\r\ngh version 0.5.5 (2020-02-13)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.5\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nIt works.\r\n\r\nOr if it doesn't...\r\n\r\nAdd a `--verbose`/`--debug` option perhaps to show the HTTP request/response? This may help the CLI devs know if the fault is a malformed request triggering a bug in the API or just the API being broken.\r\n\r\nEven bigger segue, but with `gh --help` I don't see an easy way to reauthenticate if that would maybe help. `gh login` or `gh auth` to redo credentials may be nice. I assume the token is stored somewhere, but it's a bit annoying to have to go fishing for it. `gh logout` to delete the token might be a good dual as well."},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nWhen I try to open an issue via CLI to [gianarb/gianarb.github.com](gianarb/gianarb.github.com) the prompt that lists available template does not show what I expect. It shows wrong templates.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```bash\r\ngh issue create --repo gianarb/gianarb.github.com \r\n\r\nCreating issue in gianarb/gianarb.github.com\r\n\r\n? Choose a template  [Use arrows to move, type to filter]\r\n  Beta: Bug report\r\n> beta--feature-request.md\r\n```\r\n\r\n\r\n### Expected vs actual behavior\r\n\r\nAs you can see the cli proposes two templates. But my repository only has one\r\n\r\nhttps://github.com/gianarb/gianarb.github.com/issues/new/choose\r\n"},{"labels":["bug",null],"text":"When using the `gh issue list -L 100` command I noticed some issues that resulted in 404 pages. These should be weeded out as they are not valid issues. \r\n\r\nHere is an example in desktop/desktop repo:\r\n\r\n![Screen Shot 2020-02-18 at 2 43 21 PM](https://user-images.githubusercontent.com/14828183/74790920-1e2e2c00-525d-11ea-8e35-5f032be19a56.png)\r\n\r\n404: https://github.com/desktop/desktop/issues/8897\r\n\r\nI found similar results in the equivalent `pr` cmd, like this one:\r\nhttps://github.com/desktop/desktop/pull/8605\r\n\r\n_gh version 0.5.5 (2020-02-13), osX_"},{"labels":["bug"],"text":"Why does this CLI tool require a GUI?\r\n\r\nWhen I first ran `gh issue list` with a repo, a browser opened and asked me to grant permission.\r\n\r\n```\r\nNotice: authentication required\r\nPress Enter to open github.com in your browser...\r\n```\r\n\r\nWhen an issue is viewed such as `gh issue view 18`, the browser opens the issue instead of listing the comments in the cli."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\n`gh pr create` doesn't seem to be able to identify the base repository.\r\n\r\n```\r\n» git remote -v\r\norigin\thttps://github.com/XXX/YYY.git (fetch)\r\norigin\thttps://github.com/XXX/YYY.git (push)\r\n» gh pr create\r\ncould not determine base repository: not found\r\n```\r\n\r\n```\r\n» brew upgrade gh\r\nWarning: github/gh/gh 0.5.5 already installed\r\n» gh --version\r\ngh version 0.5.5 (2020-02-13)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.5\r\n```\r\n\r\nNote that I've installed gh via `brew install github/gh/gh`, not `brew install gh`.\r\n\r\n### Expected vs actual behavior\r\n\r\nI'd expect `gh pr create` to create a PR in this repository, or otherwise give me a more helpful error message."},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nThe `gh issue list` returns a graphql query error\r\n\r\n### Steps to reproduce the behaviour\r\n\r\n0. Initialize an empty repo on your local machine (`git init` in an empty folder) \r\n1. Type this 'gh issue list' in a repo with no remotes defined\r\n2. See error\r\n\r\n### Expected vs actual behaviour\r\n\r\nExpected behaviour: An error message about there being no remote repositories defined and/or no associated github repo\r\n\r\nActual behavior: `graphql error: 'Fragment repo was defined, but not used'`\r\n\r\n### Logs\r\n\r\n```\r\nme@mycomputer: mydirectory$ gh issue list\r\ngraphql error: 'Fragment repo was defined, but not used'\r\n```"},{"labels":["bug",null],"text":"> Simply running `gh pr create` will push a branch to the upstream repository and then prompt for PR information (such as title). The branch is left behind if PR creation is aborted by pressing ctrl-C.\r\n\r\n_Originally posted by @electrum in https://github.com/cli/cli/issues/392#issuecomment-585576369_"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nYou might consider this a feature request instead of a bug. If so, please feel free to read everything below in that frame of reference :)\r\n\r\nThe bug, in short: `gh pr status` gets confused once a PR has been merged.\r\n\r\n```\r\n$ gh --version\r\ngh version 0.5.5 (2020-02-13)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.5\r\n```\r\n\r\ninstalled as `gh_0.5.5_linux_amd64.deb`\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Do: `gh pr checkout 8811`\r\n2. See: branch gets checked out\r\n3. Do: `gh pr status`\r\n4. See: `Current branch` ↵  `#8811  adjust NSEC TTLs to negative TTL [Habbie:nsec-ttl]` ↵ `- Checks passing`\r\n5. Merge PR\r\n6. Do: `gh pr status`\r\n7. See: `There is no pull request associated with [Habbie:nsec-ttl]`\r\n\r\n\r\n### Expected vs actual behavior\r\n\r\nI expected `gh pr status` to tell me that the branch I am on has been merged. I actually got `There is no pull request ....`\r\n\r\n### Logs\r\n\r\n```\r\npeter@plato:~/projects/powerdns/pdns 4.3-schema+* 2s ± gh pr checkout 8811\r\nSwitched to branch 'nsec-ttl'\r\nYour branch is up to date with 'habbie/nsec-ttl'.\r\nAlready up to date.\r\npeter@plato:~/projects/powerdns/pdns nsec-ttl+* ± gh pr status\r\n\r\nRelevant pull requests in PowerDNS/pdns\r\n\r\nCurrent branch\r\n  #8811  adjust NSEC TTLs to negative TTL [Habbie:nsec-ttl]\r\n   - Checks passing\r\n\r\nCreated by you\r\n  #8829  auth gsqlite3: handle escaping correctly for AP... [Habbie:sqlite3-escape-like]\r\n   - Checks passing\r\n  #8811  adjust NSEC TTLs to negative TTL [Habbie:nsec-ttl]\r\n   - Checks passing\r\n  #8725  auth: on presigned zones, skip addDNSKEY&friend... [Habbie:presigned-skip-addDNSKEY]\r\n   - Checks passing\r\n  #8707  lmdb: fill di.serial (code stolen straight from... [Habbie:lmdb-domaininfo-serial]\r\n   - 2/26 checks failing\r\n  #8448  PROXYv2 work [Habbie:sdig-proxy]\r\n   - 1/28 checks failing\r\n  #8041  sdig: add DoH GET support [Habbie:sdig-doh-get]\r\n   - 4/26 checks failing\r\n  #7993  dnsdist: improve Lua error reporting during con... [Habbie:dnsdist-lua-chunk]\r\n   - Checks passing\r\n\r\nRequesting a code review from you\r\n  #5595  Improve slave-check: Check every configured mas... [klaus3000:check-every-master]\r\n   - Checks passing\r\n```\r\n\r\nI merge the PR via the github web interface.\r\n\r\n```\r\npeter@plato:~/projects/powerdns/pdns nsec-ttl+* ± gh pr status\r\n\r\nRelevant pull requests in PowerDNS/pdns\r\n\r\nCurrent branch\r\n  There is no pull request associated with [Habbie:nsec-ttl]\r\n\r\nCreated by you\r\n  #8829  auth gsqlite3: handle escaping correctly for AP... [Habbie:sqlite3-escape-like]\r\n   - Checks passing\r\n  #8725  auth: on presigned zones, skip addDNSKEY&friend... [Habbie:presigned-skip-addDNSKEY]\r\n   - Checks passing\r\n  #8707  lmdb: fill di.serial (code stolen straight from... [Habbie:lmdb-domaininfo-serial]\r\n   - 2/26 checks failing\r\n  #8448  PROXYv2 work [Habbie:sdig-proxy]\r\n   - 1/28 checks failing\r\n  #8041  sdig: add DoH GET support [Habbie:sdig-doh-get]\r\n   - 4/26 checks failing\r\n  #7993  dnsdist: improve Lua error reporting during con... [Habbie:dnsdist-lua-chunk]\r\n   - Checks passing\r\n\r\nRequesting a code review from you\r\n  #5595  Improve slave-check: Check every configured mas... [klaus3000:check-every-master]\r\n   - Checks passing\r\n```"},{"labels":["bug",null],"text":"### Describe the feature or problem you’d like to solve\r\nCurrently, accidentally running the CLI in a folder that was not cloned from GitHub gives this error `graphql error: 'Fragment repo was defined, but not used'`. \r\n\r\n### Proposed solution\r\n\r\nIt would be great if gh could detect if the folder was cloned over from a non-GitHub website and give an informative error message/warning.\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nIt would certainly help people who have repositories cloned from different websites. The current error message makes it seem like something went wrong with the tool, not that it was the users fault :)\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["bug",null,null],"text":"### Describe the feature or problem you’d like to solve\r\nwhen running\r\n```\r\n$ gh pr status --repo <repo>\r\n```\r\nthe first section of the output is **'Current branch'**, which usually does not make sense as this branch is taken from the current directory.\r\n\r\n### Proposed solution\r\nOnly show the 'Current branch' section if the current branch belongs to `--repo`.\r\n\r\n**How will it benefit CLI and its users?**\r\n\r\nLess clutter on the command output.\r\n\r\n### Additional context\r\nna"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\n`gh pr create` fails because of authentication issues, even after successful authentication in browser.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Clone a project you don't have write access to\r\n2. make some commit\r\n3. `gh pr create`\r\n\r\nSee CLI log below.\r\n\r\n### Expected vs actual behavior\r\n\r\nI'd expect this command to create a fork of the cloned project and create a new PR from my checked out commit.\r\n\r\nAs far as I understand, an additional authentication should not be necessary.\r\nFurthermore, it seems to fail in any case, even if I type the correct password (might be a 2FA issue)\r\n\r\n### Logs\r\n\r\n```sh\r\n$ gh pr create\r\nNotice: authentication required\r\nPress Enter to open github.com in your browser... \r\nAuthentication complete. Press Enter to continue... \r\n\r\nWarning: 15 uncommitted changes\r\nUsername for 'https://github.com': qw3ry\r\nPassword for 'https://qw3ry@github.com': \r\nremote: Invalid username or password.\r\nfatal: Authentication failed for 'https://github.com/qw3ry/Deckard.git/'\r\n```\r\n## Details\r\n```\r\ngh version 0.5.4 (2020-02-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.4\r\n```\r\nInstalled on Arch Linux with `yay -S github-cli-bin`.\r\nIt tells me to update, so I tried `yay -S github-cli` as well (which is 0.5.5), but the behavior is the same.\r\n\r\nI have SSH keys for git configured, so git should be able to do its work."},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nFrom within the directory for a cloned repo, I ran \"gh pr list\". The output successfully printed the organization and repo name, and then paniced\r\n\r\ngh --version                                                                                                                                                                             \r\ngh version 0.5.5 (2020-02-13)                                                                                                                                                                                                                  \r\nhttps://github.com/cli/cli/releases/tag/v0.5.5           \r\n\r\n### Steps to reproduce the behavior\r\n\r\n\"gh pr list\" issued against a private repo\r\n\r\n### Expected vs actual behavior\r\n\r\nI expected it not to panic :-)\r\n\r\n### Logs\r\n\r\n```\r\n$ gh pr list                                                                                                                                                                               \r\n                                                                                                                                                                                                                                               \r\nPull requests for Xeograph/xgsrc                                                                                                                                                                                                               \r\n                                                                                                                                                                                                                                               \r\n#9713  panic: runtime error: slice bounds out of range [:-7]                                                                                                                                                                                   \r\n                                                                                                                                                                                                                                               \r\ngoroutine 1 [running]:                                                                                                                                                                                                                         \r\ngithub.com/cli/cli/utils.truncate(0xfffffffffffffffc, 0xc00075a960, 0x22, 0x1, 0x1)                                                                                                                                                            \r\n    /home/runner/work/cli/cli/utils/table_printer.go:179 +0xa6                                                                                                                                                                                 \r\ngithub.com/cli/cli/utils.(*ttyTablePrinter).Render(0xc0005ae4e0, 0xc00057ad80, 0x16)                                                                                                                                                           \r\n    /home/runner/work/cli/cli/utils/table_printer.go:128 +0x339                                                                                                                                                                                \r\ngithub.com/cli/cli/command.prList(0x109bac0, 0x10cbb30, 0x0, 0x0, 0x0, 0x0)                                                                                                                                                                    \r\n    /home/runner/work/cli/cli/command/pr.go:221 +0x9f3                                                                                                                                                                                         \r\ngithub.com/spf13/cobra.(*Command).execute(0x109bac0, 0x10cbb30, 0x0, 0x0, 0x109bac0, 0x10cbb30)                                                                                                                                                \r\n    /home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.5/command.go:826 +0x460                                                                                                                                                                \r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x109a940, 0x5, 0x0, 0x0)                                                                                                                                                                           \r\n    /home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.5/command.go:914 +0x2fb                                                                                                                                                                \r\nmain.main()                                                                                                                                                                                                                                    \r\n    /home/runner/work/cli/cli/cmd/gh/main.go:33 +0xde      \r\n```\r\n\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nAfter install `gh` via Brew, I get a GraphQL API rate limit error. Here is my `gh` version:\r\n\r\n```sh\r\ngh version 0.5.4 (2020-02-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.4\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Install `gh` using `brew install github/gh/gh`.\r\n2. Run `gh pr create` from an active GitHub repo directory.\r\n3. Hit `Enter` to open the browser to authenticate `gh`.\r\n4. GitHub Oauth flow redirects to a `localhost` callback that says `Successfully authenticated GitHub CLI`.\r\n5. Close the authentication success browser tab.\r\n6. Return to iTerm and obverse the error below (in the Logs section).\r\n\r\n### Expected vs actual behavior\r\n\r\nMy expectation is that the Oauth flow would allow me to create a PR from the command line. Instead I get a GraphQL error about rate limit exceeded from the command line (see below).\r\n\r\n### Logs\r\n\r\n```sh\r\n❯ gh pr create\r\nNotice: authentication required\r\nPress Enter to open github.com in your browser...\r\ncould not initialize API client: graphql error: 'API rate limit exceeded'\r\n```\r\n"},{"labels":["bug",null,null,null],"text":"### Describe the bug\r\n\r\n1. `gh pr list --label` appears to be using OR logic instead of AND logic\r\n2. `gh pr list --label` sometimes contains duplicates.\r\n\r\nTo show why this is a problem, imagine your PRs have the following labels:\r\n\r\n* `in progress`, `ready for review`, and `reviewed`\r\n* `team a`, `team b`, and `team c`.\r\n\r\nNow let's say you want to find all of the PRs that are `ready for review` from `team b`.\r\n\r\nSo it makes sense that you try to search for `--label \"ready for review,team b\"`. However, instead of getting a list of every PR that is both \"ready for review\" and \"team b,\" you get:\r\n\r\n* Every PR labeled \"ready for review,\" even if it is not from \"team b.\"\r\n* Every PR labeled \"team b,\" even if it is not \"ready for review.\"\r\n\r\nThese results are useless from the perspective of someone who wants to review PRs from `team b` that are `ready for review`.\r\n\r\n```\r\n$ gh --version\r\ngh version 0.5.4 (2020-02-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.4\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create a PR named \"Example A\" with labels `test-a` and `test-c`\r\n2. Create a PR named \"Example B\" with labels `test-b` and `test-c`\r\n3. Run `gh pr list -l test-a,test-c`\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected:\r\n\r\n```\r\nPull requests for ...\r\n\r\n#17874  Example A  example-a\r\n```\r\n\r\nActual:\r\n\r\n```\r\nPull requests for ...\r\n\r\n#17875  Example B  example-b\r\n#17874  Example A  example-a\r\n#17874  Example A  example-a\r\n```\r\n\r\nBroken expectations:\r\n\r\n* I expected \"Example B\" to not appear at all, because it does not have the `test-a` label and therefore doesn't satisfy the given query.\r\n* I expected \"Example A\" to appear only once, because there is no point in having duplicates in this list.\r\n\r\n### Possible solutions\r\n\r\nAt minimum, use AND by default.\r\n\r\nIdeally, support full boolean logic:\r\n\r\n```rb\r\ngh pr list -l \"team a AND (ready for review OR NOT in progress)\"\r\n```\r\n\r\n### Logs\r\n\r\n```\r\n$ gh pr list -l test-a\r\n\r\nPull requests for ...\r\n\r\n#17874  Example A  example-a\r\n```\r\n\r\n```\r\n$ gh pr list -l test-b\r\n\r\nPull requests for ...\r\n\r\n#17875  Example B  example-b\r\n```\r\n```\r\n$ gh pr list -l test-c\r\n\r\nPull requests for ...\r\n\r\n#17875  Example B  example-b\r\n#17874  Example A  example-a\r\n```\r\n```\r\n$ gh pr list -l test-a,test-c\r\n\r\nPull requests for ...\r\n\r\n#17875  Example B  example-b\r\n#17874  Example A  example-a\r\n#17874  Example A  example-a\r\n```\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nWhen the cli prompts to select an option if I click down or up to select one, it repeats the output again and again.\r\n\r\n![Screenshot_2020-02-13_09-49-45](https://user-images.githubusercontent.com/478407/74452183-55a86d00-4e46-11ea-8307-5397b7b2fcfc.png)\r\n\r\n```sh\r\n$ gh --version\r\ngh version 0.5.4 (2020-02-13)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.4\r\n```\r\n\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create a new PR with the cli\r\n2. Try to select between Open the preview in the Browser and Create the PR\r\n3. See multiple times the prompt\r\n\r\n### Expected vs actual behavior\r\n\r\nThe expected behavior is only one prompt and select the options in that prompt\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nWhen running commands that require interactive input in the Windows Git Bash terminal (installed using the [Windows Git](https://git-scm.com/download/win) installer), there is an error:\r\n\r\n```\r\n$ gh pr create\r\nCreating pull request for [...] into master in [...]\r\n? Title could not collect title and/or body: could not prompt: Incorrect function.\r\n```\r\n\r\nVersions:\r\n```\r\n$ git --version\r\ngit version 2.25.0.windows.1\r\n\r\n$ gh --version\r\ngh version 0.5.4 (2020-02-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.4\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Install [Git](https://git-scm.com/download/win) and GitHub CLI on Windows\r\n2. Open Git Bash, and `cd` into a repo\r\n3. Run `gh pr create`\r\n\r\n### Expected vs actual behavior\r\n\r\nExpectation is the interactive UI to create a PR, instead there is an error message:\r\n\r\n```\r\n? Title could not collect title and/or body: could not prompt: Incorrect function.\r\n```\r\n\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\nversion: `gh version 0.5.4 (2020-02-04)`\r\n\r\nWhen executing `gh issue view <number> -p` to an issue without description, segmentation violation occurs.\r\n\r\nIt seems following `issue.Body` is empty string:\r\nhttps://github.com/cli/cli/blob/1b9b76d8fc9e9a4510b67dd35314cbedca587acd/command/issue.go#L258\r\n\r\n### Steps to reproduce the behavior\r\n```\r\n$ git clone https://github.com/tinoji/sandbox\r\nCloning into 'sandbox'...\r\nremote: Enumerating objects: 3, done.\r\nremote: Counting objects: 100% (3/3), done.\r\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\r\nUnpacking objects: 100% (3/3), done.\r\n\r\n$ cd sandbox\r\n$ gh issue list\r\n\r\nIssues for tinoji/sandbox\r\n\r\n#2  issue without description\r\n#1  issue with description\r\n\r\n$ gh issue view 1 -p\r\nissue with description\r\nopened by tinoji. 0 comments.\r\n\r\n  hey\r\n\r\n\r\n\r\nView this issue on GitHub: https://github.com/tinoji/sandbox/issues/1\r\n\r\n$ gh issue view 2 -p\r\nissue without description\r\nopened by tinoji. 0 comments.\r\n\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x156c8ea]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/vilmibm/go-termd.(*Compiler).visit(0xc0005d1998, 0x0, 0x800000000, 0x2000)\r\n        /home/runner/go/pkg/mod/github.com/vilmibm/go-termd@v0.0.4/termd.go:51 +0x3a\r\ngithub.com/vilmibm/go-termd.(*Compiler).visit(0xc0005d1998, 0xc0005d2000, 0x0, 0x0)\r\n        /home/runner/go/pkg/mod/github.com/vilmibm/go-termd@v0.0.4/termd.go:53 +0x305\r\ngithub.com/vilmibm/go-termd.(*Compiler).Compile(0xc0005d1998, 0x0, 0x0, 0x0, 0x0)\r\n        /home/runner/go/pkg/mod/github.com/vilmibm/go-termd@v0.0.4/termd.go:46 +0xb2\r\ngithub.com/cli/cli/utils.RenderMarkdown(0x0, 0x0, 0x0, 0x0)\r\n        /home/runner/work/cli/cli/utils/utils.go:46 +0x3cd\r\ngithub.com/cli/cli/command.printIssuePreview(0x1845140, 0xc000094008, 0xc0002be000)\r\n        /home/runner/work/cli/cli/command/issue.go:258 +0x3a0\r\ngithub.com/cli/cli/command.issueView(0x1c9a740, 0xc0002aba80, 0x1, 0x2, 0x0, 0x0)\r\n        /home/runner/work/cli/cli/command/issue.go:235 +0x1cb\r\ngithub.com/spf13/cobra.(*Command).execute(0x1c9a740, 0xc0002aba40, 0x2, 0x2, 0x1c9a740, 0xc0002aba40)\r\n        /home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.5/command.go:826 +0x460\r\ngithub.com/spf13/cobra.(*Command).ExecuteC(0x1c99840, 0x5, 0x0, 0x0)\r\n        /home/runner/go/pkg/mod/github.com/spf13/cobra@v0.0.5/command.go:914 +0x2fb\r\nmain.main()\r\n        /home/runner/work/cli/cli/cmd/gh/main.go:33 +0xde\r\n```\r\n\r\n### Expected vs actual behavior\r\nExpected: preview is displayed\r\nActual: segmentation violation\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nWe use Pull request templates in many of our repos.   When creating a Pull request using the GH CLI, if after entering the Title and Body (either pressing E and closing the editor window, or pressing enter to skip entirely) you select Submit to create the PR automatically, the PR template is not used.  \r\n\r\nHowever, if on the last step you select Preview in browser, it will use the PR Template to auto populate the body of your pull request.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Clone a Repository with a `PULL_REQUEST_TEMPLATE.md` in it\r\n2. Make some branch, and commit some change\r\n3. create the PR using the command `gh pr create`\r\n4. For Title put in something aka `Test Pr`\r\n5. For Body press enter to skip\r\n6. For What's next, select Submit and view the PR\r\n\r\nThe PR WILL NOT have a body built using the `PULL_REQUEST_TEMPLATE.md` file.\r\n\r\nRepeating steps 1-5 and instead\r\n6. For What's Next, select Preview in browser\r\n\r\nThe PR WILL have a body built using the `PULL_REQUEST_TEMPLATE.md` file\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected: The file `PULL_REQUEST_TEMPLATE.md` will be used during the creation of any PR's from the GHCLI, unless the body is specifically overloaded during creation\r\n\r\nActual: The file `PULL_REQUEST_TEMPLATE.md` is not used during the creation of a PR without a specific body overload if the `Submit` option is used.\r\n\r\n### Logs\r\n\r\nNot applicable, error does not exist in logs.\r\n"},{"labels":["bug",null,null],"text":"### Describe the bug\r\ngh is installed into /usr/local/bin/gh when installed via RPM. It should be in /usr/bin/ instead. Among other things, this ensures that the command is in the normal $PATH.\r\n\r\n### Steps to reproduce the behavior\r\n`[root@localhost ~]# rpm -qa gh`\r\n`gh-0.5.4-1.x86_64`\r\n`[root@localhost ~]# rpm -ql gh`\r\n`/usr/local/bin/gh`\r\n\r\n### Expected vs actual behavior\r\nPackage-installed software should not be installed into /usr/local/ as that's for local admin use (more specifically, locally compiled and installed items). Packages should install in regular system directories.\r\n"},{"labels":["bug",null],"text":"```\r\n$ ~/Downloads/gh_0.5.4_macOS_amd64/bin/gh --version\r\ngh version 0.5.4 (2020-02-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.4\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\nFrom my clone of the sympy/sympy repo I tried to clone PR 18646\r\n\r\n```\r\n$ ~/Downloads/gh_0.5.4_macOS_amd64/bin/gh pr checkout 18646\r\ngraphql error: 'Could not resolve to a PullRequest with the number of 18646.'\r\n```"},{"labels":["bug",null],"text":"given:\r\n\r\n- a repo foo/foo\r\n- a fork of the repo bar/foo\r\n- remotes set up as `gh pr create` currently creates them when detecting a fork\r\n\r\nsubmitting a PR prepared with `gh pr create` fails because the payload we pass to graphql isn't\r\nspecific enough:\r\n\r\n```\r\nfailed to create pull request: graphql error: 'No commits between master and master'\r\n```\r\n\r\n`-w` and `Preview in browser` both work because we're appropriately signaling the fork in those\r\ncases.\r\n\r\n0.5.4\r\n"},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\n1. `gh` version.\r\n```zsh\r\n➜  ~ gh --version\r\ngh version 0.5.5-pre.1 (2020-02-06)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.5-pre.1\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this `gh pr status -R cli/cli` on any git repository directory and outside a git repository directory.\r\n\r\n2. When inside a git repository directory, it works.\r\n\r\n```zsh\r\n➜  ~ git:(feature/test-gh) $ gh pr status -R cli/cli\r\n\r\nRelevant pull requests in cli/cli\r\n\r\nCurrent branch\r\n  There is no pull request associated with [Clivern:feature/test-gh]\r\n\r\nCreated by you\r\n  You have no open pull requests\r\n\r\nRequesting a code review from you\r\n  You have no pull requests to review\r\n```\r\n\r\n3. Error raised when outside a git directory since it try to build a list of PR associated with current repository branch name.\r\n\r\n```zsh\r\n➜  ~ gh pr status -R cli/cli\r\nfatal: not a git repository (or any of the parent directories): .git\r\ngit: exit status 128\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nIt would be nice to ignore the relevant branch PRs if i am outside a repository directory. So I am able to see PRs created by me and PRs requesting my review with the check status for a provided github repository.\r\n\r\nMay be the command `gh pr status -R cli/cli` wasn't intended to provide this functionality but i can't get the same functionality with `gh pr list -R cli/cli` unless there will be extra flags to list PRs created by me and include status checks.\r\n"},{"labels":["bug",null],"text":"When using `gh pr create` to open a new PR with `-w`, the browser result is an existing PR, previously merged or closed.\r\n\r\n**Reproduce**:\r\n- go to a branch without an open PR and commit some changes.\r\n  - Important caveat: The branch must have closed or merged PR.\r\n- type `gh pr create -w`\r\n- browser opens old PR: https://github.com/tierninho/PRlist/pull/ccc\r\n\r\n**Expected result**:\r\nBrowser open the compare PR page: https://github.com/tierninho/PRlist/compare/ccc?expand=1\r\n\r\nWhen removing the `-w` flag, the results are inline with expectations as the expected result URL is shown. Alternatively, if a branch had no prior PRs, then the correct URL is opened.\r\n\r\n_gh version 0.5.4 (2020-02-04), OSX_"},{"labels":["bug",null],"text":"### Describe the bug\r\n```\r\ngh version 0.5.4 (2020-02-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.4\r\n```\r\n\r\nRunning the command `$ gh pr create -B develop -w` to open a new PR in the web browser with the base branch set to `develop` does open a PR but the base branch is not set. \r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Type this '...'\r\n\r\n`$ gh pr create -B develop -w`\r\n\r\n2. View the output '....'\r\n\r\nBrowser window opens as expected.\r\n\r\n3. See error\r\n\r\nBase branch is set to master, not develop\r\n\r\n### Expected vs actual behavior\r\n\r\nBase branch would be set to develop\r\n"},{"labels":["bug",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThere are some rough edges with the current state of PR checkout; mainly, a nice remote is not added in the case of a PR originating in a fork and tracking is not set up properly for the local -> remote relationship.\r\n\r\n### Proposed solution\r\n\r\n- [ ] Add a remote for forks\r\n- [ ] Consult the repo network to find parent repos like the other commands\r\n- [ ] Set the new local branch as tracking the PR's remote branch\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nGit actions will work more as expected when dealing with locally checked out PRs.\r\n\r\n### Additional context\r\n\r\nI believe the branch tracking used to happen implicitly since the local/remote branch names matched; when I did #302 I broke that."},{"labels":["bug",null,null,null],"text":"### Describe the bug\r\n\r\nA clear and concise description of what the bug is. Include version by typing `gh --version`.\r\n\r\n0.5.4\r\n\r\n### Steps to reproduce the behavior\r\n\r\nDo a prerelease\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected: nothing is done to the scoop-gh repo\r\n\r\nActual: scoop-gh is updated for prereleases\r\n\r\n---\r\n\r\nI assumed goreleaser wouldn't publish to scoop for prereleases but i guess not. homebrew formula is\r\nnot getting updated for prereleases as expected but we'll need to audit the scoop config.\r\n\r\n\r\n"},{"labels":["bug",null],"text":"A browser is not always available for authentication. \r\n\r\nI am working on a vagrant linux guest, which cannot open browser in the Windows host.\r\n\r\nI would love to see a `gh login` command (or similar) to store credentials as appropriate by the system without opening a browser.\r\n\r\nAt the very least - if this is not changed, or until it is - I would love to see the URL it wants to open so I can open it manually.\r\n\r\n"},{"labels":["bug",null,null,null,null],"text":"### Describe the bug\r\n\r\nWhen I install the 0.5.2 RPM on Fedora 31, I get the following messages in my terminal:\r\n```\r\nwarning: user  does not exist - using root\r\nwarning: group  does not exist - using root\r\n```\r\nIt seems like the RPM is expecting some particular user to exist?\r\nThese are the specific versions I'm using:\r\n```\r\n➜  ~ gh --version\r\ngh version 0.5.2 (2020-01-29)\r\nhttps://github.com/cli/cli/releases/latest\r\n➜  ~ rpm -q gh\r\ngh-0.5.2-1.x86_64\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. `sudo dnf install https://github.com/cli/cli/releases/download/v0.5.2/gh_0.5.2_linux_amd64.rpm`\r\n2. The package installs correctly but the messages mentioned above are printed.\r\n\r\n### Expected vs actual behavior\r\n\r\nI don't expect to see any warnings when installing the RPM.\r\n\r\n### Logs\r\n\r\nSee above."},{"labels":["bug",null],"text":"### Describe the bug\r\n\r\nTake https://github.com/Disfactory/Disfactory for example, run `gh issue list` will result in:\r\n\r\n![Screen Shot 2020-01-30 at 3 39 47 PM](https://user-images.githubusercontent.com/4230968/73429519-d2334a00-4376-11ea-8ca4-0cdc8d00989d.png)\r\n\r\nThe font in the above screenshot is [Sarasa Gothic](https://github.com/be5invis/Sarasa-Gothic/), which is a fixed-width font for both CJK and English character.\r\n\r\n![Screen Shot 2020-01-30 at 3 41 02 PM](https://user-images.githubusercontent.com/4230968/73429766-5f769e80-4377-11ea-9c7b-26991b611e5a.png)\r\n\r\nUsually, it takes a double width of ASCII character for one CJK character.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n### Expected vs actual behavior\r\n\r\nA clear and concise description of what you expected to happen and what actually happened.\r\n\r\n### Logs\r\n\r\n"},{"labels":["bug",null],"text":"The link currently points to the old repo `github/gh-cli` installation instructions and needs to be updated to `cli/cli`"},{"labels":["bug",null],"text":"Now that a better `pr create` https://github.com/github/gh-cli/pull/238 has landed and supports submitting PRs from one's fork, we should address some edge-cases that arise in the light of new features.\r\n\r\nAfter cloning your own fork, doing some work, and running `gh pr create` within that repo, the improved base repo resolution mechanism will kick in and submit the PR to _the parent repo of the fork_, since it's little likely that the person wants to open a PR in their own fork.\r\n\r\nHowever, when running `gh pr status` or `pr list`, **their fork will be queried instead of the parent repo** and there will usually be no results.\r\n\r\nThis is because the base repo resolution is now different in `pr create` and other commands: other commands don't look up repository information from API; they simply assume that the `upstream` or `origin` git remote points to the base repo.\r\n\r\nWe should consider expanding the [base lookup logic from `pr create`](https://github.com/cli/cli/blob/1c1212e6e30c9cab94ebea8c9be123f545e18c74/command/pr_create.go#L278-L280) to all other commands for consistency, but that might incur a small delay before running every command. There might be other approaches to compensate for speed:\r\n- automatically add an `upstream` remote to point to base if `origin` is detected to be a fork;\r\n- look up the base repository via API on every command, but cache the result per-repo.\r\n"},{"labels":["bug"],"text":"When using `gh pr create` I noticed we are still using the `master` branch as the default and not honoring the default branch set in the settings.\r\n\r\nThe default branch in my repo is not `master`, in fact this branch does not exist. \r\n![Screen Shot 2020-01-16 at 3 37 35 PM](https://user-images.githubusercontent.com/14828183/72577925-81046000-3878-11ea-96f2-e7fb821706b3.png)\r\n\r\n_gh version 0.4.0 (2020-01-14), OSX_"},{"labels":["bug",null,null],"text":"Suppose two different people use the GitHub web flow to submit patches to the same repository:\r\n\r\n- PR `#1` with head `user1:patch-1`\r\n- PR `#2` with head `user2:patch-1`\r\n\r\nThe default branch name for web flow is `patch-1` and a lot of people leave that unchanged.\r\n\r\nWe want to support both `gh pr checkout 1` and `gh pr checkout 2` used interchangeably, but right now the 2nd operation will fail because after the 1st operation, a local `patch-1` branch already exists, but is associated with another PR and trying to fast-forward it to the latest commits in `user2:patch-1` will fail on the git level due to unrelated histories.\r\n\r\nProposed solution: \r\n\r\n```sh\r\ngh pr checkout 1 # Works like before,\r\ngh pr checkout 2 # Issues warning on stderr that `patch-1` already exists and\r\n                 # names the new branch with a unique name such as `user2-patch-1`.\r\n```\r\n\r\nhttps://github.slack.com/archives/CLLG3RMAR/p1579201119275200"},{"labels":["bug"],"text":"We still allow [issues to be previewed](https://github.com/github/gh-cli/pull/203) if the setting in the repo for Issues is turned off.\r\n\r\nWe should be surfacing the [disabled issues text](https://github.com/github/gh-cli/pull/178) instead.\r\n\r\n![Screen Shot 2020-01-14 at 10 24 50 AM](https://user-images.githubusercontent.com/14828183/72379740-1d333900-36b8-11ea-8651-251ffbe811bf.png)\r\n\r\n_gh version 0.4.0 (2020-01-14), OSX_"},{"labels":["bug"],"text":"I tried creating issues in `desktop/desktop` and in `github/gh-cli` and saw templates only in `desktop/desktop`. \r\n"},{"labels":["bug"],"text":"We hardcode `master` in at least one place in the code (`pr create`). this issue covers finding and fixing all hardcoded uses of `master` as a default base branch."},{"labels":["bug"],"text":"We are missing a line break when typing an unknown command, for instance:\r\n\r\n![Screen Shot 2020-01-09 at 10 49 09 AM](https://user-images.githubusercontent.com/14828183/72103764-fba80b00-32cd-11ea-8a95-c43efbd55f02.png)\r\n\r\nNotice we include the line break here:\r\n![Screen Shot 2020-01-09 at 10 49 59 AM](https://user-images.githubusercontent.com/14828183/72103767-fba80b00-32cd-11ea-9c22-363c96d0a2a9.png)\r\n\r\n_tested with gh version 9.9.10 (2019-12-19), OSX_\r\n"},{"labels":["bug"],"text":"<img width=\"412\" alt=\"Screen Shot 2020-01-09 at 10 31 05 AM\" src=\"https://user-images.githubusercontent.com/10404068/72094415-3eb4af00-32cb-11ea-8d02-f3f8f1bdc292.png\">\r\n\r\nIf there are no issues assigned to me it should have an empty state \"There are no issues assigned to you\" empty state like the other categories"},{"labels":["bug"],"text":"If a user has git < 2.22 installed, they will run into this:\r\n\r\n`gh pr create`\r\n```\r\ncould not determine current branch: error: unknown option `show-current'\r\nblah blah blah git: exit status 129 (edited) \r\n```\r\nas `show-current` was introduced in git v2.22. \r\n\r\nUpgrading to the latest git version fixes the issue, but it is probably something we should address on our end.\r\n\r\n_tested on mac, gh version 9.9.10_"},{"labels":["bug"],"text":"There is a bug when running a `gh issue` cmd. Any issues self-assigned are not showing as seen here:\r\n\r\n![gameoff_____leereilly_ibrox_______ithub_gameoff_____-zsh_____78__12_and_issues____github_gameoff](https://user-images.githubusercontent.com/14828183/71213760-801be680-2258-11ea-8a93-9db7aaf8fb98.png)\r\n\r\nI am guessing this occurs on repos where there is only one user.\r\n\r\nTested on gh version 0.3.5, OSX"},{"labels":["bug"],"text":"A repo admin can disable Issues altogether and we should align the output from `gh issue` commands accordingly.\r\n\r\nIf Issues is turned off in Settings, the here is the output of our Issue commands. For the following examples, I had one open issue at the time.\r\n\r\n---\r\nWe correctly do not show any issues, but perhaps we have messaging here as to not given the false impression we are tracking Issues at this repo?\r\n```\r\ngh issue status\r\nIssues assigned to you\r\n\r\nIssues mentioning you\r\n  There are no issues mentioning you\r\n\r\nIssues opened by you\r\n  There are no issues opened by you\r\n```\r\n---\r\nAn issue was created on the repo. This is a bug.  \r\n```\r\ngh issue create\r\n? Title sdfsdfds\r\n? Body (nano) <Received>\r\n? Submit? Yes\r\nhttps://github.com/tierninho/SMrepo/issues/3\r\n```\r\n---\r\nBrowser opens despite it going to a 404. Could be a better experience. \r\n```\r\ngh issue view 3\r\nOpening https://github.com/tierninho/SMrepo/issues/3 in your browser.\r\n```\r\n\r\ntested gh version 0.3.5, OSX"},{"labels":["bug"],"text":"The Global `-R` flag is not taken into account when attempting to create a new PR on the target repo. Instead you get the output of the current repo.\r\n\r\nExample:\r\n\r\n```\r\ngh pr create -R tierninho/sddffdgfdgdfgf\r\nWarning: 2 uncommitted changes\r\nTo https://github.com/tierninho/PRlist.git\r\n ! [rejected]        HEAD -> master (non-fast-forward)\r\nerror: failed to push some refs to 'https://github.com/tierninho/PRlist.git'\r\nhint: Updates were rejected because a pushed branch tip is behind its remote\r\nhint: counterpart. Check out this branch and integrate the remote changes\r\nhint: (e.g. 'git pull ...') before pushing again.\r\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\r\ngit: exit status 1\r\n```\r\n\r\nTested on gh version 0.3.5, OSX"},{"labels":["bug"],"text":"When using `gh issue create -w` there is no message confirming the browser will open with X url.\r\n\r\nFor consistency, we should say something like:\r\n\r\n\"Opening https://github.com/tierninho/PRlist/issues/new in your browser.\"\r\n\r\nWe show similar results for the other commands.\r\n\r\n --\r\ngh version 0.3.5 (2019-12-13T16:15:54Z) OSX"},{"labels":["bug"],"text":"When successfully creating a new issue with GH, the command line shows two lines instead of one. \r\n\r\nI expect only one line to show.\r\n\r\n![Screen Shot 2019-12-13 at 9 50 58 AM](https://user-images.githubusercontent.com/14828183/70827844-3467c980-1d8e-11ea-91fd-f2793ffea4f7.png)\r\n\r\ngh version 0.3.5 (2019-12-13T16:15:54Z), OSX"},{"labels":["bug"],"text":"When running `gh issue status` and if there are no issues assigned to me, we should have placeholder text for consistency.\r\n\r\n![Screen Shot 2019-12-11 at 10 57 33 AM](https://user-images.githubusercontent.com/14828183/70660032-5da91e00-1c05-11ea-8e44-b26477b46a45.png)\r\n\r\ngh version 0.3.4 (2019-12-05T13:03:14Z)"},{"labels":["bug"],"text":"When creating a new PR or Issue, the user should be forced to enter at minimum a Title before proceeding else they run into this:\r\n\r\n```\r\n➜  prlist git:(tierninho-patch-1) gh pr create\r\n? Title\r\n? Body (nano) <Received>\r\n? Submit? Yes\r\nfailed to create PR: graphql error: 'Title can't be blank'\r\n```\r\n\r\nand \r\n\r\n```\r\n➜  prlist git:(tierninho-patch-1) gh issue create\r\n? Title\r\n? Body (nano) <Received>\r\n? Submit? Yes\r\ngraphql error: 'Title can't be blank'\r\n```\r\n\r\ngh version 0.3.4 (2019-12-05T13:03:14Z), OSX"},{"labels":["bug"],"text":"For example, `gh pr checkout <pr-number> [flags]` should show that you can also use branch name and the pull request URL"},{"labels":["bug"],"text":"When there are no PRs in a repo, it should output a similar empty state to `issue list`﻿\n"},{"labels":["bug"],"text":"If I try `gh pr view [number]` on a PR that's closed or merged, it outputs `Opening  in your browser.` and opens my file menu.\r\n\r\n\r\n\r\n"},{"labels":[null,"bug"],"text":"### Describe the bug\r\n\r\nWhen typing a command incorrectly, Graph QL spit out an error message that was not relevant for the end user.\r\n\r\n`gh issue list -a tierninhods` = misspelled handle\r\n\r\n```graphql error: 'Something went wrong while executing your query. Please include `EEE3:880B:79ACD6:93DDE0:5DE84F43` when reporting this issue.'```\r\n\r\n![Screen Shot 2019-12-04 at 2 37 19 PM](https://user-images.githubusercontent.com/14828183/70193537-985e0400-16a3-11ea-888a-ea5032af8ca5.png)\r\n\r\nPerhaps we could swap this to something else? I suspect there are other instances buried in the code that would produce something similar. Will update the thread as needed. "},{"labels":["bug"],"text":"If you have no closed issues and you type: `gh issue list --state closed`, you get: `There are no open issues`.\r\n\r\nThis should be updated to: `There are no issues found.` or similar as the issues are not \"open\".\r\n\r\ngh version 0.3.1 (2019-12-04T18:49:39Z), OSX\r\n\r\n![Screen Shot 2019-12-04 at 10 09 30 AM](https://user-images.githubusercontent.com/14828183/70177289-2de69d00-167e-11ea-9d9a-30b4fed8a812.png)\r\n\r\n(PS- I checked `gh pr list --state closed` and is does not do this.)\r\n\r\n\r\n\r\n"},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nIssues titles are being split between two lines in CLI. I believe the cause is a bug on dotcom where the rendered version of the title does not match the input. For example, a title is rendered as \"1word 2word\" but when you click edit, the title shows as \"1word2word\". \r\n\r\nReal world example: https://github.com/tierninho/PRlist/issues/40\r\n\r\ngh version 0.3.1 (2019-12-04T18:49:39Z)\r\n\r\n![Screen Shot 2019-12-04 at 9 31 20 AM](https://user-images.githubusercontent.com/14828183/70175306-8ddb4480-167a-11ea-8896-15aa714200fb.png)\r\n\r\n![Screen Shot 2019-12-04 at 9 46 13 AM](https://user-images.githubusercontent.com/14828183/70175524-f9bdad00-167a-11ea-9278-96100cfb5b13.png)\r\n![Screen Shot 2019-12-04 at 9 46 08 AM](https://user-images.githubusercontent.com/14828183/70175525-f9bdad00-167a-11ea-8c60-c19cb4b28477.png)\r\n\r\n### Steps to reproduce the behavior\r\n\r\nUnsure."},{"labels":["bug"],"text":"### Describe the bug\r\n\r\nRemoved CLI from my oAuth in Github.com settings and then tried to reinstall CLI, but an exception occurred.\r\n\r\n```\r\n➜  ~ brew install github/gh/gh\r\n==> Installing gh from github/gh\r\n==> Downloading https://github.com/github/homebrew-gh/releases/download/v6.6.6/gh_6.6.6_macOS_amd64.tar.gz\r\n#=#=-#  #\r\ncurl: (22) The requested URL returned error: 404 Not Found\r\nError: An exception occurred within a child process:\r\n  DownloadError: Failed to download resource \"gh\"\r\nDownload failed: https://github.com/github/homebrew-gh/releases/download/v6.6.6/gh_6.6.6_macOS_amd64.tar.gz\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Remove oAuth in Settings\r\n2. Ran `brew uninstall github/gh/gh`\r\n2. Attempt to reinstall\r\n\r\nNot sure how to reinstall and re-auth."},{"labels":["bug",null],"text":"A few things are either weird or broken when trying to auth GH on windows:\r\n\r\n- there is a reported error trying to open a browser and a message about opening the URL manually, but the browser does indeed open and go to the correct page.\r\n- The connection to the temporary local webserver fails, meaning you can't complete the flow. It's trying to connect on port 80. `gh.exe` just hangs until it's killed."}]