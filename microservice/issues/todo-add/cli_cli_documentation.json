[{"labels":[null,"documentation"],"text":"What is the minimum set of token permissions needed for the github cli to function?\r\n\r\nIt looks like \"read: org\" and \"repo\" but can this be documented somewhere?  "},{"labels":["documentation",null],"text":"# Feedback\r\n\r\n## Praise\r\n\r\nI didn't learn about the GH CLI until it came out of beta, but I'm testing it now and figuring out how to incorporate it into my worflow. I think it's a great addition to GH.\r\n\r\n## Recommendation\r\n\r\nWhile browsing the [Manual](https://cli.github.com/manual/) pages, I noticed some instances where we use \"**Master**\" as an example for a branch name (screenshot below). Would it make sense to transition these examples to use \"**Main**\" to match the overall effort made by GH and the community at large?\r\n\r\n![Example of \"master\" vs \"main\" usage](https://user-images.githubusercontent.com/21162065/93616267-5e879100-f989-11ea-8b6f-394a5798455a.png)\r\n\r\n_Screenshot taken from [gh pr create](https://cli.github.com/manual/gh_pr_create) page._\r\n\r\n\r\nThank you!"},{"labels":[null,"documentation",null],"text":"### Describe the bug\r\n\r\nOn Windows 10, after successfully authenticate using the cli, I tried to run the command `gh repo view TS-RnD/entitlement` and it displayed the following error message:\r\n\r\n![image](https://user-images.githubusercontent.com/55927613/93583373-aca59000-f99b-11ea-89a2-0e5d736ae728.png)\r\n\r\n### Steps to reproduce the behavior\r\nFollow the commands I ran on the cli in the same order:\r\n\r\n![image](https://user-images.githubusercontent.com/55927613/93583426-c050f680-f99b-11ea-97c5-36a09820758b.png)\r\n\r\nIt is the same for HTTPS:\r\n![image](https://user-images.githubusercontent.com/55927613/93583622-0312ce80-f99c-11ea-8087-0e25bedfc832.png)\r\n\r\n### Expected vs actual behavior\r\n\r\nI should be able to run `gh repo view TS-RnD/entitlement` after succesfully authenticate with the cli.\r\n"},{"labels":["documentation",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe `Short` parameter used for commands is inconsistent and most do not provide any information beyond what is already provided through the name.\r\n\r\n```console\r\nCORE COMMANDS\r\n  gist:       Create gists\r\n  issue:      Manage issues\r\n  pr:         Manage pull requests\r\n  release:    Manage GitHub releases\r\n  repo:       Create, clone, fork, and view repositories\r\n```\r\n\r\n`gist` is described as `Create gists` yet you can also view and edit gists,`issue` describes \"managing\" issues and `repo` lists the functionality supported.\r\n\r\n### Proposed solution\r\n\r\nDecide on a standard for the `Short` name. \r\n\r\nI think there's a few different options, each of which has pros and cons. The conclusion I've come to is that because the CLI is _typically_ used by power-users (\"Goodbye, context switching.\") that the best `Short` description has high information density.\r\n\r\nListing all of the commands supported could be automated (e.g: `Short` could simply be a dynamic comma separated list) which would reduce the maintenance burden, however it might become unwieldy as new functionality is added -- `pr` already has 12 supported commands.\r\n\r\nAnother option could be to pick a subset of the commands that provide enough context to inform the user about the depth of support, for example `pr` supports `reopen` which provides an indication that status can be managed so `reopen (+2 more)` is as useful as `reopen, close and ready`.\r\n\r\nAnother option could be to describe the resources as products/features: I don't think that provides as much value to power-users, _but_ as the CLI functionality expands and new product lines are introduced it might become more valuable -- if I didn't know what a gist is, I'd benefit from this approach.\r\n\r\n#### Product Description\r\n\r\n```console\r\nCORE COMMANDS\r\n  gist:       Share content privately or publicly\r\n  issue:      Keep track of tasks within your team\r\n  pr:         Participate in living conversations about changes\r\n  release:    Package software for people to use\r\n  repo:       Keep and collaborate on code with GitHub\r\n```\r\n\r\n#### Curated List\r\n\r\n```console\r\nCORE COMMANDS\r\n  gist:       create, edit, list and view Gists\r\n  issue:      create, list and close Issues (+3 more)\r\n  pr:         create, review and merge Pull Requests (+9 more)\r\n  release:    create, download and view Releases (+3 more)\r\n  repo:       clone, create, fork and view Repositories\r\n```\r\n\r\n#### Complete List\r\n\r\n```console\r\nCORE COMMANDS\r\n  gist:       create, edit, list and view\r\n  issue:      close, create, list, reopen, status and view\r\n  pr:         checkout, checks, close, create, diff, list, merge, ready, reopen, review, status and view\r\n  release:    create, delete, download, list, upload and view\r\n  repo:       clone, create, fork and view\r\n```\r\n\r\n### Additional context\r\n\r\nDefinitely not a big issue, just some polish! I'm happy to PR any changes that are agreed upon: creating an issue first for discussion per the contribution guidelines. After working through this issue I've decided I like the curated list (`(+n more)` option) most.\r\n\r\n:page_facing_up:"},{"labels":["documentation",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI can't find any information on the website or in the CLI help command about where authentication information is stored.\r\n\r\n### Proposed solution\r\n\r\nDocument where GH CLI stores authentication credentials. Also explain the relationship of this with existing GitHub credentials you may have on your system, like an SSH key or git https credentials in the keychain.\r\n\r\nThis helps the user understand the security and practical implications of logging in to the CLI.\r\n"},{"labels":["documentation",null],"text":"### Describe the bug\r\n\r\nProblems encountered while following linux installation instructions. \r\nUsing Linux Mint 19.3\r\n\r\nNo `apt-add-repository` command. Should be `add-apt-repository`.\r\nNo `-u` for `add-apt-repository`, works fine without `-u`\r\n`apt install gh` before `apt update`\r\n\r\nSuccessful install:\r\n```\r\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0\r\nsudo add-apt-repository https://cli.github.com/packages\r\nsudo apt update\r\nsudo apt install gh\r\n```\r\n"},{"labels":["documentation"],"text":"### Describe the bug\r\n\r\nWhen viewing the `gh pr checks --help` page, we are missing context in regards to the flag. It should show that a pull request number is an acceptable replacement for the flag. Currently we show:\r\n\r\n![Screen Shot 2020-09-11 at 7 27 35 AM](https://user-images.githubusercontent.com/14828183/92955167-62069f80-f400-11ea-88d7-15a9ca3e6fbc.png)\r\n \r\nbut it should be something like `gh pr checks [pull request number] or similar.\r\n\r\nAn Example section might be helpful too, especially if we add this feature https://github.com/cli/cli/issues/1682"},{"labels":["documentation"],"text":"In local\r\n```\r\n$ gh issue create\r\nCreating issue in cli/cli\r\n```\r\n\r\nIn docs (https://cli.github.com/manual/examples#creating)\r\n```\r\n$ gh issue create\r\nCreating pull request for feature-branch into master in owner/repo\r\n```\r\n\r\n**Creating issue in cli/cli** vs **Creating pull request**"},{"labels":["documentation"],"text":"### Instances to update\r\n\r\n_In this repository_\r\n- [x] README installation instructions\r\n\r\n_In other repositories_\r\n- [x] \"Open with\" dialog on PRs (@mislav?)\r\n- [x] Clone dialog (in progress) (@mislav)\r\n- [x] Marketing site (in progress) (@ampinsk)"},{"labels":["documentation",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd like to be able to run `gh` cli from within a github action. The only install action I see is to manually download on the linux-based github runner (container) is to curl a hard-coded url, which will be immediately stale and will need it's version updated periodically. Is this the best way? Is it already installed on github runners? Some documentation here would be extremely helpful. Thanks!\r\n\r\n### Proposed solution\r\n\r\nDocumentation on the recommended way to run within github actions would be much appreciated.\r\n\r\n### Additional context\r\n\r\nI've searched google and the available repo docs and github docs to no avail.\r\n\r\n"},{"labels":[null,"documentation"],"text":"In PR #1432 I changed the way `cli` should be installed on Arch Linux.\r\n\r\nHowever this change isn't reflected on [Github CLI Docs Page](https://cli.github.com/manual/installation). \r\n\r\nThe [`docs`](https://github.com/cli/cli/tree/trunk/docs) folder `\"is used for documentation related to developing\"`. Is there any way that we can also update the docs on the page to avoid such situations in the future?\r\n\r\nI guess that's not the only change that isn't on the docs."},{"labels":["documentation"],"text":"### Describe the bug\r\n\r\nWhen merging a pull request from a branch, gh pr merge provides --delete-branch flag. However, this is set to true by default. This is not helpful when we want to retain the branch after merge.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Create a pr using gh pr create --title 'something' --body 'some more text'\r\n2. Note down the pull request number\r\n3. Merge the PR using gh pr merge --merge numPullRequest.\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect the branch to be retained if I don't specify --delete-branch. However, since this is future by default, specifying this flag or not has no impact.\r\n\r\n"},{"labels":[null,"documentation"],"text":"### Describe the bug\r\n\r\nThe \"LEARN MORE\" section in the new help docs suggest using `gh <command> <subcommand> --help` but that results in `unknown command --help`. The usage info is printed so the user's desire is largely fulfilled despite the confusing error at the top.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. run `gh help pr status`\r\n\r\n### Expected vs actual behavior\r\n\r\nExpected: we recommend `gh help <command> <subcommand>`\r\n\r\nActual: we recommend `gh <command> <subcommand> --help`\r\n"},{"labels":["documentation"],"text":"I find it useful to run the latest code rather than the one in the Debian package.\n\nHere is how I did that on Debian:\n\n1. As root, I ran:\n\n```bash\napt install golang-1.14\n```\n\nTo my surprise, this installed the `go` executable in the `/usr/lib/go-1.14/bin` directory, which is not in the PATH.\n\nSo, to compile `gh` I had to use the following command:\n\n```\nPATH=\"/usr/lib/go-1.14/bin:$PATH\" make\n```\n\nFinally, I created a symlink to the generated executable in my private bin directory `~/bin`.\n\nI realise some aspects of this are distribution-specific and am willing\nto write documentation that takes out this aspects if this wished\nby the community.\n"},{"labels":["documentation"],"text":"This is somehow related to #1085.\n\nMany commands use escape sequences, I am not sure why exactly but assume it's to add colours or underline text. It would be helpful to be able to turn this behaviour off because in a plain Linux ocnsole these sequences are just messing things up. Here too a configuraiton setting could be the right way to go.\n"},{"labels":["documentation",null],"text":"I saw in the doc that I could set an editor with `gh config`.\r\n\r\nCould you put an example in the docs of how I could use Visual Studio Code as the default editor ?"},{"labels":["documentation"],"text":"Hi.\r\n\r\nInterested in being able to create a remote repos within Github from my local cmdline.\r\n\r\nThe github user is fooUser\r\nfooUser has setup the ssh -- user/passwd\r\n\r\n\r\nThe process has created a local repository\r\nI'm in the local dir for the repository\r\n\r\n/foo/myRepo\r\n\r\nAs I understand the gh cmd to create the repo.\r\ngh repo create \"name\"\r\n\r\nShould name be the name of the local repo  -- in this case \"myRepo\" or something else??\r\n\r\nAt the same time, how in the world do I point gh at my Githb account??? is there some method of using ssh??\r\n\r\nA complete/simple example would be useful.\r\n\r\nthanks\r\n\r\n"},{"labels":["documentation"],"text":"### Describe the bug\r\nThe docs, in the case of labels, etc state: \"Add a label by name\", etc. This is implying that we are only accepting a single\r\n\r\n### Expected vs actual behavior\r\nThe docs should be changed, so as to show that we are actually accepting multiple labels, etc.\r\nExample: \"Add labels by name\""},{"labels":["documentation",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI prefer when commands have man pages, even if it's mostly telling you to run with `--help`.\r\n\r\n### Proposed solution\r\n\r\nI have a branch to add a basic man page and include it in builds [here](https://github.com/cli/cli/compare/trunk...mtfurlan:docs/manpage).\r\nThe contributing guidelines suggest opening an issue before a PR, so here we are.\r\n\r\nI based this off how [Exoscale cli](https://github.com/exoscale/cli) packages manpages as they also use goreleaser.\r\nIt would be cool if gh also generates manpages from the same place the help flag and web documentation come from, but I don't know enough go to help with that at this point in time.\r\n"},{"labels":["documentation",null],"text":"Running this in a shell such as bash or zsh will not produce the sometimes-expected result of looking up issues under the `help wanted` label:\r\n\r\n```sh\r\n# doesn't work:\r\ngh issue list -l help wanted\r\n```\r\n\r\nThis is because the value `help wanted` should be quoted or escaped in one's shell to ensure that it's passed as a single value to `--label`, rather than as two distinct arguments `help` + `wanted` (where the latter wouldn't be interpreted as relating to `--label` at all):\r\n\r\n```sh\r\n# works:\r\ngh issue list -l \"help wanted\"\r\n\r\n# also works:\r\ngh issue list -l help\\ wanted\r\n```\r\n\r\nThis isn't a bug with CLI, but is a common pitfall for shell-users in general that we could ideally help our users detect and recover from. Possible approaches:\r\n\r\n- Include example of passing labels with spaces in `gh help issue list` docs\r\n- Detect extra, unaccounted arguments to `gh issue list` (`\"wanted\"` in the above example) and present an error such as “unrecognized argument 'wanted': did you forget to quote values with spaces?”\r\n\r\nOriginally reported by @tierninho\r\n\r\nLoosely related issues that stem as consequence of shell behavior (as opposed to being bugs in `gh`): https://github.com/cli/cli/issues/223 https://github.com/cli/cli/issues/595 https://github.com/cli/cli/issues/315"},{"labels":["documentation"],"text":"### Describe the bug\r\n\r\nAfter following the [instructions](https://cli.github.com/manual/gh_completion) for enabling shell completion I still can’t get the completion functionality to work. I’ve tried both the `eval` and Homebrew options. I’m on Mac OS 10.15.4  using zsh with Oh My Zsh and gh version 0.6.2.\r\n\r\n### Steps to reproduce the behavior\r\n1. Add the Homebrew completion [snippet](https://docs.brew.sh/Shell-Completion#configuring-completions-in-zsh) to `.zshrc`. and open a new terminal.\r\n2. Type `gh`\r\n3. Press <kbd>Tab</kbd>\r\n4. Run `eval \"$(gh completion -s zsh)”`\r\n5. Repeat steps 2-3\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect to see completion options for `gh` commands but instead I get my shell’s standard file path completion.\r\n\r\n"},{"labels":["documentation"],"text":"**Problem:** running `gh completion` out of curiousity produces a long and potentially confusing bash script.\r\n\r\n**Potential solution:** running `gh completion` without arguments should show the same output as `gh help completion`. To obtain the script, the user would have to explicitly select a shell type, e.g. `-s bash`.\r\n\r\nFollowup to #591"},{"labels":["documentation"],"text":"**Problem:** viewing `gh help` output alphabetically sorts available commands, which currently displays arguably less interesting commands first and more interesting commands last.\r\n\r\n**Potential solution:** split commands into topic groups, similar to how `git help` does.\r\n\r\nBefore:\r\n```\r\nAvailable Commands:\r\n  completion  Generate shell completion scripts\r\n  help        Help about any command\r\n  issue       Create and view issues\r\n  pr          Create, view, and checkout pull requests\r\n  repo        Create, clone, fork, and view repositories\r\n```\r\n\r\nAfter (exact naming to be discussed):\r\n```\r\nCore Commands:\r\n  issue       Create and view issues\r\n  pr          Create, view, and checkout pull requests\r\n  repo        Create, clone, fork, and view repositories\r\n\r\nAncillary Commands:\r\n  completion  Generate shell completion scripts\r\n  help        Help about any command\r\n```"},{"labels":[null,"documentation"],"text":"### Describe the bug\r\n\r\nHi @mislav! Thank you for creating this. I'm trying to create the new repo via CLI, and it seems --repo is not passing the owner/repo format? It just defaults to owner/folder-name\r\n\r\nIn fact, I try to create a new repo using a different name it says repository already exists.\r\ngh version 0.6.2 (2020-03-18)\r\n\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Go to folder `reponame`\r\n2. gh create repo --repo org/reponame\r\n3. it creates owner/reponame instead\r\n\r\n### Expected vs actual behavior\r\n\r\nIt should create a repo name under the org.\r\n\r\n### Logs\r\n\r\nDoing it twice says:\r\ngraphql error: 'Name already exists on this account'\r\n\r\nEven though there's no repo name under the org, only the local repo under my own account.\r\n"},{"labels":["documentation",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe page https://cli.github.com/manual/gh_completion explains to use the completions by adding `eval \"$(gh completion)\"` to a profile file.\r\n\r\nFor PowerShell, the equivalent command is `gh completion -s powershell | iex`, which produces the following error:\r\n\r\n```powershell\r\n> gh completion -s powershell | iex\r\niex : At line:1 char:67\r\n+ Register-ArgumentCompleter -Native -CommandName 'gh' -ScriptBlock {\r\n+                                                                   ~\r\nMissing closing '}' in statement block or type definition.\r\nAt line:1 char:31\r\n+ gh completion -s powershell | iex\r\n+                               ~~~\r\n    + CategoryInfo          : ParserError: (:) [Invoke-Expression], ParseException\r\n    + FullyQualifiedErrorId : MissingEndCurlyBrace,Microsoft.PowerShell.Commands.InvokeExpressionCommand\r\n```\r\n\r\n### Proposed solution\r\n\r\nExplain how to use the PowerShell completions\r\n"},{"labels":[null,"documentation",null],"text":"The global flags include: \r\n  `-R, --repo OWNER/REPO`   Select another repository using the OWNER/REPO format\r\n\r\nhowever this is unlikely to apply to most or all of the `gh repo` commands as I repo name/url is already needed to execute the command. \r\n\r\nFor instance, one would not use: `gh repo view https://github.com/cli/cli -R tierninho/yarn` as the `-R` flag would be ignored.\r\n\r\n_OSX, v0.6.1_"},{"labels":[null,"documentation",null],"text":"### Describe the bug\r\n\r\nRunning `gh pr view` or `gh pr list` causes a 500 error.\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```\r\n$ gh pr view\r\nhttp error, 'https://api.github.com/graphql' failed (500): ''\r\n$ gh pr list\r\nhttp error, 'https://api.github.com/graphql' failed (500): ''\r\n$ gh --version\r\ngh version 0.5.5 (2020-02-13)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.5\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nIt works.\r\n\r\nOr if it doesn't...\r\n\r\nAdd a `--verbose`/`--debug` option perhaps to show the HTTP request/response? This may help the CLI devs know if the fault is a malformed request triggering a bug in the API or just the API being broken.\r\n\r\nEven bigger segue, but with `gh --help` I don't see an easy way to reauthenticate if that would maybe help. `gh login` or `gh auth` to redo credentials may be nice. I assume the token is stored somewhere, but it's a bit annoying to have to go fishing for it. `gh logout` to delete the token might be a good dual as well."},{"labels":["documentation",null],"text":"### Describe the bug\r\n\r\nI'm guessing that Fedora sees the latest release as a new piece of software and not an upgrade to the previously-installed version.\r\n\r\n```\r\n❯ gh --version\r\ngh version 0.5.4 (2020-02-04)\r\nhttps://github.com/cli/cli/releases/tag/v0.5.4\r\n```\r\n\r\n(BTW, my shell is telling me that `gh --version` is not exiting with `0`, not sure why not...)\r\n\r\n### Steps to reproduce the behavior\r\n\r\n1. Download latest RPM:\r\n\r\n```\r\n❯ wget https://github.com/cli/cli/releases/download/v0.5.5/gh_0.5.5_linux_386.rpm\r\n--2020-02-18 16:35:31--  https://github.com/cli/cli/releases/download/v0.5.5/gh_0.5.5_linux_386.rpm\r\nResolving github.com (github.com)... 140.82.114.3\r\nConnecting to github.com (github.com)|140.82.114.3|:443... connected.\r\nHTTP request sent, awaiting response... 302 Found\r\n..........................\r\nHTTP request sent, awaiting response... 200 OK\r\nLength: 4623126 (4.4M) [application/octet-stream]\r\nSaving to: ‘gh_0.5.5_linux_386.rpm’\r\n\r\ngh_0.5.5_linux_386.rpm                                100%[=========================================================================================================================>]   4.41M  8.59MB/s    in 0.5s    \r\n\r\n2020-02-18 16:35:38 (8.59 MB/s) - ‘gh_0.5.5_linux_386.rpm’ saved [4623126/4623126]\r\n```\r\n\r\n2. Attempt to install it:\r\n\r\n```\r\n❯ sudo dnf install ./gh_0.5.5_linux_386.rpm\r\n[sudo] password for alex: \r\nLast metadata expiration check: 0:05:42 ago on Tue 18 Feb 2020 04:30:14 PM CST.\r\nDependencies resolved.\r\n============================\r\n Package                                         Architecture                                      Version                                              Repository                                                 Size\r\n============================\r\nInstalling:\r\n gh                                              i386                                              0.5.5-1                                              @commandline                                              4.4 M\r\n\r\nTransaction Summary\r\n============================\r\nInstall  1 Package\r\n\r\nTotal size: 4.4 M\r\nInstalled size: 11 M\r\nIs this ok [y/N]: y\r\nDownloading Packages:\r\nRunning transaction check\r\nTransaction check succeeded.\r\nRunning transaction test\r\nError: Transaction test error:\r\n  file /usr/local/bin/gh from install of gh-0:0.5.5-1.i386 conflicts with file from package gh-0:0.5.4-1.x86_64\r\n```\r\n\r\n### Expected vs actual behavior\r\n\r\nUsually when upgrading packages, even those not in the package manager, `dnf` lists the new package as \"Upgrading:\", instead of \"Installing:\" Also, usually it succeeds.\r\n\r\n\r\n### System Information\r\n\r\n```\r\n❯ cat /etc/os-release\r\nNAME=Fedora\r\nVERSION=\"30 (Workstation Edition)\"\r\n```\r\n"},{"labels":["documentation"],"text":"On https://cli.github.com/manual/gh_pr_list, the \"Default behavior\" section shows an example of the `issue` command, not the `pr` command."},{"labels":["documentation"],"text":"to alleviate DNS issues we must move the pages site under the `github` org"},{"labels":["documentation"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt's unclear what the difference between `gh` and `hub` are, and when one would be used over the other.\r\n\r\n### Proposed solution\r\n\r\nMerge or provide a descriptive document on the differences and when one would be used vs the other.\r\n\r\n### Additional context\r\n\r\nNone.\r\n"},{"labels":["documentation",null],"text":"Currently, if I want to install the cli to the system (for example, to `/usr/local/bin`), I need to first run `make` and then manually copy the built executable into the desired location. The same scenario applies once uninstalling.\r\n\r\nIt'd be great if I could just run `sudo make install` to build + install the project, and obviously `sudo make uninstall` to uninstall it.\r\n\r\nThis would make it a little easier to package the project. For example, I'd like to add this to the [Arch User Repository](https://wiki.archlinux.org/index.php/Arch_User_Repository) as `github-cli-git`.\r\n\r\nThanks & good luck with the development of the cli!\r\n\r\n---\r\n\r\nEdit:\r\n\r\nFrom [Makefile](https://github.com/cli/cli/blob/master/Makefile#L12-L13):\r\n\r\n```make\r\nbin/gh: $(BUILD_FILES)\r\n\t@go build -ldflags \"$(LDFLAGS)\" -o \"$@\" ./cmd/gh\r\n```\r\n\r\nWould that supposedly solve my issue?\r\nI tried both\r\n\r\n```sh\r\nsudo make /usr/local/bin/\r\n```\r\n\r\nand\r\n\r\n```sh\r\nsudo make bin/gh /usr/local/bin/\r\n```\r\n\r\nbut neither worked - I just get \r\n\r\n```console\r\nmake: 'bin/gh' is up to date.\r\nmake: Nothing to be done for '/usr/local/bin/'.\r\n```\r\n\r\nAlso, the uninstall step is missing."},{"labels":["documentation"],"text":"## macOS:\r\nFor the installation, specifically macOS, we do not mention Homebrew as a prerequisite for the installation. Xcode Install Tools are also required, but Homebrew takes care of that, but perhaps because I have Xcode already?\r\n\r\nRunning `brew install github/gh/gh` without Homebrew results in `command not found` error. \r\n\r\nAlso, there is no mention of the SSH or HTTPS authentication, nor the subsequent browser authentication. \r\n\r\nI am not sure what else I am missing?\r\n\r\n## Linux:\r\nIf authenticating with a personal access token (PAT), you need to add this to your gh config.\r\n\r\n**~/.config/gh/config.yml**\r\n\r\n```\r\nyaml\r\ngithub.com:\r\n  - user: $GITHUB_USERNAME\r\n    oauth_token: $PERSONAL_ACCESS_TOKEN\r\n```\r\n\r\n## Windows:\r\nScoop...\r\n\r\n## Uninstalling \r\nDirections to do an uninstall would be great too\r\n\r\n## Minimum req's\r\nEach OS should have the following:\r\n- dependencies, prerequisites for installing \r\n- instructions for installing\r\n- instructions for authenticating\r\n- instructions for upgrading\r\n- instructions for uninstalling"},{"labels":["documentation"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe documentation is using the term \"flags\" and \"options\" interchangeably, but consistently in specific locations in the docs. This makes it appear that \"flags\" and \"options\" are two different concepts.\r\n\r\n<img width=\"765\" alt=\"Screen Shot 2020-01-28 at 11 24 00 AM\" src=\"https://user-images.githubusercontent.com/1038121/73297755-fcdba200-41c0-11ea-8c11-5e7f5e89eabb.png\">\r\n\r\n### Proposed solution\r\n\r\nUse one term or the other consistently in all locations. Personally, I feel that \"options\" is a more standard choice.\r\n\r\n### Additional context\r\n\r\nSee screenshot above.\r\n"},{"labels":["documentation",null],"text":"Currently we use `brew upgrade gh --fetch-HEAD` to upgrade GH, which is hard to remember and means letting the entire script run just to see the build is already installed:\r\n\r\n `Warning: github/gh/gh 0.3.5 already installed` \r\n\r\nor we end up with an upgraded build with an [unclear success message](https://github.com/github/gh-cli/issues/152).\r\n\r\nPerhaps we could mask the brew command with `gh upgrade` to keep it easier to remember and allow us to control the output?\r\n\r\nSome benefits:\r\n- If homebrew was not installed, we could inform the user with instructions. Could be platform/method specific.\r\n- If the current build was already installed, we could inform the user before the script ran\r\n- It could allow the user to switch builds if we go this route "}]