[{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAdd a command for commenting pull requests. Sometimes you need that.\r\n\r\n### Proposed solution\r\n\r\nI suggest **gh pr <number> comment <text>** syntax.\r\n\r\n### Additional context\r\n\r\nThe example use-case for me would be **gh pr 64 comment @dependabot recreate**.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nA clear and concise description of what the feature or problem is.\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement",null],"text":""},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nA clear and concise description of what the feature or problem is.\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI am finding a way to make anything into gui, but i still can't comment an issue on CLI.\r\n\r\n### Proposed solution\r\n\r\nThe github cli tools can add a comment issue feature, that work like this:\r\n - Use `gh issue comment <ID>` To comment an issue\r\n - Use `gh pr comment <ID>` To comment a pr\r\n - Use `gh issue list-comment <ID>` to list all comments in an issue with thair Comment ID\r\n - Use `gh pr list-comment <ID>` to list all comments in a pr with thair Comment ID\r\n - Use `gh issue edit-comment <Comment ID>` To edit comments in an issue that you comment\r\n - Use `gh issue delete-comment <Comment ID>` To delete comments in an issue that you have primision to delete\r\n - Use `gh pr edit-comment <Comment ID>` To edit comments in a prthat you comment\r\n - Use `gh pr delete-comment <Comment ID>` To delete comments in a pr that you have primision to delete\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI have a forked repo with two remotes 'origin' and 'upstream' using the standard nomenclature as you can see here:\r\n\r\n```\r\n$ git remote -v\r\norigin  git@github.com:jcmurray/md380tools.git (fetch)\r\norigin  git@github.com:jcmurray/md380tools.git (push)\r\nupstream        git@github.com:travisgoodspeed/md380tools.git (fetch)\r\nupstream        git@github.com:travisgoodspeed/md380tools.git (push)\r\n```\r\n\r\nIf I want to see the issues I do the following and select the upstream (base) repo. All well and good and 'upstream' is now selected as the 'base' repo.\r\n\r\n```\r\n$ gh issue list\r\n? Which should be the base repository (used for e.g. querying issues) for this directory?  [Use arrows to move, type to filter]\r\n> travisgoodspeed/md380tools\r\n  jcmurray/md380tools\r\n```\r\n\r\nNow, when I did this the first time I selected the wrong repo and started trying to figure out how to correct this mistake. There is no documentation that I could find that described what to do. I eventually figured out the following:\r\n\r\n```\r\n$ git config --list | grep gh-resolved\r\nremote.upstream.gh-resolved=base\r\n$ git config --unset  remote.upstream.gh-resolved\r\n```\r\n\r\nThe base repo is set as the key value pair in the local git config and only by unsetting this key value pair could I reset the github cli 'memory' of the incorrect setting.\r\n\r\n\r\n### Proposed solution\r\n\r\nSimply document, maybe in a FAQ, how to reset the 'base' repo config setting in github cli and avoid users having to do what I did and figure out how to fix it themselves.\r\n\r\n### Additional context\r\n\r\nNone"},{"labels":["enhancement",null],"text":"How about make short options like -v or -h"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe current `gh issue list` command returns a very nice and simple list of issues. However, some attributes such as milestone aren't included. \r\n \r\n### Proposed solution\r\n\r\nIt would be nice to have a flag such as `gh issue list -D` for a detailed view or something which would include more information."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be useful to add a command to open some of these.  For example, typing `gh repo view --browse` could open the repo homepage in the default browser (similar to what happens with the authorization workflow).  \r\n\r\n### Proposed solution\r\n\r\nAdd the following commands:\r\n\r\n| Command | Action |\r\n|---------|--------|\r\n|    `gh issue view 123 --browse`     |   Opens Issue 123 in the browser     |\r\n|    `gh pr view 123 --browse`     |    Opens PR 123 in the browser    |\r\n|    `gh release view 1.2.3 --browse`     |    Opens release 1.2.3 in the browser    |\r\n|    `gh repo view --browse`     |    Opens the repo homepage in the browser    |\r\n\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nOn https://cli.github.com/ you're given the option to install GitHub CLI through Homebrew or to <kbd>Download for Mac</kbd>. I'd rather not install Homebrew or MacPorts on my Mac, so I went for the second option. However, once I untar the downloaded archive, there are no instructions on what to do next. I get a `bin` folder containing what (I guess) is the `gh` binary, and a `share/man/man1` hierarchy of folders containing multiple files. However, I don't know what to do with them, and there's no installer in sight.\r\n\r\n### Proposed solution\r\n\r\nAdd a README which explains how to use the downloaded files (presumably: which folder to move them to), or (even better) add an installer which takes care of that automatically. If the files cannot be used without Homebrew or MacPorts, then consider creating a standalone executable which doesn't require a package manager. I don't think that everyone using `gh` is willing to install & configure a package manager on MacOS (with all the related complexities and security concerns, in the case of Homebrew). \r\n\r\n### Additional context\r\n\r\nMacOS High Sierra: 10.13.6 (17G14019)"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like to be able to type a single command as an authorized user and be able to view filtered notifications on the issues & pull requests I'm involved in.\r\n\r\n**Bonus:** I would additionally like to be able to resolve an issue/pr notification in a single command.\r\n\r\nInstead of having to navigate to https://github.com/notifications, I would be able to do this in a CLI.\r\n\r\n### Proposed solution\r\n\r\nThe command might be `gh inbox` which could append a filter(subcommand) of:\r\n\r\n#### Inbox\r\n- blank (`gh inbox`)\r\n- saved (`gh inbox saved`)\r\n- done (`gh inbox done`)\r\n\r\n#### Filters\r\n- assigned (`gh inbox assigned`)\r\n- participating (`gh inbox participating`)\r\n- mentioned (`gh inbox mentioned`)\r\n- team-mentioned (`gh inbox team-mentioned`)\r\n- review-requested (`gh inbox review-requested`)\r\n- [Any custom defined filter](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/managing-notifications-from-your-inbox#customizing-your-inbox-with-custom-filters)\r\n\r\n#### Repositories\r\n\r\n- cli/cli (`gh inbox cli/cli`)\r\n- ...\r\n\r\n**Note:** The repository level may require a `all` / `unread` parameter similar to the web UI: \r\n![image](https://user-images.githubusercontent.com/1288848/93670384-9ca3b400-fa60-11ea-8fba-c0e2ba2af8a5.png)\r\n\r\n\r\n**Use-case:**\r\n\r\n1. User types `gh inbox mentioned`\r\n2. User sees a list of issues & PRs associated with the filter. \r\n\r\n**Note: There needs to be a column or UI affordance to differentiate between an issue & PR status ex:** \r\n![image](https://user-images.githubusercontent.com/1288848/93670084-16866e00-fa5e-11ea-870a-e96500d1a15d.png) \r\n![image](https://user-images.githubusercontent.com/1288848/93670092-22723000-fa5e-11ea-9b83-b04149f2ab17.png)\r\n3. User can then interact with the issue/PR notification with subcommands of `done`, `unsubscribe`, and `save` which will put notifications in the respective inbox filters. (This may require more features from the notification infrastructure)\r\n\r\n### Additional context\r\n\r\nTL;DR \r\n\r\n![image](https://user-images.githubusercontent.com/1288848/93669985-48e39b80-fa5d-11ea-9f77-7f7884a380b1.png)\r\n\r\n->\r\n\r\n`gh inbox <filter alias>`\r\n\r\nDocs: https://developer.github.com/v3/activity/notifications\r\n\r\nTweet: https://twitter.com/_JonDouglas/status/1306619529833971713\r\n\r\nMay be dependent on: https://github.com/cli/cli/issues/641"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nEspecially when using project boards, having issue and PR separated is messy because you need to add the PR to the board manually, and people generally forget to do that.\r\n\r\nThe GitHub API already allows converting an issue you opened to a PR, and the old `hub` cli already lets you do `hub pull-request -i 1234` to convert that issue to a PR.\r\n\r\n### Proposed solution\r\n\r\nAdd an option to the `gh pr create` CLI where you specify an issue number and then this issue is converted to a PR. `gh pr create -i 1234 ...` would probably be a good way to do this.\r\n\r\n### Additional context\r\n\r\nIdeally GitHub itself should allow converting even an issue created by someone else to a PR (as long as you have write (or triage?) access to the repo), and show it nicely in the timeline that the issue was converted to a PR.\r\n\r\nExposing it via web by selecting an issue in the compare view (and/or \"Create PR\" in the issue view) would be niceas well."},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nOne of the first things I end up doing from most clones is setting a distinct pushurl. I use the https protocol for url, and then the ssh protocol for push. This lets me perform a pull unauthenticated, and push using my SSH key.\r\n\r\nCurrently, gh supports only a git_protocol setting to select between setting the default remotes using either https or ssh. \r\n\r\n### Proposed solution\r\n\r\nCould we please have a git_push_protocol setting which, if defined, will be used to populate the pushurl for the remote when creating the clone?\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI am looking to contribute the documentation for gh [manual](https://cli.github.com/manual/)\r\nBut I was unable to find the source code for the manual docs.\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nI want to add more examples so that newbies can understand the power of this cli."},{"labels":["enhancement",null],"text":"### The feature\r\nI do not think right now the GitHub CLI has ability to delete gists\r\n\r\nI will be better if it can delete it via `gh gist delete <id>`\r\n\r\n```cmd\r\n$ gh gist delete --help\r\nDelete one of your gists\r\n\r\nUSAGE\r\n    gh gist delete {<gist ID> | <gist URL>} [flags]\r\n\r\nFLAGS\r\n    -f, --filename string      a specific filename to delete\r\n\r\nINHERITED FLAGS\r\n   --help    Show help for command\r\n```"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like to be able to link a PR to an issue when creating a new PR via the CLI\r\n\r\n### Proposed solution\r\n\r\nKeep the entire PR creation process in the CLI"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen adding the repository in a Debian sid (unstable) system it creates the source as:\r\n\r\n```\r\ndeb https://cli.github.com/packages sid main\r\n# deb-src https://cli.github.com/packages sid main\r\n```\r\n\r\nBut while running `apt update` we get:\r\n\r\n```\r\nIgn:3 https://cli.github.com/packages sid InRelease                            \r\nErr:4 https://cli.github.com/packages sid Release                              \r\n  404  Not Found [IP: 185.199.109.153 443]\r\n\r\nE: The repository 'https://cli.github.com/packages sid Release' does not have a Release file.\r\nN: Updating from such a repository can't be done securely, and is therefore disabled by default.\r\nN: See apt-secure(8) manpage for repository creation and user configuration details.\r\n```\r\n\r\nReplacing `sid` by `unstable` in `sources.list` works as expected.\r\n\r\n### Proposed solution\r\n\r\nSince `sid` is also a valid release name, your repository should have a link `sid` pointing to `unstable` (so no matter if we use `sid` or `unstable`, we will always hit the same repository, as expected)."},{"labels":[null,"enhancement"],"text":"When running this `gh pr checks [branch] -R [owner/repo]` command and there is no pull request but no CI, I get this:\r\n\r\n`no open pull requests found for branch \"JJJ\"`\r\n\r\nHowever, when running the same command on a different branch and there is a pull request but no CI, nothing is returned. \r\n\r\nIn both cases, I think it would be more accurate to say something like \"no CI checks are set up for this repository\"."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\n\nA clear and concise description of what the feature or problem is.\n\n### Proposed solution\n\nHow will it benefit CLI and its users?\n\n### Additional context\n\nAdd any other context like screenshots or mockups are helpful, if applicable.\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen listing all PRs relevant to me (e.g. `gh pr status`), I'd like a flag to see a long version of the check results instead running `gh pr checks <PR number>` for each PR.\r\n\r\n### Proposed solution\r\n\r\nAdd a flag, to be used by `gh pr status` and/or `gh pr list`.\r\n\r\nPerhaps another option to hide the extra details on the passing ones, if one doesn't care for it.\r\n\r\n```bash\r\n# Viewing the status of your relevant pull requests\r\n~/Projects/my-project$ gh pr status --long\r\nCurrent branch\r\n  #12 Remove the test feature [user:patch-2]\r\n   - All checks failing - Review required\r\n    - X  Check 1\r\n    - X   Check 2             https://link.to.check.results.com/12\r\n\r\nCreated by you\r\n  You have no open pull requests\r\n\r\nRequesting a code review from you\r\n  #13 Fix tests [branch]\r\n  - 3/4 checks failing - Review required\r\n    - X  Check 1\r\n    - ✓  Check 2             https://link.to.check.results.com/13\r\n  #15 New feature [branch]\r\n   - Checks passing - Approved\r\n\r\n~/Projects/my-project$\r\n```"},{"labels":["enhancement",null],"text":"I am using clear linux as my development workspace, but seems like there is no support yet.\n\nI will appreciate if this feature is added 🙂"},{"labels":["enhancement",null,null],"text":"It seems like the repo doesn't have a release file for the Kali Linux distro. When I tried to update my local repo, I get the following error messages:\r\n```sh\r\nE: Failed to fetch https://cli.github.com/packages/dists/kali-rolling/main/binary-amd64/Packages  404  Not Found [IP: 185.199.109.153 443]\r\nE: Some index files failed to download. They have been ignored, or old ones used instead.\r\n```"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nProvide package dmg to macOS is more easy to install instead of binary for most people. Or add in documentation how to install cli without brew or MacPorts.  \r\n\r\n### Proposed solution\r\n\r\n- About dmg's package, I don't know 😢. But I think so people use macOS can use cli easier .dmg than binary file. \r\n- In documentation, update section about macOS installation adding how to install with binary file. :) \r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen viewing PR `gh pr view 7`, it gives basic information, but to view review comments, I have to switch to web. \r\n\r\n### Proposed solution\r\n\r\n- Less context switching\r\n- everything on through single interface\r\n\r\n### Additional context\r\nN/A\r\n"},{"labels":[null,"enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe `Short` parameter used for commands is inconsistent and most do not provide any information beyond what is already provided through the name.\r\n\r\n```console\r\nCORE COMMANDS\r\n  gist:       Create gists\r\n  issue:      Manage issues\r\n  pr:         Manage pull requests\r\n  release:    Manage GitHub releases\r\n  repo:       Create, clone, fork, and view repositories\r\n```\r\n\r\n`gist` is described as `Create gists` yet you can also view and edit gists,`issue` describes \"managing\" issues and `repo` lists the functionality supported.\r\n\r\n### Proposed solution\r\n\r\nDecide on a standard for the `Short` name. \r\n\r\nI think there's a few different options, each of which has pros and cons. The conclusion I've come to is that because the CLI is _typically_ used by power-users (\"Goodbye, context switching.\") that the best `Short` description has high information density.\r\n\r\nListing all of the commands supported could be automated (e.g: `Short` could simply be a dynamic comma separated list) which would reduce the maintenance burden, however it might become unwieldy as new functionality is added -- `pr` already has 12 supported commands.\r\n\r\nAnother option could be to pick a subset of the commands that provide enough context to inform the user about the depth of support, for example `pr` supports `reopen` which provides an indication that status can be managed so `reopen (+2 more)` is as useful as `reopen, close and ready`.\r\n\r\nAnother option could be to describe the resources as products/features: I don't think that provides as much value to power-users, _but_ as the CLI functionality expands and new product lines are introduced it might become more valuable -- if I didn't know what a gist is, I'd benefit from this approach.\r\n\r\n#### Product Description\r\n\r\n```console\r\nCORE COMMANDS\r\n  gist:       Share content privately or publicly\r\n  issue:      Keep track of tasks within your team\r\n  pr:         Participate in living conversations about changes\r\n  release:    Package software for people to use\r\n  repo:       Keep and collaborate on code with GitHub\r\n```\r\n\r\n#### Curated List\r\n\r\n```console\r\nCORE COMMANDS\r\n  gist:       create, edit, list and view Gists\r\n  issue:      create, list and close Issues (+3 more)\r\n  pr:         create, review and merge Pull Requests (+9 more)\r\n  release:    create, download and view Releases (+3 more)\r\n  repo:       clone, create, fork and view Repositories\r\n```\r\n\r\n#### Complete List\r\n\r\n```console\r\nCORE COMMANDS\r\n  gist:       create, edit, list and view\r\n  issue:      close, create, list, reopen, status and view\r\n  pr:         checkout, checks, close, create, diff, list, merge, ready, reopen, review, status and view\r\n  release:    create, delete, download, list, upload and view\r\n  repo:       clone, create, fork and view\r\n```\r\n\r\n### Additional context\r\n\r\nDefinitely not a big issue, just some polish! I'm happy to PR any changes that are agreed upon: creating an issue first for discussion per the contribution guidelines. After working through this issue I've decided I like the curated list (`(+n more)` option) most.\r\n\r\n:page_facing_up:"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI can't find any information on the website or in the CLI help command about where authentication information is stored.\r\n\r\n### Proposed solution\r\n\r\nDocument where GH CLI stores authentication credentials. Also explain the relationship of this with existing GitHub credentials you may have on your system, like an SSH key or git https credentials in the keychain.\r\n\r\nThis helps the user understand the security and practical implications of logging in to the CLI.\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\nWhen using GitHub CLI on Windows Terminal - after installing it as MSI - are you not able to execute any gh-related command such as `gh pr <option>` due to it requiring Git support in the terminal itself.\r\n\r\nGitHub CLI will in fact print one of two error messages when attempting to use specific commands in Windows Terminal.\r\n```\r\nPS C:\\path\\to\\project\\folder> gh pr checkout 1\r\ncould not determine current branch: git: not on any branch\r\nPS C:\\path\\to\\project\\folder> gh pr status\r\ngit: exec: \"git\": executable file not found in %PATH%\r\n```\r\nThe above errors will show, no matter if the directory contains a local git repository or not.\r\n\r\n### Proposed solution\r\nIt should be mentioned that GitHub CLI either doesn't support Windows Terminal (yet) OR provide possible steps to make it work with it.\r\n\r\nIt should additionally also perhaps be mentioned, that the Git Bash terminal will also work when installed.\r\n\r\n### Additional context\r\nTested on a Windows 10 Pro (64-bit) PC with GitHub CLI 1.0.0 (2020-09-16)\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAny plans to support viewing PRs that I have been assigned to as a reviewer across repos? This is the web view https://github.com/pulls/review-requested\r\n\r\n### Proposed solution\r\n\r\nUsers could view PRs they need to review from the CLI\r\n\r\n### Additional context\r\n\r\nWasn't sure if it should pertain to this ticket or not: https://github.com/cli/cli/issues/641\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe CLI should have a way to create / modify labels on a repository. This would be useful for users who want to better organize their GitHub Issues (perhaps adopting SCRUM in their projects by adding priority/story point labels)\r\n\r\n### Proposed solution\r\n\r\nThe GitHub GraphQL API already has some mutations to create / modify labels, so the CLI just needs to make requests to that API. The REST API can also be used.\r\n\r\n### Additional context\r\n\r\nI've already done a proof of concept at https://github.com/spekkio-bot/spekkio"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen we merge a PR with something like `gh pr merge X`, the base branch locally isn't updated automatically. I'd like the CLI to prompt me to update that branch automatically (default to yes) alongside the other options.\r\n\r\n### Proposed solution\r\n\r\nPrompt to update (default yes) and update if true\r\n\r\n### Additional context\r\n\r\nhttps://github.slack.com/archives/CLLG3RMAR/p1600365061277900"},{"labels":["enhancement"],"text":"When I tried to install from apt it's showing the above error , then I tried installing from the source it's returning an error"},{"labels":["enhancement",null],"text":"Add the ability to manage SSH keys (https://github.com/settings/keys) via the CLI. This would allow users to set up a repository via SSH entirely from CLI. \r\n\r\nIn our organization, we provide instructional materials for our developers on how to set up a repository, including setting up an ssh key. It would be great to be able to simply post a set of commands, instead of the current GUI instructions to \"click here, and then click there\".\r\n\r\n### Proposed solution\r\n\r\nAdd a `gh ssh-key` command (or maybe `gh key ssh`?) with the following subcommands:\r\n\r\n* `list` - lists currently added keys with their names and hashes\r\n* `add [<filename>]` - adds a new key provided by the optional argument `filename` (which defaults to the current ssh public key, i.e. `~/.ssh/id_rsa.pub`)\r\n* `remove <hash>` - removes the key given by the argument `hash`"},{"labels":["enhancement",null],"text":"First up, amazing work. Thank you so much. As a daily GitHub user, I know I'll use this CLI a lot.\r\n\r\n### Describe the feature or problem you’d like to solve\r\n\r\nCurrently, I need to use the arrow keys to select a menu item in interactive menus. That breaks my workflow because my hands have to leave the home row\r\n\r\n### Proposed solution\r\n\r\nAllow `CTRL-J` (in addition to `Arrow-Down`) and `CTRL-K` (in addition to `Arrow-Up`) to select an option in interactive menus. (Similar to `vim` navigation and other CLIs with interactive menus)\r\n\r\n### Additional context\r\n\r\nOther CLI tools with interactive modes where one can select an item, such as `fzf`, allow using `CTRL-J` to move down and `CTRL-K` to move up. Therefore my expectation was that it would also work with `gh`. However, `CTRL-J` seemed to submit the current selection, rather than move the selection down. \r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nSelect reviewers for my already created PR\r\n\r\n### Proposed solution\r\n\r\nAdd a new option in the `pr review` option which will be `reviewers`\r\n\r\n### Additional context\r\n\r\n"},{"labels":["enhancement"],"text":"Hey there,\r\n\r\nI'm trying to install github cli, but it seems like it needs admin privileges on windows. Is there a way to get a non-admin installer or a portable version?\r\n\r\nThanks!"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nHere is my current workflow for releasing CLI tools using GitHub Releases:\r\n\r\n- Tag a new version\r\n- CI runs for the tag and builds artifacts\r\n- CI creates a new GitHub Release for the tag and uploads assets using [hub](https://github.com/github/hub)\r\n\r\nAs far as I can tell, `gh` is more targeted at being used locally by actual users which doesn't work really well with the above workflow:\r\n\r\n- I don't want to create a release upfront (before CI finishes and uploads assets)\r\n- `gh` seems to be interactive by default, asking a couple questions which obviously doesn't work in CI\r\n\r\n### Proposed solution\r\n\r\nAllow disabling interactive mode using environment variables or flags.\r\n\r\n### Additional context\r\n\r\nI'm aware that `gh config set prompt disabled` can disable prompts, but generally speaking, env vars and flags are better suited for scripting than global configuration files.\r\n"},{"labels":[null,"enhancement",null],"text":"### Describe the bug\r\n\r\ngh deems connection is insecure, it's secure, it's just using some internal certificates it's unaware of\r\n\r\n### Steps to reproduce the behavior\r\n\r\ngh auth login\r\n? What account do you want to log into? GitHub Enterprise Server\r\n? GHE hostname: somehostname\r\n- Logging into somehostname\r\n? How would you like to authenticate? Paste an authentication token\r\n\r\nTip: you can generate a Personal Access Token here https://github.com/settings/tokens\r\nThe minimum required scopes are 'repo' and 'read:org'.\r\n? Paste your authentication token: ****************************************\r\ncould not validate token: Get \"somehostname\": x509: certificate signed by unknown authority\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect I can bypass \"gh\" the unknown authority warning, with some command line arg like a \"curl -k\" to just skip the TLS verification.\r\n\r\n### Logs\r\n\r\nPaste the activity from your command line. Redact if needed.\r\n"},{"labels":["enhancement",null],"text":"### Searching for a particular gh CLI command can be cumbersome \r\n\r\nThere must be a separate command such as 'gh manual' which lists all the GitHub CLI commands and its usage.\r\n\r\n### Proposed solution: New command 'gh manual'\r\n\r\nIt will benefit all the users to quickly skim through and find the needful command in few seconds.\r\n"},{"labels":["enhancement"],"text":"Everything I'm about to say assumes that you have not run `gh config set pager ...`.\r\n\r\n### Detailed description\r\n\r\n`gh` defaults to the PAGER environment variable, but core.pager seems like a more reasonable default\r\n\r\nI actually have slightly different settings between the two; they both use less, but I don't want git output paged if it doesn't need to be. core.pager includes less's -F flag, whereas my LESS environment variable doesn't (so that `less file` always pages, but, e.g., `git show` only does if necessary).\r\n\r\n### Proposed solution\r\n\r\nCheck core.pager first, then do what you were doing\r\n\r\nThis benefits everyone because it makes gh behave more like git; that is, it's not jarring that gh suddenly behaves differently than git by default. (I mean, I suppose we already use core.editor by default, too, right?)\r\n\r\nI think having your own config options is fine, but when they're not supplied I would expect you to check git's equivalent before checking the environment (that's what git and many other git-related tools do), since this is fundamentally a git-related tool.\r\n\r\n### Additional context\r\n\r\nI noticed this when suddenly `gh issue list` got paged, meaning I couldn't actually refer to the relevant output after dismissing the pager. I can workaround this with\r\n\r\n```\r\nPAGER= gh issue list # annoying to type\r\ngh issue list | cat # basically the same, also annoying\r\ngh config set pager \"$(git config core.pager)\" # annoying to maintain the same setting in two different places\r\n```\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd like to be able to extend the gh commandline infinitely by using the api. Oh wait, I can already do this, but it's a lot of work. I'd like it to be safer, neater and less work.\r\n\r\n### Proposed solution\r\n\r\nInstead of writing\r\n\r\n```\r\ngh api \"search/issues?q=state%3Aopen+review-requested%3Akojiromike+type%3Apr\" |\r\n    jq -r \".items[]|[.title,.url]|@csv\" |\r\n    column -ts,\r\n```\r\n\r\nI'd like to write something like\r\n\r\n```\r\ngh api --template {some go template} \"search/issues?q=state%3Aopen+review-requested%3Akojiromike+type%3Apr\"\r\n```\r\n\r\nor\r\n\r\n```\r\ngh api --jsonpath {some jsonpath} url\r\n```\r\n\r\nand avoid the pipeline (particularly when putting the above in aliases).\r\n\r\n### Additional context\r\n\r\nI'm all for pipelines, but managing strings here is painful for two reasons.\r\n\r\n1. When you define an alias you need to quote it, so at a minimum the script in your alias is going to have nested quotes.\r\n2. The output of the api call may have complex strings in it that a template is better suited to handle than a pipeline to jq and line-oriented tools."},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like to see the description and README of a repo on a specific branch.\r\n\r\n### Proposed solution\r\n- Using a flag like:``-b`` and ``--branch``\r\n  Example: ``gh repo view RepoName --branch BranchName``\r\n\r\n- Or maybe in the arguments like:\r\n ``gh repo view RepoName@branchNameHere``\r\n\r\n### Additional context\r\n\r\n![image](https://user-images.githubusercontent.com/33096355/93485833-68fb4980-f8fb-11ea-8856-910061c4af95.png)\r\n"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt's not possible to trigger Github Actions from the CLI. This would drastically improve how I manually trigger release workflows.\r\n\r\nDocumentation [GitHub Actions: Manual triggers with workflow_dispatch](https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/)\r\n\r\nIt is already possible to do this from the website, so it should be possible from the CLI\r\n\r\n### Proposed solution\r\n\r\nAdd `gh workflow run <workflow name> -b <branch>` which starts of workflows registered with trigger `workflow_displatch` for a specific branch\r\n\r\nWorkflows may have custom-defined inputs. It must be possible to specify those as well but I'm not aware of an elegant CLI api. One solution is `-Parg1=foo -Parg2=bar` as used by `gradle`.\r\n\r\n```\r\non: \r\n  workflow_dispatch:\r\n    inputs:\r\n      logLevel:\r\n        description: 'Log level'     \r\n        required: true\r\n        default: 'warning'\r\n      tags:\r\n        description: 'Test scenario tags'  \r\n```\r\n\r\n### Additional context\r\n![86147571-2de93700-babf-11ea-8a08-e4beffd3abe9](https://user-images.githubusercontent.com/1096485/93483706-656ac100-f901-11ea-8f2e-bce52ef9209d.png)\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nFrom [hub-sync documentation](https://hub.github.com/hub-sync.1.html), it does the following:\r\n- If the local branch is outdated, fast-forward it;\r\n- If the local branch contains unpushed work, warn about it;\r\n- If the branch seems merged and its upstream branch was deleted, delete it.\r\n\r\nThis command is basically the only reason I have `hub` installed.\r\n\r\n### Additional context\r\n\r\nAs can be seen in this comment, it is currently not supported by gh https://github.com/cli/cli/issues/312#issuecomment-588502777\r\n\r\nRelevant code: https://github.com/github/hub/blob/master/commands/sync.go"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen I list issues with `gh issue list` and want to see a particular one, copying the ID to paste it to `gh issue view` is awkward because `gh issue view` takes the issue ID without the leading `#`. I like to double-click to select, which includes `#`.\r\n\r\n### Proposed solution\r\n\r\nCan `gh issue view` be extended to allow the leading `#` or is there some shell limitation to that?\r\n\r\nThanks!"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI have full access to github repository using ssh key and my ssh client uses this key by default. Why do i need to login using `gh auth login`? Can't you just try to autologin using default ssh key without any additional tokens???\r\n\r\n### Proposed solution\r\n\r\nI want to install `gh`, change directory to git working tree (with properly set github origin) and use `gh` without need for any aditional login. Just use it the same way i can do `git push -f origin master` without any login (since i already have ssh key setup on github).\r\n\r\nOr at least automaticaly acquire the token using the ssh-key at the first start without being so unnecessarily interactive and boring."},{"labels":["enhancement"],"text":"In #1706 we've changed `pr create` so it no longer automatically pushes to a remote, but prompts instead. We made that change because, during beta, we weren't able to find a default that people would be generally satisfied with. Some people always want to push to their fork, some always want to push to the base repo even though they might have a fork, and some want to avoid auto-pushing altogether. Finally, for people working on work or otherwise private projects, it doesn't make sense to ask for a push target because there is usually only one, centralized target.\r\n\r\nThe new change adds an extra step to `pr create` that some people might find tedious and repetitive, especially when they already know up front that they always want to push to the same remote. We could either, or both\r\n- Allow explicitly setting a default push target. I imagine this setting should be per-repository instead of global;\r\n- After the user chooses a push target for the first time, we could remember it and automatically choose it the next time. Although, this could potentially be surprising and unwanted on subsequent pushes."},{"labels":["enhancement"],"text":"Support including checksums for the [GitHub Release created by `gh`](https://github.com/cli/cli/pull/1552) with:\r\n\r\n```\r\ngh release create --checksums\r\n```\r\n\r\nThis should generate a `.txt` file with the checksums of all the files included in the release, following the [`goreleaser` strategy](https://goreleaser.com/customization/checksum/) (so we at least follow a pattern), the same one used in the `gh` official releases as well.\r\n\r\nThis option should be enabled by default generating checksums using SHA256 in order to spread best practices, but users can optionally toggle it on or off."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen running `gh pr checks` the user is shown a bunch of urls for each check. It would be great to add a `-w` to see the checks tab ([repo/owner]/pull/[pr-number]/checks) in github.com. The user could then scroll through the various checks shown in the output of the `gh pr checks`.\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\nThis will benefit users by giving them a quick option to pull up more details on each check.\r\n"},{"labels":["enhancement",null,null,null],"text":"Try to auth by the web browser, the progress is successful in the web browser but failed in the last step.\r\n\r\n```bash\r\n$ gh auth login\r\n? What account do you want to log into?  [Use arrows to move, type to filter? What account do you want to log into? GitHub.com\r\n- Logging into github.com\r\n? How would you like to authenticate? Login with a web browser\r\n\r\n! First copy your one-time code: 11E4-3436\r\n- Press Enter to open github.com in your browser...\r\nfailed to authenticate via web browser: Post \"https://api.github.com/graphql\": write tcp 10.220.243.195:59450->13.250.168.23:443: wsasend: An existing connection was forcibly closed by the remote host.\r\n```\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nFollow up of [this comment](https://github.com/cli/cli/pull/1552#issuecomment-689808567) of #1552, creating a new issue as asked by @mislav.\r\n\r\nA new `gh release create` command has been added, but currently the tag number is required (ie. `gh release create v2.1.0`).\r\n\r\nBut in an automation process, the tag creation is automated too, so you do not know directly its number. Examples of releases scripts:\r\n\r\n- for a VS Code extension:\r\n```bash\r\nvsce publish minor && git push && git push --tags\r\n```\r\n- for a npm package:\r\n```bash\r\nnpm run build && npm version minor && npm publish dist && git push && git push --tags;\r\n```\r\n\r\nIn both cases, the tag creation is automated (by `vsce publish` or `npm version`), so we don't have access to the tag number directly.\r\n\r\n### Proposed solution\r\n\r\nMake the `tag` parameter in `gh release create` optional, or add a keyword to use the latest created one (for example `gh release create latest`).\r\n\r\n### Additional context\r\n\r\nThere are workarounds, but difficult:\r\n- @mislav suggested the use of the output of `git tag --sort=-creatordate | head -1`\r\n- you can use `$npm_package_version` (but it is not cross-platform, the syntax is different is a Windows shell)\r\n\r\nAlso note that in the VS Code extension example, the packaged VSIX file will be added to the GitHub release, and its name contains the version number (ie. `gh release create v2.1.0 some-extension-2.1.0.vsix`). "},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nA small idea, something like: gh dependabot which will run dependabot (if it is installed on that repo, has to be dependabot not dependabot-preview)\r\nA clear and concise description of what the feature or problem is.\r\nN/A\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\nIt will allow you to use dependabot easier.\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n[Installing gh on Linux](https://github.com/cli/cli/blob/trunk/docs/install_linux.md#opensusesuse-linux-zypper) currently states that installation on openSUSE may or may not work with zypper. I tried testing it and installing gh CLI on my system which is openSUSE Tumbleweed and also following the same steps in a fresh [opensuse/leap docker container](https://hub.docker.com/r/opensuse/leap). So I would like to add the installation instructions that work with openSUSE Linux.\r\n\r\n### Proposed solution\r\n\r\nZypper works seamlessly with the gh-cli rpm repo. The following steps state how to install and update gh cli on openSUSE.\r\n\r\nInstall:\r\n\r\n```bash\r\nsudo zypper addrepo https://cli.github.com/packages/rpm/gh-cli.repo\r\nsudo zypper ref\r\nsudo zypper install gh\r\n```\r\n\r\nUpdate:\r\n\r\n```bash\r\nsudo zypper ref\r\nsudo zypper update gh\r\n```\r\n\r\n### Additional context\r\n\r\nScreenshots of installation on my system.\r\n\r\nInstall:\r\n\r\n![Screenshot from 2020-09-10 11-28-49](https://user-images.githubusercontent.com/43331416/92687991-24e7d200-f35a-11ea-86c5-94895c3a7c76.png)\r\n\r\n![Screenshot from 2020-09-10 11-29-30](https://user-images.githubusercontent.com/43331416/92688014-30d39400-f35a-11ea-8401-62ff8c150720.png)\r\n\r\nUpdate:\r\n\r\n![Screenshot from 2020-09-10 11-39-30](https://user-images.githubusercontent.com/43331416/92688113-61b3c900-f35a-11ea-95ed-d79485c0e2ac.png)"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n`hub pull-request --help` has the following:\r\n\r\n```\r\n -o, --browse\r\n     Open the new pull request in a web browser.\r\n\r\n -c, --copy\r\n     Put the URL of the new pull request to clipboard instead of printing it.\r\n```\r\n\r\nThis is really useful for navigating to or sharing the PR URL after creation.\r\n\r\nIt would be great to support similar flags.\r\n\r\n### Proposed solution\r\n\r\nDo the same thing in `gh`."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nFor PRs, if you use git's `@{push}` branches feature, you can have [a much nicer workflow](https://fahn.co/posts/a-better-pull-request-workflow-with-git-push-branches.html), and also automatically know which branch to raise PRs against.\r\n\r\nFor example, before I raise PRs:\r\n\r\n```console\r\n$ git rev-parse --abbrev-ref --symbolic-full-name @\r\nmy_new_feature\r\n\r\n$ git rev-parse --abbrev-ref --symbolic-full-name @{push}\r\nfork/my_new_feature\r\n\r\n$ git rev-parse --abbrev-ref --symbolic-full-name @{upstream}\r\nup/master\r\n```\r\n\r\nHowever I may be on a different branch with a different remote in the same repo (for things with both public and private pairs of fork/upstream remotes, one in github.com and one in GHE):\r\n\r\n```console\r\n$ git rev-parse --abbrev-ref --symbolic-full-name @\r\nupstreaming_my_new_feature\r\n\r\n$ git rev-parse --abbrev-ref --symbolic-full-name @{push}\r\npubfork/upstreaming_my_new_feature\r\n\r\n$ git rev-parse --abbrev-ref --symbolic-full-name @{upstream}\r\npubup/master\r\n```\r\n\r\nAs I already have these configured, it's painful to have to have `gh` guess them, and in cases where the `--branch` is ambiguous (e.g. `up` and `pubup` both have a master branch), it seems to pick one at random (and setting `GH_REPO` doesn't help).\r\n\r\n### Proposed solution\r\n\r\nIdeally these would just be used as defaults, and `gh pr create` would just work with the above configuration.\r\n\r\nHowever what might also be useful (and more flexible) would be to allow passing refs as the `--base` and `--head` branch refs (I know the latter doesn't exist right now).\r\n\r\nThat way it could be `gh pr create --base=@{upstream} --head=@{push}`\r\n\r\n### Additional context\r\n\r\nRight now things sometimes work if you only have two remotes, depending on whether the heuristics in context.go work:\r\n\r\nhttps://github.com/cli/cli/blob/74614b13dac6a66da3d5eade27e0156ece9ee626/context/context.go#L83-L94"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nhow to config 'gh pr diff' use  vimdiff\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen making deploy-time changes to a repo (e.g. editing a workflow YAML file), I have to push the change in the repo from the CLI, and then switch over to the repo's Actions view on Github, select the newly-created workflow run, select the build step I'm interested in, and only then can I know whether my changes are working.\r\n\r\nAs well, it'd be nice to just be able to watch the progress of any action triggered by a repo push from the CLI as an automatic follow-on step to pushing, replicating the experience of CI running within a git host's post-receive hook (i.e. the Heroku approach to CI.)\r\n\r\n### Proposed solution\r\n\r\nIt is my understanding that, when a user pushes to a Github repo where Github Actions on-push workflows are configured, the backend runs a `post-receive` hook that makes a webhook call to the GH Actions API to trigger the workflow.\r\n\r\nPresumably, that API call responds to the post-receive hook with the ID of the created workflow run.\r\n\r\nSaid workflow-run ID could be emitted by the post-receive hook (and so travel back over the `send-pack` connection.) The ID could then be caught by a wrapper script (something custom, or maybe part of `hub`), which would then be able to use it to make a relevant call to `gh` to watch the workflow, something like `gh workflow watch $PUSH_ID`. The developer could then watch the CI build progress of their push as it happens, from the beginning, without having to context-switch away from the CLI.\r\n\r\nIt would also be helpful to have a switch to this subcommand, something like `--fail-on-interrupt`, that could be used by such a wrapper script to make the Github Actions workflow run into something approaching an \"interactive\" session, i.e. one where the user can interrupt *the workflow* (rather than just their client) simply by pressing `Ctrl+C`.\r\n\r\n(I have a Github Action on-push workflow that does a Google App Engine deploy. If I realize a moment late that my push is going to do something dumb at an ops level and so break the deploy [which can't really be CIed the way the build itself can], I have to quickly get to the Github Actions page and cancel the workflow before it's \"too late\" — because once the GAE LB reconfiguration phase of the deploy starts, cancelling the workflow does nothing to stop the remote from carrying that process to completion. I'd love to be able to just interactively watch and/or cancel the triggered action right away! Not always, but often enough that I'd probably have an alias for usage of this wrapper.)\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n`gh pr merge` is *GREAT*, it speeds up my workflow a lot, but I find it very annoying that the commit message of the squashed merge action is the last HEAD commit instead of being the PR name/title. \r\n\r\nOn the website I can change the PR commit message when I'm about to merge it, but using the CLI it's not possible.\r\n\r\n### Proposed solution\r\n\r\nProposed solution would be to have a preview of the commit message directly inside the CLI, with the ability to choose how to format the commit. \r\n\r\nI propose to have 3 different options: \r\n* PR name (the title which is displayed on the website)\r\n* Last commit (the current behaviour)\r\n* Custom message\r\n\r\nI don't know if this is something which is to be configured directly in Github settings, but this will greatly benefit the workflow, since I could have in the repo history a way more useful message than the last commit on the HEAD branch (which might be, as usually happens to me, \"rebasing master\" or \"fix linting\" or something similar, whereas the message should have been \"Add validation logic to Resource (#7)\") \r\n\r\n### Additional context\r\n\r\nI would be more than happy to contribute to this feature myself, I'd simply need some guidance since I'm not an expert in either Github GraphQL API or Golang. "},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nOn some repos I work, there is a single open pull request. In this case I would like to behave `gh pr checkout` to checkout this branch without specifying the number.\r\n\r\nUsually my workflow is like these:\r\n1. `gh pr list` - 💭 _oh only one pr_\r\n2. `gh pr checkout` - 💭  _Oops I forgot the number..._ 🐟 🧠 \r\n3. `gh pr list` - 🤔  let me remember the number\r\n4. `gh pr checkout xx` 🎉 \r\n\r\nSure I exaggerate a bit, but sometimes its like this 😅 \r\n\r\n### Proposed solution\r\n\r\n> How will it benefit CLI and its users?\r\n\r\nIt will save some time when checkout branches\r\n\r\n\r\n### Comment\r\nNot sure if its worth to implement, but at least it would help me a bit :D I maybe could even find the time to open a PR if you think its not that bad of an idea\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nI have existing filter & sorting params I use often, now I want to automate that with `gh` cli, but I found the cli doesn't support all the features there.\r\n\r\nFor example:\r\n* There's no way to list issues without a certain label.\r\n* There's no way to sort issues.\r\n\r\nMy use case is that I have this search query\r\n```\r\nis:pr label:cherrypick-approved -label:cherrypicked is:closed sort:updated-asc \r\n```\r\nWhich searches all PRs I need to cherry pick, but haven't done so, sorted by (roughly) the order they were merged (which avoids some cherry pick conflicts.\r\n\r\n### Proposed solution\r\n\r\nI think the easiest solution (sounds like), is to allow directly allow the same syntax as GitHub UI.\r\n\r\n### Additional context\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWe have the `--draft` flag, but it might be nice to be able to select \"submit as draft\" through the interactive UI. I typically start `gh pr create` through a mapping in Vim, so short of creating another mapping I don't have a way of adding the flag easily. Furthermore, it's not unreasonable for some people to not think about whether to submit as draft until getting to that step (the button is also at the bottom on the Web UI).\r\n\r\n### Proposed solution\r\n\r\nBasically, just add \"Submit as draft\" as a UI option `--draft` has not been passed\r\n"},{"labels":["enhancement"],"text":"_First time around here, so thanks a lot GitHub for this tool! It's super useful!_\r\n\r\n### Describe the feature or problem you’d like to solve\r\n\r\nWhen using `gh pr list` would be helpful to be able to filter by PRs where I am the author.\r\n\r\n### Proposed solution\r\n\r\nAdding a `--mine` CLI flag that filters the PR list based on the user invoking the command.\r\n\r\nThe final command would look like:\r\n\r\n```\r\n$ gh pr list --mine\r\n```\r\n\r\n### Additional context\r\n\r\nI often found the need to recap where are my PRs (i.e. after a vacation or because they get merged by colleagues). I use the web interface, but as there is a CLI, having this information there would prevent a context change.\r\n\r\nThe general workflow is:\r\n\r\n```\r\n[browser] lookup my PRs then\r\n$ gh pr checkout #123\r\n```\r\n---\r\n\r\nIf this feature proposal is accepted I'm available to try implementing it. The main open question I have is how to get author information from within the CLI. As those API calls are authenticated, I guess there is a way to know who am I in the context of the CLI (or through the API).\r\n"},{"labels":["enhancement",null],"text":"### Show URLs in pr status output\r\n\r\nAt the moment `pr view` has a `--web` option to open the PR in the browser, but it would be great to have the URL listed in `pr status` under the issues themselves.\r\n\r\n### Proposed solution\r\n\r\nPut the web url for each PR beneath the title in the output. This makes ctrl-click possible in may terminal emulators copy/paste available for those that don't.\r\n\r\n### Additional context\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe top maintainers on my project are dependabot-preview[bot] and gh-action[bot]. I am opening this issue pre-emptively \r\n\r\nI would like to run the  `gh credits` command in contributor meetings, but with the option to filter for humans-only. TBH, I would like to make the human-only filter the default and make showing bots the option. \r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nI don't think having dependabot being the number 1 contributor in the list is useful to me or others and highlighting humans-only by default is preferred for now, or at least until the bots take over. \r\n\r\nexample of the option in use\r\n```sh\r\ngh credits open-sauced/open-sauced --bots\r\n```\r\nrunning the credits without a flag should return only humans.\r\n```sh\r\ngh credits open-sauced/open-sauced\r\n```\r\nI am new to cobra and a novice at Go, but this is the flag\r\n```go\r\n\tcmd.Flags().BoolVarP(&opts.Bots, \"bots\", \"bts\", false, \"Include bots in the credits\")\r\n```\r\n\r\n### Question\r\nIs this needed? \r\n\r\nI am aware I can get human-only names using grep, but unable to do that and get the cool animation\r\n```sh\r\ngh credits open-sauced/open-sauced | grep -v '\\[bot\\] $'\r\n```\r\n\r\n### Additional context\r\n\r\nscreenshots of what my output looks like today (includes bots).\r\n\r\n![Screen Shot 2020-08-28 at 8 29 14 AM](https://user-images.githubusercontent.com/5713670/91585203-98c0be00-e908-11ea-93dc-7b4e18fccbdd.png)\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'm trying to mass label issues (1000+) in my repos, as I'm splitting my `bug/other` label into separate `bug` and `other` labels, along with others. Currently this is only possible with the web editor, which has issues with mass labeling issues. \r\n\r\n### Proposed solution\r\n\r\nIt would allow for scriptability of mass labeling issues, and make managing issues easier. \r\n\r\n### Additional context\r\n\r\nSomething like a `gh issue list --label bug/other | gh issue edit # would be piped here # --label bug --label other` would be ideal, if not, even just a `gh issue edit --label bug` would be great, as you can do the rest yourself in shell scripts."},{"labels":["enhancement"],"text":"When creating a new repository, users may choose to base it on a repository template.\r\n\r\nPotential usage:\r\n```sh\r\n$ gh repo create myrepo --template owner/some-template\r\n# creates `me/myrepo` based on `owner/some-template`\r\n$ cd myrepo\r\n```\r\n\r\nOriginally suggested in https://github.com/cli/cli/issues/995#issuecomment-662561418 by @josefaidt "},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently, if a PR template exists in the project, that's all that goes into file when hitting `e` to \"edit\" the PR body. It'd be convenient if we could pull in commit bodies, since—especially for single-commit PRs—those bodies already have the explanation we would otherwise want to include in the PR. There is prior art in that I *believe* in the absence of a template, `gh` already does this as the only content. Furthermore, I believe that github's web interface will prepend a single-commit body to templates.\r\n\r\n### Proposed solution\r\n\r\nPerhaps a flag like `--prepend-commits-to-templates` and/or `--append-commits-to-templates`? Or something less verbose.\r\n\r\n### Additional context\r\n\r\nMy company uses a PR template as a checklist. I've been enjoying using `gh pr create` with this, since Vim makes filling out the checklist very easy. However, if I want to include the commit body as context, it's quite a bit of extra work to grab that and include it."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI like to check out PRs setting the branch name to the PR number.\r\n\r\nThis makes it very easy to see which of your branches are other people's checked out PRs, and mass-delete them all.\r\n\r\nIt also allows \"refreshing\" the branch by force-pulling the latest upstream changes (because you know what PR number it came from) without the user needing to type in the PR number again. So `gh pr checkout` when on a PR checkout branch would update the branch to track the new remote ref.\r\n\r\nWould be really useful to have the same feature in `gh`, or at least to allow specifying the branch name to download to.\r\n\r\nMy current implementation: https://github.com/gibfahn/dot/blob/d762e81f277be306b608ce8dc41b4f2218b95429/dotfiles/.config/git/config#L100-L105\r\n\r\n### Proposed solution\r\n\r\n```shell\r\ngh pr checkout --branch=14 14\r\n```\r\n"},{"labels":["enhancement"],"text":"I didn't find a way to authenticate myself without using a browser. If there is another way to do this (I read all the documentation and I didn't find anything) it would be better.\r\n\r\nI think that a good way this can be done is passing as a command line argument, both user and password tokens."},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen using \"gh issue view #\" in either wsl-ubuntu or cmd prompt the stdout dump is overwhelming\r\n\r\n### Proposed solution\r\n\r\nTweak the stdout dump to either be limited to the terminal OR open users default editor (vim/nano etc) or a md program.\r\n\r\n### Additional context\r\n\r\nN/A\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nEvery time I create a PR through the CLI, I always go through the same motion of adding myself as an assignee, my team as a reviewer and assigning several labels most of which are always the same.\r\n\r\n### Proposed solution\r\n\r\nSet default metadata through the configuration file. \r\nI am not sure if those defaults should be applied per repo or globally for all repos.\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nIf this is a common problem, adding this feature would save users some time when creating new PRs.\r\n\r\n### Additional context\r\n\r\nI would love to give this feature a try if you think it should be added to the CLI.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd like to be able to specify an existing issue template when using `gh issue create` or, at a minimum, be able to specify that I want the \"blank\" template.\r\n\r\n### Proposed solution\r\n\r\n* Add a --blank-template flag to indicate that the blank issue template should be used, and/or\r\n* Add a `--template \"[template name]\"` parameter to allow the user to specify which template to use\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nSometimes I want to create the PR not to `master` (e.g. `develop` branch)\r\n\r\n### Proposed solution\r\n\r\nIt will be like:\r\n\r\n```\r\n$ gh pr create --target-branch develop\r\n```\r\n\r\n\r\n"},{"labels":["enhancement"],"text":"Hi,\r\n\r\nIt is a best practice for Git to regularly run \"git gc\" on both local and remote repos. Sometimes this is good to reduce storage space. Please enhance \"gh gc\" to allow the specific repo to be garbage collected.\r\n\r\nThanks,"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nTo support '-label:<labelname>' similar to current UI, in order to exclude label when Listing PRs.\r\n\r\n### Proposed solution\r\n\r\nThe current gh cli doesn't support listing PRs excluding particular label, while GitHub UI does support it. If cli does, I couldn't find help around in docs. This would help in listing all PRs excluding particular label."},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd like to be able to run `gh` cli from within a github action. The only install action I see is to manually download on the linux-based github runner (container) is to curl a hard-coded url, which will be immediately stale and will need it's version updated periodically. Is this the best way? Is it already installed on github runners? Some documentation here would be extremely helpful. Thanks!\r\n\r\n### Proposed solution\r\n\r\nDocumentation on the recommended way to run within github actions would be much appreciated.\r\n\r\n### Additional context\r\n\r\nI've searched google and the available repo docs and github docs to no avail.\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI am trying to automate doing something with the PR just created from the current branch. `gh pr view` will print out the PR info including the URL, which would be fine, except that if your redirect stdout it drops this information. (I understand having a command behave differently in interactive vs scripted contexts, but this seems like a pretty surprising behavior).\r\n\r\n### Proposed solution\r\n\r\nAll information in the interactive view should also be present in the scripted view. In particular `gh pr view` should include the PR number and URL (and/or include the owner and repo name as separate fields). \r\n\r\nHow will it benefit CLI and its users?\r\nThis enables `gh` to be used with other automation that operates on PRs.\r\n\r\n### Additional context\r\n\r\n<details>\r\n<summary>Current behavior</summary>\r\n\r\n```\r\ngcmn@ws 2020-08-14 10:56 ~/git/iree$ gh pr view\r\nMerge main -> google\r\nOpen • GMNGeoffrey wants to merge 14 commits into google from main-to-google\r\n\r\nLabels: cla: yes\r\n\r\n\r\n                                                                              \r\n  • e15008ca Standardize E2E module names. (#2872)                            \r\n  • e5d0f61e Add support for mhlo.log_plus_one on all the backends. (2873)    \r\n  • 177925c4 Mark unanalyzable XLA target as manual (#2881)                   \r\n  • 8204a7a8 Merge google -> main #2877                                       \r\n  • 45d5f5a1 Avoid confusing error message in TF tests (#2879)                \r\n  • 064dd2b7 Merge pull request #2742 from google/benvanik-vm64-flags         \r\n  • c2e59d2e Workaround for issue in #2878.                                   \r\n  • 99ed353d Reworking type conversion to support VM target options.          \r\n  • a8ef9dc3 Supporting new VM TargetOptions type conversion in std->vm.      \r\n  • 0a473431 Plumbing VM TargetOptions through conversion passes.             \r\n  • 87c96f26 Adding IREE::VM::TargetOptions and --iree-vm-target-* flags.     \r\n  • 2ff8b399 Removing unused TypeConversionUtils.                             \r\n  • 3546d64c Merge google -> main (#2876)                                     \r\n  • d13546b2 Remove uses of kind on derived mlir Attribute and Type classes   \r\n  (#2861)                                                                     \r\n\r\n\r\n\r\nView this pull request on GitHub: https://github.com/google/iree/pull/2887\r\n\r\ngcmn@ws 2020-08-14 10:56 ~/git/iree$ gh pr view > /tmp/pr.txt && cat /tmp/pr.txt \r\ntitle:  Merge main -> google\r\nstate:  OPEN\r\nauthor: GMNGeoffrey\r\nlabels: cla: yes\r\nassignees:\r\nreviewers:\r\nprojects:\r\nmilestone:\r\n--\r\n* e15008ca Standardize E2E module names. (#2872)\r\n* e5d0f61e Add support for mhlo.log_plus_one on all the backends. (2873)\r\n* 177925c4 Mark unanalyzable XLA target as manual (#2881)\r\n* 8204a7a8 Merge google -> main #2877\r\n* 45d5f5a1 Avoid confusing error message in TF tests (#2879)\r\n* 064dd2b7 Merge pull request #2742 from google/benvanik-vm64-flags\r\n* c2e59d2e Workaround for issue in #2878.\r\n* 99ed353d Reworking type conversion to support VM target options.\r\n* a8ef9dc3 Supporting new VM TargetOptions type conversion in std->vm.\r\n* 0a473431 Plumbing VM TargetOptions through conversion passes.\r\n* 87c96f26 Adding IREE::VM::TargetOptions and --iree-vm-target-* flags.\r\n* 2ff8b399 Removing unused TypeConversionUtils.\r\n* 3546d64c Merge google -> main (#2876)\r\n* d13546b2 Remove uses of kind on derived mlir Attribute and Type classes (#2861)```\r\n```\r\n</details>\r\n\r\n\r\n<details>\r\n<summary>Proposed behavior</summary>\r\n\r\n```\r\ngcmn@ws 2020-08-14 10:56 ~/git/iree$ gh pr view\r\nMerge main -> google\r\nOpen • GMNGeoffrey wants to merge 14 commits into google from main-to-google\r\n\r\nLabels: cla: yes\r\n\r\n\r\n                                                                              \r\n  • e15008ca Standardize E2E module names. (#2872)                            \r\n  • e5d0f61e Add support for mhlo.log_plus_one on all the backends. (2873)    \r\n  • 177925c4 Mark unanalyzable XLA target as manual (#2881)                   \r\n  • 8204a7a8 Merge google -> main #2877                                       \r\n  • 45d5f5a1 Avoid confusing error message in TF tests (#2879)                \r\n  • 064dd2b7 Merge pull request #2742 from google/benvanik-vm64-flags         \r\n  • c2e59d2e Workaround for issue in #2878.                                   \r\n  • 99ed353d Reworking type conversion to support VM target options.          \r\n  • a8ef9dc3 Supporting new VM TargetOptions type conversion in std->vm.      \r\n  • 0a473431 Plumbing VM TargetOptions through conversion passes.             \r\n  • 87c96f26 Adding IREE::VM::TargetOptions and --iree-vm-target-* flags.     \r\n  • 2ff8b399 Removing unused TypeConversionUtils.                             \r\n  • 3546d64c Merge google -> main (#2876)                                     \r\n  • d13546b2 Remove uses of kind on derived mlir Attribute and Type classes   \r\n  (#2861)                                                                     \r\n\r\n\r\n\r\nView this pull request on GitHub: https://github.com/google/iree/pull/2887\r\n\r\ngcmn@ws 2020-08-14 10:56 ~/git/iree$ gh pr view > /tmp/pr.txt && cat /tmp/pr.txt \r\ntitle:  Merge main -> google\r\nstate:  OPEN\r\nauthor: GMNGeoffrey\r\nlabels: cla: yes\r\nnumber: 2887\r\ncommit_count: 14\r\nurl: https://github.com/google/iree/pull/2887\r\nbase_repo_owner: google\r\nbase_repo: iree\r\nbase_branch: google\r\npr_repo_owner: GMNGeoffrey\r\npr_repo: iree\r\npr_branch: main-to-google\r\nassignees:\r\nreviewers:\r\nprojects:\r\nmilestone:\r\n--\r\n* e15008ca Standardize E2E module names. (#2872)\r\n* e5d0f61e Add support for mhlo.log_plus_one on all the backends. (2873)\r\n* 177925c4 Mark unanalyzable XLA target as manual (#2881)\r\n* 8204a7a8 Merge google -> main #2877\r\n* 45d5f5a1 Avoid confusing error message in TF tests (#2879)\r\n* 064dd2b7 Merge pull request #2742 from google/benvanik-vm64-flags\r\n* c2e59d2e Workaround for issue in #2878.\r\n* 99ed353d Reworking type conversion to support VM target options.\r\n* a8ef9dc3 Supporting new VM TargetOptions type conversion in std->vm.\r\n* 0a473431 Plumbing VM TargetOptions through conversion passes.\r\n* 87c96f26 Adding IREE::VM::TargetOptions and --iree-vm-target-* flags.\r\n* 2ff8b399 Removing unused TypeConversionUtils.\r\n* 3546d64c Merge google -> main (#2876)\r\n* d13546b2 Remove uses of kind on derived mlir Attribute and Type classes (#2861)```\r\n```\r\n</details>\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nRight now if you add metadata to a PR, it doesn't allow you to change it if you did it wrong, you must restart.\r\n\r\n\r\n### Proposed solution\r\n\r\nI think it should just dump you into the menu from before adding metadata that had both \"Submit\" and \"Add metadata\"\r\n\r\n\r\n\r\nLooking at the code, this was clearly an intentional decision to not do this, as [confirmSubmission](https://github.com/cli/cli/blob/trunk/pkg/cmd/pr/shared/title_body_survey.go#L63) has an `allowMetadata` boolean arg.\r\nSo what's the reason for that?\r\nI can understand disallowing preview in browser, as sending over the metadata information probably doesn't work, but that is a separate flag."},{"labels":["enhancement"],"text":"### How to COMMIT or PUSH files?\r\n\r\nPreviously, git commit or git push was used to commit and/or push files to a repo. How to do that with this?\r\n\r\n### Proposed solution\r\n\r\nWell, committing and pushing are like GitHub Basics. Necessary to have those.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nGo1.15 is released, so we can use it on Github Actions.\r\nsetup-go also supports that version.\r\nhttps://github.com/actions/go-versions/blob/2873528ad928d50ba605dc3db4f7ee10dc7198a7/versions-manifest.json#L3\r\n\r\n### Proposed solution\r\n\r\nBump Go version 1.14 to 1.15.\r\nor\r\nUse both versions by matrix build of Actions.\r\n\r\n\r\n### Additional context\r\nIf you're no problem, I will create a PR according to the contribution guide\r\n"},{"labels":[null,"enhancement"],"text":"It is sometimes desirable for a user to see the token `gh` uses for a given host. Right now they'd need to do one of two things:\r\n\r\n- `cat ~/.config/gh/hosts.yml`\r\n- `gh config get -h github.com oauth_token`\r\n\r\nNeither of these is perfect, so this issue covers adding something to `gh auth status` like:\r\n\r\n`✓ Token: *******************`\r\n\r\nand supporting a flag `--show-token`/`-t` that prints the actual token value.\r\n\r\nI'm also imagining nontty support like this:\r\n\r\n`gh auth status -h github.com -t >mytoken.txt`"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd like this flow to work:\r\n```\r\n% git checkout -b mywork master\r\n% <hack>\r\n% git add MyCode.cpp\r\n% git commit -m \"Make My Code better\"\r\n% gh pr create -w\r\n```\r\n\r\nThe problem is that `gh pr create` detects that the branch hasn't been pushed, but instead of doing the push, it seems to try to do something (push?) via https: `Username for 'https://github.com': `  My remote is `git@github.com:...`.\r\n\r\nEverything works fine if I do a `git push` before the `gh pr create -w`.\r\n\r\n### Proposed solution\r\n\r\n`gh pr create` should push the current branch upstream if it doesn't exist or is out of date; and if it's already trying to do that, it should respect the remote and/or github protocol"},{"labels":[null,"enhancement"],"text":"Currently when `gh` detects that no host is configured when trying to do an API call it automatically puts the user in a browser-based authentication flow with the goal of returning them to what they were doing upon success.\r\n\r\nWhile it's got us this far and can often feel smooth, it's been a pain point for a variety of users. This issue covers switching to a more explicit approach where, for commands that require authentication, we stop and print helpful instructions for the ways a user can authenticate.\r\n\r\nThe flow should look something like:\r\n\r\n\r\n```\r\n$ gh pr status\r\n\r\nHi! gh is not yet authenticated with any GitHub hosts.\r\n\r\nFor interactive authentication, please run `gh auth login`. That command will allow you to either log in using\r\na web browser or paste an existing token.\r\n\r\nIf you already have a token to use and don't want to store it anywhere, you can set the GITHUB_TOKEN\r\nenvironment variable.\r\n```\r\n\r\ncc @ampinsk for wording/formatting suggestions."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIn addition to being able to assign labels to issues when you create them, it would be helpful to be able to add/remove labels later on.\r\n\r\ne.g. using the (soon to be obsolete) [ghi](https://github.com/stephencelis/ghi) I can run commands like this:\r\n\r\n```\r\nghi label 999 \"Awesome Label\"\r\n```\r\n\r\n...to label that issue (it will also create the label if it doesn't exist already). Or:\r\n\r\n```\r\nghi label 999 -d \"Awesome Label\"\r\n```\r\n\r\n...to remove that label from the issue.\r\n\r\n### Proposed solution\r\n\r\nA new `label` sub-command of `issue`, to enable commands such as:\r\n\r\n```\r\ngh issue label 999 \"Awesome Label\"\r\ngh issue label 999 --remove \"Awesome Label\"\r\n```\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nI think this will benefit users who apply/remove labels as part of their workflow for dealing with issues. It's not always the case that you know what labels you want on a ticket at the time you create it.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nHub allowed you to checkout a PR and specify a branch-name when checking out. I haven't found the option for it using GitHub cli.\r\n\r\n### Proposed solution\r\n\r\n`gh pr checkout 15 pr/15` => checks out a pr with branch name pr/15 instead of the original name.\r\n\r\n### Additional context\r\n\r\nI'll post an image of hub in a few hours\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI often want to automatically set repos, for example `gh pr create --repo=\"$(git remote get-url @{u})\"` (simplified version).\r\n\r\nThis would make things easier when needing to distinguish between GHE and non-GHE repos, and also just generally when passing repos in a scriptable way."},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nProblem: `gh pr merge` does not respect user timezone set with the TZ environment variable.\r\n\r\n### Proposed solution\r\n\r\nI'd like the GitHub CLI to respect the TZ environment variable and pass timezone information to the GitHub API.\r\n\r\n### Additional context\r\n\r\nhttps://developer.github.com/changes/2014-03-04-timezone-handling-changes/\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like the ability to create new labels. \r\n\r\nI am using `gh` to script populating starter issues on new repositories, and currently it appears one can only assign labels that already exist. Since this is for a new repository, I'd like the ability to also script creating the labels in order to tag the new issues with them. \r\n\r\n### Proposed solution\r\n\r\nNew subcommand like `gh label create [flags]` that works similarly to how it works for issues and pull requests. "},{"labels":[null,"enhancement"],"text":"When running GitHub CLI in context of a GitHub Action, the GITHUB_TOKEN provided by default is an Apps integration token. If gh is eventually available through Codespaces, the situation will be the same. Integration tokens have different abilities than OAuth tokens/PATs, for example:\r\n\r\n- Actions-provided one will always be scoped to a single repository;\r\n- They don't have a concept of OAuth scopes, and thus no `x-oauth-scopes` HTTP response header;\r\n- Server-to-server tokens are not able to access the REST `/user` or the GraphQL `viewer` resource.\r\n\r\nIdeally, most GitHub CLI functionality should continue to work if gh was provided an integration token instead of an OAuth one. In cases when that is not possible, we should provide better error messaging to the user to help them understand what is happening.\r\n\r\nRef. #1413 \r\nRef. https://github.com/cli/cli/issues/1314 https://github.com/cli/cli/issues/1074"},{"labels":["enhancement"],"text":"Neither `--field` nor `--raw-field` accept JSON arrays right now. To pass a JSON array or a nested object, one needs to construct the JSON payload outside of gh and pass it in via `--input`. E.g.\r\n\r\n```sh\r\njq -n '...' | gh api repos/:owner/:repo/deployments --input -\r\n```\r\n\r\nI propose a new array syntax for fields:\r\n```sh\r\n# array of strings\r\n-f labels[]=one labels[]=two\r\n\r\n# empty array\r\n-f required_contexts[]\r\n\r\n# other value types\r\n-F foo[]=true -F bar[]=null\r\n```\r\n\r\nThis syntax would allow passing values of any type, including an empty array, and is fully backwards-compatible. The only theoretical drawback is that it would be impossible to pass a parameter name that includes the literal `[]` characters, but since no API parameters ever have `[]` characters in their name, I think this is not a concern.\r\n\r\n_Originally posted by @mislav in https://github.com/cli/cli/issues/921#issuecomment-654890744_"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like to ask if it makes sense to document that [`AlecAivazis/survey`](https://github.com/AlecAivazis/survey/) has a VimMode, which in turn is exposed when using gh-cli.\r\n\r\n### Proposed solution\r\n\r\nI'm not sure where this would best be documented, be it in the `--help`-text, the core documentation, or the README. Regardless, it may be beneficial to users who prefer vim-like keybidnings to know that there exists such a mode, without having to dig into the source-code to see what package is used. Maybe there are other keybindings worth documenting?\r\n\r\n### Additional context\r\n\r\nThe vim-mode allows a user to press `ESC` in any of the Select-questions to toggle VimMode, allowing the user to navigate using j/k instead of the arrow-keys.\r\n"},{"labels":["enhancement",null,null],"text":"Right now, when creating gists you get this output: \r\n\r\n```\r\n$ gh gist create file.md\r\n- Creating gist...\r\n✓ Created gist\r\n```\r\n\r\nCould we show the file name in this output like so? \r\n\r\n```\r\n$ gh gist create file.md\r\n- Creating gist file.md...\r\n✓ Created gist file.md\r\n```\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIf I have a configured remote named `<remote>` in my Git repository and want to open a PR against that remote, I'd like to able to do\r\n```\r\ngh pr create -R <remote>\r\n```\r\nbut right now I have to do \r\n```\r\ngh pr create -R <github-user-or-org>/<repo-name>\r\n```\r\nwhich can be considerably longer depending on the project.\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nThis will allow them to type less :)\r\n\r\n### Additional context\r\n\r\nThis ideally would work for every `gh` command accepting a `-R` argument, when run from inside a Git repository.\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nA clear and concise description of what the feature or problem is.\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAdd --depth flag to clone. sometimes we want to clone a demo/boilerplate project or something else  to local for testing, it would be nice to be like git.   \r\n\r\n\r\n### Proposed solution\r\n\r\nimproved speed for a large repo, a user who have to clone with a proxy.\r\n\r\n### Additional context\r\n\r\n```gh repo clone  --depth 1 user/repo```"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIf the `pr create` command fails, you will lose all the previous details provided.\r\n\r\n```bash\r\n10:21:05 ~/W/c/web stephenyu-xxxx origin/stephenyu-xxxx ✓\r\n~ gh pr create\r\n\r\nCreating pull request for stephenyu-xxxx into master in xxxx/yyyy\r\n\r\n? Title [Description]\r\n? Body <Received>\r\n? What's next? Submit\r\nTo github.com:xxxx/xxxx.git\r\n ! [rejected]                  HEAD -> stephenyu-xxxx (non-fast-forward)\r\nerror: failed to push some refs to 'git@github.com:xxxx/xxxx.git'\r\nhint: Updates were rejected because the tip of your current branch is behind\r\nhint: its remote counterpart. Integrate the remote changes (e.g.\r\nhint: 'git pull ...') before pushing again.\r\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\r\nexit status 1\r\n```\r\n\r\n### Proposed solution\r\n\r\nIt would be nice if, until the `pr create` is succesful, the details provided are stored temporary so they can be retrieved or perhaps used as subsequent default.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nOften times I have to rebase pull requests and force push to fork'd repos. When using `gh pr checkout` it uses the `https` URL for the repo, which makes it difficult to push to the contributor's fork.\r\n\r\n### Proposed solution\r\n\r\n`gh pr checkout` should set the remote to the SSH URL for maintainers to push to contributor forks.\r\n\r\nExample `.git/config`\r\n\r\n```\r\n# Adjusted\r\n[branch \"patch-1\"]\r\n\tremote = git@github.com:MPParsley/drupal-check.git\r\n\tmerge = refs/heads/patch-1\r\n# Default\r\n[branch \"bug/178\"]\r\n\tremote = https://github.com/joeparsons/drupal-check.git\r\n\tmerge = refs/heads/bug/178\r\n```"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen merging a PR on GitHub.com, I am able to select which email to use for the commit (if my account has several). I am not able to change this when merging using `gh pr merge`, instead, it uses the default email.\r\n\r\n### Proposed solution\r\n\r\nAn ability to select which email address to use for the merge commit like you can on the web interface. Perhaps as a flag? :slightly_smiling_face: \r\n\r\n### Additional context\r\n\r\nN/A"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI just spent 10 minutes crafting an issue using `gh issue create --label 'enhancement' --repo cli/cli`, but submission failed with `GraphQL error: You don't have permission to add labels in this repository.`. This is of course a bit of a user error, I'd never added labels to anything before and wasn't sure whether it needed special permissions (I should have looked it up), but `gh issue create -h` had plenty of examples of using the `--label` flag so I figured I would give it a try. I of course also should have drafted my post elsewhere first, but I imagine I'm not the only one who routinely neglects to take those kinds of precautions.\r\n\r\n### Proposed solution\r\n\r\nVerify whether the user has the permission to create the issue they would like to create, _prior_ to accepting a message body. I imagine this would be needed to verify usages of `--assignee`, `--milestone`, and `--project`. An error message prior to prompts could save a user some frustration. In addition, it might be nice to add some extra documentation to `gh issue create -h` to make it clear which flags require special permissions.\r\n\r\nAlternatively, we could dump a `.swp` file or the like containing a backup of what was submitted on error so that users have some mechanism for recovering what they wrote. But since not all users have their `EDITOR` set to `vim`, settling on a format for this might be difficult.\r\n\r\n### Additional context\r\n\r\n<img width=\"616\" alt=\"Screen Shot 2020-07-28 at 11 07 26 PM\" src=\"https://user-images.githubusercontent.com/3506391/88764554-028f5180-d12a-11ea-887a-88296a51d298.png\">\r\n"},{"labels":["enhancement"],"text":"It's fairly common to wrap commit message bodies to 72 characters, as\r\nthis leads to consistent `git log` browsing for the standard\r\n80-character terminal. I believe this originated from a blog post by Tim\r\nPope\r\n(https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html),\r\nand searching the Web for \"50/72 rule\" will yield lots of results.\r\n\r\nGitHub does not unwrap your text blocks (i.e. groups of text delimited\r\nby 2 or more linebreaks) automatically, as some other Markdown\r\nprocessors do. As such `gh pr create --fill` results in pull request\r\nbodies that look pretty awkward, especially considering it is not\r\nrendered using a monospace font as one is accustomed to in the terminal.\r\nSee this very issue as an example, which I'm writing using `gh issue\r\ncreate` and have purposefully wrapped each paragraph at 72 characters\r\nper line. See the mess of the previous line in particular, which is due\r\nto the tick marks delimiting `gh issue create` spanning a linebreak,\r\ncausing Github to force the two lines into one.\r\n\r\nIt would be pretty nice if `gh pr create --fill` would automatically\r\nunwrap text blocks so that the text flows naturally. It could also\r\nperform this unwrapping when opening the `EDITOR` after being prompted\r\nto type \"`e`\".\r\n"},{"labels":[null,"enhancement"],"text":"After successfully authenticating with GitHub CLI #1413, we could potentially prime the user's git credential cache with a token that can be used for git clone/push/pull operations.\r\n\r\nWhat this solves: users would no longer get _another_ authentication prompt (this time from git, but the user typically doesn't know that) right after they've authenticated gh and ran something like `gh repo clone myrepo`. Furthermore, if the user has 2FA enabled, even though the git prompt asks them for their `github.com` password, their actual password will not work and they will have to generate a Personal Access Token. However, at this point in GitHub CLI we already have a token for them that is valid for git operations.\r\n\r\nHow this would work, roughly:\r\n```sh\r\n$ git config --global credential.helper\r\nosxkeychain\r\n\r\n$ git credential-osxkeychain\r\nusage: git credential-osxkeychain <get|store|erase>\r\n\r\n# getting an existing token\r\n$ git credential-osxkeychain get <<<\"host=github.com\r\nprotocol=https\"\r\n\r\npassword=TOKEN\r\nusername=mislav\r\n\r\n# setting a new token (old one needs to be `erase`d first)\r\n$ git credential-osxkeychain store <<<\"host=github.com\r\nprotocol=https\r\nusername=mislav\r\npassword=NEWTOKEN\"\r\n```\r\n\r\nSee https://git-scm.com/docs/git-credential\r\n\r\nRisks:\r\n- With Git for Windows and its default credential helper, requesting a cached credential could spawn a graphical window asking to log into GitHub if there is no stored credential. We would definitely want to avoid that.\r\n- Depending on OS permissions and the configured credential helper, gh executable might not have the privileges to check or store git credentials.\r\n- There might be no credential helper configured for the user on Linux. In those cases, it would be hard to pick a default for a user, so we should probably bail out in that case, but we could provide the user with some pointers.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like the ability to delete the unmerged branch when closing a pull request using the CLI.\r\n\r\n### Proposed solution\r\n\r\n`gh pr merge` provides a `--delete-branch` [argument](https://cli.github.com/manual/gh_pr_merge) which does exactly what I'm after. I think this option ought to be available for `gh pr close` as well.\r\n\r\n```\r\n  -d, --delete-branch   Delete the local and remote branch after merge (default true)\r\n```"},{"labels":["enhancement"],"text":"The function [HasScopes](https://github.com/cli/cli/blob/trunk/api/client.go#L202) inside `api/client.go` only closes the response body which can be seen at https://github.com/cli/cli/blob/trunk/api/client.go#L215 . The resp.Body.Close() makes the connection available for reuse by others using the same http.Client. It doesn’t close the underlying HTTP or TCP connection. \r\n\r\nAccording to the official Go docs:\r\nhttps://golang.org/pkg/net/http/#Body\r\n```\r\n// The http Client and Transport guarantee that Body is always\r\n// non-nil, even on responses without a body or responses with\r\n// a zero-length body. It is the caller's responsibility to\r\n// close Body. The default HTTP client's Transport may not\r\n// reuse HTTP/1.x \"keep-alive\" TCP connections if the Body is\r\n// not read to completion and closed.\r\n```\r\n\r\nMy proposal to solve the issue: \r\n\r\n- Read until Response is complete (i.e. ioutil.ReadAll(resp.Body) or similar)\r\n- Call Body.Close() "},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nHi everyone!\r\n\r\nToday the `gh repo clone <user/repo>` gets the repository remote from https. I use 2FA Auth so when I need to commit to the repository the `cli` needs the username and password, but the password must pass the token+password and turns harder to use this command instead of `git clone git@github....`.\r\n\r\nChecking the docs flags do not show an option to clone from ssh.\r\n\r\n### Additional context\r\n```sh\r\ngh version 0.11.0 (2020-07-16)\r\nhttps://github.com/cli/cli/releases/tag/v0.11.0\r\n```\r\n\r\n```sh\r\nDISTRIB_DESCRIPTION=\"Linux Mint 19.2 Tina\"\r\n```\r\n"},{"labels":[null,"enhancement"],"text":"Example use:\r\n```\r\ngh auth --host github.com\r\n```\r\n\r\nAs I see it, these would be its broader set of features:\r\n\r\n- triggers authentication for a specific GitHub host and caches credentials to `hosts.yml`\r\n  - supports Device Authorization Flow https://github.com/cli/cli/issues/297#issuecomment-645583049\r\n  - provide ability to paste in an authentication token obtained elsewhere\r\n  - nice-to-have: also configures your git credential handler\r\n  - nice-to-have: also configures your preferred git clone protocol for this host\r\n\r\n- verifies current credentials (either that from GITHUB_TOKEN or from `hosts.yml`)\r\n\r\n- offers way to re-auth https://github.com/cli/cli/issues/627 https://github.com/cli/cli/issues/887\r\n  - offer a way to ask for additional OAuth scopes (for Gist or `gh api` purposes)\r\n\r\n- longer-term: support multiple logged-in accounts to the same host https://github.com/cli/cli/issues/326\r\n\r\nSubcommands:\r\n\r\n- [x] login #1445 \r\n- [x] refresh #1501\r\n- [x] status #1495 \r\n- [x] logout #1491 \r\n\r\n/cc @ampinsk "},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n`gh pr status` displays a summary of multiple prs\r\n\r\n### Proposed solution\r\nAdd some filtering arguments to this command, something like:\r\n```\r\ngh pr status --number <your-pr-number>\r\ngh pr status --branch <your-branch-name>\r\n```\r\nHow will it benefit CLI and its users?\r\n\r\nAbility to get specific information means less output clutter and easy parsing automation\r\n\r\n### Additional context\r\n\r\n~~Add any other context like screenshots or mockups are helpful, if applicable.~~\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n#799 reported a bug that `gh repo view` should open the owner's fork instead of the original parent, but it  the parent was desired behavior:\r\n\r\n> It uses 'the first found repository in the \"upstream\", \"github\", \"origin\" git remote order, resolved to the parent repo if the git remote points to a fork'\r\n\r\nThis FR is for some options so `repo view` from my repo will view **my** repo, like #799 and I would expect. Then I could create my own gh alias to use those switches.\r\n\r\n### Proposed solution\r\n\r\nIdeally I wouldn't have to delete my `upstream` git remote in order for `gh repo view` to open my own repo, so I think a solution would need a way to ignore the  \"upstream\", \"github\", \"origin\" git remote default order.\r\n\r\nI'd a switch like `gh repo view --remote <name>` so I could specify opening remote \"origin\" instead of \"upsteam\".\r\n\r\nIn my mind specifying `--remote` would skip the behavior on redirecting to a parent repo if the selected remote points to a fork. If that redirection is intended, then maybe a separate ``--noparent`` switch is also needed for consistent behavior. \r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be nice to archive repository through CLI. \r\n\r\n### Proposed solution\r\n\r\nThere will be no need to navigate through website which might create distract when web browser is used. Wİthout leaving coding area would be nice to archive repo. \r\n\r\n### Additional context\r\n\r\nNormally, I was thinking to have rename functionality in user base, I mean, instead of renaming current repository, users should  be able to list their repos and rename according to user's wish. For instance \r\n\r\n`gh repo list --user \"mrturkmencom\"`\r\n\r\nIt will return unique ids per repo or name (-of course if user is authenticated already-), then user should be able to rename provided repo, like in given example below. \r\n              \r\n`gh repo --rename mrturkmencom/testrepo mrturkmencom/reamedrepo`\r\n\r\nHowever, it does not completely fit usage of Github CLI from my understanding, since `gh` is used when there is a `.git` folder. \r\n\r\nHence, `rename` command could be used more simple way, \r\n\r\n`gh repo --rename newreponame`\r\n\r\nwhich should archive the repo where `gh` command is executed. \r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be nice to archive repository through CLI. \r\n\r\n### Proposed solution\r\n\r\nThere will be no need to navigate through website which might create distract when web browser is used. Wİthout leaving coding area would be nice to archive repo. \r\n\r\n\r\n\r\n### Additional context\r\n\r\nNormally, I was thinking to have archive functionality in user base, I mean, instead of archiving current repository, users should  be able to list their repos and archive according to user's wish. For instance \r\n\r\n`gh repo list --user \"mrturkmencom\"`\r\n\r\nIt will return unique ids per repo or name, then user should be able to archive provided repo, like in given example below. \r\n              \r\n`gh repo --archive mrturkmencom/testrepo`\r\n\r\nHowever, it does not completely fit usage of Github CLI from my understanding, since `gh` is used when there is a `.git` folder. \r\n\r\nHence, `archive` command could be used more simple way, \r\n\r\n`gh repo archive`\r\n\r\nwhich should archive the repo where `gh` command is executed. \r\n"},{"labels":["enhancement",null],"text":"Right now, the `repo create` command behaves quite differently from other create commands, and that can cause some confusion and unexpected behavior. I'm proposing we redesign it to more closely match `pr create` and `issue create` like so: \r\n\r\n<img width=\"491\" alt=\"Screen Shot 2020-07-20 at 8 19 22 AM\" src=\"https://user-images.githubusercontent.com/10404068/87954834-c12fdf80-ca61-11ea-9e61-e67e7b82b04c.png\">\r\n\r\nThis will: \r\n- Take the user and the directory name and surface that as the autofill on the first prompt (like pr create does with commit info)\r\n- Prompt for description\r\n- Prompt for visibility (as discussed in #1270)\r\n- Prompt for final confirmation (as discussed in #1330, and started in #1357)"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAdd a command for downloading a new release based on your OS and platform.\r\n\r\n### Proposed solution\r\n\r\nIt mostly benefits users who use `gh` in headless envs. So, the command should replace, lets say, (1.1) opening release page in GUI env to retrieve latest release url / (1.2) `curl`ing release page and `grep`ping release url, than (2) running `wget` in headless env to download the latest archive.\r\n\r\n### Additional context\r\n\r\nI thought about `gh update`, but as I wrote above, the command should only download the latest release. `gh release latest`?\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nA clear and concise description of what the feature or problem is.\r\n- Can we have an option for `gh pr diff` to list only filenames/fullpath of files that has changes?\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n- If we list filenames, then it is easy to copy and past it through `search a file` function in IDE\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement"],"text":"Right now, environment variables section takes a lot of space in `gh help` output.\r\n\r\nIdea: `gh help env` (or `man gh-env` on non-Windows systems) could display a separate help page for detailed information. This page could be referenced from other help pages.\r\n\r\nRight now, we only have support for generating `help` entries and man pages from runnable Cobra commands, but maybe we can add some support for extra help pages that are not tied to any command.\r\n\r\nRef. #1370 "},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nFilter out draft PRs in PR list\r\n\r\n### Proposed solution\r\n\r\n\"Ready\" PRs are the ones most people are likely to need to find since they are in a state to be looked at by others."},{"labels":["enhancement"],"text":"Why is it safe to store the GitHub app client secret in version control?\r\n\r\n"},{"labels":["enhancement"],"text":"#1330 proposes to add confirmation to risky commands. It is a nice feature to have, but in order to support proper scriptability, we should support a flag (preferably `-y`, like in most CLIs), to skip asking for confirmation.  \r\nSo for each of the 4 commands mentioned there (and possibly even more in the future), we should add support for the `-y` flag"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently, if there's a pull request that has merge conflicts, `gh` makes it known to the user that the PR isn't mergeable. So,\r\n```bash\r\n$ gh pr merge $merge_conflict_pr_number\r\n! Pull request {merge_conflict_pr_number} has conflicts and isn't mergeable.\r\n```\r\nThis does the job, but it doesn't mention any way of resolving the merge conflicts. I understand that orgs do not wish to manually resolve conflicts for every PR, but sometimes, if it's a small fix, then they/ owner can do so. \r\n\r\n### Proposed solution\r\n\r\nAt minimum, we can provide an online link to the user to fix the PR manually. Or like the web interface does, we can provide a set of steps that are needed to fix the conflicts.\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nAt times, small merge conflicts can be easy to fix by owners themselves. Also, I believe that gives more control to the user as a tool, whether they would like to fix the content themselves.\r\n\r\n### Additional context\r\n\r\nThis is a vague idea of how I would have liked as an user.\r\n```bash\r\n$ gh pr merge 124\r\n! Pull request #124 has conflicts and isn't mergeable.\r\nDo you wish to fix merge conflicts manually? [y/N] yes\r\nThe conflict can be resolved manually at https://github.com/SomeOrg/SomeRepo/pull/124/conflicts \r\n```\r\n\r\nOR\r\n\r\n```bash\r\n$ gh pr merge 124\r\n! Pull request #124 has conflicts and isn't mergeable.\r\nDo you wish to fix merge conflicts manually? [y/N] yes\r\nPlease follow the below mentioned steps\r\n\r\nStep 1: From your project repository, bring in the changes and test.\r\n\r\ngit fetch origin\r\ngit checkout -b dev origin/dev\r\ngit merge devTest\r\n\r\nStep 2: Merge the changes and update on GitHub.\r\n\r\ngit checkout devTest\r\ngit merge --no-ff dev\r\ngit push origin devTest\r\n```\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt is a little bit painful to clean up repositories which are leftovers from past. Like navigating through each of them then removing one by one is really dirty.\r\n\r\n### Proposed solution\r\n\r\nAbility to  archive/delete/rename of repositories  which are exists on user account, of course filtering system would be nice as well, like getting repositories based on user's  request, in terms of creation , last commit  date and more filtering options would be great ! \r\n\r\nHow will it benefit CLI and its users?\r\n\r\nIt is quite handy to manage repositories through CLI without navigating all repos, managing repositories should be time consuming as it is now. \r\n\r\n\r\n\r\n"},{"labels":["enhancement"],"text":"# Describe the feature or problem you’d like to solve\r\nI would like the ability to list releases/assets from a repository. This would be a quality of life improvement over checking for latest releases via the browser and simplify scripting an environment.\r\n\r\n# Proposed solution\r\n## List releases in a repository\r\n```\r\n$ gh repo releases cli/cli\r\n0.4\r\n0.2\r\n0.1\r\n...\r\n```\r\n\r\n## List assets in a release by version or latest\r\n```\r\n$ gh repo releases cli/cli latest\r\ngh_0.10.1_checksums.txt 1.09 KB\r\ngh_0.10.1_linux_386.deb 5.41 MB\r\ngh_0.10.1_linux_386.rpm 5.4 MB\r\n\r\n$ gh repo releases cli/cli 0.2\r\ngh_0.2_checksums.txt 1.09 KB\r\ngh_0.2_checksums.txt 1.09 KB\r\n...\r\n```\r\n\r\nAssets can be listed with their full URL with a flag e.g. `--url`/`-u`.\r\nThis will allow users to click the URLs to open in their browser (if their terminal supports links) or use wget/curl in a script.\r\n```\r\n$ gh repo releases cli/cli latest --url\r\nhttps://github.com/cli/cli/releases/download/v0.10.1/gh_0.10.1_linux_386.deb\r\nhttps://github.com/cli/cli/releases/download/v0.10.1/gh_0.10.1_linux_amd64.deb\r\n...\r\n```\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI want to be able to see all my repos on github. I do `ls` in my local directory to view it's contents. Similarly I'd like to be able to do `gh ls` to view list of repos I own with the account I am currently authenticated in.\r\n\r\n### Proposed solution\r\n\r\nHave \"gh ls\" command, which can be used before doing \"gh repo clone\". It would basically replicate/use an api call to https://github.com/username?tab=repositories\r\n\r\n### Additional context\r\n\r\nPretty self explanatory. Please forgive if this is a n00b question and there is some obvious way to do this already.\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI use gh cli to open PRs in the browser (for more complex PRs where I want a the browser GUI to see changes and to see the PR description I am writing). I do this by skipping filling in the form in the terminal (by leaving each prompt blank), and then go straight to opening the Pr in the browser in the final prompt.\r\n\r\nI learned today that it was possible to pass in the `--web` flag to straightaway open the PR in the browser. However, when I run it I get the following message:\r\n\r\n```bash\r\n$ gh pr create --web\r\ncould not compute title or body defaults: fatal: ambiguous argument 'frontend-v2/master...test': unknown revision or path not in the working tree.\r\nUse '--' to separate paths from revisions, like this:\r\n'git <command> [<revision>...] -- [<file>...]'\r\n```\r\nThen, I tried to use empty strings for the title and the body, but it gave me the same output as above:\r\n\r\n```\r\n$ gh pr create --web --title \"\" --body \"\"\r\ncould not compute title or body defaults: fatal: ambiguous argument 'frontend-v2/master...test': unknown revision or path not in the working tree.\r\nUse '--' to separate paths from revisions, like this:\r\n'git <command> [<revision>...] -- [<file>...]'\r\n```\r\n\r\nHowever, what worked was when I added a title and a body argument\r\n\r\n```\r\n$ gh pr create --web --title \"test\" --body \"test\"\r\nCounting objects: 3, done.\r\nDelta compression using up to 4 threads.\r\nCompressing objects: 100% (3/3), done.\r\n## etc\r\n```\r\n### Proposed solution\r\n\r\nI would like it so that running `gh pr create --web` would automatically open the correct PR link in the browser. Ideally it would also use PULL_REQUEST_TEMPLATE.md in the newly opened page as well.\r\n\r\nThis will benefit users who might not be so familiar with the CLI or not comfortable with using a CLI editor for complex PRs. It would also make using the `--web` flag more intuitive, since it's unclear from the documentation and from the flag itself that the title and body are required for you to use the flag.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd like to be able to edit a PR I already have open. Obviously editing the commits is just a matter of `git push`, but I'd like to be able to edit the PR title and body as well.\r\n\r\n### Potential solutions:\r\n\r\n1. `gh pr edit 1234` gives prompts similar to `gh pr create` but only for the title and body. Users could separately push their branch to update the commits.\r\n2. `gh pr edit` looks for a PR from the current branch and edits it with the current commits and specified title and body.\r\n3. `gh pr edit 1234` pushes commits from the current branch if they match the PR branch and allows editing the title and body. \r\n4. `gh pr create --overwrite` acts exactly like `gh pr create`, but instead of getting an error like `a pull request for branch \"GMNGeoffrey:foo\" into branch \"main\" already exists:` overwrites that PR with the specified configuration.\r\n\r\nI think I like the combination of 1 & 4. It seems weird to have `create` be the only way to edit a PR, but it might also be annoying to have to separately push to the branch or to know a-priori whether a PR already exists. 2 & 3 seem a bit too magic to me.\r\n\r\nThis gives the ability to fixup already-sent PRs without having to close and create a new one or break out of the CLI.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nI use 2FA for GitHub, so the simplest solution for me to push, pull and clone is to use ssh:// urls for git.\r\n\r\n### Proposed solution\r\n\r\n`gh` repo clone attempts https only. I'd like an option to specify that I'd prefer ssh, eg `gh repo clone --ssh owner/repo`\r\n\r\nThe default would remain as-is, so users wouldn't be forced to set up ssh keys, but people who have would have the option."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIn cli \"git help\" returns:\r\n\r\n> [...]\r\nFLAGS\r\n      --help              Show help for command\r\n  -R, --repo OWNER/REPO   Select another repository using the OWNER/REPO format\r\n      --version           Show gh version\r\n[...]\r\n\r\nI want to be shown that -h is the shorthand for --help\r\n\r\n### Proposed solution\r\n\r\nChange that to this:\r\n```\r\n  -h, --help              Show help for command\r\n  -R, --repo OWNER/REPO   Select another repository using the OWNER/REPO format\r\n      --version           Show gh version\r\n```\r\nHow will it benefit CLI and its users?\r\n\r\nBe more clear and show a helpful shorthand version for help.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'm evaluating moving from `hub` where I use the following feature:\r\n```\r\n$ hub pull-request --file somefile.txt\r\n```\r\n```\r\n$ cat somefile.txt\r\nthis_will_be_the_PR_title\r\n\r\nfrom_here_on\r\n_the_pr_body\r\n```\r\n\r\nIn my case, `somefile.txt` is a auto-generated GHF formatted markdown file with lots of data.\r\n\r\nProviding `--title` separately is not the issue, but I can't simply feed multiple `kb` file content into a CLI parameter, I wouldn't know how to do it properly.\r\n\r\nI also checked https://cli.github.com/manual/gh_pr_create and found no evidence that there's some way to provide data from a file.\r\n\r\n### Proposed solution\r\n\r\nAllow `--body` to also be read from a file, e.g. `--file` or `--body-file`, etc.\r\n\r\n### Additional context\r\n\r\nIn my case I also can't use the `-f, --fill` option, as I've multiple commits in a branch I want to create a PR from."},{"labels":["enhancement"],"text":"Right now, we have a few commands that we should ask the user to confirm before proceeding when using in a terminal. \r\n\r\n- gh pr create (when creating fork)\r\n- gh repo create\r\n- gh pr merge\r\n- gh repo fork (?)\r\n\r\n\r\nA first pass at design:\r\n\r\n<img width=\"670\" alt=\"Screen Shot 2020-07-06 at 9 43 43 AM\" src=\"https://user-images.githubusercontent.com/10404068/86618133-3b923700-bf6d-11ea-9f36-04a0222f1b0f.png\">\r\n\r\nLet me know if there are other commands that we should include here!"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like ghrepo to be a public package\r\nhttps://github.com/cli/cli/tree/trunk/internal/ghrepo\r\n\r\nThis way I could reuse it when using the CLI programmatically in go. Right now since its located inside the internal directory its not usable outside it\r\nhttps://golang.org/doc/go1.4#internalpackages\r\n\r\nHere's an example. I want to programmatically create PRs. So my code looks like the following\r\n\r\n```\r\n\tbaseRepository, err := api.GitHubRepo(client, baseRepo)\r\n\r\n\tif err != nil {\r\n\t\treturn errors.WithStack(errors.Wrapf(err, \"There was an error getting repository information.\"))\r\n\t}\r\n\tpr, err := api.CreatePullRequest(client, baseRepository, params)\r\n\tif err != nil {\r\n\t\treturn errors.WithStack(errors.Wrapf(err, \"Failed to create pull request\"))\r\n\t}\r\n```\r\n\r\nSo I want to call `api.GitHubRepo` which requires an argument of type `ghrepo.Interface`. I don't really want to define my own implementation jut by copying the code in ghrepo. I would rather just reuse it."},{"labels":["enhancement",null],"text":"when using `gh issue close` you might mistakenly have typed in the wrong issue number, it would be good if the issue title would be returned after closing it."},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently, when someone merges a Pull Request using the Github UI and the \"Squash and Merge\" option, the commit is signed with the Github GPG key and the PR status changed to merged automatically.\r\n\r\nWould it be possible to sign the squash commit using the user GPG key? \r\n\r\n### Proposed solution\r\n\r\nIt seems to me that Github uses its own GPG key because it wouldn't be a viable solution for the users to upload their private keys to Github, but as Github CLI runs locally it would be possible to use the collaborator key to sign the squashed commit, increasing the overall confidence that the code wasn't tampered with.\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd like to be able to use the gh CLI as a GitHub app.\r\n\r\nWe (Kubeflow) are creating CD automation that will open up PRs to perform routine updates (e.g. point to the latest docker image of a binary).\r\n\r\nWe would like these PRs to be opened up using a GitHub App to authenticate to GitHub. Using a GitHub App seems preferable to using OAuth apps or creating a shared GitHub account. The primary benefit of GitHub apps as they can easily be managed by multiple users. This is highly desirable as the GitHub app should be owned by our GitHub org and administered by an appropriate team and not individual users.\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nOften, I need to create multiple issues that need the same or similar information included in them.\r\n\r\n### Proposed solution\r\nI would like to be able to copy (clone) issues within a given repo.\r\n"},{"labels":["enhancement"],"text":"### Problem\r\nI'm trying to add issues and have them being automatically picked up by the project kanban board.\r\nWhen adding an issue I get an error saying could not add to project: 'project name' not found\r\n\r\nI'm using gh version 0.10.1 on macOS 10.14.6\r\n\r\n### Command\r\nthe command I'm running is this:\r\n`gh issue create -t \"Issue title\" -b \"A lot of great extra info here\" -l enhancement -p projectName`\r\n\r\n### Expected vs actual behavior\r\n\r\nWas expecting it to find my project but it seems not to. Should I specify a path to the project somehow?\r\n\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI type `gh pr checkout` _many_ times a day. Typing `checkout` is long. I have shell aliases for `git checkout`: `gco`. That muscle memory could carry over to `gh pr checkout` too, with the `gh pr co` command alias.\r\n\r\nI'd like to think that this affects many people using `gh pr checkout`: not just me. But I've not done any research to verify that thought.\r\n\r\n### Proposed solution\r\n\r\nAdd an [alias](https://godoc.org/github.com/spf13/cobra#Command) for `co` to the `pr_checkout` command.\r\n\r\nI considered some alternatives, like the existing tab completions. While they do work as intended, `gh pr c<tab><tab>` and `gh pr ch<tab>` take three keypresses, and are different from the \"usual\" `co` abbreviation for `checkout`.\r\n\r\nI've got the change ready to go locally - but as per the contributing guide, I'm submitting an issue first to see if there's an appetite for this!\r\n\r\n### Additional context\r\n\r\nThanks for building the `gh` tool!\r\n"},{"labels":["enhancement"],"text":"Congrats for the tool!\r\n\r\n### Describe the feature or problem you’d like to solve\r\n\r\nWhen I check out a PR for review, I would like to use a different local branch name so I can easily distinguish my PRs from other PRs by using a naming convention\r\n\r\n### Proposed solution\r\n\r\nTo add a --rename-branch flag to gh pr checkout \r\nIf the flag is followed by a name, this value will be used, otherwise pr-[Number] will be used as a default rename target.\r\n\r\nThis will simplify the life of people reviewing a lot of PR by avoiding them to remember the link between branch name & PR number\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAfter creating a pull request I would like to be able to select a reviewer to review my pr from the cli\r\n\r\n### Proposed solution\r\n\r\n`gh pr <pr-no> request-review <user-name>` and an option while creating the pr\r\n\r\nHow will it benefit CLI and its users?\r\nComplete the whole experience of creating a pull request"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n`gh pr diff` does not work like `git diff` - specifically, it does not have a pager.\r\n\r\ndoing `gh pr diff | less` also removes colours so is not a solution.\r\n\r\n### Proposed solution\r\n\r\nmake `gh pr diff` behave like `git diff`, i.e. colourful pagination"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n`gh issue list` only supports filtering by\r\n\r\n- assignee\r\n- author\r\n- label\r\n- state\r\n\r\nbut ideally should also accept free text entry to search inside comments.\r\n\r\n### Proposed solution\r\n\r\nAdd a new flag, e.g.\r\n\r\n`-t, --text string  : Filter by text appearing in comments`\r\n\r\nThis avoids people doing `gh issue create` when there are duplicate issues."},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI have only recently been looking at the `gh api` subcommand, but I was wondering if it would be possible to automatically perform template-replacement for any field beginning with a `:` in it, such that the examples that are provided would run as-is when you're running in the current working directory of a GH repository:\r\n\r\n```\r\nEXAMPLES\r\n  $ gh api repos/:owner/:repo/releases\r\n\r\n  $ gh api graphql -F owner=':owner' -F name=':repo' -f query='\r\n        query($name: String!, $owner: String!) {\r\n                repository(owner: $owner, name: $name) {\r\n                        releases(last: 3) {\r\n                                nodes { tagName }\r\n                        }\r\n                }\r\n        }\r\n  '\r\n\r\n  $ gh api graphql --paginate -f query='\r\n        query($endCursor: String) {\r\n                viewer {\r\n                        repositories(first: 100, after: $endCursor) {\r\n                                nodes { nameWithOwner }\r\n                                pageInfo {\r\n                                        hasNextPage\r\n                                        endCursor\r\n                                }\r\n                        }\r\n                }\r\n        }\r\n  '\r\n```\r\n\r\n\r\n### Proposed solution\r\n\r\nI would love to be able to just `cd` into a repo and run\r\n\r\n```\r\ngh api repos/:owner/:repo/releases\r\n```\r\n\r\nand have it infer that because it's in `klauern/whatever-my-cool-project-is` and fill in the blank for `:owner` and `:repo`.\r\n\r\n\r\n### Additional context\r\n\r\nRight now, it appears that it's just a shim to call out to the API.  While this is cool, I don't know of an easy way to just use the same context that it uses for all of it's other commands.  For instnace, there's no `get org` command that I could insert sub-processes to the command to fill in the blank like this (example):\r\n\r\n```\r\n$ gh api repos/$(gh get owner)/$(gh get repo)/branches/$(gh get current-branch)/protection/required_status_checks\r\n```\r\n\r\nAnd it would be more ideal to be able to just insert `:owner`, `:repo`, `:branch` to have it infer the current context."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAllow the use of `gh pr checkout` for reviews without polluting the local branch namespace.\r\n\r\nI would love to use `gh pr checkout` to help review more complex changes locally (the local tooling is better, and it allows me to better understand the changes in their context by navigating them in my own IDE), but the fact that the tool creates an unneeded local branch makes this more cumbersome as I have to take care to delete the correct branches again afterwards.\r\n\r\n### Proposed solution\r\n\r\n1. Add a `gh pr fetch` sub-command which behaves analogously to `git fetch $repo $refspec`, i.e. it updates the `FETCH_HEAD` but leaves the local state unchanged otherwise.\r\n2. Add a flag to `gh pr checkout` which behaves as `gh pr fetch && git checkout FETCH_HEAD`. For example: `gh pr checkout --fetch-head 42`; updates the `FETCH_HEAD` and switches to it like a git checkout (including updating the local files), but leaves the local state unchanged otherwise. In particular, it doesn't create a new branch.\r\n\r\nThis helps a review workflow using local tools by reducing clutter. Ideally, the new flag on `gh pr checkout` would have a configuration option to make it the default.\r\n\r\n### Additional context\r\n\r\nGerrit's download options have an easily accessible equivalent `git fetch $repo refs/changes/$x/$y/$z && git checkout FETCH_HEAD` that can be copied from the web UI.\r\n\r\nThis feature request describes a potential solution for https://github.com/cli/cli/issues/233"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nList my gists so that I can search and index them\r\n\r\n```bash\r\ngh gists\r\n# or\r\n\r\ngh gist list\r\n```\r\n\r\n### Proposed solution\r\n\r\nIterate the gists and return in a table format so that tools like grep/awk can be used to filter\r\n\r\n### Additional context\r\n\r\nNavigating, filtering, and searching gists can be difficult and tricky with the UI.\r\n\r\nFor instance - filtering on **title**, I have a backup gist of my weekly subscription emails:\r\n\r\n```\r\ngh gists | grep \"Insiders Update\" \r\n```\r\n\r\nSometimes I can't find a gist I created in the past with the UI or search, but I have some hints and could narrow things down by looking into the content or filetype. List could also filter on this.\r\n\r\nFind the Go code that I wrote that filters Kubernetes Pod logs:\r\n\r\n```\r\ngh gists --verbose | grep \"go\" | grep \"logs\" \r\n```\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAt this moment if I want to create a repo with `gh`, I need to run these commands:\r\n\r\n```bash\r\ngit init\r\ngit add --all\r\ngit commit -m \"Init\"\r\ngh repo create\r\n```\r\n\r\nI think `gh` would be much more useful if it could init Git repo in current directory (if no Git repo was found in upper directories).\r\n\r\n### Proposed solution\r\n\r\nThe benefit will be typing less :)\r\n\r\nExample:\r\n\r\n```bash\r\n# Turn on this repo initializing feature, set \"Init\" as initial commit name and create a Github repo:\r\ngh repo create -i -m Init\r\n# Turn on repo initializing feature and create a Github repo (default initial commit name will be used):\r\ngh repo create -i\r\n```"},{"labels":["enhancement"],"text":"The debian package `gitsome` also provides a `gh` command.\r\n\r\nThis is confusing because Ubuntu 20.04 will make the following recommendation to anyone who ignores the GitHub CLI installation instructions:\r\n```bash\r\n$ gh pr checkout 765\r\n\r\nCommand 'gh' not found, but can be installed with:\r\n\r\nsudo apt install gitsome\r\n```\r\n\r\nOf course `gitsome` is the wrong package, so this doesn't work:\r\n```bash\r\n$ sudo apt install gitsome\r\n$ gh pr checkout 765\r\nUsage: gh [OPTIONS] COMMAND [ARGS]...\r\nTry \"gh --help\" for help.\r\n\r\nError: No such command \"pr\".\r\n```\r\n\r\nI'm not sure what the correct solution is here, but I suspect this may be a common user experience for Linux users."},{"labels":["enhancement",null],"text":"I think the `gh repo create` command should default to public. \r\n\r\nI know it's how I work and expect it to work. Maybe it's a function of private repos being a new feature in the \"free user\" feature set. Obviously, if you want something private it would suck if it first went public, but when I use github I don't think \"private\" first.\r\n\r\nSomething to consider."},{"labels":["enhancement"],"text":"First of all, thanks for the `--paginate` flag. Although I'd like to get one array of objects instead. Today I'm using `jq` to do the work:\r\n```bash\r\ngh api --paginate repos/me/my-repo/pulls/5/files | jq 'reduce inputs as $i (.; . += $i)'\r\n```"},{"labels":["enhancement",null,null,null],"text":"### Describe the feature or problem you’d like to solve\r\nSupporting Windows Native Pkg Manager for installing GitHub CLI. \r\n\r\nA clear and concise description of what the feature or problem is.\r\nThis feature allows the users on windows to download and install the package using the window package manager and helps in upgrading the cli using the pkg manager. A cleaner solution to installation and management on Windows.\r\n\r\n### Proposed solution\r\n1. Following the guidelines of [Winget Contribution to Pkgs](https://github.com/microsoft/winget-pkgs)\r\n2. If a new update is available for `gh`, notify the user as well on cli to update using specific commands that is system dependant\r\n\r\nHow will it benefit CLI and its users?\r\nWith windows getting its native package manager like HomeBrew being available for Mac, this makes management and maintaining packages easier. The users will have a faster and cleaner way of upgrading their cli package. The installation process becomes smoother along with hassle free support for developer on windows platform.\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAdd a command to edit existing gist\r\n\r\n_Originally requested by @dardo82 in https://github.com/cli/cli/pull/981#issuecomment-648028957_"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be nice to have the hash function used for the provided checksums on the releases page.\r\n\r\n### Proposed solution\r\n\r\nInclude the hash function on the filename.\r\nFor example: `gh_0.10.0_sha256_checksums.txt`\r\n\r\n\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nFor a particular project I'm working on, a contributor has forked the project working on some feature and asked me to have a look at said new feature. A PR isn't created yet as it is early in the process of development. I would like an easy way with `gh` to be able to checkout the fork locally, adding a new remote and a branch.\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nMight be out of scoped or already answered but this will save some time and effort by consolidating the steps of adding a remote then a branch into one.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI want to fork a repo from the cli, but not to my personal account.\r\n\r\n### Proposed solution\r\n\r\nMaybe a flag like `--org` or `--to`?\r\n"},{"labels":["enhancement"],"text":"I'm currently working on a Python app where I quite simply want to check active issues in the private repo that the project is in, but as I want to publish the package. I obviously can't store secrets in the project.\r\nI've used cli in the past, and the interactive authorization flow is amazing. It would be great to have access to it for Github authentication.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be nice to add:\r\n```\r\ngh issue list -w\r\ngh pr list -w\r\n```\r\nto open the issue / PR list using a browser.\r\n"},{"labels":["enhancement"],"text":"I just used the create repo command and was hoping it would ask me to add a description, kind of like the new issue command asks for more details if you don't supply the cmd-line flags.\r\n\r\nOr... add the ability to \"update\" a repo with sub commands under repo. Again, since I didn't add my -description when creating the repo, I now need to open my browser to add the details."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n\r\n```\r\ngit clone $REPO && cd $(basename $_) # if not already in the repo\r\ngh pr checkout $PR\r\n```\r\n\r\n### Proposed solution\r\n\r\n```bash\r\ngh pr checkout $REPO/pull/$PR\r\n```\r\n\r\nCloning and checking out a PR in one copy-pasteable command"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd love to see a yum repository for installing/updating the GitHub CLI on Linux.\r\n\r\n### Proposed solution\r\n\r\nA yum repo would make installing github-cli on RedHat, Fedora, CentOS, and related Linux distributions easier, and would make it easier to keep the package up to date.\r\n\r\nThanks."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n It takes at least three to five steps to rename the default branch of a repo. Some in the CLI and one that most users would use the GitHub UI for. But as I found the other day a few will find the a less documented CLI path for:\r\n\r\n    gh api -XPATCH \"repos/:owner/:repo\" -f default_branch=\"$newbranch\" >/dev/null\r\n\r\nThis process isn't new. There are blogs and gists all over.\r\n\r\n    https://www.hanselman.com/blog/EasilyRenameYourGitDefaultBranchFromMasterToMain.aspx\r\n    https://gist.github.com/mislav/5ac69530acbe1b4ca909e272caabfdba\r\n\r\nAll of this requires a lot from users: To search docs, download scripts, etc. Doing the right thing should be easier. I know GitHub is already working on a number of these changes internally. This just seems like another easy way to get something out that would have an impact quickly.\r\n\r\n### Proposed solution\r\n\r\nMy proposal is to add a one stop shop for a rename tool. You already have a GitHub account if you're using `gh`. There are a lot of repos out there to update. GitHub wants folks to use their new CLI. Here's a good reason to download it. Make your life easier and the lives of others better.\r\n\r\n### Additional context\r\n\r\nI wanted to implement this to help me get through the repos I use. So I implemented something in my own fork. I used `gh repo update` though that probably isn't what yall would want to name it. I wasn't sure where it would fit. Its not a simple update since it also does alter the local repo vs say just toggle the wiki or alter the description.\r\n\r\nhttps://github.com/metcalfc/github-cli/commit/8b7cd75ab2f93daa53c44f44973b95e71bcb6f4e\r\n\r\n\r\nThere is a asciicast of the workflow here: https://asciinema.org/a/339953"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nBy default repository creation uses `master` as the default branch name. I can set something like this in my `~/.gitconfig`\r\n\r\n```git config --global alias.new '!git init && git symbolic-ref HEAD refs/heads/main'```\r\n\r\nI like the `gh repo create` flow though and would like to have it there. I know GitHub is already working on this issue in other areas and likely work is being discussed upstream in git will as well. Adding a flag in this tool seems to be a pretty quick win now. \r\n\r\n### Proposed solution\r\n\r\nAdd a `-b branch` flag to `repo create` to allow folks to choose a different default branch. In the future there will be `main`, `mainline`, `trunk`, and whatever else comes. But starting today we can have something better then the current default.\r\n\r\n### Additional context\r\n\r\nI wanted to use this for my own workflow so I implemented it in my fork. You can how I did it here: https://github.com/metcalfc/github-cli/commit/2623c4ae9876f9f89590e8f799df397c9e5fee87\r\n\r\nHere is a recording of what the flow could look like. https://asciinema.org/a/339951"},{"labels":["enhancement"],"text":"I appreciate that you want to be less offensive to people by renaming the obviously racist name `master`, but I currently wanted to #368, but I cannot work on this like that. I have a history with alcohol, and every time when I read `trunk` I am reminded of that history (because of the similarity to the word `drunk`) and that really makes me struggle. Please choose a less offensive name like e.g. `main`."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n> Automatically import ```hub``` config file on first run; with(/without) a prompt to the user to confirm the import \r\n\r\nUpon first run, ```gh``` does not attempt to see if a ```hub``` configuration file exists (unless my system is configured strangely, the default ```hub``` config file is ```~/.config/hub```) -- even though ```gh``` already has the code to do a migration. \r\n\r\n### Why? \r\n\r\nAssuming that future users of ```gh``` are existing hub users, adding this would ease setup. \r\n\r\nThe prompt would provide a clear indication to users what is going on and an opportunity to decline the automatic import (should a user wish to maintain two separate auth keys for the two programs... not sure why, but I'm sure there's at least someone out there who does :grin:)\r\n\r\n### Proposed solution\r\n\r\nChange the config parser to do something like (on init):\r\n\r\n```javascript \r\nif ( ! exists(~/.config/gh) && ! exists(~/.config/gh/<files>.yml) )\r\n{\r\n   if ( exists(~/.config/hub) && isvalid(~/.config/hub) )\r\n   {\r\n      oldconfig = parse(~/.config/hub); //Use existing parsing code\r\n      userDecision = promptUser(\"Hub configuration found at ~/.config/hub ... [config data] ... Would you like to import and use this configuration for gh-cli?\");\r\n      if( userDecision == true)\r\n      { \r\n       writeNewConfig(oldconfig);\r\n      }\r\n      else \r\n      { \r\n       writeNewConfig(hubImportDeclined=1); \r\n      }\r\n   }\r\n}\r\n```\r\n\r\n### Additional context\r\n\r\nThe existing code (in master as of this posting - 54e0534) already happily migrates a hub config manually copied from ```~/.config/hub``` to ```~/.config/gh/config.yml``` -- it appears to put the data in ```~/.config/gh/hosts.yml```. The files are *nearly* identical - interestingly, however, after \"migration\" by ```gh``` the config file loses one level of [pickling/serialization?] - no errors are displayed by the parser - see below: \r\n\r\n```\r\n<oauth_token value obfuscated ... obviously ;) >\r\n~/.config/gh/hosts.yml\r\n\r\ngithub.com:\r\n    user: danieldjewell\r\n    oauth_token: 0123456789abcdef0123456789abcdef01234567\r\n    protocol: https\r\n\r\n\r\n~/.config/hub\r\n\r\ngithub.com:\r\n- user: danieldjewell\r\n  oauth_token: 0123456789abcdef0123456789abcdef01234567\r\n  protocol: https\r\n```"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI want to use my ssh-keys within a github repository i set up with gh\r\n\r\n### Proposed solution\r\n\r\n- It would be nice to upload/manage ssh keys with gh\r\n- when one creates a git repository with gh repo create it would be nice to use a available ssh-key, which public key is added to the account, like `gh repo create --key=keyname project/reponame` for example\r\n- the authentication in the github repository has to be set to ssh.\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be nice if `gh` can manage milestones.\r\n\r\n### Proposed solution\r\n\r\nI'm not sure if it is on the roadmap or not. Moreover, I found that it is actually possible to manage milestones using `gh api` as I noted at the bottom.\r\n\r\nEven so, let me drop ideas for discussion as it is still awesome if `gh` natively supports milestones in the future. \r\n\r\nHere are some expected commands that I can imagine:\r\n```shell\r\ngh milestones list # List milestones with 'title', 'due_on' and stats (e.g. 25% complete 3 open 1 closed) just like GitHub.com UI\r\ngh milestones view 1 # Show 'title', 'due date', 'ratio of complete' (e.g. 25% complete) and list all issues and pull requests just like GitHub.com UI\r\ngh milestones create # Require 'title', 'description' and 'due_on' just like GitHub API v3\r\ngh milestones update 1 # Require 'title', 'description' and 'due_on' just like GitHub API v3\r\ngh milestones close 1\r\ngh milestones reopen 1\r\ngh milestones delete 1 # Maybe, we don't support it as same as the repository deletion?\r\n```\r\n\r\nConsidering the consistency with other subcommand interfaces, I guess each command could have both interactive inputs and flag arguments for 'title', 'description' and 'due_on' accordingly.\r\n\r\n### Additional context\r\nIn my case, I use GitHub Milestones for weekly release so that I often interact with Milestones on GitHub.com UI. If `gh` natively supports milestones, I can easily automate the release procedure.\r\n\r\n### JFYI\r\nI explored milestones related APIs via `gh api`. Here is an example of API queries that might help someone who wants to manage milestones via `gh`. \r\n\r\n(Some of them can be a `gh` alias command (Note that it is tested with **gh v0.10.0**). If the shell alias which is being planned to implement can handle a milestone number in an api query, I think it is possible to configure all `gh api` queries in `gh alias` in the future.)\r\n\r\n<details><summary>List/Get milestone(s)</summary>\r\n<p>\r\n\r\n### List milestones (Alternative `gh milestones list`)\r\n(Probably, we need to calculate stats (e.g. 25% complete 3 open 1 closed) by ourselves if we implement it for `gh milestones list`. 🤔 )\r\n\r\n#### REST API v3\r\n```shell\r\n$ gh api repos/:owner/:repo/milestones\r\n```\r\n\r\n#### GraphQL API v4 (`gh milestones` alias)\r\nThis is an example of `gh milestones` alias for listing up milestones. Note that `\"` must be escaped. The whole `gh api` command must be quoted with single quotes too, otherwise `$name` will be considered as a shell variable when you run `gh alias set`.\r\n```shell\r\n$ gh alias set milestones 'api graphql -F owner=\\\":owner\\\" -F name=\\\":repo\\\" -f query=\\\"\r\n    query ListMilestones($name: String!, $owner: String!) {\r\n        repository(owner: $owner, name: $name) {\r\n            milestones(first: 100) {\r\n                nodes {\r\n                    title\r\n                    number\r\n                    description\r\n                    dueOn\r\n                    url\r\n                    state\r\n                    closed\r\n                    closedAt\r\n                    updatedAt\r\n                }\r\n            }\r\n        }\r\n    }\r\n\\\"\r\n'\r\n```\r\n\r\n### Get a milestone (Alternative `gh milestones view 1`)\r\n(Probably, we need to ratio of complete (e.g. 25% complete) by ourselves if we implement it for `gh milestones view 1`. 🤔 )\r\n\r\n#### REST API v3\r\n```shell\r\n$ gh api repos/:owner/:repo/milestones/1\r\n```\r\n\r\n#### GraphQL API v4\r\nv4 is way more flexible than v3 as it can easily list issues and pull requests which are associated with a milestone.\r\n```shell\r\ngh api graphql -F owner=':owner' -F name=':repo' -F number=1 -f query='\r\n    query GetMilestones($name: String!, $owner: String!, $number: Int!) {\r\n        repository(owner: $owner, name: $name) {\r\n            milestone(number: $number) {\r\n                title\r\n                number\r\n                description\r\n                dueOn\r\n                url\r\n                state\r\n                closed\r\n                closedAt\r\n                updatedAt\r\n                issues(first: 100) {\r\n                    nodes {\r\n                        title\r\n                        number\r\n                        url\r\n                        state\r\n                    }\r\n                }\r\n                pullRequests(first: 100) {\r\n                    nodes {\r\n                        title\r\n                        number\r\n                        url\r\n                        state\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n'\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n<details><summary>Create/Update/Close/Reopen/Delete a milestone</summary>\r\n<p>\r\n\r\nAs far as I researched, there is no mutation methods for milestones in GraphQL API v4 yet.\r\n\r\n### Create a milestone (Alternative `gh milestones create`)\r\n`gh api` allows us to pipe a request body via stdin like below!! 🤯\r\n\r\n#### Create a milestone with `gh createMilestone` alias\r\nThe API response provides the details of the created milestone as shown below.\r\n```shell\r\n$ gh alias set createMilestone 'api --method POST repos/:owner/:repo/milestones --input -'\r\n- Adding alias for createMilestone: api --method POST repos/:owner/:repo/milestones --input -\r\n✓ Added alias.\r\n$ cat body.json\r\n{\r\n  \"title\": \"Test Milestone 3\",\r\n  \"state\": \"open\",\r\n  \"description\": \"create milestone with gh\",\r\n  \"due_on\": \"2020-06-16T23:39:01Z\"\r\n}\r\n$ cat body.json | gh createMilestone\r\n{\r\n  \"url\": \"https://api.github.com/repos/doi-t/cli-test/milestones/3\",\r\n  \"html_url\": \"https://github.com/doi-t/cli-test/milestone/3\",\r\n  \"labels_url\": \"https://api.github.com/repos/doi-t/cli-test/milestones/3/labels\",\r\n  \"id\": 5538121,\r\n  \"node_id\": \"MDk6TWlsZXN0b25lNTUzODEyMQ==\",\r\n  \"number\": 3,\r\n  \"title\": \"Test Milestone 3\",\r\n  \"description\": \"create milestone with gh\",\r\n  \"creator\": {\r\n    ......\r\n  },\r\n  \"open_issues\": 0,\r\n  \"closed_issues\": 0,\r\n  \"state\": \"open\",\r\n  \"created_at\": \"2020-06-13T16:12:52Z\",\r\n  \"updated_at\": \"2020-06-13T16:12:52Z\",\r\n  \"due_on\": \"2020-06-16T07:00:00Z\",\r\n  \"closed_at\": null\r\n}\r\n```\r\n\r\n### Update a milestone (Alternative `gh milestones update 1`)\r\n\r\n```shell\r\n$ cat update_body.json\r\n{\r\n  \"title\": \"New Test Milestone 3\",\r\n  \"state\": \"open\",\r\n  \"description\": \"New create milestone with gh\",\r\n  \"due_on\": \"2021-06-14T23:39:01Z\"\r\n}\r\n$ cat update_body.json | gh api --method PATCH repos/:owner/:repo/milestones/3 --input - | jq '{ title: .title, state: .state, description: .description, due_on: .due_on }'\r\n{\r\n  \"title\": \"New Test Milestone 3\",\r\n  \"state\": \"open\",\r\n  \"description\": \"New create milestone with gh\",\r\n  \"due_on\": \"2021-06-14T07:00:00Z\"\r\n}\r\n```\r\n\r\n\r\n### Close a milestone (Alternative `gh milestones close 1`)\r\n```shell\r\n$ cat close_body.json\r\n{\r\n  \"state\": \"closed\"\r\n}\r\n$ cat close_body.json | gh api --method PATCH repos/:owner/:repo/milestones/3 --input - | jq '{ url: .url, state: .state, closed_at: .closed_at }'\r\n{\r\n  \"url\": \"https://api.github.com/repos/doi-t/cli-test/milestones/3\",\r\n  \"state\": \"closed\",\r\n  \"closed_at\": \"2020-06-13T16:14:29Z\"\r\n}\r\n```\r\n\r\n### Reopen a milestone (Alternative `gh milestones reopen 1`)\r\n```shell\r\n$ cat reopen_body.json\r\n{\r\n  \"state\": \"open\"\r\n}\r\n$ cat reopen_body.json | gh api --method PATCH repos/:owner/:repo/milestones/3 --input - | jq '{ url: .url, state: .state, closed_at: .closed_at }'\r\n{\r\n  \"url\": \"https://api.github.com/repos/doi-t/cli-test/milestones/3\",\r\n  \"state\": \"open\",\r\n  \"closed_at\": null\r\n}\r\n```\r\n\r\n### Delete a milestone (Alternative `gh milestones delete 1`)\r\n```shell\r\n$ gh api --method DELETE repos/:owner/:repo/milestones/3\r\n```\r\n\r\n\r\n</p>\r\n</details>\r\n\r\nRef. REST API v3: https://developer.github.com/v3/issues/milestones/\r\nRef. GraphQL API v4: https://developer.github.com/v4/object/milestoneconnection/\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nCurrently, `gh` says:\r\n```\r\n$ gh pr create --draft\r\n\r\nCreating pull request for test-draft-via-alias into trunk in doi-t/cli-test\r\n```\r\n\r\nBut I can't be sure whether it is creating a draft PR or not until I actually create a PR.\r\n\r\n### Proposed solution\r\nHow about adding \"draft\" to the message for the sake of ease when a user set `--draft` flag?\r\n```\r\n$ gh pr create --draft\r\n\r\nCreating draft pull request for test-draft-via-alias into trunk in doi-t/cli-test\r\n```\r\nIt can be done with [isDraft](https://github.com/cli/cli/blob/4d84e4696a80261c9b27781dbefe3c14bfb1a8af/command/pr_create.go#L248) at:\r\nhttps://github.com/cli/cli/blob/4d84e4696a80261c9b27781dbefe3c14bfb1a8af/command/pr_create.go#L196"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nOn GitHub.com UI, merging is blocked when a repository is configured to require approval(s).\r\n\r\nIf I'm an admin of the repository, I can use my administrator privileges like below.\r\n\r\n![Screen Shot 2020-06-06 at 10 21 57](https://user-images.githubusercontent.com/5877477/84569741-b2e80700-adc3-11ea-9079-faab9c70bf6c.png)\r\n\r\nTo merge this PR, the UI shows a checkbox to confirm that I surely know I'm using my administrator privileges.\r\n\r\n![Screen Shot 2020-06-06 at 10 22 07](https://user-images.githubusercontent.com/5877477/84569742-b4193400-adc3-11ea-813f-31d984e4abae.png)\r\n\r\nHowever, the current `gh` (`v0.10.0`) can merge a PR without such confirmation.\r\n\r\n### Proposed solution\r\n\r\nI personally feel `gh` should follow the UI's behaviour because it is safer and better to indicate it explicitly. On the other hand, it makes additional user interaction and could be annoying if `gh` always ask us to check it. 🤔 \r\n\r\nI think there are some options.\r\n\r\n- Keep the current behaviour as `gh`'s spec\r\n    - In this case, `gh` considers that a user surely knows what they are doing with their administrator privileges\r\n    - If it's already discussed and all intentional, please close this issue 🙇 \r\n- Always confirm the privileges\r\n    - Check [BranchProtectionRule](https://developer.github.com/v4/object/branchprotectionrule/) status before merge\r\n    - Probably, it is the first question like below and \"No\" by default\r\n    ```\r\n    $ gh pr merge 636\r\n    ? Use your administrator privileges to merge this pull request? [y/N]\r\n    ```\r\n- Always confirm the privileges as same as above but add `--force` flag to `gh pr merge` to avoid the question (My preference)\r\n    - Bonus: `gh forceMerge 123` provided by `gh alias set forceMerge pr merge --force` can change the default behaviour if a user wants\r\n- https://github.com/cli/cli/issues/1198#issuecomment-644028708: Always reject to merge a pull request unless a user set `--force` option\r\n\r\n### Additional context\r\n\r\nI found this necessity through the following interactions (Especially for handling a bunch of PRs generated by dependabot).\r\n\r\n```\r\n$ gh pr list # List up PR numbers and pick up one of them\r\n$ gh pr merge 123 # Type a PR number which could go wrong by typo\r\n```\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe command `gh repo clone OWNER/REPO` requires me to specify my username.\r\n\r\n### Proposed solution\r\n\r\nThe command `gh repo clone REPO` should default OWNER to the user when the `<repository>` argument doesn't have a `/`. The [`hub`](https://hub.github.com/hub-clone.1.html) cli works this way, and it's convenient.\r\n\r\n### Additional context\r\n\r\nWhen `gh repo clone` was added, https://github.com/cli/cli/issues/333#issuecomment-590566300 asked for the default OWNER to respect git's config, which could override this default if a `gh.owner` value is set. I think that's interesting, but out of scope for this FR.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe settings for a project allow the merge methods associated with the Merge button to be limited to a subset of the three options\r\n\r\n* Allow merge commits\r\n* Allow squash merging\r\n* Allow rebase merging\r\n\r\nWhen merging through `gh pr merge`, you are presented with a list of all three options regardless.\r\n\r\n### Proposed solution\r\n\r\nIt would be nice if the options were limited to only the ones supported by the project. To take it one step further, if only one of the options is supported, the question should be skipped entirely."},{"labels":[null,"enhancement"],"text":"E.g. `gh api --quiet` could perform the API request but not show the JSON response on stdout.\r\n\r\nThis will, of course, not be useful for GET requests, but would be useful for POST/PATCH/DELETE requests initiated from a gh alias, for example, where the user wants to do an operation but does not need to parse the response:\r\n\r\n```sh\r\n$ gh alias set heart 'api -H Accept:application/vnd.github.squirrel-girl-preview+json \\\r\n  repos/:owner/:repo/issues/$1/reactions --raw-field content=heart'\r\n\r\n$ gh heart 123\r\n#=> right now, a noisy JSON response is printed to stdout\r\n```"},{"labels":[null,"enhancement"],"text":"The `api` command promises users access to the entirety of GitHub APIs, but some operations will inevitably require more OAuth scopes than GitHub CLI initializes by default: `repo, read:org`.\r\n\r\nTo work around those cases, users might generate a Personal Access Token and supply that via GITHUB_TOKEN. This approach is appropriate for scripting use, but might be cumbersome for casual use.\r\n\r\nAs a more user-friendly flow, `gh api` might report that an API request failed due to insufficient OAuth scopes and that the user could press Enter to interactively go through authorization flow to request additional scopes for their CLI token stored in `~/.config/gh/hosts.yml`.\r\n\r\nRef. https://github.com/cli/cli/issues/332"},{"labels":[null,"enhancement"],"text":"Right now the caller of `gh api` can _theoretically_ implement pagination by themselves, by such implementation for both REST and GraphQL requests is burdensome and likely error-prone. The `api` command should support a mode in which pagination is handled for them.\r\n\r\nThe `gh api --paginate` invocation should:\r\n\r\n- For REST requests, follow the `next` page link as indicated by response headers until there are no more pages and concatenate all responses;\r\n- For GraphQL requests, parse out the `pageInfo { hasNextPage, endCursor }` section and supply `endCursor` value to the next request until there are no more pages.\r\n\r\nRef. https://github.com/cli/cli/issues/332"},{"labels":["enhancement",null],"text":"When thinking about GHE compatibility #273, we should address the different places where we generate URLs within CLI and ensure that we are respecting the current hostname that might be different from `github.com`.\r\n\r\n1. `repo clone`, `repo fork`, `pr create`, and other commands may generate git remote URLs. These URLs should not be hardcoded to `github.com`, but should respect whathever is the current or selected hostname.\r\n\r\n2. `issue/pr/repo view --web` and other commands may generate URLs for viewing in the browser. Same as above.\r\n\r\nRef. https://github.com/cli/cli/pull/1282"},{"labels":["enhancement",null],"text":"The important thing to address when working towards GHE compatibility #273 is the fact that our current API client will always assume a `github.com` host.\r\n\r\nOff the top of my head, here is what would be involved in making our API client more flexible:\r\n- [x] change `context.AuthToken()` accessor to take a hostname argument and find a token specifically for that hostname (or kick off the authentication flow)\r\n- [x] initialize every `api.Client` instance with a hostname\r\n- [x] in `api.*` functions that make HTTP requests, ensure that REST requests get routed to `https://<hostname>/api/v3/<endpoint>` and GraphQL requests to `https://<hostname>/api/graphql` for non-`github.com` hostnames\r\n- [ ] verify compatibility in `pkg/cmd/api/http.go` as well"},{"labels":["enhancement",null],"text":"Something we need to lift when working towards GHE compatibility #273 is the restriction that all git remotes need to point to `github.com`. Currently, we ignore all remotes that don't: https://github.com/cli/cli/blob/54e0534b1bbc1c66418eb0e5b3eccfb2b1f2d61c/internal/ghrepo/repo.go#L43-L45\r\n\r\nRespecting remotes that don't can give us more flexibility when detecting the 3rd-party hostname and deciding whether to authenticate against it with OAuth. https://github.com/cli/cli/issues/1180"},{"labels":["enhancement",null,null],"text":"As part of offering GHE compatibility #273, we need to make some UI decisions on how to onboard users, i.e. authenticate them against their instance and detect when a local repository is a clone from a GHE host as opposed to from `github.com`.\r\n\r\n1. When in the context of a git repository, we might detect that the main git remote does not point to a `github.com` host, but to `example.org`, for example.\r\n   * How should we assume if `example.org` is a GHE host that we should try authenticating against?\r\n   * How should the authentication flow look like? E.g. `Press Enter to open https://example.org/authorize in your browser`\r\n   * If there are several git remotes of which some point to `github.com` and others to a GHE host, which one should we default to?\r\n\r\n2. When not in the context of a git repository, how should users instruct commands such as `repo create`, `repo clone owner/repo`, `repo fork owner/repo`, and commands such as `issue view 123 -R owner/repo` to operate on their GHE instance instead of `github.com`?\r\n   * In hub, users may set `GITHUB_HOST=example.org` in their environment before invoking a `hub` command, and that solution is fine for programmatic use, but not ideal for casual use.\r\n  * Also in hub, whenever a user has previously authenticated against their GHE host, commands like `hub clone repo` prompt with `Select host:` and `github.com`, `example.org` as options. This works, but I find the interactive prompt sometimes tiresome considering I'm cloning from `github.com` 99% of the time.\r\n\r\n/cc @ampinsk @billygriffin "},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n`help.go` prints a message telling users they can learn more by visiting http://cli.github.com/manual.\r\n\r\n### Proposed solution\r\n\r\nI propose we update the message to use https://cli.github.com/manual. https should always be preferred.\r\n\r\nI'll submit a PR after a 👍 "},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently if you use a Tekton pipeline in an environment in which the container does not have a browser, the user is unable to sign in. \r\n\r\n### Proposed solution\r\n\r\nProvide a way to sign in to the `GH` cli by generating a token.\r\nFor example perhaps have something along the lines `gh --api-token=12345` in which authenticates the user to create repos, orgs, releases etc. \r\n\r\n### Additional context\r\n\r\nTekton is a powerful yet flexible Kubernetes-native open-source framework for creating continuous integration and delivery (CI/CD) systems.\r\n\r\nI currently have a pipeline with a task to run a script to clone a set of repos into an organization. \r\nThe task \r\n```shell\r\nwget https://github.com/cli/cli/releases/download/v0.9.0/gh_0.9.0_linux_amd64.deb\r\nls -la\r\napt install git && dpkg -i gh_0.9.0_linux_amd64.deb\r\ngh version\r\nexport GITHUB_TOKEN=mytoken\r\ngit clone https://github.com/ibm-garage-ref-storefront/storefront-repo-automator\r\ncd storefront-repo-automator \r\npwd\r\nls -la\r\necho \"Github Organization: \" $github_org\r\necho \"Github Initials: \" $github_initials\r\ninitials=$github_initials org=$github_org ./run.sh\r\n```\r\nBut upon running the pipeline, I get an output of:\r\n\r\n```bash\r\nGithub Organization:  storefront-dev\r\nGithub Initials:  ea\r\nCreating repo  dev: storefront-dev/orders-ms-spring-ea\r\nNotice: authentication required\r\nPress Enter to open github.com in your browser... error opening web browser: exec: \"xdg-open\": executable file not found in $PATH\r\nPlease open the following URL manually:\r\nhttps://github.com/login/oauth/authorize?client_id=178c6fc778ccc68e1d6a&redirect_uri=http%3A%2F%2F127.0.0.1%3A38718%2Fcallback&scope=repo+read%3Aorg+gist&state=7ef0f3cc526c3e9f6030\r\nIf you are on a server or other headless system, use this workaround instead:  1. Complete authentication on a GUI system  2. Copy the contents of ~/.config/gh/config.yml to this syste\r\n```\r\n\r\nI cannot open the URL manually because this container does not have a web browser. "},{"labels":["enhancement"],"text":"369973​### Describe the feature or problem you’d like to solve\r\n\r\nA clear and concise description of what the feature or problem is.\r\n\r\n06​### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\n587952645097732​### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen I check a PR using `gh pr checkout (url)`, the checked out branch doesn't have any remote tracking branch associated with it – this association has to be done manually. \r\n\r\n```console\r\n$ gh pr checkout https://github.com/myorg/myproject/pull/123\r\nFrom github.com:myorg/myproject\r\n * [new ref]         refs/pull/123/head -> patch-1\r\nSwitched to branch 'patch-1'\r\n\r\n$ git status\r\nOn branch patch-1\r\nnothing to commit, working tree clean\r\n\r\n$ git remote add somecontrib git@github.com:somecontrib/myproject.git\r\n\r\n$ git fetch somecontrib\r\nFrom github.com:somecontrib/myproject\r\n * [new branch]      patch-1      -> somecontrib/patch-1\r\n\r\n$ git branch --set-upstream-to=somecontrib/patch-1\r\nBranch 'patch-1' set up to track remote branch 'patch-1' from 'somecontrib'.\r\n\r\n$ git status\r\nOn branch patch-1\r\nYour branch is up to date with 'somecontrib/patch-1'.\r\n\r\nnothing to commit, working tree clean\r\n```\r\n\r\nThat's a lot of steps to be able to update my local copy with new commits or to be able to push new commits to the PR.\r\n\r\n### Proposed solution\r\n\r\nWhat I'd like is option like `--with-remote` which automatically finds out the upstream branch, then configures it as remote tracking branch:\r\n\r\n```console\r\n$ gh pr checkout https://github.com/myorg/myproject/pull/123 --with-remote\r\n\r\n$ git status\r\nOn branch patch-1\r\nYour branch is up to date with 'somecontrib/patch-1'.\r\n\r\nnothing to commit, working tree clean\r\n```\r\n\r\nI don't know about gh, but this is already done automatically by `hub` when I checkout a PR whose origin is already in my remotes list. Implementing automatic discovery and configuration of remotes would help people like me who spend a lot of time checking out and collaborating on PRs form people I don't know."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nCLI is used for creating significant changes(issues, PRs, comments) in various repositories.  \r\nThis may lead to inadvertent/unintended permanent changes in repositories and organisations.  \r\nExample: Inadvertently creating test PRs/Issues while testing.\r\n\r\n### Proposed solution\r\nEither:  \r\n1. Add a `--dryrun` flag to commands\r\nOR  \r\n2. Confirm before making significant changes (Like how most linux package managers do)  \r\n\"Do you want to make these changes? (y/n)\"\r\nAnd a `-y` flag, to skip this prompt\r\n\r\n### How will it benefit CLI and its users?\r\nAlthough it may add an extra prompt (which can be skipped via the `-y` flag), this may add a level of security/sureity as to what the intended action is, and what is occurring.\r\n\r\n### Additional context\r\nA few of the recent fake/test PRs/Issues/Comments we have received _may_ have been inadvertent\r\n(Happened with me twice :sweat: Thankfully, was able to convert them into something useful)\r\n\r\nThis would be a potentially huge change, and would require lots of investment in terms of time"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n![image](https://user-images.githubusercontent.com/38415384/84125027-9b262100-aa59-11ea-9f0f-7cb3461df605.png)\r\n\r\n### Proposed solution\r\n\r\nAdd some description to the `deb` package.\r\n\r\n**How will it benefit CLI and its users?**\r\nNothing much but a description will be as standard."},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIssues and PRs have unique numbers across them, and therefore GitHub.com redirects you to the right place even if you put `/issue` in the url when you mean `/pull`\r\n\r\n### Proposed solution\r\n\r\nFor viewing issues or PRs, if you use `gh issue view [number]` with a PR number or `gh pr view [number]` with an issue number, it still allows you to view the issue or PR with that number, even if the object is incorrect. This should also work with `--web`.\r\n\r\n### Additional context\r\n\r\nFor an example of this on GitHub.com, this URL redirects to the PR, even though issues is in the URL: https://github.com/cli/cli/issues/1114\r\n"},{"labels":["enhancement"],"text":"### Would be helpful to get commit hashes included in a PR\r\n\r\nAdd a flag to the `gh pr` request to display the commit hash of all commits which are part of the PR\r\n\r\n"},{"labels":[null,"enhancement"],"text":"a user's aliases should be added to tab completions\n"},{"labels":["enhancement"],"text":"Not sure if this is simply me not understanding something, or me wanting to do something that the CLI isn't able to do, or if this really is an issue.\r\n\r\nMy steps/actions are:\r\nTrying to have a Github organization with a single test user \"foo\"\r\n\r\nI create the Github org -- gets http://github.com/numinds\r\n\r\nI create a test user \"foo\"\r\n\r\nI have a test VM, with a test user \"test\"\r\nFor test, i create the ssh priv/pub key\r\n\r\nOn the test VM, I also install GH to use the cli\r\n-I also have the following\r\n\r\n```\r\ncat /home/test/.config/gh/config.yml\r\nhosts:\r\n    github.com:\r\n        oauth_token: 111111\r\n        user: foo\r\neditor: vi\r\n```\r\n\r\nI'm trying to fork the \r\nhttp://github.com/drupal/drupal to be in the http://github.com/numinds\r\n\r\nI can do:\r\n(in the /home/test/numinds dir)\r\n  gh repo create drupal\r\n\r\nThis creates the http://github.com/numinds/drupal (blank/bare repo)\r\n  as well as the /home/test/numinds/drupal cloned repo in the local dir\r\n\r\nHowever, doing:\r\n gh repo fork https://github.com/drupal/drupal numinds/drupal\r\n\r\ndoesn't work as I'd like it to:\r\nI'm trying to have the drupal repo be http://github.com/numinds/drupal <<<\r\n\r\nInstead, it creates the drupal repo in/under the \"foo\" user >>>> doing something wrong!\r\n\r\nIt generates the repo as:\r\n  https://github.com/t-smith1/drupal\r\n\r\nAny pointers/clues on what I'm missing.\r\n\r\nI have the latest version of GH v0.9.0\r\n\r\nI have everything I can possibly view in the \"member_privileges\" page checked!\r\n  https://github.com/organizations/numinds/settings/member_privileges\r\n\r\nThoughts/Pointers on this.\r\n\r\nThanks\r\n\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nHere are examples of queries that can be performed using GitHub web tools ([here](https://github.com/pulls) and [there](https://github.com/issues)):\r\n- `is:open is:pr author:OWNER`: list all open (pull-requests authored by a given OWNER) on any repository\r\n- `is:open is:pr user:OWNER`: list all open pull-requests on any (repository owned by a given OWNER)\r\n- `is:open is:issue author:OWNER`: list all open (issues authored by a given OWNER) on any repository \r\n- `is:open is:issue user:OWNER` list all open issues on any (repository owned by a given OWNER)\r\n\r\nAt the moment, unless I am mistaken, all `gh` commands operate on a single owner-repository at a time, which makes it impossible to answer the above queries.\r\nAn example use case for such queries would be to populate a dashboard so that developers that simultaneously work on many repositories can get an overview of the pending PRs and issues that require their particular attention."},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIf you open a PR with the `--fill` option on a branch with >1 commit the PR description lists the commits in reverse order. \r\n\r\n**Example**\r\n\r\nContrived output, but with this reflog:\r\n\r\n```console\r\n$ git log\r\ncommit [sha-1] \"Last commit\"\r\ncommit [sha-2] \"Middle commit\"\r\ncommit [sha-3] \"First commit\"\r\n```\r\n\r\nUsing `--fill` will get you a description like this:\r\n\r\n```markdown\r\n- Last commit\r\n- Middle commit\r\n- First commit\r\n```\r\n\r\n### Proposed solution\r\n\r\nI think the description should be formatted in chronological order instead of reversed.\r\n\r\nIn the GitHub UI, the commits are displayed in chronological order and I have to believe formatting the description in chronological order is proper and better UX as well."},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n`gh pr diff` (#962) is awesome! But it produces colorized standard diffs, which aren't super pretty.\r\n\r\n### Proposed solution\r\n\r\nI'd love it if it used my default configuration for `core.pager`, so I could get the nice formatting of [delta](https://github.com/dandavison/delta/) or [diff-so-fancy](https://github.com/so-fancy/diff-so-fancy), as I do when I `git diff`.\r\n\r\n### Additional context\r\n\r\nI'm working around this by passing to my pager explicitly:\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/83772393-f1a1f280-a648-11ea-97ca-9b2d0ea2d025.png)\r\n\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\n\nAt times it is useful to not push the branch, before creating a pull request (especially a draft PR).\n\n### Proposed solution\n\n`gh pr create` should check if the branch already exists at `origin` if it\ndoes, not push to it.\n"},{"labels":["enhancement"],"text":"As far as I know, there is currently no out-of-browser way to\nunsubscribe from an issue or pull request. Typically, git-hub does not support this.\n\nThis functionality would really be helpful because it could then be\ninvoked directly from within an e-mail client.\n"},{"labels":["enhancement"],"text":"I find it a bit cumbersome to have to press 'e' to run the editor.\nIf this behaviour is appreciated as the default one, it would be nice to have a configuration setting that lets one disable it and run the editor systematically.\n\nLikewise, once the edition is odne, it would be nice to able, even if not by default, to not see the menu where you can submit/cancel/run the browser.\n\nIt seems the decision on what to do could be guessed from the state of the edited file: if it has not been modified, then cancel. If it had, then submit, perhaps after having prompted the user but it would be nice of that would be configurable, and same for the option to open a browser which I'd systematically disable inmy own configuration, I think.\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nHaving machine readable output make possible to build automations around gh\r\n\r\n### Proposed solution\r\n\r\nadd --json command line argument\r\n\r\n### Additional context\r\n\r\n```\r\n➜  my_repo git:(master) gh pr status --json\r\n{\r\n  pull_request: [\r\n    { pull_request_number: 234,\r\n     title: \"Title\",\r\n     original_repo: \"username/repo\",\r\n     checks:[...]\r\n    {...}\r\n  ]\r\n}\r\n```\r\n"},{"labels":["enhancement"],"text":"I have not been able so far to submit comments on PRs / issues\nfrom the command-line. It's a pity because it is possible to do it with the git-hub tool.\n\nI realise it is possible to submit comments on PRs through the \"reviewé subcommand, but I am assuming than a comment submitted that way is different from an ordinary comment? And also that would not fix the problem for issues.\n"},{"labels":["enhancement"],"text":"At the moment, when running `gh pr create` or `gh issue create` displays a menu that lets one select the PRLissue template to use and the selected line in this menu is marked by a \">\" sign that appears at the beginning of the line.\n\nThis is already usable by a visually impaired person, but it requires some guess work to figure out how the selected line is marked.\n\nThings would be more intuitive if the cursor could be placed on the selected line because screen readers generally follow the cursor.\n\nIf this behaviour is considered not suitable by default, there could be a configuration setting that enables it but is turned off by default.\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe CLI should have the ability to delete a gh repo from the cli.\r\n\r\n### Proposed solution\r\n\r\nsame existing syntax: `gh repo delete`\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nA clear and concise description of what the feature or problem is.\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement"],"text":"[VSCode now provides GitHub authentication for `git`](https://code.visualstudio.com/updates/v1_45#_github-authentication-for-github-repositories) even in its Terminal. \r\n\r\nIf `gh` had support for that too, we could have a seamless GitHub Authentication when using `gh` inside VSCode, which can mainly benefit [`vscode-dev-containers` ](https://github.com/microsoft/vscode-dev-containers), Visual Studio Codespaces, and therefore, the upcoming GitHub Codespaces."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThis command would allow you to create a markdown badge for a given action. All the user needs to do is give the name of the repo and GitHub username (unless there is another way to do it) and the file for the given action.\r\n\r\n### Proposed solution\r\n\r\nI find myself needing to generate these badges by hand or needing to go through multiple pages to get the web-based generator. This would automate the whole process right from the command line.\r\n\r\n### Additional context\r\n\r\nThis is in reference to the PR #1053 and could be a subcommand to #1055 \r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nHi, all.\r\n\r\n`gh pr create` with adding metadata usually takes some time. It would be better to save cache for the metadata because the metadata (available reviewers, assignees, labels, projects, and milestones) aren't frequently updated.\r\n\r\n### Proposed solution\r\n\r\nSupport features caching for repository metadata and clearing the cache.\r\n\r\n### Additional context\r\n\r\nN/A\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI tried to create a new PR with `gh pr create`. I answered the questions, and then, it asked me to log in with a GitHub window. I failed to provide the correct password, and it tried again with git.\r\nAfter I cancelled, my console (windows terminal + git bash) crashed, but that's not the point here.\r\n\r\n### Proposed solution\r\n\r\nI'd like to be able to try again if I entered the wrong password/ the wrong 2FA code\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be nice if there was an option for the pr command to open the Pull Request on the browser, similar to the option that is given when you are creating the Pull Request.\r\n\r\n### Proposed solution\r\n\r\nIn the spirit of everything else about the CLI, it feels like this would be a small quality of life change that would allow users to quickly get to the PR from the command line rather than navigating there.\r\n\r\n### Additional context\r\n\r\nSomething like `gh pr webview` *(as a programmer I recognize that naming things is hard and won't have my feelings hurt, and would appreciate it if you could come up with something better)*\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nShow the most recent or current status of an action. \r\n\r\n### Proposed solution\r\n\r\nJust another way to interact with GitHub without relying on the web interface.\r\n\r\n### Additional context\r\n\r\nBelow is a possible way it could be displayed to the user:\r\n\r\n```\r\n$ gh actions\r\n\r\n    🟠 Lint\r\n    🟢 Test\r\n    🔴 Release\r\n```\r\n\r\nI would love to do this I just wanted to hear what you guys thought first."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be better to make the output message for `gh repo fork` more clear.\r\n\r\nThe current result message `- Forking...` isn't so clear to descript the result. This is almost the same as the loading message. IMO, it should be a more clear message like `- Forked...`.\r\n\r\n![Screenshot 2020-05-30 at 23 11 19](https://user-images.githubusercontent.com/21333876/83330639-6ed90a80-a2cb-11ea-97d8-eb49a9962466.png)\r\n\r\n### Proposed solution\r\n\r\nUpdate https://github.com/cli/cli/blob/v0.9.0/command/repo.go#L381-L385. If you don't mind, I'm going to take it on.\r\n\r\n### Additional context\r\n\r\nN/A"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen using the CLI, I am able to successfully check out a pull request created by someone else against our owned repo using:\r\n\r\n`gh pr checkout <issue num>`.\r\n\r\nHowever, after making changes, adding, committing, and trying to push, I am being asked to login\r\n\r\n`Username for 'https://github.com/<user>/aws-sdk-ruby.git': `\r\n\r\nIf I already had setup SSH access in my profile, this wouldn't normally be necessary would it?\r\n\r\nThe current work around is to clone the user's repo in a different workspace, check out the branch, make the changes, and push them."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWe'd like for people to be able to create aliases (as in #938) and then share them. And for any that are shared as a public alias, others should easily be able to import and use them in their own gh workflows.\r\n\r\n### Proposed solution\r\n\r\n- `gh alias share [--public] [alias]` would create a public or private gist of one or all of your\r\naliases\r\n- `gh alias import <url> [alias]` would import someone's gist of aliases (one or all) into your alias\r\nconfiguration\r\n\r\n### Questions/Considerations\r\n\r\n1. Is it possible to share or import a subset of aliases? If I have 8 aliases set up in gh, can I share 3 of them because I think those are most likely to be useful to others?\r\n2. If we're going to seed gh with any pre-set aliases, I assume these would be excluded from sharing because other gh users would already have them?\r\n\r\nFollow up to #936 and #939 \r\n"},{"labels":["enhancement"],"text":"I feel [the documentation](https://cli.github.com/manual/gh_pr_create) for `gh pr create --fill` does not do a good job explaining the functionality since it simply states:\r\n```\r\nDo not prompt for title/body and just use commit info\r\n```\r\n\r\nWhat if there are multiple commits? Is the first commit (after current `master`) used, or the last one, or are those combined together somehow?\r\n\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nClosing a PR without a comment seems rude 😅\r\n\r\nNow that I think about it: `gh pr comment` would also be useful.\r\n\r\n`--comment \"my comment\"` may make sense for simple one liners.\r\n`--comment` and than open my code editor of choice would also be useful.\r\n\r\n### Proposed solution\r\n\r\n`gh pr close {<number> | <url> | <branch>} --comment \"superseded by #123\"`\r\n\r\n### Additional context\r\n\r\nN/A\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen using `gh fork` and cloning through the fork it would be useful if the `upstream` is already set etc making it easy to keep the fork in sync.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI have a fork of mine that I've cloned locally. Now I want to add the repo it was forked from as the `upstream` remote.\r\n\r\n### Proposed solution\r\n\r\nMake it easy to add the root repo without knowing the name of the user/org it's under by doing something like `gh repo remote add upstream`\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen performing a squash and merge on a pull request through the web interface, you can edit the commit message and extended description. By default, this is prepopulated with a list of all of the commit messages included in the pull request. I often find myself deleting some of the lines from this section because the additional commits are usually related to feedback brought up during the code review, and would be irrelevant or confusing when viewing in the context of the final commit.\r\n\r\nWhen merging a PR through the CLI, the same commit message is generated as the web interface, but there is no option to edit the commit message.\r\n\r\n### Proposed solution\r\n\r\nOpen the user's default terminal editor to allow the PR maintainer to enter the commit message. By default, prepopulate the editor with the default generated message so the user can easily just save and exit the editor to continue using the current behaviour."},{"labels":["enhancement"],"text":"### Problem\r\n\r\nWhen you run a command and the CLI is filled with varied information, sometimes the text mixes up and doesn't look very consistent and hence it is not very easy to read.\r\n\r\n### Proposed solution\r\n\r\nIMO displaying the information in the form of a table will keep it extremely sorted and easy to read for the user, even when the CLI is filled with text.\r\n\r\n### Additional context\r\n\r\n![Screenshot (445)](https://user-images.githubusercontent.com/44428198/83057618-cf223f00-a074-11ea-9437-94585e6a2ac7.png)\r\n\r\nIn the above screenshot, you can see that the issue topics, their labels and number of days are mixing among each other. This way, it isn't very easy to read.\r\n\r\n"},{"labels":["enhancement",null],"text":"### Problem\r\n\r\nI was unable to find a command to change the branch of the base repository while creating a PR.\r\n\r\n### Proposed solution\r\n\r\nmany times, open-source organizations work on different branches for different stuff, for example, two separate branches for redesign and development. IMO it would be extremely helpful for the devs working with such organizations.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAdd README labels - this would be useful to see. Especially as this is a beta.\r\n\r\n### Proposed solution\r\nWould be good to add some/all of the following labels:\r\n- License - good for open source purposes\r\n- Build status - good to see the health of the master branch (in this case \"trunk\")\r\n- Codecov (https://codecov.io/ if its set up) - good to see what areas of the project are lacking tests\r\n- goreportcard (https://goreportcard.com/) - good to see if there are any common errors in the code base and great for new contributors to pick up easy fixes\r\n\r\n### Additional context\r\nExample of some README Labels: \r\n![Screenshot 2020-05-27 at 14 19 47](https://user-images.githubusercontent.com/42477259/83023837-5fd12e80-a025-11ea-8ee7-0616e2356151.png)\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrent `gh issue list` doesn't have any option/flag to search certain text in title, body or comments.\r\n\r\n### Proposed solution\r\n\r\nIt would be awesome to have this feature which is equivalent to [`in` qualifier](https://help.github.com/en/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-by-the-title-body-or-comments). This feature will help, for example, in case doing issue triage to find out similar/duplicated issues faster.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIn our repo we have configured that branches are automatically deleted when a pull request is merged. The new `gh pr merge` command works great, but it produces a warning:\r\n\r\n```\r\nfailed to delete remote branch <my-branch>: http error, 'https://api.github.com/repos/<my-organization>/<my-repo>/git/refs/heads/my-branch failed (422): 'Reference does not exist'\r\n```\r\n\r\nI assume it's because it tried to delete the remote branch, but couldn't find it because GitHub had already deleted it.\r\n\r\n### Proposed solution\r\n\r\nIt would be nice if the warning wasn't displayed in this case, so that it doesn't look like anything is wrong.\r\n\r\n### Additional context\r\n\r\nJust in case, I've executed the following commands:\r\n\r\n```\r\n$ gh pr create\r\n$ gh pr merge --squash\r\n```"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrent issue view command shows only issue part without other comments.\r\n```\r\ngh issue view <issue_number>\r\n```\r\n\r\n### Proposed solution\r\n\r\nIt would be better to display also comments in terminal. Sometimes, the comment part contains helpful information to understand better the issue itself.\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nGoogle and partners have decided to ship all AARCH64-based ChromeOS devices with a 32-bit ABI. There are millions of these devices out there and many developers use them. Go can be a pain to get working on Chromebooks in developer mode and binaries would be way easier for people to use.\r\n\r\n### Proposed solution\r\n\r\nAdd 32-bit ARMv7l binaries in addition to the 64-bit ones currently available."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAs described in #233 `gh pr checkout` can fail if a local branch with the same name as the pr branch already exists. Currently, the error message for this looks like:\r\n\r\n```bash\r\n$ gh pr checkout 1130   \r\nFrom https://github.com/theislab/scanpy\r\n ! [rejected]          refs/pull/1130/head -> patch-1  (non-fast-forward)\r\nexit status 1\r\n```\r\n\r\nIt took me a bit to figure out that this was failing because there was already a local branch called `patch-1`.\r\n\r\n### Proposed solution\r\n\r\nCould the error message say why it occurred? For example:\r\n\r\n```\r\nCould not create local branch \"patch-1\" since a branch with that name already exists.\r\n```\r\n\r\nThough it would also be nice if a command which could solve this problem was given.\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be nice if there was a way to self-assign an issue on create. Currently you need to provide the GitHub login name.\r\n\r\n### Proposed solution\r\n\r\n```\r\ngh issue create --self-assign -a someone-else --web\r\n```\r\n\r\n... would take me to GitHub to create the issue and it would be assigned to me _and_ `someone-else`."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nShould be great to have a way to find and clone a repo by keyword, for example:\r\n\r\n```\r\ngh search docker --sort stars --top 10\r\n```\r\n\r\nand return a list of the top 10 repos sorted by stars with that keyword, for example for this we should receive this output:\r\n\r\n```\r\nnextcloud/docker\r\n⛴ Docker image of Nextcloud \r\n⭐ 2.2k \r\n--------------------------------------\r\nchef-cookbooks/docker\r\nChef Cookbook for Docker \r\n⭐ 1.2k \r\n--------------------------------------\r\nodoo/docker\r\n⭐ 451\r\n--------------------------------------\r\nphpmyadmin/docker\r\nDocker container for phpMyAdmin\r\n⭐ 422\r\n--------------------------------------\r\nETC\r\n....\r\n```\r\n\r\n### Proposed solution\r\n\r\nThis will help to clone a repo without knowing the actual `[user]/[repo]` from the command line\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like to be able to set the default remote for a project to list pull requests and issues.\r\n\r\n### Proposed solution\r\n\r\nI would add a config option `default_remote` \r\n\r\nThe config option `default_remote` could be the returned with highest score here:\r\nhttps://github.com/cli/cli/blob/619e5b9e58a5d1514ce0968bcdf895fff8a101b4/context/remote.go#L37\r\n\r\n\r\n### Additional context\r\nI work in a project where we make pull requests from branches of origin remote to master branch of origin remote and just occasionally to upstream, so it would be nice to have the ability of setting the default issue and pr branches to origin\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd like `gh repo create` to have the options `--allow_squash_merge`, `--allow_merge_commit`, `--allow_rebase_merge`,  and `--delete_branch_on_merge`.\r\n\r\n### Proposed solution\r\n\r\nAs well as `--enable-issues`, `--homepage`, and so on, the preliminary options would help many users to create a repository.\r\n\r\n### Additional context\r\n\r\nThe implementation would be easy, so I'd like to support or implement this function if this proposal is accepted.\r\n\r\nIf some guys agree with this proposal, please add the 👍 reaction!"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAll of the non-core Git features are hard to Export and Import from and to GitHub\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nThis would provide a canonical way for administrative and sysops users, as well as niche groups I'm in, such as the IndieWeb and other distributed solutions to use GitHub as a backing store, performing our regular backups and ability to restore non Git data.\r\n\r\n### Additional context\r\n\r\n`gh import -p PATH -t TYPE -f file.json [--include-linked] [--repo REPO]`\r\n\r\n`gh export -p PATH -t TYPE -f file.json [--include-linked] [--repo REPO]`\r\n\r\nThe logic behind the path syntax is that it would seem to support singular & multiple entities.\r\n"},{"labels":[null,"enhancement"],"text":"`gh alias delete` lets you delete an alias by name.\r\n\r\nPart of #936 "},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen we are under Linux, we will have to download each time the deb file to update our application packages.\r\n\r\n### Proposed solution\r\n\r\nAdd a source on snap or apt\r\n\r\n"},{"labels":["enhancement"],"text":"A Personal Package Archive (PPA) for Ubuntu would be really nice, allowing us to keep `gh` up-to-date easily with `apt upgrade`. The current setup can be a bit clunky to automate downloading and installation with. This would also facilitate eventual inclusion in distros like Ubuntu."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd like to get an overview of and manage multiple repositories, without having to maintain a list of their names and iterate through them. To answer questions like 'what's in progress', 'gah, what was it I was working on last weekend', and 'hmm what should I pick up now'.\r\n\r\nThere's surely other uses for it, but personally I want this mainly for a single view over multiple personal repos, each to small to justify their own 'proper' project management or GH Project, I just want something lightweight that automatically includes any new repos, like https://github.com/issues.\r\n\r\n### Proposed solution\r\n\r\nSome kind of special value for the `--repo`/`-R` flag, to signify 'all', e.g.\r\n```\r\n$ gh --repo='*' issue list --assignee=OJFord --state=open\r\n```\r\nWould show the same items as:\r\nhttps://github.com/issues?q=is%3Aopen+is%3Aissue+assignee%3A%40OJFord\r\n\r\n(Even better if `@me` worked in the CLI.)"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nMake `gh pr checkout` support [worktree](https://git-scm.com/docs/git-worktree) to checkout the PR in a separate working directory without interrupting on-going work of current working directory.\r\n\r\n### Proposed solution\r\n\r\nMaybe add a flag to `gh pr checkout` to instead checking out the branch inside the current worktree but create a new worktree with that PR checked out at a given location. \r\n\r\nWe can also add a config of the \"directory of PR worktrees\"? So the cli will create a new worktree inside the worktree directory `<worktrees_dir>/pull/<pr-number>`\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIn #740 we enabled `gh pr ready` which marks a draft PR as ready for review. But @mislav brought up the excellent point that when you're marking a PR as ready for review, you're likely also going to want to combine it with adding reviewers.\r\n\r\n### Proposed solution\r\n\r\nAs a followup to #740, we'd like to enable the ability to add reviewers when you're marking a PR as ready for review. I'll defer to @ampinsk on what the design for this should be.\r\n"},{"labels":["enhancement"],"text":"This was brought up by @vilmibm in https://github.com/cli/cli/pull/899#pullrequestreview-414754076\r\n\r\n> I fixed the merge conflict locally and instinctively ran gh pr merge again, still getting the merge conflict error because I hadn't pushed. A future follow-up might be to notice that 1) the PR is question is the \"current\" PR and 2) there are unpushed commits and then reporting that to the user (\"! Unpushed commits for pull request 123\")"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nHello! I'd like to install `gh` CLI on a shared compute resource on which I do not have `sudo` access.\r\n\r\n### Proposed solution\r\n\r\nAdd `gh` CLI to `conda-forge` feedstock for conda package manager: https://conda-forge.org/. This way, users on shared computing resources such as high-performance compute clusters, could install `gh` CLI in their personal environment. `conda` is also a cross-platform package manager that would ease the onboarding/installation process for many users. Then the installation across multiple platforms (windows, mac, linux) could be:\r\n\r\n```\r\nconda install --channel conda-forge gh\r\n```\r\n\r\ne.g. in [this documentation](http://hmmer.org/documentation.html) they show the wide variety of potential installation methods:\r\n\r\n```\r\n  % brew install hmmer               # OS/X, HomeBrew\r\n  % port install hmmer               # OS/X, MacPorts\r\n  % apt install hmmer                # Linux (Ubuntu, Debian...)\r\n  % dnf install hmmer                # Linux (Fedora)\r\n  % yum install hmmer                # Linux (older Fedora)\r\n  % conda install -c bioconda hmmer  # Anaconda\r\n```\r\n\r\n### Additional context\r\n\r\n`conda` is a widely used package in the sciences, and for packages specific to the biological sciences, there is also a separate [bioconda](https://bioconda.github.io/) community in addition to `conda-forge`.\r\n\r\nOne thing I use conda *extensively* for is to manage environments, so that different packages are sandboxed from one another. For example, below are all my conda environments on my laptop. The way I'd use `gh` is to install it into the base environment, but someone may want to sandbox a particular version into a specific environment.\r\n\r\n\r\n<details>\r\n\r\n```\r\n(base)\r\n Tue 19 May - 12:39  ~ \r\n  conda env list\r\n# conda environments:\r\n#\r\n                         /Users/olgabot/anaconda/envs/bam2fastx\r\n                         /Users/olgabot/anaconda/envs/kh-tools\r\n                         /Users/olgabot/anaconda/envs/khmer\r\n                         /Users/olgabot/anaconda/envs/multiqc\r\n                         /Users/olgabot/anaconda/envs/nf-core-tools\r\n                         /Users/olgabot/anaconda/envs/reflow-workflows\r\n                         /Users/olgabot/anaconda/envs/sourmash\r\nbase                  *  /anaconda3\r\nAGB                      /anaconda3/envs/AGB\r\naguamenti                /anaconda3/envs/aguamenti\r\nbam2fasta                /anaconda3/envs/bam2fasta\r\nbam2fastx                /anaconda3/envs/bam2fastx\r\nbioinformagician         /anaconda3/envs/bioinformagician\r\ncellranger               /anaconda3/envs/cellranger\r\ncellxgene                /anaconda3/envs/cellxgene\r\ncookiecutter             /anaconda3/envs/cookiecutter\r\ncrispresso2              /anaconda3/envs/crispresso2\r\ndiamond                  /anaconda3/envs/diamond\r\ndobby                    /anaconda3/envs/dobby\r\neggnog-mapper            /anaconda3/envs/eggnog-mapper\r\neggnog-mapper-py27       /anaconda3/envs/eggnog-mapper-py27\r\nexample-python-package     /anaconda3/envs/example-python-package\r\nexamplepy                /anaconda3/envs/examplepy\r\ngp-saml-gui              /anaconda3/envs/gp-saml-gui\r\nilastik_fun              /anaconda3/envs/ilastik_fun\r\nkh-tools                 /anaconda3/envs/kh-tools\r\nkh-tools--encodings--long-reads     /anaconda3/envs/kh-tools--encodings--long-reads\r\nkh-tools--encodings-compare-cli     /anaconda3/envs/kh-tools--encodings-compare-cli\r\nkh-tools--more-encodings     /anaconda3/envs/kh-tools--more-encodings\r\nkh-tools--pranathi-long-reads     /anaconda3/envs/kh-tools--pranathi-long-reads\r\nkhmer                    /anaconda3/envs/khmer\r\nkhmer-dev                /anaconda3/envs/khmer-dev\r\nkmer-hashing             /anaconda3/envs/kmer-hashing\r\nkraken2                  /anaconda3/envs/kraken2\r\nmain                     /anaconda3/envs/main\r\nmanubot                  /anaconda3/envs/manubot\r\nmultiqc                  /anaconda3/envs/multiqc\r\nnapari                   /anaconda3/envs/napari\r\nnextflow                 /anaconda3/envs/nextflow\r\nnf-core-tools            /anaconda3/envs/nf-core-tools\r\nparallel                 /anaconda3/envs/parallel\r\nparallel-2.7             /anaconda3/envs/parallel-2.7\r\npyviz-tutorial           /anaconda3/envs/pyviz-tutorial\r\nqpcr_processing          /anaconda3/envs/qpcr_processing\r\nquast                    /anaconda3/envs/quast\r\nreflow-workflows         /anaconda3/envs/reflow-workflows\r\nsamtools                 /anaconda3/envs/samtools\r\nsc-tutorial              /anaconda3/envs/sc-tutorial\r\nsodar_core               /anaconda3/envs/sodar_core\r\nsourmash                 /anaconda3/envs/sourmash\r\nsourmash-2.7             /anaconda3/envs/sourmash-2.7\r\nsourmash-dev             /anaconda3/envs/sourmash-dev\r\nsourmash-py364           /anaconda3/envs/sourmash-py364\r\nutilities-env            /anaconda3/envs/utilities-env\r\nyoutube                  /anaconda3/envs/youtube\r\n```\r\n\r\n</details>\r\n\r\n\r\nThank you and have a great day!\r\n"},{"labels":["enhancement"],"text":"It would be handy to be able to create self-assigned issues without knowing the user's github username from shell.\r\n\r\nPerhaps something like `gh issue create --assign-yourself`\r\n\r\nOr as a workaround, perhaps provide a helper to get the user name value from `~/config/gh/config.yml`?"},{"labels":["enhancement"],"text":"Could I reply a issue using Github CLI?"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\n\nI think internationalization is a feature that softwares should add. \n**A little bit of context**: Chinese is the most spoken language in the world (More than 1 billion, most of them are natives), followed by English with a total of 983 million of persons natively and non-natively speaking It, then the third one, Hindu, and then **Spanish** with 527 million  total people (If we count as natively persons, Spanish is the second one, counting only natively persons), surely, some of that 527mil persons spoken english, but It will be more accesible for people if it is translated \n\nI'm not saying that the CLI should only be translated to Spanish, I'm talking about translating It to the main ones, that in my **OPINION** are:\n\n- Spanish\n- Italian\n- French\n- German\n- Chinese (I don't know if gh is available in china)\n- Portuguese\n- Arabic\n\nI will be pleasefully to contribute on translation from **English** to **Spanish**, even helping with the code to change languages.\n\n### Proposed solution\n\nIt will be more accesible to people who does not know English, motivate people to be developers and use programs and CLIs in their own language.\n\nAnd be in more countries... Many more countries.\n\n### Posdata\n\nIf you are not interested on translation and internationalization, just close the issue but know that internationalization is good to softwares and atracts more people.\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n`gh pr view` should (optionally?) list the commits in that PR.\r\n\r\n### Proposed solution\r\n\r\n`gh pr view [--with-commits] [number]` should (optionally, if the flag is specified) print the commits associated with that PR\r\n\r\n### Additional context\r\n\r\nViewing the commits associated with the PR is sometimes useful as it adds more context to what is normally available via this command (the title text and body text of the PR).\r\n"},{"labels":[null,"enhancement",null],"text":"There are many areas where the experience authenticating to GitHub via gh can be improved. These are the problems we'd love to solve, and the scope of this effort may be decreased or increased as we get into working on the solutions:\r\n\r\n1. The machine I'm using with `gh` doesn't have a web browser available, and I need a more elegant way to authenticate that doesn't involve visiting a web browser from the same machine.\r\n2. I'm not able to easily sign out of my GitHub account, and either reauthenticate with the same account or sign into another account.\r\n3. `gh` doesn't handle Git authentication for me. For example, if I use `gh repo clone` and I'm authenticated with GitHub CLI, but not with Git, I'm still going to be prompted to authenticate.\r\n4. The auth token is combined in the same config file that the rest of my settings are in, and is stored in plain text.\r\n\r\nRelated issues:\r\nAuth without browser: https://github.com/cli/cli/issues/297\r\nSign out and back in: https://github.com/cli/cli/issues/887\r\nPrint URL for authentication: https://github.com/cli/cli/issues/612\r\nExpired token with no way to reauth: https://github.com/cli/cli/issues/627\r\nAuth failed because can't access localhost: https://github.com/cli/cli/issues/773\r\nDon't store auth token in plain text: https://github.com/cli/cli/issues/449\r\nMultiple account support (more elegant solution likely not in scope for this issue): https://github.com/cli/cli/issues/326 "},{"labels":["enhancement"],"text":"### It is currently tedious to get a link to the pr from the CLI\r\n\r\nCurrently, it's hard to get the website link for a given `pr` from `gh pr [list,status]` commands. It currently requires two steps - 1. Getting the pr number from `gh pr [list, status]` and 2. another command `gh pr view #` to actually get the link.\r\n\r\n### Proposed solution\r\n\r\nIn the `gh pr [list,status]` view for the pr, it will be helpful to quickly see the website link as well to make it easy to view on the web or share.\r\n"},{"labels":["enhancement"],"text":"This would improve scriptability\r\n\r\nCommand syntax:\r\n\r\n```sh\r\ngh repo list <username> [--public, --private]\r\n```\r\n\r\nExamples:\r\n\r\nList all repositories of authenticated user on standard output\r\n\r\n> assuming my username is `foo`\r\n\r\n```sh\r\ngh repo list\r\n```\r\n\r\nwould output\r\n\r\n```sh\r\nfoo/repo1\r\nfoo/repo2\r\nfoo/privaterepo1\r\n```\r\n\r\nFlags to filter based on publicity\r\n\r\n```sh\r\ngh repo list --public\r\n```\r\n\r\n```sh\r\ngh repo list --private\r\n```\r\n\r\nList repositories of other users\r\n\r\n```sh\r\ngh repo list bar\r\n```\r\n\r\n> If I have access to this account (like an org), then output both public and private repos\r\n"},{"labels":["enhancement"],"text":"If my username is `foo`\r\n\r\nAnd I execute:\r\n\r\n```sh\r\ngh repo clone bar\r\n```\r\n\r\nI would like this to be interpreted as\r\n\r\n```sh\r\ngh repo clone foo/bar\r\n```"},{"labels":["enhancement"],"text":"I would like to know about the **delete repository** from CLI. Is there any way to release this feature?  I don't found anything about it on the repository issue."},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI want to recommend that the config file be split it to two files. Right now since only 2 options exist for for the config its not a problem but to future proof it I would recommend for the current structure of putting the config in ```~/config/gh/config.yml``` is that to follow something like how aws cli does it by having the credentials stored in a separate file and the config parameters on their own. \r\n\r\nThis may also allow the use of multiple accounts since the credentials would be all in one place. #326 \r\n### Proposed solution\r\n\r\nI propose that ```~/config/gh/credentials``` file be created for credentials and ```~/config/gh/config.yml``` file to stay as is just with no credentials.\r\n\r\nThis can be most beneficial for people that use dotfiles or other methods of syncing config files cross computers or as backups. \r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nHello, as a user, I would like to redirect the output of an issue or PR to a file or other program so that I can use the contents to auto-generate some release notes.\r\n\r\nIf I do\r\n```\r\ngh issue view ### > blah.md\r\n```\r\nThe output looks sorta like this (I slightly modified the output, so if some stuff looks strange, don't worry about it.)\r\n```md\r\nTitle\r\nOpen • gvela024 opened about 28 days ago • 2 comments\r\n\r\nAssignees: gvela024\r\nLabels: labels\r\nMilestone: milestone\r\n\r\n\r\n\u001b[38;5;39;1m\u001b[0m\u001b[38;5;39;1m\u001b[0m  \u001b[38;5;39;1m## \u001b[0m\u001b[38;5;39;1mOverview\u001b...\r\n```\r\nAs you can see above, the `\u001b[38;5;39;1m` nonsense is my problem. I think either `cobra` or `glamour` is making the characters special for bash...I'm kinda ignorant in the ways of bash and Go so be gentle :pray:.\r\n\r\n### Proposed solution\r\nGimme the plain text. It'd be cool if I could do\r\n```\r\ngh issue view ### --plain-text\r\n```\r\nor similar.\r\n\r\nGoing through it looks like the `out` IO writer could be changed globally to do plain text instead of using the pretty printers. Or, could make special cases for all the prints which feels wrong.\r\n\r\nHow will it benefit CLI and its users?\r\nAs mentioned above, I want to take some of the issues' text and use it to generate release notes for my project.\r\n\r\n### Additional context\r\nNone\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\nI kinda tried to see if I could change the thing that wrote commands based on another arg, but it looks like args are handled by sub commands. So it seems like the additional arg would have to be handled by anything that prints. I went down a bit of a rabbit hole due to being unfamiliar with Go.\r\n"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThere is no good way currently to view outdated GitHub Actions Dependencies. In npm this can be done with `npm outdated`. It would be awesome if there was a way to do this in the GitHub CLI to easily view which GitHub Actions Dependencies are outdated and potentially even update them automatically.\r\n\r\n### Proposed solution\r\n\r\nPotentially something like: `gh actions outdated`. This would then look inside each workflow and find all the actions that are outdated and list them. Similar to how `npm outdated` works.\r\n\r\nI'm unsure if the syntax `gh actions outdated` makes sense, and there should probably be more discussion around the best command for this."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen I open a pull request using fill for content, I'd like the fill content to be _combined_ with the template content for a pull request. This would mirror the behavior of `hub`. It allows me to get the unique content (my commit message) into the editor as well as the template content that I can adjust to suit.\r\n\r\n### Proposed solution\r\n\r\nThe behavior of `hub` could be mirrored, simply place the fill content above the template content and open the $EDITOR.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n\"Base\" repository resolution (in other words, the specific `owner/repo` remote on GitHub that should be consulted by `gh` for pull requests, issues, etc) is tricky and any attempt to it in an automated, clever way will inevitably fail for a nontrivial number of users. It's also a very slow process which we currently perform on almost every command.\r\n\r\nWe some open issues around this now: #317 #458 and have closed others as dupes.\r\n\r\nThis issue covers explicitly confirming which base repository the user wants to associate with a given local repository be default.\r\n\r\n### Proposed solution\r\n\r\nThis issue proposes a flow of:\r\n\r\n```\r\n# first time running in new, local repository\r\n$ gh pr list\r\n...Fetching repository network.\r\n? Which remote repository would you like to query?\r\n   vilmibm/coolthing (fork)\r\n   original/coolthing (parent)\r\n   mislav/coolthing (sibling fork)\r\n>  other\r\n? Which other remote repository would you like to query?  probablycorey/coolthing\r\n\r\n...Setting probablycorey/coolthing as default base repository.\r\n\r\n<PR LIST>\r\n\r\n$ gh pr list\r\n\r\n<PR LIST>\r\n```\r\n\r\nIf we see a `--repo` flag or detect that we're not running interactively, we will not perform this prompt.\r\n\r\n### Additional context\r\n\r\nMislav and I have discussed this issue at length a few times and have not come up with a better solution than prompt-on-first-use for base repository  setting.\r\n\r\n#### Open questions\r\n\r\n- How should a user unset this? via `git config` or a command we provide?\r\n- Should we tell them how to unset it when we set it?\r\n- Is there value in the `other` option as shown above?\r\n- How can the wording be improved? I'm not thrilled with my first pass."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI followed the instructions in `source.md` to build from source. When adding `~/.githubcli/bin` to $PATH, I needed to add the line to `~/.profile` instead of `~/.bash_profile` as instructed, since I'm on Ubuntu. Otherwise I'm not able to run `gh` directly from command line.\r\n\r\n### Proposed solution\r\n\r\nI suggest that `source.md` be amended to include instructions for bash users on Ubuntu.\r\n\r\n```sh\r\necho 'export PATH=\"$HOME/.githubcli/bin:$PATH\"' >> ~/.profile\r\n```\r\n\r\nI'm not sure adding such instruction would be redundant or not. However, I believe doing so will make things clearer for Ubuntu users. Please kindly comment.\r\n\r\n### Additional context\r\n\r\nOS: Ubuntu 20.04 LTS\r\nShell: GNU bash 5.0.16\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nbe able to create deployment from CLI\r\n\r\n### Proposed solution\r\n\r\nCurrently we have to manually use curl to call API to trigger a deployment\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI don't want to go to the web pages. One of the thing I often do is checking latest actions, and the latest failed action's log. \r\n\r\n### Proposed solution\r\n\r\nSomething like\r\n\r\n```\r\ngh action list\r\n# display list of actions\r\ngh action view 348\r\n# display logs for this specific run\r\n```\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\n\nIt's hard to see the changes from a given pull request. You can produce a diff with git but it can\ntake some trial and error (and it's easy to accidentally diff against the wrong HEAD). github.com\ncleanly solves this problem and we have all the same context to solve it in the CLI. Having this\nwill make code review easier from the command line.\n\n### Proposed solution\n\n```\n$ gh pr diff     # produce diff for current branch's PR or a diff of the current branch against what we would open a pr against by default in pr create\n$ gh pr diff 123 # produce diff for specific PR\n```\n\nIn both cases we'd form the correct call to `git diff` and hand off to that (potentially dropping\ninto a pager).\n\n### Open Questions\n\ncc @ampinsk\n\n- In the above example, should it produce the hypothetical diff for a branch not yet associated with\n  a pull request? or just error?\n- I couldn't think of any options this would need to take...am I missing anything?\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd love it if `gh` were able to create releases. I'm currently using a tool called [gothub](https://github.com/itchio/gothub) to do this, so an integration with `cli` would reduce the number of CLI tools I'd need to depend on to just one.\r\n\r\n### Proposed solution\r\n\r\nAdd the following commands to `gh` (note that these are just examples):\r\n\r\nCreate a release from a tag. If the tag doesn't exist, we can prompt the user to see if they want to create one:\r\n\r\n`gh release create {tag}`\r\n\r\nOptions:\r\n\r\n```\r\n-t, --title title of the release\r\n-b, --body description of the release\r\n-w, --web open the browser to create the release\r\n```\r\n\r\nAttach a file to the release (requires a release to be created first):\r\n\r\n`gh release upload {tag} {file}`\r\n\r\nOptions:\r\n\r\n```\r\n-t, --title title of the file. if blank will be set to {file}\r\n-p, --progress show a progress indicator during file upload\r\n```\r\n\r\nDelete a release:\r\n\r\n`gh release delete {tag}`\r\n\r\nList releases:\r\n\r\n`gh release list`\r\n\r\n### Additional context\r\n\r\nI'm very comfortable with Golang, so if the team is OK with the API I've outlined above I'd be happy to implement this.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently, if you run `gh credits` without `repository` argument it would use `cli/cli` repository. This is confusing and isn't aligned with other commands that use repository of the current directory by default.\r\n\r\n### Proposed solution\r\n\r\n`gh credits` without `repository` argument should use the current repository instead of `cli/cli`.\r\n"},{"labels":["enhancement"],"text":"### Describe the bug\n\nCreate an issue but add non-existing label with `-l` option.  The issue will\nnot be submitted and the issue text will be lost.\n\n### Steps to reproduce the behavior\n\n1. `gh -l non-existing-label -t \"Test issue\"\n2. The issue is not submitted and the issue text is deleted from the hard drive.\n\n### Expected vs actual behavior\n\nDo not delete the issue if it is not submitted!\n\n### Logs\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be great to be able to filter the PRs based on author and review status in the terminal itself. This is something I need to open my browser for.\r\n\r\n### Proposed solution\r\n\r\nIt would be great to be able to filter the PRs based on author and review status in the terminal itself using a flag `--author` and `--review-status or --reviews`\r\n\r\n### Additional context\r\n\r\nThese are currently supported options:\r\n<img width=\"584\" alt=\"Screenshot 2020-05-12 at 10 10 52\" src=\"https://user-images.githubusercontent.com/19823356/81639212-f05e1b00-9438-11ea-9290-3d91040d7275.png\">\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be helpful to have another command under the issue commands to edit the description on an already open issue\r\n\r\n### Proposed solution\r\n\r\n```console\r\n$ gh issue edit 621\r\n... editor opens, contains issue body, on quit upload new issue body ...\r\n```"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe CLI clutters my local repo with branches from past invocations of `gh pr`.\r\n\r\nFor example, imagine working on a project with a pull request #<!-- -->123 which corresponds to a branch named *add-some-feature*. Running `gh pr checkout 123` will add a branch named *add-some-feature* to the local repo. When the branch is changed to something else (say, *master*), the *add-some-feature* branch will remain.\r\n\r\nThese can add up over time.\r\n\r\n### Proposed solution\r\n\r\nI would like if `gh pr` checked out the changes in a *detached HEAD* state. That way, when the branch is changed to something else (again, say, *master*) no branch would be left behind."},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI prefer when commands have man pages, even if it's mostly telling you to run with `--help`.\r\n\r\n### Proposed solution\r\n\r\nI have a branch to add a basic man page and include it in builds [here](https://github.com/cli/cli/compare/trunk...mtfurlan:docs/manpage).\r\nThe contributing guidelines suggest opening an issue before a PR, so here we are.\r\n\r\nI based this off how [Exoscale cli](https://github.com/exoscale/cli) packages manpages as they also use goreleaser.\r\nIt would be cool if gh also generates manpages from the same place the help flag and web documentation come from, but I don't know enough go to help with that at this point in time.\r\n"},{"labels":["enhancement"],"text":"If that's already exists, please let me know . "},{"labels":["enhancement"],"text":"When we're executing the command to create a repository, the following arguments are:\r\n\r\n`gh repo create name`\r\n\r\nAfter that the repository will be created on Github, however, when there is a remote track configured, I presume that CLI could print a message to the user showing that there is a remote setting. Instead it;\r\n\r\n`✓ Created repository OWNER/REPO on GitHub`\r\n`fatal: remote origin already exists.`\r\n`git: exit status 128`\r\n\r\n### Proposed solution\r\n\r\nMaybe we can print a message with options **Y/N** to continue.\r\n\r\n***YES*** argument\r\n\r\n`There is a remote URL configured, do you want to create the repo?`\r\n`✓ Created repository OWNER/REPO on GitHub`\r\n\r\n***NO*** argument\r\nexit from CLI.\r\n"},{"labels":["enhancement"],"text":"When we execute the command `gh repo create --help` shows just a description about the public option. Who uses GitHub knows that is possible to use a private repository, but I believe that it can be more specific on help command as well.\r\n\r\n### Proposed solution\r\nI suggest using simple information on help command like `(default: private)` that it can be clean for users to understand that the repository will be created as private.\r\n\r\n### Additional context\r\n\r\n` --public               Make the new repository public (default: private)`\r\n\r\nInstead:\r\n`--public               Make the new repository public`\r\n\r\nThank you for helping the GitHub CLI as possible as well.\r\n"},{"labels":["enhancement"],"text":"Recently I had to create a new GitHub Account for my company because of legal reasons.\r\nBefore that I used *this* Account (and this cli tool) to navigate in our companies repository.\r\nNow *this* Account don't have access to the repository anymore but my other account.\r\nI also want to transfer the current \"users\" from the cli tool to my new GitHub user so that I have access to my companies repository again.\r\nUnfortunately I don't see anything how can I do this. There is no option to \"login\" or \"logout\".\r\nI also tried to uninstall and install the tool again - without success. It seems the config survives.. But I don't know where it is located :/\r\n\r\nAnyways. \r\nQuestion: How can I change my account (on macOS)?\r\nRequest: Please add a \"login\" and \"logout\" option to the CLI 🙃 \r\n\r\nThank you 👍 \r\nNice job with that tool. I really like it 🥇 \r\n\r\n### Update\r\nOkay, I just found this one https://github.com/cli/cli/blob/a7242f4ca3a487432870ed12e5284195e8948433/auth/oauth.go#L71\r\nAfter I deleted this configuration file I could login again (with my new account).\r\nBut still, the request to \"logout\" is still valid I guess."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI want to be able to configure `gh pr create` to automatically open the PR in the browser after I choose \"Submit\". \r\n\r\n### Proposed solution\r\n\r\nIt will save developers time by opening the submitted PR in the browser immediately after choosing \"Submit\"\r\n\r\n### Additional context\r\n\r\nTypical workflow:\r\n\r\n1. Do work\r\n2. Run `gh pr create`\r\n3. Submit \r\n4. Select link and open in browser (to watch CI run and then merge)\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nSteps to reproduce:\r\n1. Create branch named \"remote-branch\" in remote repository, but do not fetch it locally\r\n2. Try to `gh pr create -B remote-branch` from local branch \"branch-1\"\r\n3. Actual behaviour:\r\n> ! warning: could not compute title or body defaults: fatal: ambiguous argument 'origin/remote-branch...branch-1': unknown revision or path not in the working tree.\r\n\r\n### Proposed solution\r\n\r\nTry to fetch branch from origin, if the branch is not found in the working tree"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAdd possibility to create pull request to multiple branches at once. `--base` parameter could accept either `string` or `[]string`.\r\n"},{"labels":["enhancement",null],"text":"### Background\r\n\r\nIt can be useful during `gh pr status` command to see if the PR has any conflicts with master branch or branch that we want to merge changes in.\r\n\r\nI checked the newest version of GitHub CLI (`v.0.7.0`) and this is not a part of the tool.\r\n\r\n### Proposed solution\r\n\r\nAdd additional information about the conflicts with list of the files where the conflict is.\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nLicenses are an important part of open source software.  \r\nSupport generation/creation of common open-source licenses via 'cli'.\r\n\r\n### Proposed solution\r\n`gh license create`  \r\nThis should show a prompt asking which license to create.  \r\nWhen the user selects a license, again show a prompt, to ask for the various placeholder values.\r\nThis should then print the generated license to stdout, which can be redirected into a file.\r\n\r\n### Additional context\r\nThis will allow us to move further on the idea of giving a wholesome GitHub-web type experience."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like my issues to get `label` and also being added to a `project board`\r\n\r\n### Proposed solution\r\nThere might be a script which create multiple issues specific to a `Label` and `Project` but by using `gh CLI` I can only create issues with `Title` and `Description`. If the script is generating 50 issues, I don't have to manually attach label and add them to project board.\r\n\r\n### Additional context\r\n\r\nSay, a script is in place to detect AWS Services  regions support and create issues for the services which have new regions support. I would not like to put any manual effort of adding all the issues to project board and labelling each one of them.\r\n\r\nCurrently, I am using `hub cli` as it supports labelling"},{"labels":["enhancement"],"text":"### Describe the bug\r\n\r\nWhen I clone a repo that is an active fork (one that has no intentions of being merged back in), any `gh` command will call commands relative to the original repo.\r\n\r\nFor example, I am working on [westonruter/syntax-highlighting-code-block](https://github.com/westonruter/syntax-highlighting-code-block), which is a fork and has completely diverged from the original project. Any `gh` command here will try hit the original repo ([mkaz/code-syntax-block](https://github.com/mkaz/code-syntax-block)) this repo was forked from.\r\n\r\n```\r\n$ gh --version\r\ngh version 0.7.0 (2020-04-22)\r\nhttps://github.com/cli/cli/releases/tag/v0.7.0\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```bash\r\n$ gh repo clone westonruter/syntax-highlighting-code-block\r\n$ cd syntax-highlighting-code-block\r\n$ gh pr checkout 93\r\ngraphql error: 'Could not resolve to a PullRequest with the number of 93.'\r\n```\r\n\r\nThis happens because `mkaz/code-syntax-block` does not have a PR 93 but `westonruter/syntax-highlighting-code-block` does, so this command should be valid.\r\n\r\n### Expected vs actual behavior\r\n\r\nI expect that if I am cloning a forked repository, any issues or pull requests I list/create via `gh` should take that forked repository as the target and not the original repository."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nCurrently, when I do `gh pr checkout <num>`, gh creates a local branch with the same name as the pr source branch. This is not so intuitive, and it makes the pr branch difficult to find\r\n\r\n### Proposed solution\r\nWe can instead name the branch something like `pr/<num>` (and also support user-specified branch names for checking out, as requested by @novemberborn in #835)\r\n\r\n### How will it benefit CLI and its users?\r\nThis makes it easier to find the local PR checkout branch"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI downloaded `gh_0.7.0_linux_arm64.deb` from the release page and tried to install it on my Raspberry Pi 4. \r\n\r\n### Additional context\r\n```\r\nsudo apt install ./gh_*_linux_arm64.deb\r\nReading package lists... Done\r\nBuilding dependency tree\r\nReading state information... Done\r\nNote, selecting 'gh:arm64' instead of './gh_0.7.0_linux_arm64.deb'\r\nThe following NEW packages will be installed:\r\n  gh:arm64\r\n0 upgraded, 1 newly installed, 0 to remove and 236 not upgraded.\r\nNeed to get 0 B/5,541 kB of archives.\r\nAfter this operation, 16.2 MB of additional disk space will be used.\r\nGet:1 /home/pi/Downloads/gh_0.7.0_linux_arm64.deb gh arm64 0.7.0 [5,541 kB]\r\ndpkg: error processing archive /home/pi/Downloads/gh_0.7.0_linux_arm64.deb (--unpack):\r\n package architecture (arm64) does not match system (armhf)\r\nErrors were encountered while processing:\r\n /home/pi/Downloads/gh_0.7.0_linux_arm64.deb\r\nE: Sub-process /usr/bin/dpkg returned an error code (1)\r\n```\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nMany times, users will clone personal repositories. When cloning a personal repository, users have to prefix the repository name (e.g. `gh repo clone cli/cli`).\r\n\r\n### Proposed solution\r\n\r\nFor personal repositories, the username prefix could be omitted. Since there are no repositories without a username prefix, there would be no naming conflicts.\r\n\r\nFor instance, if logged in as the user `cli`, the user would just have to run `gh repo clone cli` to clone the `cli/cli` repository.\r\n\r\n### Additional context\r\n\r\nThis features is implemented in the related project [hub](https://hub.github.com/)."},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAdd a way to enumerate configurations of `gh`.\r\n\r\n### Proposed solution\r\n\r\nAdd `gh config --list`\r\n\r\n### Additional context\r\n\r\nI used `git config --list` as a reference.\r\n\r\n"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n`gh` requires to open  the default browser at the first time, but it is difficult to open GUI based browser on a SSH terminal.\r\n\r\nAdd a way to choose a browser that `gh`will launch so that users can use it via SSH terminal.\r\n\r\n### Proposed solution\r\n\r\nAdd `gh config set browser` feature which can set browser path.\r\n\r\n### Additional context\r\n\r\n\r\n"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nWhen using `gh config set`, the cli should check if the keys and values stored are valid/expected, and show an error, if not\r\n\r\n### Proposed solution\r\nAdd a simple check in the `gh config set` command, to validate the entered keys and values\r\n\r\n### How will it benefit CLI and its users?\r\nThis will prevent unwanted errors arising out of mistypes.\r\n\r\n### Additional context\r\nIf this feature request is accepted, I would like to work on it via a PR."},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\nCurrently, gh config requested me to interact with the web to retrieve the SSH token. However, I wanted to use CI tool to do gh config and can't do promt.\r\n\r\n### Proposed solution\r\nI would like that gh config to take parameter to accept this token. For example, `gh config -t /tmp/token_path.key` would be nice for any CI tools automation.\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIn many continuous integration pipelines, there is a desire to retrieve details about the current pull request, in order to decide which pipeline actions to take. Some examples of questions I have needed to ask in the past are:\r\n - does the current branch have an open pull request?\r\n - what is the draft state of the pull request?\r\n - does the pull request have a particular label attached?\r\n - has the pull request received any approvals?\r\n - is the pull request assigned to someone?\r\n\r\n### Proposed solution\r\n\r\nThis information is not easily obtained in a CI environment for many people without jumping through various hoops. I believe that since the information is already available in the output of some of the existing commands, the easiest path to implementation is to provide alternative output formats that can be parsed by command line utilities like `jq`, `yq`, `awk`, etc."},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen someone asks you for a code review on slack or in person. You want to quickly open their pr with `gh pr list` followed by `gh pr view n --web`. The current output shows the number, the title and the branch, but not the author (or ci status).\r\n\r\n### Proposed solution\r\n\r\nAdd another column showing the author, either as the default or behind a new --verbose flag\r\n\r\n### Additional context\r\n\r\n![Screenshot 2020-04-28 at 23 01 11](https://user-images.githubusercontent.com/993745/80542012-295faf80-89a4-11ea-91b8-d4530274b264.png)\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAdd an `ls` alias for `list` subcommands for easier muscle memory between tools.\r\n\r\n### Proposed solution\r\n\r\n`ls` should be interchangeable with `list`\r\n\r\n### Additional context\r\n\r\nLow priority, but nice to have IMO."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI use ssh with GitHub exclusively. As such, the `gh repo create` command is useless to me, because it sets the remote as an https url.\r\n\r\n### Proposed solution\r\n\r\nadd a flag for `gh repo create` that uses an ssh remote URL instead. Maybe something like \r\n\r\n```sh\r\n# long\r\ngh repo create --ssh\r\n\r\n# short\r\ngh repo create -s\r\n```\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n`gh pr checkout` is great, but afterwards I find it hard to recognize the checked out PR in my branch list.\r\n\r\n### Proposed solution\r\n\r\nIf I could pass `-b my-preferred-branch-name` it'd be easier to manage the resulting branches.\r\n\r\nAlternatively, perhaps the branch could be prefixed, e.g. `pr-1234-remote-branch-name`.\r\n\r\n### Additional context\r\n\r\nhttps://github.com/cli/cli/issues/746#issuecomment-611547027 suggests this as a workaround when the CLI can't determine a viable branch name itself."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe official release RPM package is not signed and gives the following warning when installed via zypper:\r\n\r\n```\r\ngh_0.7.0_linux_amd64.rpm:\r\n    Package is not signed!\r\n\r\ngh-0.7.0-1.x86_64 (Lokal): Signature verification failed [6-File is unsigned]\r\n```\r\n\r\n### Proposed solution\r\n\r\nThe package should be signed using a gpg key and the key should be made available for importing it to the keychain before installing."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAs a developer who works with multiple projects everyday, I struggle to keep on top of pull requests that are scattered across many repositories. Currently, I rely on email notifications for this, however I find it rather distracting considering other, unrelated emails. I would like to be able to stay within the shell environment where I could get a summary of things with a single command.\r\n\r\nCurrently, `gh` allows to run `gh pr status` within a git repo and provides a summary of PRs split into three very useful categories. However, considering that there are multiple projects to stay on top of, it isn't productive to firstly navigate to a directory and only then check the status. \r\n\r\n### Proposed solution\r\n\r\nProvide an ability to **track** pull requests, e.g. `gh pr track NUM | --all` that would save references to the pull requests of interest. It would be able to save PRs from multiple repos. It would also provide a command like `gh pr status --tracked` that would read saved references and essentialy run `gh pr status NUM` for each of those, combining the outputs into a single summary. \r\n\r\nAdditionally, once `gh pr status --tracked` is ran it would either (1) Add some sort of flag/marker in the summary to show which PRs have been updated since the last run or (2) Provide a command `gh pr status --tracked --updated`, or `gh pr updated` to _only_ summarise the PRs that have been updated. \r\n\r\nThis would be an amazing addition to the existing workflow. However, I understand that since currently all commands are tied to staying within a repo, I believe that globalising commands and saving references to repos and prs may be a very challenging task. \r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nEssentially I would like to use the tool to pull down the code at the head of a specific PR in CI & other automated scripts w/ containerized machines a la kubernetes pods, etc., using only the PR's number.\r\n\r\nThis is currently possible by doing\r\n```\r\ngh repo clone myorg/myrepo\r\ncd myrepo\r\ngh pr checkout 123\r\n```\r\nhowever that can take a long time if the repository has an extensive history or a lot of files.\r\n\r\nFor these situations I don't need to clone my whole repo and would like to simply clone with [`--single-branch`](https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---no-single-branch) and [`--depth 1`](https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---depthltdepthgt) and a PR's branch name to make it faster.\r\n\r\n### Proposed solution\r\n\r\nGiven the existing infrastructure in the CLI for parsing PR info, this should be straightfoward, and as simple as translating a `--pr` flag into git-clone's already-supported [`--branch flag`](https://git-scm.com/docs/git-clone#Documentation/git-clone.txt--bltnamegt).\r\n"},{"labels":[null,"enhancement"],"text":"### Describe the bug\r\n\r\nAfter upgrading from 0.6.x to 0.7.0 to try setting the `git_protocol` to `ssh`, I get `malformed config`. All other commands seem impacted as well, eg. `gh pr status` doesn't work anymore.\r\n\r\nIs there a way to look at a configuration file or further assess the configuration?"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n\r\nI tried to support teams among requested reviewers with the following GraphQL query.\r\n```graphql\r\nreviewRequests(first: 100) {\r\n\tnodes {\r\n\t\trequestedReviewer {\r\n\t\t\t__typename\r\n\t\t\t...on User {\r\n\t\t\t\tlogin\r\n\t\t\t}\r\n\t\t\t...on Team {\r\n\t\t\t\tname\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\ttotalCount\r\n}\r\n```\r\n\r\nHowever, auth token does not have `'read:org'` and `'read:discussion'` permissions.\r\n```\r\n$ gh pr view 1 --repo cli-test-org/cli-test\r\ngraphql error: 'Your token has not been granted the required scopes to execute this query. The 'name' field requires one of the following scopes: ['read:org', 'read:discussion'], but your token has only been granted the: ['repo'] scopes. Please modify your token's scopes at: https://github.com/settings/tokens.'\r\n```\r\n\r\n### Proposed solution\r\n\r\nI wonder if https://github.com/cli/cli/pull/786 can solve this problem. According to the error message, we also need `read:discussion` to query a team's name in requested reviewers.\r\n\r\n### Additional context\r\nThis is a contentious work of https://github.com/cli/cli/issues/663 requested at https://github.com/cli/cli/pull/762#discussion_r408655970.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be nice to support the finalization of PRs through the CLI.\r\n\r\n### Proposed solution\r\n\r\nAs first iteration, it could be something as simple as:\r\n```\r\ngh pr approve <comment>\r\ngh pr finalize <mode>\r\n```\r\n\r\nwhere `mode` can, at very least, reflect what's currently on the GitHub UI:\r\n* `merge`\r\n* `squash-and-merge`\r\n* `rebase-and-merge`\r\n\r\n### Additional context\r\n\r\nAll users that prefer/need to review PRs in the IDE would benefit from this.\r\n\r\nMore generally, this would easily allow adding finalization modes that people are waiting from a long time on the UI side (e.g. [rebase and merge without fast forward](https://github.com/isaacs/github/issues/1143)).\r\n\r\nI'm happy to contribute a PR if this was a welcome enhancement!😎"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI need to automate user credentials rotation.\r\n\r\n### Proposed solution\r\n\r\nA API/CLI to update my/machine user credentials(password)\r\n\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nA lot of times I get PRs that another user tends to be taking a long time to complete and I don't want to deal with merge conflicts down the track so I want to just push to their fork. In order to do this I have to:\r\n1. `gh pr checkout PR_NUMBER`\r\n2. make my changes\r\n3. push to their fork (provided I have the correct access rights)\r\n    `git push git@github.com:OTHER_USERS_USERNAME/repo branch:branch`\r\n\r\n### Proposed solution\r\n\r\nIt would just make it easier for maintainers to push to the PR.\r\n`gh pr push PR_NUMBER`\r\n"},{"labels":[null,"enhancement"],"text":"The first pass on configuration support added `get` and `set`. This is enough to make things work but once our configuration supports more keys we might want to support a `gh config edit` command that opens an editor and ensures that a hand-edited config is valid before updating.\r\n\r\ndepends on #803 "},{"labels":[null,"enhancement"],"text":"We're laying out a bare-bones config file during migrating and for new users right now. We should lay out something with documentation (ie commented out defaults and accompanying prose)."},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAs a repository maintainer of multiple repositories I would like to be able to open all open PRs associated with a single repository, so that I can understand the current context of all open PRs, not just a single PR, before I tackle them resolve and merge them as a maintainer.\r\n\r\nI'd like to be able to have this output both to the command line (in particular to redirect it to a single file to read it offline), as well as the option to be able to do this to my default web browser as multiple page requests.\r\n\r\n### Proposed solution\r\n\r\nAdd to `gh pr view` option for  `-a` or `--all-open` to view open all PR pages to the CLI or with the `-w` or `--web`  option resulting in multiple PRs sent to the default web viewer as multiple page requests.\r\n\r\n```\r\ngh pr view --all-open\r\n\r\n// or\r\n\r\ngh pr view --web --all-open\r\n```\r\n\r\n### Additional context\r\n\r\nI know for repositories with hundreds of PRs this might be scary, but for me it might be weeks before I return to a repository that I'm a maintainer and I've lost context when there are multiple PRs (in my case typically only 4 or 5 open PRs). Maybe a warning \"are you sure?\" if there are more than X (say 25 or 50) PRs?\r\n\r\nI would also support additions to or alternatives to `--all-open` that allow for only PRs with a particular tag, say `--label \"bug\"`, or even all filter options such as `--filter \"is:@open\"`, `--filter \"author:@me\"`, `--filter \"label:bug\"`, or other options to sort or limit number sent `--ascending 20`, HOWEVER, my main priority is basically just show me open issues under the 80/20 rule.\r\n\r\nThank you for your time, `gh` has been a very useful new tool for my repo maintainer toolbox!\r\n\r\n-- Christopher Allen\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe GraphQL API supports creating repos as \"Internal\" for plans that support it, but it is not currently implemented in the cli.\r\n\r\n### Proposed solution\r\n\r\nI propose we add a new `repoCreateCmd` flag called `internal` [here](https://github.com/cli/cli/blob/master/command/repo.go#L31) and default it to `false`.  We can then update the logic [here](https://github.com/cli/cli/blob/master/command/repo.go#L226-L229) to add support for internal visibility.  My recommendation would be to add the check for internal between `PRIVATE` and `PUBLIC` so the visibility is descending.  i.e. If a user submits both the public and internal flags, the repo will be public.  If they submit neither, it will still be private.\r\n\r\n### Additional context\r\n\r\nIf approved, I'd be happy to open a PR implementing this."},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI work on a project where, for historical reasons, the development work occurs on a fork of the original repo. It would be great if a command like `gh pr list` could show the list of PRs on the fork rather than being attached to the main repo.\r\n\r\n### Proposed solution\r\n\r\nA couple of options: \r\n1. allow a fork to be the main 'repo' that you interact with.\r\n2. allow a user to specify the name of a fork for these commands.\r\n\r\nThis will be convenient so that I can continue to use these commands in the terminal rather than having to switch back to the GUI.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\neasy viewing of local repo issues and maybe other things \r\n\r\nI forked  quii/learn-go-with-tests to ms4720/learn-go-with-tests and would like a simple way to say use local repo resources like tickets, I made a ticket for each chapter and a couple of milestones for the project\r\n\r\n\r\n\r\n### Proposed solution\r\n\r\nadd a -l and/or --local switch so you just use local resources \r\n\r\nHow will it benefit CLI and its users?\r\n\r\njust much simpler than -R ms4720/... when I am in the local repo \r\n\r\n### Additional context\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt will be nice to attach labels to new issues being created with Github CLI\r\n\r\n### Proposed solution\r\nso while creating an issue you could attach a label with `-l` or `--label` . This might help in pulling a set of issues only related to one aspect of a project or codebase i.e: bugs, enhancement, design, etc.\r\n\r\n"},{"labels":["enhancement",null],"text":"In order to solve https://github.com/cli/cli/issues/639, we need to either (1) switch repository creation to the REST API or (2) ask users to authorize an additional `org:read` OAuth scope.\r\n\r\nI initially gravitated to (1), but by now I'm thinking that (2) would be a better approach in the long term because:\r\n- adding extra fields such as assignees or reviewers to issues/PRs will require the `org:read` scope to present the prompt UI https://github.com/cli/cli/issues/663\r\n- a command with direct access to API will need additional OAuth scopes depending on which API features will users access through it https://github.com/cli/cli/issues/332\r\n\r\n* * *\r\n\r\nFor new CLI users, adding another scope is just a matter of changing one line and shipping that https://github.com/cli/cli/blob/82bd7b97cf0a3919c616c737136e3f3cee0c9bc9/auth/oauth.go#L51-L52\r\n\r\nHowever, existing CLI users already have an OAuth token cached in `~/.config/gh/config.yml`, so we would need to ask them to re-authenticate. After the first API request with the old token, we could detect from the API response that the required scope is missing, and then either:\r\n\r\n1. **Warn the user about insufficient scopes, abort the operation, and ask them to `rm ~/.config/gh/config.yml` and try again.** This approach is easiest to implement, but I feel that it might be detrimental to the user experience. Also, after the config features ship https://github.com/cli/cli/issues/622 that file will contain more configuration than just authentication info, so I would like us to avoid training our users to ever manually delete that file.\r\n\r\n2. **Abort the operation and ask users to re-authenticate using a command** like `gh auth` or `gh login`. We don't have such a command yet, but it was asked for https://github.com/cli/cli/issues/297 and I think it would be useful both as an official way to reauthenticate and to check authentication status for different hosts (github.com vs. GHE).\r\n\r\n3. **Don't abort the operation, but ask the user to re-authenticate interactively** by printing something like “Re-authentication needed. Press Enter to open github.com in your web browser” and proceed with the original operation using the new token. This is the least intrustive option, but it will involve some code juggling to be able to retry an operation. (We should also avoid ever retrying a write operation.) Using this approach we could also resolve other token problems such as the case when the token was revoked https://github.com/cli/cli/issues/627\r\n\r\n4. …some other approach that I haven't considered? I'd like to hear your thoughts."},{"labels":["enhancement",null],"text":"### Is it currently possible to view commits?\r\n\r\nInitially, after searching through the manual, i couldn't find anything for just listing off the commits. I get why this hasn't been added, as it may come with the expectation that you can view a commit (meaning the code would need to be handled). But at the moment, I think it'd be handy to see commits by author/state and with ids so i could reference them in my workflow all in the terminal. \r\n\r\nIn addition, if it's possible to view the commits, a full list of # ids (and the matching issue/commit/etc) from #1 to the latest would be neat."},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI have an Android, an Acer Iconia One b1-780 with architecture aarch64, and i want to use GitHub Cli with termux (In a nutshell, a Terminal emulator) and there is no aarch64 release.\r\n\r\n### Proposed solution\r\n\r\nIt will be more accesible for people with androids with the aarch64 architecture\r\n\r\n### Additional context\r\n\r\nIf you have suggestions on how to install GitHub CLI on my tablet model with termux, feel free to comment It.\r\n\r\nP.D: A .deb file with aarch64 architecture Will work"},{"labels":["enhancement"],"text":"This issue serves to capture the completion of the work @mislav started in #909 ( https://github.com/cli/cli/pull/909#issuecomment-628752667 ) to structure our commands in isolated units instead of grouped together in a big soup of global state.\r\n\r\nThis work allows us to complete #759 \r\n\r\nOriginal issue body below, which captures the spirit of these improvements.\r\n\r\n---\r\n\r\n### Describe the feature or problem you’d like to solve\r\n\r\nLooking under the the [`command`](https://github.com/cli/cli/tree/master/command) package of the project, it could have some better organization to help address a few problems that may come up while trying to maintain the CLI:\r\n1. It makes it simpler to find where all source associated with a particular subcommand is (e.g. all the code for `gh pr` should be isolated from other source\r\n2. It will help to eliminate dependencies that exist currently between subcommands. As of now, functions are defined in one subcommand (e.g. `displayUrl` in `issue.go` and used in `pr`/`repo` source. It makes it hard to keep track where functions are defined/how changes to it will effect other subcommands.\r\n3. It can help make it easier for contributors to understand the command structure of the CLI. Cobra structure allows subcommands to be imported into `root.go` and added directly to the root command and this same structure can be added at the subcommand level as well by adding all those commands as opposed to using an `init()` function. \r\n\r\n### Proposed solution\r\n\r\nCreate separate packages for subcommands/helper functions:\r\n* `pr` - all source for `gh pr`\r\n*  `issue` - all source for `gh issue`\r\n* `repo` - all source for `gh repo`\r\n* `completion` - all source for `gh completion`\r\n* `version` - all source for `gh version`\r\n* `common` - all shared functions that are used across all commands (e.g. `contextForCommand`, `determineBaseRepo`). Should probably have a better name than something non specific like `util`, `helper`, or `common`.\r\n\r\nRemove `init()` from `root.go`, import all subcommand packages to `root.go`, and add subcommands directly to `RootCmd`. Apply this same approach at the subcommand level. \r\n\r\nHow will it benefit CLI and its users?\r\n\r\nIt \r\nwill help bring better organization to the project and make it easier for people to contribute back to.\r\n\r\n### Additional context\r\n\r\nDue to issues around circular dependencies, this may take a bit of thought, which is why I think it would make sense to remove version command logic from `root.go`/commonly used functions to their own package.\r\n\r\n**Thought process of structure in root.go:**\r\n```go\r\n\r\nimport (\r\n    \"github.com/cli/cli/command/issue\"\r\n    \"github.com/cli/cli/command/pr\"\r\n    ...\r\n)\r\n\r\n....\r\n\r\nRootCmd.AddCommand(\r\n    issue.issueCmd(),\r\n    repo.repoCmd(),\r\n    pr.prCmd(),\r\n    version.versionCmd(),\r\n    completion.completionCmd(),\r\n)\r\n```"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nWhen I checkout a PR with gh if it comes from a master branch it collides with the local branch name. It would be a good idea to be able to alias it.\r\n\r\nA clear and concise description of what the feature or problem is.\r\n\r\n### Proposed solution\r\n\r\nMaybe we can add something similar to `git checkout -b NAME` to achieve the expected behavior.\r\n\r\nHow will it benefit CLI and its users?\r\navoid the collision\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nGitHub has a very important feature, which allows open source project maintainers to check out **and push to** contributor's repositories, if they allow it.\r\n\r\nThe problem is that pr checkout doesn't set up the contibutor's repo as a remote, but the \"read-only\"\r\nrefs/pull/123/head reference.\r\n\r\n```\r\n * [new ref]         refs/pull/123/head -> new_pr\r\n```\r\n  \r\n### Proposed solution\r\n\r\nInstead of using `refs/pull/123/head`, the collaborator's repo should be set up as a remote, if it is allowed.\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nOpen source maintainers would be extremely thankful for this change."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen I use the  `gh pr create` tool, it assumes I want to merge into master. But what I don't and I want to merge into another branch say `docs`?\r\n\r\n### Proposed solution\r\n\r\nI believe adding a flag(that defaults to master if not specify) would give users much more flexibility in using the tool. like:\r\n`gh pr create -b \"origin/docs\"`\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe default behavior of `gh pr view` has been changed by https://github.com/cli/cli/pull/665 .\r\nbut when I hit `gh pr -h` , got below:\r\n\r\n```sh\r\n    ...(some description)...\r\n    \r\n    Available Commands:\r\n      checkout    Check out a pull request in Git\r\n      create      Create a pull request\r\n      list        List and filter pull requests in this repository\r\n      status      Show status of relevant pull requests\r\n      view        View a pull request in the browser\r\n    \r\n    ...\r\n```\r\n\r\n“View a pull request _in the browser_” is no longer the default behavior. \r\n\r\n### Proposed solution\r\n\r\nI would suggest to change the description like this, or more suitable\r\n```sh\r\n    Available Commands:\r\n      view        View a pull request\r\n```\r\n### Additional context\r\n\r\n```sh\r\n$ gh --version\r\ngh version 0.6.4 (2020-04-01)\r\nhttps://github.com/cli/cli/releases/tag/v0.6.4\r\n```\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI want to be able to set the following when creating a PR with `gh or create` command:\r\n- reviewers\r\n\r\n### Proposed solution\r\n\r\nWe can introduce new flags to provide backward compatibility with the existing command.\r\n\r\n```sh\r\ngh pr create --reviewers=\"FerrielMelarpis,...\"\r\n```\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nFor commands that one types very often, it can become cumbersome to spell them out every time. For example, `gh pr create` or `gh repo clone`.\r\n\r\n### Proposed solution\r\n\r\nI would like to be able to type a shorter prefix of a subcommand (or sub-subcommand) and have `gh` recognize it as long as it is ambiguous. Ambiguous prefixes would retain the current behavior (i.e. show the help message).\r\n\r\nSo for example, the cloning command could be simply `gh r cl`; and for `gh pr`'s subcommands, the minimum unambiguous prefixes would be:\r\n\r\n    [ch]eckout\r\n    [cr]eate\r\n    [l]ist\r\n    [s]tatus\r\n    [v]iew\r\n\r\nAlternatively, we could require at least two characters: `ch`, `cr`, `li`, `st`, `vi`. Of course, this would coexist with custom shortcuts for subcommands (#635) nor user-defined aliases for full command lines (#294).\r\n\r\nNote that some CLI tools already do this. Off the top of my head, I recall `nmcli` having this behavior, but I'm sure there are many others."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIf I checkout a pull request from a repository using `gh pr checkout <pull request #>`, a local branch is created with the changes from the checked out pull request. If a change is made to the pull request, I run `git branch -D` to delete the local branch and then rerun `gh pr checkout <pull request #>` to get the latest updates from the pr locally.\r\n\r\n### Proposed solution\r\n\r\nI would prefer to have an option, such as `--update`, that could be used with ``gh pr checkout <pull request #>`` that would update my local branch with any pr changes and allow me to not have to switch to using the git cli in this scenario.\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nA simpler experience working locally with pull requests. For instance, I like to use `gh pr checkout` to test pull requests locally as part of reviewing them. Having a simplified experience for getting updates made over the course of a review process would be helpful."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen running the `completion` sub-command, gh cli will check for updates and write a message if an update is available (this was suggested in https://github.com/cli/cli/issues/85). The expected use is to eval this command in your `.bashrc` or `.anything_rc`, this means that a information message will be written every time a prompt is opened.\r\n\r\nWhile I think this feature is useful (this tool is not part of most distributions official repositories yet), I also think that it can be considered to be quite annoying and intrusive. If you installed this from a repository, this also means that you might get pointless messages for a few days until your package gets updated, this might become a very common scenario in the future.\r\n\r\n### Proposed solution\r\n\r\nIt would be nice to have a feature switch in parameters (`-q`, `--quiet` for example?) to disable update notifications. Currently no such option seem to exist:\r\n\r\n```\r\n>> gh completion -h\r\nGenerate shell completion scripts for GitHub CLI commands.\r\n\r\nFor example, for bash you could add this to your '~/.bash_profile':\r\n\r\n\teval \"$(gh completion)\"\r\n\r\nWhen installing GitHub CLI through a package manager, however, it's possible that\r\nno additional shell configuration is necessary to gain completion support. For\r\nHomebrew, see <https://docs.brew.sh/Shell-Completion>\r\n\r\nUsage:\r\n  gh completion [flags]\r\n\r\nFlags:\r\n  -s, --shell string   Shell type: {bash|zsh|fish|powershell} (default \"bash\")\r\n\r\nGlobal Flags:\r\n      --help              Show help for command\r\n  -R, --repo OWNER/REPO   Select another repository using the OWNER/REPO format\r\n```"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen I create a draft PR and then push more commits such that it's ready for review, there's no way I can switch it from a draft to a ready for review PR without going to the browser.\r\n\r\n### Proposed solution\r\n\r\nI don't have any strong feelings about implementation, but it seems related to updating labels, assignees, reviewers, etc. after a PR has been created so it might be in something like `pr edit`, or might be its own action, like `pr ready`. I'll defer to @ampinsk for thoughts on that, knowing that we'll need to account for a variety of similar scenarios to this.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAdd an option to create the pull request as a draft pr.\r\n\r\n### Proposed solution\r\n\r\nMaybe it could be something like this: `gh pr create --draft`\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt is now possible to filter PRs by assignee. However, sometimes people are asked to review code but aren't necessarily the assignee, in which case they are requested reviewers. It would be useful to filter the list of PRs based on that information too, so I can easily see which PR need my attention as a reviewer.\r\n\r\n### Proposed solution\r\n\r\nAdd an option `--pending-reviewer` to the filter options to `gh pr list`. In an ideal world, we would be able to OR it with assignee, so I can list \"all PRs that need my attention in some form or another\".\r\n\r\nPRs for which I am tagged as a reviewer but I have approved already shouldn't show -- which is why the proposed option name would be `--pending-reviewer` and not `--reviewer`\r\n\r\n### How will it benefit CLI and its users?\r\n\r\nIt is one fewer task that users will need the browser for. At least in our organization, seeing which PRs I should review is an important part of the workflow.\r\n\r\n### Additional context\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI am trying to create PRs automatically every time I push the code and I like using the `--fill` flag to fill in the details later in the PR; however, if the repo has a template, I'd like to utilize the template and only autofill the title part, just like the web version does.\r\n\r\n### Proposed solution\r\n\r\nI have two solutions in mind:\r\n- maybe there may be separate `--fill-title` and `--fill-body` flags.\r\n- maybe there may be another flag to make body fill work in an append-only fashion, something like `--fill-with-append`; though this one might be harder to explain to the users."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen we update Azure-Cli to 2.3.1 on Ubuntu, we cannot connect to AKS on China Azure. Error text:\r\n\r\nNo registered resource provider found for location 'chinaeast2' and API version '2020-03-01' for type 'managedClusters'. The supported api-versions are '2017-08-31, 2018-03-31, 2019-02-01, 2019-04-01, 2019-06-01, 2019-08-01, 2019-10-01, 2019-11-01, 2020-01-01, 2020-02-01'. The supported locations are 'chinaeast2, chinanorth2'. No registered resource provider found for location 'chinaeast2' and API version '2020-03-01' for type 'managedClusters'. The supported api-versions are '2017-08-31, 2018-03-31, 2019-02-01, 2019-04-01, 2019-06-01, 2019-08-01, 2019-10-01, 2019-11-01, 2020-01-01, 2020-02-01'. The supported locations are 'chinaeast2, chinanorth2'. No registered resource provider found for location 'chinaeast2' and API version '2020-03-01' for type 'managedClusters'. The supported api-versions are '2017-08-31, 2018-03-31, 2019-02-01, 2019-04-01, 2019-06-01, 2019-08-01, 2019-10-01, 2019-11-01, 2020-01-01, 2020-02-01'. The supported locations are 'chinaeast2, chinanorth2'.\r\n\r\nWe get response from Azure support that: if we want to use Cli to connect to AKS we have to install older version (2.0.68) on Ubuntu. But we found nowhere to download older version Cli of Ubuntu.\r\n\r\n### Proposed solution\r\n\r\nProvide version option for Ubuntu user to install Cli\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI have lost `gh` authentication with github(removed token from github)\r\nLater I forgot about this and obviously nothing worked, just got some cryptic graphql Bad credentials error\r\n\r\n### Proposed solution\r\n\r\nWould be nice to have `gh reauthenticate` or similar which would remove the config and start authentication again.\r\nOR\r\nHave a section for re-authentication in the docs for how to do that manually.\r\nI have spent some time figuring out what to do until I found this: https://github.com/cli/cli/issues/639#issuecomment-599562386 and removed the config which solved my issue."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nOn larger projects just creating an issue is not enough, it needs to be properly labeled.  It would be nice to do that from the command line.\r\n\r\n### Proposed solution\r\n\r\nI would like to run\r\n```\r\ngh issue create -l labelA -l labelB -t \"Some labeled issue\"\r\n```\r\nAnd create an issue with two labels: `labelA` and `labelB` (if they exists).\r\n\r\nIf a label is misspelled the `gh` command should report this (but not create a new label, it would be to easy to accidentally create labels). \r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt's not easy to just check a status of a single PR. Both commands:\r\n```\r\ngh pr status\r\n```\r\nand\r\n```\r\ngh pr view\r\n```\r\nShould allow to do that.\r\n\r\n### Proposed solution\r\n\r\nI suggest:\r\n\r\n#### gh pr status\r\n\r\n```\r\ngh pr status\r\n```\r\ndoesn't change, e.g. give a list of statuses for all prs, but\r\n\r\n```\r\ngh pr status SOME_PR_NUMBER\r\n```\r\nreturns statuses only for the given pr number.\r\n\r\n#### gh pr view\r\n```\r\ngh pr view\r\n```\r\nshould also include status information (it could be hidden under a flag, but not hiding it will give more similar experience to the web view).\r\n\r\n### Additional context\r\n\r\n\r\n"},{"labels":["enhancement"],"text":"I quite often want to showcase/share code on github with other developers. However in my workflow its much more convenient for me to locate a file or directory I want to share in my local development environment. therefore it would be great if I could open the current directory or a given file on github through the CLI \r\n\r\nThere will be some edge cases that needs to be covered in this feature since the local branch might not be pushed yet etc"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe flags on `pr create` for 0.6.2 make no reference to labels, reviewers or assignees.\r\n\r\n```\r\n❯ gh pr create --help\r\nCreate a pull request\r\n\r\nUsage:\r\n  gh pr create [flags]\r\n\r\nFlags:\r\n  -B, --base string    The branch into which you want your code merged\r\n  -b, --body string    Supply a body. Will prompt for one otherwise.\r\n  -d, --draft          Mark pull request as a draft\r\n  -f, --fill           Do not prompt for title/body and just use commit info\r\n  -t, --title string   Supply a title. Will prompt for one otherwise.\r\n  -w, --web            Open the web browser to create a pull request\r\n\r\nGlobal Flags:\r\n      --help              Show help for command\r\n  -R, --repo OWNER/REPO   Select another repository using the OWNER/REPO format\r\n```\r\n\r\nIs this not supported at all? I'd like to be able to self-assign and pre-label my PRs from the command line.\r\n\r\n### Proposed solution\r\n\r\nPort the following flags from `hub pull-request`\r\n\r\n```\r\n       -r, --reviewer USERS\r\n           A comma-separated list (no spaces around the comma) of GitHub handles to request a review from.\r\n\r\n       -l, --labels LABELS\r\n           A comma-separated list (no spaces around the comma) of labels to add to this pull request. Labels will be created if they do not already exist.\r\n\r\n       -a, --assign USERS\r\n           A comma-separated list (no spaces around the comma) of GitHub handles to assign to this pull request.\r\n```\r\n\r\n### Additional context\r\n\r\nI didn't dig too deep beyond an issue search so if this is supported or covered elsewhere please point me in the right direction. Thanks!\r\n"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThe page https://cli.github.com/manual/gh_completion explains to use the completions by adding `eval \"$(gh completion)\"` to a profile file.\r\n\r\nFor PowerShell, the equivalent command is `gh completion -s powershell | iex`, which produces the following error:\r\n\r\n```powershell\r\n> gh completion -s powershell | iex\r\niex : At line:1 char:67\r\n+ Register-ArgumentCompleter -Native -CommandName 'gh' -ScriptBlock {\r\n+                                                                   ~\r\nMissing closing '}' in statement block or type definition.\r\nAt line:1 char:31\r\n+ gh completion -s powershell | iex\r\n+                               ~~~\r\n    + CategoryInfo          : ParserError: (:) [Invoke-Expression], ParseException\r\n    + FullyQualifiedErrorId : MissingEndCurlyBrace,Microsoft.PowerShell.Commands.InvokeExpressionCommand\r\n```\r\n\r\n### Proposed solution\r\n\r\nExplain how to use the PowerShell completions\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like to have the ability to view and change the settings of a repository through the CLI.  For example, I would like to add or delete a _deploy key_ or create/delete/audit a tokens, manage/audit membership and access, etc.\r\n\r\n### Proposed solution\r\n\r\nWith this feature, users could automate CI/CD solutions that interact with GitHub.  For starters/leavers processes, especially with companies that need to certify their processes, this is also useful.\r\n\r\n### Additional context\r\n\r\nOne example is the deploy key in settings, but this enhancement is not explicit to just that.\r\n\r\n![1-8PCLsLCnIU-90HDzICivOQ](https://user-images.githubusercontent.com/7537882/77272693-050b0780-6c6f-11ea-91f7-042e3b12f9df.png)\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently, `gh` has a Scoop manifest available, but is essentially kept within its own \"repository\". This makes it less discoverable, as most scoop users use `scoop search ...` to find installable packages.\r\n\r\n### Proposed solution\r\n\r\nModify `gh.json` to support autoupdate and publish to either https://github.com/ScoopInstaller/Main/ or https://github.com/lukesampson/scoop-extras. This will make the manifest self-updating (official buckets use Appveyor for that), keeping up with the most recent (not pre-) release.\r\n\r\nThis also removes the need to keep the current `gh.json` file.\r\n\r\nI have tested the following manifest, feel free to use it.\r\n\r\n```\r\n{\r\n    \"description\": \"GitHub CLI\",\r\n    \"homepage\": \"https://cli.github.com/\",\r\n    \"license\": \"MIT\",\r\n    \"version\": \"0.6.2\",\r\n    \"architecture\": {\r\n        \"32bit\": {\r\n            \"url\": \"https://github.com/cli/cli/releases/download/v0.6.2/gh_0.6.2_windows_386.zip\",\r\n            \"hash\": \"bb1903b9f6ebddaffc56a1b9945c30025432f28742977ee2aa11c2bd38110373\"\r\n        },\r\n        \"64bit\": {\r\n            \"url\": \"https://github.com/cli/cli/releases/download/v0.6.2/gh_0.6.2_windows_amd64.zip\",\r\n            \"hash\": \"089ec177fc2813a2ca01d4b3ba56cbdc4cb089e3fb30ab2a159ec2afdd421c61\"\r\n        }\r\n    },\r\n    \"bin\": \"bin/gh.exe\",\r\n    \"checkver\": {\r\n        \"github\": \"https://github.com/cli/cli\"\r\n    },\r\n    \"autoupdate\": {\r\n        \"architecture\": {\r\n            \"32bit\": {\r\n                \"url\": \"https://github.com/cli/cli/releases/download/v$version/gh_$version_windows_386.zip\"\r\n            },\r\n            \"64bit\": {\r\n                \"url\": \"https://github.com/cli/cli/releases/download/v$version/gh_$version_windows_amd64.zip\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n"},{"labels":["enhancement"],"text":"Sometimes I would like to be able to create a PR without running the ~pre-commit~ ~and~ ~commit-msg~ pre-push hooks when pushing the changes. Is that possible?\r\n\r\nEdit: Replaced pre-commit and commit-msg with pre-push."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen `gh pr create` fails or cancelled, the body content typed using the editor is lost.\r\nIs there an option to reuse the previous body input?\r\nSometimes I type a long PR body and just loose it due to a simple mistake, such as not adding any commit to the PR branch yet (e.g., when creating draft PRs).\r\n\r\n### Proposed solution\r\n\r\nIf there is no way to preserve the body input, please add one.\r\ne.g., Ask a question to reuse the body on the next invocation if the command has failed or was cancelled.\r\nWhen PR creation succeeds, then it may delete the cached body input."},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be nice to list all ci checks for a given PR.  This is particularly useful for busy repos with a lot of PRs. In addition one can output all the checks not just the required ones. \r\n\r\n### Proposed solution\r\n\r\n This could either be via:\r\n```\r\ngh pr status PR_NUMBER\r\n```\r\nor\r\n```\r\ngh pr view -p --checks PR_NUMBER\r\n```\r\n\r\n### Additional context\r\n\r\nna\r\n"},{"labels":["enhancement",null],"text":"If I'm on a branch that is associated to a pull request with an attached issue, `gh issue view` without an argument should display it "},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThere is no actual command that allows developers to suggest changes to any PR via `gh`.\r\n\r\n### Proposed solution\r\n\r\nA command (might be `gh suggest` or `gh diff`) which analyses the current diff between the files in the branch and the files changed, and allows developers to send those suggestions to the PR on GitHub.\r\n\r\n### Additional context\r\n\r\nLet's imagine we check-out a PR by using `gh checkout 11`.\r\nThe reviewer would go to the file, make a change to it and run `gh diff`. The tool might open an interactive selector of the chunks of differences in diverse files, and let the user \"commit\" those changes as code change suggestions in the PR."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nAt the moment I do not know how to use 'gh' with my company Enterprise GitHub reacheable at a different URL.\r\n\r\nCould you add the possibility to use 'gh' with a custom URL ?\r\n\r\n### Proposed solution\r\n\r\nJust a configuration to specify the URL to be used.\r\nAll the enterprise users will benefit from this.\r\n]\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen using the terminal view for `gh issue view` and `gh pr view` (currently requiring the --preview flag but soon to be the default), there's a lot of metadata that does not show up in the output that would be helpful to people.\r\n\r\n### Proposed solution\r\n\r\nMirroring most of the information in the issue/PR sidebar seems sensible as a starting point, but I have no opinion about how it should be presented. \r\n\r\ncc: @ampinsk \r\n\r\n### Additional context\r\n\r\nWe're removing the labels from immediately below the header in #652, so this will be more useful when that ships.\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\nIt'll be nice if we had commands like `gh notifications list`, `gh notifications read` and `gh notifications done` (for Beta users with new notifications enabled).\r\n\r\n### Proposed solution\r\nUsers will be able to work with notifications without leaving the terminal/IDE.\r\n\r\n### Additional context\r\nIf the team will approve this feature request, I can start working on it. Please tell me when I can start."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nBuild a binary that would work for alpine Docker images.\r\n\r\n### Proposed solution\r\n\r\nBuild the binary from source within an alpine context.\r\n\r\n### Relevant issues\r\n\r\nhttps://github.com/cli/cli/issues/84"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt takes a couple clicks on github.com make a release right now.\r\n\r\n### Proposed solution\r\n\r\nIt would be cool if you could do this with a single command. And even cooler if you could script it.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI do `gh pr checkout 1` when `1` refers to an issue. I meant to checkout PR `2` which is _linked_ to `1`.\r\n\r\n### Proposed solution\r\n\r\nPrompt for \"Did you mean to check out linked pull request `2`?\" or something similar. A different UI is needed if there are multiple _open_ linked pull requests."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n`git clone ssh://git@github.com/user/repo.git user_repo` allows you to specify a directory to clone into (`user_repo` here). `gh repo clone` supports passing extra arguments to `git clone` but when using this, it assumes my extra arg is the repo to clone not the path to clone into.\r\n\r\n```\r\n[14:59:59] % gh repo clone NARKOZ/gitlab -- narkoz_gitlab\r\nfatal: repository 'narkoz_gitlab' does not exist\r\nexit status 128\r\n```\r\n\r\nI saw mention in https://github.com/cli/cli/pull/545 about maybe adding support for this, so I figured I'd ask here for this feature. \r\n\r\n### Proposed solution\r\n\r\nI'm not sure how many people (frequently) clone into directories that aren't just named after the project but something like `gh repo clone agargiulo/stuff my_stuff` would be helpful for when I find 3 different projects named the same and want to keep track more easily locally.\r\n\r\n### Additional context\r\n\r\n\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\nCurrently, `issue view --preview` shows who created an issue regardless of its state.\r\n\r\n![Screenshot 2020-03-14 at 5 35 27](https://user-images.githubusercontent.com/5877477/76657634-a6ca8e80-65b5-11ea-8a76-19861ccb4ee6.png)\r\n\r\n However, I think that what we actually want to see is the last event state such as `Opened`, `Closed` and `Reopened` (I guess `Locked`, `Unlocked` and `Transferred` could be included) and who made the last event.\r\n\r\n### Proposed solution\r\n\r\n[IssueTimelineItemsItemType](https://developer.github.com/v4/enum/issuetimelineitemsitemtype/#issuetimelineitemsitemtype) provides various issue events and we can extract the last event.\r\n\r\nRef. https://github.community/t5/GitHub-API-Development-and/GraphQL-repo-issues-has-no-closedBy-field/m-p/26858/highlight/true#M2173\r\n\r\nI gave a shot with https://github.com/cli/cli/compare/58f6be...doi-t:cf6e746 and it seems it is possible to do like below. These captures show the last state and its actor instead of the author of the issue.\r\n\r\n![Screenshot 2020-03-14 at 5 33 32](https://user-images.githubusercontent.com/5877477/76657538-74b92c80-65b5-11ea-8037-2f551e257df4.png)\r\n![Screenshot 2020-03-14 at 5 33 02](https://user-images.githubusercontent.com/5877477/76657552-797de080-65b5-11ea-95a6-5873ca36308f.png)\r\n![Screenshot 2020-03-14 at 5 34 06](https://user-images.githubusercontent.com/5877477/76657533-7387ff80-65b5-11ea-944e-7d9e3f6a6cbd.png)\r\n\r\nIf it makes sense to everyone and is fine with [contributing guide](https://github.com/cli/cli/blob/master/.github/CONTRIBUTING.md), I'd happy to work on it with unit tests for each event."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nwhen I do `gh pr status` I get this excellent overview:\r\n\r\n```\r\ngh pr status\r\n\r\nRelevant pull requests in quarkusio/quarkus-quickstarts\r\n\r\nCurrent branch\r\n  There is no pull request associated with [476-parameterize-platform-development]\r\n\r\nCreated by you\r\n  #494  Make the GAV of the BOM parametrized [maxandersen:476-parameterize-platform-development]\r\n   - Checks passing - Changes requested\r\n  #457  validate/format on PR's [maxandersen:ide-config-dev]\r\n   - 2/3 checks failing - Changes requested\r\n\r\nRequesting a code review from you\r\n  You have no pull requests to review\r\n```\r\n\r\nI now have to manually create the right url to go to 494.....thats tedious.\r\n\r\nand typing `gh pr show 494` is not right either.\r\n\r\n### Proposed solution\r\n\r\nadd a `--full` or `--verbose` flag or even default print the url under the messages.\r\n \r\n```\r\ngh pr status\r\n\r\nRelevant pull requests in quarkusio/quarkus-quickstarts\r\n\r\nCurrent branch\r\n  There is no pull request associated with [476-parameterize-platform-development]\r\n\r\nCreated by you\r\n  #494  Make the GAV of the BOM parametrized [maxandersen:476-parameterize-platform-development]\r\n   - Checks passing - Changes requested\r\n    https://github.com/quarkusio/quarkus-quickstarts/pull/494\r\n  #457  validate/format on PR's [maxandersen:ide-config-dev]\r\n   - 2/3 checks failing - Changes requested\r\n     https://github.com/quarkusio/quarkus-quickstarts/pull/457\r\n\r\nRequesting a code review from you\r\n  You have no pull requests to review\r\n```\r\n\r\nthen in modern terminals I can just click the url (or copy it) and go directly.\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like to list the repositories which I have marked with a star with the given flags\r\n\r\n### Proposed solution\r\n\r\nIn my personal experience, I used to query this list in order to see which projects have been updated recently.\r\n\r\n### Additional context\r\n\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI often wish I had a way of listing the repositories for an org.   Something like:\r\n\r\n### Proposed solution\r\n\r\n``` console\r\n$ gh repos list --org=18F\r\nproduct-guide\r\nhandbook\r\neng-hiring\r\n...\r\n```\r\n\r\nLater options other than `--org` could be added (`--query` for example)\r\n"},{"labels":["enhancement",null],"text":"This is a tracking ticket listing all the filtering options for issues and pull request currently available on GitHub and the status of their availability in GitHub CLI. (Checked means implemented and merged to master.)\r\n\r\nWe do **not plan to explicitly support all these filtering options** in CLI. We will select those that we intend to implement on a case-by-case basis.\r\n\r\n### Filtering options available through GitHub web UI\r\n\r\nIssues\r\n- [x] assignee `--assignee, -a`\r\n- [ ] assigned to the current authenticating user\r\n- [ ] no assignee\r\n- [x] labels `--label, -l` (\"OR\" logic)\r\n- [ ] labels `--label, -l` (\"AND\" logic) #419\r\n- [ ] _excluding_ a label\r\n- [ ] no label\r\n- [x] state `--state, -s`\r\n- [x] author `--author, -A` #625\r\n- [ ] authored by the current authenticating user\r\n- [x] mentioning user\r\n- [ ] mentioning the the current authenticating user\r\n- [ ] mentioning team\r\n- [ ] project\r\n- [ ] no project\r\n- [x] milestone\r\n- [ ] no milestone\r\n\r\nPull requests\r\n- [x] assignee `--assignee, -a`\r\n- [ ] assigned to the current authenticating user\r\n- [ ] no assignee\r\n- [x] labels `--label, -l` (\"OR\" logic)\r\n- [ ] labels `--label, -l` (\"AND\" logic) #419\r\n- [ ] _excluding_ a label\r\n- [ ] no label\r\n- [x] state `--state, -s`\r\n- [ ] author `--author, -A` (**blocked** due to GitHub API restrictions)\r\n- [ ] authored by the current authenticating user\r\n- [ ] mentioning {user|team}\r\n- [ ] mentioning the current authenticating user\r\n- [ ] project\r\n- [ ] no project\r\n- [ ] milestone\r\n- [ ] no milestone\r\n- review status\r\n\t- [ ] no reviews\r\n\t- [ ] review required\r\n\t- [ ] approved\r\n\t- [ ] changes requested\r\n\t- [ ] reviewed by {user|team}\r\n\t- [ ] reviewed by the current authenticating user\r\n\t- [ ] not reviewed by {user|team}\r\n\t- [ ] not reviewed by the current authenticating user\r\n\t- [ ] awaiting review from {user|team}\r\n\t- [ ] awaiting review from the current authenticating user\r\n\r\n### Filtering options available through advanced search syntax\r\n\r\nIssues\r\n- [ ] commented on by {user}\r\n- [ ] number of comments\r\n- [ ] number of interactions\r\n- [ ] number of reactions\r\n- [ ] involves {user}\r\n- [ ] linked issue/pull request\r\n- [ ] date created\r\n- [ ] date updated\r\n- [ ] date closed\r\n\r\nPull requests\r\n- [ ] commented on by {user}\r\n- [ ] number of comments\r\n- [ ] number of interactions\r\n- [ ] number of reactions\r\n- [ ] involves {user}\r\n- [ ] linked issue/pull request\r\n- [ ] date created\r\n- [ ] date updated\r\n- [ ] date closed\r\n- [ ] date merged\r\n- [ ] search by commit SHA\r\n- [ ] draft status\r\n- [x] base branch `--base, -B`\r\n- [ ] head branch\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen creating a PR, be able to tag a reviewer from the CLI\r\n\r\n### Proposed solution\r\n\r\nCurrently, you can create a PR and have it automagically create the PR on Github, which is great if Im working through a lot of bugs and dont want to open up GitHub in the browser. However, when I need to add a reviewer to my PR, I have to stop and do it manually in the repo. \r\n\r\nI think something like `gh pr create --base=develop --reviewer=matthewtrask` where reviewer can be a list of people. \r\n\r\nHuge thank you for this project, its brilliant and makes life easier!\r\n"},{"labels":[null,"enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n@sayboras requested in #389 that we support filtering by author for issues and PRs. Unfortunately we're blocked on the API for PRs, so we're going to ship it for issues in that issue and then follow up with PRs when it's ready. We'll use this issue to track that work (though we may move to a larger tracking issue for filtering soon).\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nGit supports shortcuts for commonly used commands (e.g. `co` vs `checkout`)\r\n\r\n### Proposed solution\r\n\r\nSupport the same in `gh`, for example `gh pr co 123`"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWe recently released repo commands but there's no way to preview a repo in the terminal like you can with an issue or PR.\r\n\r\n### Proposed solution\r\n\r\n`gh repo view <owner>/<repo>` should display contents of the repo in the terminal.\r\n\r\nSome thoughts, and deferring to @ampinsk on designs.\r\n\r\nSome combination of repo metadata and some or all of the README, though what exactly to show for metadata is tricky because there are so many possibilities:\r\n<img width=\"1485\" alt=\"Screen Shot 2020-03-09 at 4 56 58 PM\" src=\"https://user-images.githubusercontent.com/5091167/76264325-10017900-6227-11ea-9ef8-a2dc1cfed4f4.png\">\r\n\r\n### Additional context\r\n\r\nThis should be released with #555 and #217 so we can ensure consistency across view commands.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nA couple things have risen to the level of things where we feel like adding the ability to configure a set of preferences for `gh` would be appropriate.\r\n\r\n### Proposed solution\r\n\r\nCreate a `gh config` command (open to other ideas on the naming, but this is what we were thinking).\r\n\r\nInitially, this will include two preferences:\r\n- SSH vs https default remote preference\r\n- Default editor for use with gh\r\n\r\nOur thinking is to have a config file, probably a yaml file, that contains these preferences and is where we read from when they use the tool. However, we'd also like a simpler and less error-prone way to change a particular preference, so we were thinking of:\r\n\r\n`gh config <key> <value>`\r\n\r\nFor example, to change your default editor, you could: `gh config editor vim` (I don't know if this is exactly what the command would be, but that's the idea).\r\n\r\n### Additional context\r\n\r\nThis is directly related to #546 and #308.\r\n"},{"labels":["enhancement",null],"text":"In https://github.com/cli/cli/pull/530#discussion_r387045228, @mislav pointed out that we should only show the most recent PR for the current branch, not other PRs that came before it and happened to share the same branch name.\r\n\r\n@doi-t Please let us know if you're intending to pick this up!\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen I clone a fork with `gh repo clone` command, my only remote is the fork repo. It makes a lot of sense to also have a remote for the parent repo. As discussed in https://github.com/cli/cli/issues/582#issuecomment-596752151, we want to use the GitHub suggested remote naming conventions.\r\n\r\n### Proposed solution\r\n\r\nAfter cloning a fork, automatically add a remote for the parent repo and name it `upstream`.\r\n\r\nWe should also automatically add the remote when someone uses `gh repo fork` and says they would like to clone the repo locally.\r\n"},{"labels":[null,"enhancement"],"text":"as many others, I have one private github account, and another for work. Since github doesn't really allow easy account switching, i'm using one browser for my private stuff, and another browser for my work stuff.\r\n\r\nThis means that I need to be able to select which browser to use for `gh` authentication setup. It currently just opens the default browser. \r\n\r\nMy ask is that `gh` instead prints out the auth url, so that I can open it in the browser of my choosing. This would work much better for folks with multiple github accounts linked to different browsers."},{"labels":["enhancement"],"text":"### Adding Label on creating Issue\r\n\r\ni can't add Label on creating issue\r\n\r\n### gh create issue\r\n\r\n?Title\r\n?Body\r\n?Label\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nOccasionally I'll want to open a PR directly from the `pr status` or `pr list` output. Rather than having to then run `pr view <PR#>`, it'd be nice to be able to `ctrl+click` and open a PR from the terminal directly.\r\n\r\n### Proposed solution\r\n\r\nLinkify the PR# in the `pr status` and `pr list` output so that the links can be followed without having to run another command.\r\n\r\n### Additional context\r\n\r\nI'm extra lazy 😁 \r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI just installed gh thru \"choco install gh\".\r\nThe very first time I try to use it, I'm already on an outdated version.\r\n\r\n### Proposed solution\r\nA GitHub Action pipeline to publish to choco automatically, when there is a new release.\r\n\r\n### How will it benefit CLI and its users?\r\nNo need to wait manual updates to choco.\r\n\r\n### Additional context\r\nChoco package is here: https://chocolatey.org/packages/gh\r\nAfter this issue was opened: https://github.com/cli/cli/issues/396"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI can't find a way to create a PR with a multi line body with the flags\r\n\r\n### Proposed solution\r\n\r\nOne solution can be to allow multiple time the flag `--body` and concatenate with the newline separator. It's useful when use the cli in a script or something like that\r\n\r\n\r\nOr may be there is another way?\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nA clear and concise description of what the feature or problem is.\r\n\r\nFor example, when I use `gh issue status -R cli/cli`, I will get the issues related to me.\r\n\r\n```bash\r\n\r\nRelevant issues in cli/cli\r\n\r\nIssues assigned to you\r\n  There are no issues assigned to you\r\n\r\nIssues mentioning you\r\n  There are no issues mentioning you\r\n\r\nIssues opened by you\r\n  There are no issues opened by you\r\n\r\n```\r\n\r\nIs there a feature to add the user argument to specify the user id for some user?\r\n\r\n\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nIt helps the maintainer to know the issues for each collaborator.\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups that are helpful, if applicable.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nHi 👋 \r\n\r\nI push to all repositories using SSH to authenticate, but when I tried out the `gh repo fork` command today it setup the remote using https.\r\n\r\nWhich left me prompted like this:\r\n\r\n```\r\n$ git push -u fork use-wait-for-message\r\nUsername for 'https://github.com': ^C\r\n```\r\n\r\nCould a configuration setting be added to prefer SSH?\r\n\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nMakes it work for users who authenticate with ssh keys\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement",null],"text":"Hi, first of all, the CLI is fantastic and I've been using it a lot and it definitely speeds up things. Thanks GitHub for this fantastic speed boost.\r\n\r\n### Describe the feature or problem you’d like to solve\r\n\r\nRight now when I create a PR, the merge base is set to `master`. I have to go and manually change it to `staging`, which is where in our particular case we merge things first for testing, before finally merging them to `master`.\r\n\r\n### Proposed solution\r\n\r\nThere could be a parameter like `-M` (and/or `--merge-base`) to specify a branch to use as the base merge. For example:\r\n\r\n```\r\ngh create pr -M=staging\r\n```\r\n\r\nThanks!"},{"labels":["enhancement",null],"text":"When forking a repo with `gh repo fork`, the remote is named \"fork\". \r\n\r\nInstead I'd prefer this to use the upstream's namespace (username under which the fork lives), which, for a fork created by me, would be \"waldyrious\".\r\n\r\nThat would make the list of remotes more self-descriptive, and would allow cloning multiple forks of the same repo without naming conflicts or using e.g. counters like \"fork-1\", etc.\r\n\r\nNote: the proposed solution is what `hub` does."},{"labels":["enhancement"],"text":"As shown in #580, a fork created by `hub` (named \"waldyrious\" in the output below) uses the SSH url, while the one created by `gh` (named \"fork\" below) uses the HTTPS one:\r\n\r\n```\r\n$ git remote -v\r\nfork\thttps://github.com/waldyrious/homebrew-core.git (fetch)\r\nfork\thttps://github.com/waldyrious/homebrew-core.git (push)\r\norigin\thttps://github.com/Homebrew/homebrew-core (fetch)\r\norigin\thttps://github.com/Homebrew/homebrew-core (push)\r\nwaldyrious\tgit@github.com:waldyrious/homebrew-core.git (fetch)\r\nwaldyrious\tgit@github.com:waldyrious/homebrew-core.git (push)\r\n```\r\n\r\nI'd have expected `gh` to use the same URL as `hub`."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAs a developer, I want to check out one of my repos that was forked from an upstream one, by using `gh clone ‹my-repo-url›`.\r\n\r\nI want the ``origin`` remote set to the SSH URL of my repo, and the ``upstream`` one to the HTTPS URL of the forked repo.\r\n\r\nEverything else should be 1:1 as if I called ``git clone …``.\r\n\r\nBonus points: ``gh fork ‹upstream-repo-url›`` does the same, but also includes the forking.\r\n\r\n### Proposed solution\r\n\r\nConvenience wrapper to work more easily with forks as described above.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd like to be able to build this in containers, and use for GitHub workflows (actions). The current documentation that shows various commands seems to default to opening up a browser to authenticate.\r\n\r\n### Proposed solution\r\n\r\nIt would be great to be able to provide an exported token (one from a user or GitHub actions bot) and interact with the client.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThere are widely varying preferences for where people would like to view an issue, PR, repo, etc., but as we've been digesting feedback we think that more people would benefit from the default view behavior being to view the object right in the terminal as opposed to being taken to the browser. We still think it should be simple to view in the browser as we know an easy handoff there is an important piece of many people's workflow.\r\n\r\n### Proposed solution\r\n\r\nWe discussed swapping the default behavior of `view` actions to display in the CLI, which is the current functionality of the `--preview` flag. As we get further along in terms of what you're able to see in the terminal itself, this will become even nicer.\r\n\r\nIn order to also accommodate easily viewing in browser, we're suggesting a flag on `view` actions for `--web`, that allows people to view the specified object in the browser.\r\n\r\n### Additional context\r\n\r\nThere are several places across the app where view actions do this (issue, pr, repo), so we'll just need to be thorough here.\r\n\r\nThis may require a bit of documentation change anywhere we've shown view taking people to the browser by default."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently, we have `gh pr list` which map to `https://github.com/<repo>/pulls` .\r\n\r\nHowever, `--assignee` may not enough as many people just use `reviewers`\r\n\r\nThe github web has another way to check pr at tabs https://github.com/pulls/{,assigned,mentioned,review-requested} \r\nand they are common landing pages to find PRs to work on.\r\n\r\n### Proposed solution\r\n\r\nAdd flag --reviewer in `gh pr list` command.\r\n\r\nAdd `gh my-pr` command with options [--created|,--assigned,--mentioned,--review-requested]` .\r\n\r\n### Additional context\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWith today's service downtime/errors/whatever, I had the `gh` tool fail to create a PR. Note that this is _not_ about the downtime itself, but around a better UX when they happen.\r\n\r\nI ran `gh pr create` locally, had it open up my editor to fill out the body. I added context, linked to tickets, all the good stuff. However, when actually trying to finish up and create the PR, a `502` blocked the creation.\r\n\r\n```\r\n? Title fix: alternate solve for gap in preview page\r\n? Body <Received>\r\n? What's next? Submit\r\nfailed to create pull request: http error, 'https://api.github.com/graphql' failed (502): ''\r\n```\r\n\r\n(Note: I'm not sure what `Received` means in the case. Was the body uploaded somewhere?)\r\n\r\nSadly, the whole PR body that I wrote up is now gone completely and I'll have to re-write it all 😦 It would be really nice if that was _not_ the case, though, and there was some way to recover my state from before the error took place.\r\n\r\n### Proposed solution\r\n\r\nI have a few thoughts on things that might be better than losing this valuable state altogether:\r\n\r\n* Write the PR description out to a local file (in the current directory) in the case of an error, so we can try again manually\r\n* Cache the PR description somewhere \"internal\" to the `gh` tool so that if I run `gh pr create` a second time after the initial failure, the PR body is pre-populated with the state I gave it previously.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nSome users prefer that remotes be interacted with over SSH exclusively but we currently default to https in a few places.\r\n\r\n### Proposed solution\r\n\r\nSupporting a `preferSSH` setting in `gh`'s config. This requires actually thinking through some UX; we can either expect people to hand-edit the config, offer a hyper specific command just for this setting, or add a `gh config key value` style command.\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nPeople like me who prefer SSH over HTTPS will be happy.\r\n\r\n### Additional context\r\n\r\ni'm fine with this being hand-edit for now but i feel like we're only going to find more cases where we want a `gh config` style command.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature & proposed solution in one.\r\n\r\nThe `-p` flag is really useful and it makes sense, to least for me, that this is what `gh pr view` should do by default.\r\n\r\nAdding a `gh pr open` command to do what `gh pr view` does now, would make it possible to have `pr view` show the preview by default."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nRelated to https://github.com/cli/cli/issues/390, but right now the opened PR or issue file seems to be of the form `$TMPDIR/630826291.md`.\r\n\r\n`hub` uses `.git/PULLREQ_EDITMSG`\r\n\r\nThere are a couple of differences:\r\n\r\n1. Adding the `.md` extension -> This is 💯 \r\n2. Not having a consistent file name or prefix -> This is less desirable as you can't configure global settings in your editor.\r\n3. Not being in the git repo itself -> probably cleaner, but means you can no longer use things like an [editorconfig](https://editorconfig.org/) to set things like line lengths and other formatting on a per-repo basis. On the other hand I'm not aware of many things you'd want to configure on a per-repo basis. \r\n\r\n### Proposed solution\r\n\r\nAdd a consistent prefix, e.g. `$TMPDIR/630826291.md` -> `$TMPDIR/gh_pr_630826291.md` and `$TMPDIR/gh_issue_630826291.md`.\r\n\r\nThis will allow users to configure their editors appropriately, e.g. having a custom GFM syntax type."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be nice if `gh` can add a similar feature of `hub create` that would make project initialisation more developer friendly.\r\nSomething like below\r\n```\r\n# create a repo to host a new project on GitHub\r\ngit init\r\ngit add .\r\ngit commit -m \"gh rocks ❤️\"\r\ngh create\r\n→ (creates a new GitHub repository with the name of the current directory)\r\ngit push -u origin HEAD\r\n```\r\n\r\n### Proposed solution\r\n\r\nIt will make easy to start with `gh` cli\r\n\r\n### Additional context\r\n\r\nhttps://hub.github.com/\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be desirable to have `gh issue list` or `gh pr list` be piped using `$PAGER` variable much like when one does `git log`. If the output is longer that the height of the screen, the output is sent via `$PAGER` (in most cases - `less`).\r\n\r\nCurrently the limit is default to 30, and when increasing this to say 100 (i.e. `gh issue list --limit 100`) it would be nice to be able to grep and search this output perhaps.\r\n\r\nThis feature could then be overriden even with something akin to how it is done in `git` with:\r\n```\r\ngit --no-pager log\r\n``` \r\n\r\n### Proposed solution\r\n\r\nThe proposed solution it add an option to pipe output to the users `$PAGER` variable, much like the behaviour with `git log` when the output exceed the height of the users screen. \r\n\r\nI would also propose an option to disable this with something similar to `git` again, with `git --no-pager log` or the like.\r\n\r\nI'm not sure where I would be able to start with this but I am happy to learn and give this a go with some guidance if it is felt that this is something people would like.\r\n\r\nApologies if this is already possible, but in my search I could not seem to find documentation regarding this, so if that is the case, I am happy to assist with the documentation as well.\r\n\r\n* Potentially linked to: https://github.com/cli/cli/issues/452"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIf you PR a single commit, it would be great if it defaulted to using the commit's title and body as the new PR's title and body (or an option to do this).\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nLess typing! Also .com does this :)\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n\r\nN/A"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWould love a top level command to just open the repository in browser.\r\n\r\n### Proposed solution\r\n\r\nI'm in a repository, and I want to open it in browser.\r\n```\r\n$ git remote -v\r\norigin    git@github.com:stobias123/my-cool-code.git (fetch)\r\norigin  git@github.com:stobias123/my-cool-code.git (push)\r\n$ gh open\r\n$ # browser opens to the above repo.\r\n```\r\n\r\nNot major, but would be convenient."},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n`gh issue create` is excellent, and I love being able to write issues using $EDITOR. I would also like to comment on issues using the same workflow. \r\n\r\n### Proposed solution\r\n`gh issue comment #123` would behave similarly to `gh issue create`. The CLI would open $EDITOR, and submit the comment after $EDITOR closes.\r\n\r\nUsing $EDITOR to type longer comments is awesome!\r\n\r\n### Additional context\r\nWhen we do this we should make it available for both issues and pull requests."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nKorean titles break the table alignment. It should support the multi-length language font.\r\n\r\nAnd current `truncate` function can't handle the multibyte Unicode characters. (It should use the rune slice instead of byte slice)\r\n\r\n```\r\n#6  Path Mapping 기능이 필요합니다.                                         (feature)\r\n#7  프로젝트 내의 proto 경로가 바뀌면 registry에 �...                            (bug, feature)\r\n#5  path mapping for protoPaths                                     (feature)\r\n#4  delete and create strategy for push/pull                        (feature)\r\n#2  [question] karrier build                                        (feature)\r\n```\r\n\r\nThe last Unicode character of `#7` is broken.\r\n\r\n### Proposed solution\r\n\r\nI have no idea right now that how to handle the multi-length font in the terminal. How do we resolve this issue?"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt would be useful to have a command for creating repositories.\r\n\r\n### Proposed solution\r\n\r\n`gh repo create`, creates a repository automatically on github and clones it. Ideally it lets you pick the licence and if you want a readme in the process.\r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently to get setup with a package repository, you need to generate a PAT with the correct permissions and then go through the appropriate tool's login mechanism. While this isn't too terrible, it'd be great it you could run a simple command to login to github packages.\r\n\r\n### Proposed solution\r\n\r\n~gh [pkg|packages] [provider] login~\r\n`gh [pkg|packages] login <provider>`\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nwhen using `gh issue create` on a organization I get the error:\r\n\r\n```\r\ngraphql error: 'Although you appear to have the correct authorization credentials, the `quarkusio` organization has enabled OAuth App access restrictions, meaning that data access to third-parties is limited. For more information on these restrictions, including how to whitelist this app, visit https://help.github.com/articles/restricting-access-to-your-organization-s-data/'\r\n```\r\n\r\nbut nothing in those docs actually explain how to get gh to re-login in again to actually request the access so there is never anything to approve.\r\n\r\n"},{"labels":["enhancement",null],"text":"> My expectation (just as the UI does), is to see the list of templates in any case (even if we have only one) because we should have something like `Blank` available to get a clean issue without any template.\r\n\r\n_Originally posted by @gianarb in https://github.com/cli/cli/issues/503#issuecomment-588236044_"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAfter `gh pr checkout ...`, sometimes I add some fixes and want to push the modification back to contributor's repo:\r\n```\r\ngit push https://github.com/CONTRIBUTOR/REPO.git BRANCH_NAME\r\n```\r\n\r\n### Proposed solution\r\n\r\nIt would be nice to have a command for it e.g.\r\n\r\n```\r\ngh pr push 456\r\n```\r\n\r\n(Does it make sense to name it as `gh pr checkin`?)"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI have taken the time to create an entry of GitHub CLI on OpenHub website\r\n\r\nhttps://www.openhub.net/p/GitHubCLI\r\n\r\n### Proposed solution\r\n\r\nThis will provide additional visibility to the project by being in the directory and the fact of being part of a community, offering analytics,  search services, tools, code’s history, contributors as well as aggregate data for many different categories.\r\n\r\nFor now I have:\r\n\r\n- Filled the basic information\r\n- Updated the logo\r\n- Added some tags\r\n- Requested Manager status for project\r\n\r\nFeel free to edit or suggest any content relevant as well as provide feed back\r\n\r\n### Additional context\r\n\r\n> The Black Duck Open Hub (formerly Ohloh.net) is an online community and public directory of free and open source software (FOSS), offering analytics and search services for discovering, evaluating, tracking, and comparing open source code and projects. Where available, the Open Hub also provides information about vulnerabilities and project licenses.\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWe want to be able to filter PRs by whether they've been approved or not.\r\n\r\n### Proposed solution\r\n\r\nAdd an `approved` flag to `pr list -state` flag\r\n\r\n### Additional context\r\n\r\nMy code review workflow consists of listing all PRs assigned to me. Then once I approve one, I don't close or merge it. It would be useful to me to be able to remove the PRs I have already approved from the list.\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\nIt would be nice to have an option to open the URL of the pull-request a user creates (`gh pr create`) immediately after creating it but not in edit-mode as the flag `-w | --web` is doing.\r\n\r\nA clear and concise description of what the feature or problem is.\r\nWhen you apply the `-w | --web` flag, a created Pull Request is opened in edit mode (`https://github.com/<user|company>/<repository>/compare/<branch-name>?expand=1`), giving the option to the user to edit the title and body of the PR and finally submitting its creation:\r\n![image](https://user-images.githubusercontent.com/2574275/74608742-01221d80-50e4-11ea-83d3-673fc992bb05.png)\r\n\r\nIt would be nice to have the option to open the browser immediately after the Pull Request is created and with all the title and body already set. The URL to open would be: `https://github.com/<user|company>/<repo>/pull/<pull-request-id>`\r\n\r\n![image](https://user-images.githubusercontent.com/2574275/74608666-73dec900-50e3-11ea-8360-507d9e45cdf0.png)\r\n\r\n### Proposed solution\r\nThe flag would need a deep discussion but to follow the approach of [hub](https://hub.github.com/hub-pull-request.1.html) would be an start:\r\n\r\n`-o | --browser` behaviour combined with `-e | --edit` / `--no-edit` flags\r\n\r\n### Additional context\r\nFeel free to link or close if duplicate issue. \r\n\r\nAlso, if you agree on the proposal I would be happy to contribute to support this feature!\r\n"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nChecks take time.  It would be nice to be able to know when they are complete, and their status.\r\nParticularly problematic are cases where checks take long enough to allow for focus to shift, but not so long you don't want to get on with your next big task before continuing (say 1-5 minutes).\r\n\r\nDifferent users and environments will want different ways of providing such notifications, but one example on the Mac is the 'say' command, which causes the mac to say what comes after it on the command line.\r\n\r\nfor this example you could use:\r\n\r\n```gh pr wait; say PR Exit Code $?```\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\n```gh pr wait [-q]```\r\n\r\nWaits for pr checks to transition from 'pending' state. Upon pr check transitioning from pending state, return has exit code 0 for success and 1 for failure.  The normal output would be the same as gh pr status (once it transitioned out of 'pending'.  -q would be quiet mode (not output).\r\n\r\n### Additional context"},{"labels":["enhancement",null],"text":"Long time `hub` user here, great job so far on the new CLI tool!\r\nPlease add the ability to `pr create` without any prompts at all.  \r\n\r\nEquivalent example from `hub`:  \r\n`hub pull-request -pm 'Some title'`\r\n=>\r\n`gh pr create -t 'Some title' --skip-prompt`\r\nie no prompt to add a body or preview on web or cancel, just create the PR and print the url.\r\n\r\nEdit:\r\nAfter looking at the source, found the workaround of using an \"almost\" empty body to skip the prompt:\r\n`gh pr create -t 'Some title' -b ' '`  \r\nPossibly there should be a more clear/documented method."},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nBe able to search issues or PRs by a matching string or regex.\r\n\r\n### Proposed solution\r\n\r\nUsers commonly put indicative text as part of the issues/PR titles, e.g. [Java] or [core]\r\nThe ide would be to include a new command to both `issue` and `pr` for example:\r\n\r\n```\r\ngh issue search \"[core]\"\r\ngh pr search \"[Java]\"\r\n```\r\n\r\n### Additional context\r\n\r\n\r\n"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nSupport encrypted keychains for Linux, Mac, and Windows.\r\n\r\n### Proposed solution\r\n\r\nInstead of storing the CLI application's OAuth token in plaintext, integrate with keychain applications so it stays encrypted.\r\n\r\n### Additional context\r\n\r\n[aws-vault](https://github.com/99designs/aws-vault) uses its own library for interacting with the various keychain applications.\r\n\r\n[aws-okta](https://github.com/segmentio/aws-okta) also implements the same library to store credentials for both Okta sessions and AWS role sessions.\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would love a way to manage my issue labels from the `gh` tool.\r\n\r\nFor example, clone labels from repo to repo, list labels, create a label, update a label, etc.\r\n\r\n### Proposed solution\r\n\r\nHere are the commands that I'm proposing\r\n\r\n#### `gh label view`\r\n\r\nOpen the repository labels page.  \r\n(example: https://github.com/bradgarropy/bradgarropy.com/issues/labels)\r\n\r\n```\r\ngh label view\r\n```\r\n\r\n#### `gh label list`\r\n\r\nList all labels in the repository.\r\n\r\n```\r\ngh label list\r\n```\r\n\r\n#### `gh label create`\r\n\r\nCreate a label.\r\n\r\n| name | example | description | required |\r\n|---|---|---|---|\r\n| `name` | `todo` | Issue name. | yes |\r\n| `description` | `Need to accomplish this.` | Describe the label. | no |\r\n| `color` | `#eeeeee` | Background color. | no |\r\n\r\n```\r\ngh label create todo \"Need to complete this.\" #eeeeee\r\n```\r\n\r\n#### `gh label clone`\r\n\r\nCreate a label.\r\n\r\n| name | example | description | required |\r\n|---|---|---|---|\r\n| `repo` | `bradgarropy/adobe-lunch` | Destination repository.  | yes |\r\n| `clobber` | `--clobber` | Clobber destination labels. | no |\r\n\r\n```\r\ngh label clone bradgarropy/adobe-lunch --clobber\r\n```\r\n\r\n### Additional context\r\n\r\nI made a tool called [labman][labman] which handles cloning labels between repos. Should be a great reference!\r\n\r\nI'd make some PRs myself, but I don't know Go 😢\r\n\r\n[labman]: https://www.npmjs.com/package/labman\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently syncing a fork is a multiple step process, described in the GitHub help docs:\r\n\r\nhttps://help.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork\r\n\r\nOnce other fork related features have been added to cli it would be great to have a command to sync your fork.\r\n\r\nSyncing a fork is often a challenging process for new contributors and forkers, this could make it a lot easier for them to get started and stay up to date.\r\n\r\n### Proposed solution\r\n\r\nAdd a command that allows you to pull upstream changes and merging them. With the context of GitHub behind it, the command could default to using the direct parent of the fork as the upstream, but could perhaps have an optional parameter to specify a different upstream or sibling fork.\r\n\r\n### Additional context\r\n"},{"labels":["enhancement",null],"text":"That would be great if Github CLI could support [Secrets](https://developer.github.com/v3/actions/secrets/) which are used in Github Actions. Do you have any plans for that?"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen creating an issue via `gh`,  there are only **Title**, **Body** can be configured.\r\n```\r\nCreating issue in ...\r\n\r\n? Title Dark mode support\r\n? Body <Received>\r\n? What's next? Submit\r\n```\r\n\r\nIf **Project** can be set during the issue creation would be very helpful.\r\n\r\n### Proposed solution\r\n\r\nIf this feature implemented, there is no need to open the issue in the browser to set the Project. \r\n\r\n### Additional context\r\n\r\nNo.\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAllowing review for github pull requests\r\n\r\n### Proposed solution\r\n\r\nWe can use [Reviews API](https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review) for this.\r\n\r\n### Additional context\r\n\r\nI'd love to approve/comment on pr inside terminal.\r\nPossibly I would be able to add this feature and make pr for this.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nMy suggestion is creating a CLI command for the part of the process between gh issue view (see issue details) and gh pr create (create pull request).\r\n\r\n### Proposed solution\r\n\r\nSpecifically, I suggest a single command to \"clone project on GitHub, download locally, create branch, set up local/remote connection.\"\r\n\r\n### Additional context\r\n\r\nI [made this suggestion on Twitter](https://twitter.com/sharon000/status/1227944920553529344?s=20) and @nerdneha [suggested I open an issue here](https://twitter.com/nerdneha/status/1227994652910874624?s=20). So here I am.\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n`gh -R owner/repo issue list --milestone milestone_title`\r\n\r\n\r\n### Proposed solution\r\n\r\nHelp filtering issues\r\n\r\n### Additional context\r\n\r\nWill display the same list than `gh -R owner/repo issue list ` but only when matching the chosen milestone.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nNow that Heroku builds randomized application names for review applications, there's not an straightforward way to know from a branch or PR what application it points to without going to the Github PR page or making two API requests (one to Heroku, one to GH).\r\n\r\n### Proposed solution\r\n\r\n`gh pr environment` would return the current environment for the pull request's most recent deploy (or a list of environments/deploys).\r\n"},{"labels":["enhancement",null,null],"text":"Edited by @billygriffin of GitHub CLI team:\r\n\r\nPeople want to be able to change the state of a particular issue or pull request. The scope of this issue will be to close and reopen issues and pull requests.\r\n\r\nWe're calling merging out of scope for this because it's a more complex interaction and should be considered separately. \r\n\r\nProposed solution:\r\n\r\n`gh issue close [issue number or url]`\r\n`gh issue reopen [issue number or url]`\r\n`gh pr close [pr number or url]`\r\n`gh pr reopen [pr number or url]`\r\n\r\nWith no args, error message stating something to the effect of: `include the issue/pr number or URL`"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\nI'm really suffering using UI for logs, too much scrolling involved.. Would be glad to add hotkey to my emacs to just fetch the last (or `--failed`) logs of current branch and show the current status of action pipelines.\r\n\r\n### Proposed solution\r\nCLI users will get the ability to check actions failures as well as inspecting logs with help of other common CLI tools\r\n\r\n### Additional context\r\n`gh pr logs --failed`\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt will be nice if `cli` will add possibilities to manage GitHub organization. Functions which I imagine under this are:\r\n- managing teams\r\n- managing team/organization members\r\n- listing all organization repositories\r\n- deleting repositories\r\n- archiveing/unarchiving repositories\r\n- creating new repositories\r\n- manage github actions like adding own self runners/setup secrets\r\n\r\n\r\n### Proposed solution\r\n\r\nThis will expand manageability of organisation to CLI level, what will help to put a lot of automation around those things without touching pure github API and writing additional code to cover that.\r\n\r\n\r\n"},{"labels":["enhancement",null],"text":"Something like `gh gist filename` and to have back the URL of the gist created"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nView all Pull requests in your upstream.\r\n\r\n### Proposed solution\r\n\r\nWill allow to track open pull requests for upstream repository of fork.\r\n\r\n### Additional context\r\nNA\r\n"},{"labels":["enhancement",null,null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI prefer `hub` behavior of creating PRs, which open the editor directly to fill in everything (title & body). I'd like to have a way to skip all the prompts if possible with `gh`. I'm aware that the prompt is mainly needed to be able to _preview_ the PR later before submission but that's something I rarely need or use, it also reduces friction & allows you to edit your PR title easier if you change your mind or had a typo.\r\n\r\n### Proposed solution\r\n\r\nAdd a `--skip-prompt` or maybe `--editor` flag to skip the prompt \r\n\r\n---\r\n\r\n**Edit:** this also applies to `gh issue create`\r\n\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently, we have filter based on `--assignee`, however we also need to filter by `--author` so that some of release tooling can pick it up and add details (you know we need to credit contributor 🥇 )\r\n\r\n### Proposed solution\r\n\r\nAdd flag `--author` in both commands, short hand flag might be finalized as `-a` is for assignee right now.\r\n\r\n### Additional context\r\n\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI think having a way to output the results of the CLI comands to JSON or some other standardized output format would be a nice way to let users extend functionality without having to change the CLI code very much.\r\n\r\n### Proposed solution\r\n\r\nSomething like\r\n```\r\n$ gh pr status 123 --output=json\r\n{\"id\": 123, \"title\": \"Some cool PR\", \"branch\": \"my-cool-branch\", \"description\": \"some .md description\", \"checks_passing\": true, \"requires_review\": false}\r\n```\r\nUsers could then easily parse this and perform other actions using the data.\r\n\r\n### Additional context\r\n\r\nMy initial thought was using this to be able to automatically open the issue I'm working on in JIRA by extracting the JIRA tag number from our titles, but it could also be useful for other workflows.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nA common workflow is to fork a project, commit your proposed changes as a branch in your fork, and submit PR from your fork to the parent project. Usually this means that locally you will have a repo where \"origin\" is your fork on GH, and there is another remote that is the parent project.\r\n\r\nBut of course, all the issues and PRs you care about will be for the parent, not for your fork. \r\n\r\nYou could use `-R` to specify another remote, every time you use the gh command, but this is a burden on users and very easy to forget or make errors.\r\n\r\nSo it would be great if there were some kind of persistent per-repo preference that would make all gh commands in that repo refer to a particular remote, rather than \"origin,\" so you don't have to remember to use the `-R` on all commands.\r\n\r\nDoes this already exist?\r\n\r\n### Proposed solution\r\n\r\nIf it doesn't exist, this would be a great addition, saves lots of potential user mistakes.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIt's would be useful to be able  to cherry-pick entire PRs (i.e. all the commits in a PR) as opposed to single commits. This is particularly useful when creating patch releases.\r\n\r\n### Proposed solution\r\n\r\nYou could invoke a new subcommand `gh pr cherry-pick <prnum>` which will result in all the commits of `<prnum>` being cherry-picked.\r\n\r\n### Additional context\r\n\r\nThis is supported by [`hub am`](https://hub.github.com/hub-am.1.html) (which doesn't necessarily mean that `gh` should support it, but it's a basic feature for me).\r\n\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAfter a PR of mine has been merged I currently have to\r\n\r\n* click the button in the GUI to delete the branch (typically from a fork)\r\n* navigate to my local clone\r\n* run:\r\n\r\n```bash\r\ngit checkout master # if not already on base branch\r\ngit pull\r\ngit branch -d local-branch\r\n```\r\n\r\nThis is a bunch of manual steps which I need to repeat several times on a good day.\r\n\r\n### Proposed solution\r\n\r\nNavigate to the local clone and\r\n\r\n```bash\r\ngh pr cleanup 123\r\n```\r\n\r\nought to take care of deleting the various branches for me. Or even\r\n\r\n```bash\r\ngh pr cleanup --all\r\n```\r\n\r\nto clean up branches from any of my PRs which were merged since I last ran this.\r\n\r\nIdeally this would fast-forward my local base branch reference without actually needing to check it out, in case I currently had checked out some other (unmerged) branch or had local modifications.\r\n\r\nFor bonus points, if some rude maintainer used squash or rebase, verify that the base branch really contains all the changes in my local branch before deleting it. Otherwise I need to check this manually if I am being careful. (Genuine merges behave better: if for example I forgot to push some last-minute commits, `git branch -d` will warn me that the branch is not actually merged. This warning is useless for squashed or rebased PRs because it is _always_ printed.)\r\n\r\n### Additional context\r\n\r\nN/A"},{"labels":["enhancement",null,null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nExcited to see this new cli. It will be great if we can manage assets and releases/tags etc with this.\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\nUsecase:\r\n\r\nAs a developer, I maintain the development and pre-release/release of the executable (Linux /mac os). I use this https://www.npmjs.com/package/pkg to create the executable.\r\n\r\nIt would be nice to have it in github-cli so that:\r\n\r\n* I can get the list of tags/branches exist in a repo\r\n* I can manage an asset i.e tag/name of the asset. \r\n* I can upload the asset to the repo release. \r\n* I can manage the type of release i.e release/pre-release\r\n* I can manage the description\r\n* I should be able to delete the asset. \r\n\r\n```\r\ngh list branches --user <user> --repo <repo>\r\n\r\ngh list tags --user <user> --repo <repo>\r\n\r\ngh release create --user <user> --repo <repo> --tag <tag> --name <name> --description <desc> --pre-release\r\n\r\ngh release edit --user <user> --repo <repo> --tag <tag> --name <name> --description <desc> --prelease\r\n\r\ngh release upload --user <user> --repo <repo> --tag <tag> --name <name> --file <path to the file>\r\n\r\ngh release delete --user <user> --repo <repo> --tag <tag> (or --assetID <assetID>)\r\n```\r\n\r\nuser and repo name are optional as it can be derived from .git files.\r\n\r\n### Additional context\r\nReference:  https://github.com/aktau/github-release\r\n"},{"labels":["enhancement",null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI could be a good feature to have the possibility of merge the pull-requests from the cli.\r\n\r\n### Proposed solution\r\n\r\nSomething like this:\r\n\r\n```\r\ngh pr merge\r\n```"},{"labels":["enhancement",null,null],"text":"### Problem\r\n\r\nRunning `gh pr checkout 12345` does nothing to update any repo submodules. For projects with lots of submodule (recursive submodules even!) this reduces the usefulness of the cli tool.\r\n\r\n### Proposed solution\r\n\r\nWe could run `git submodule sync` and `git submodule update --init --recursive` after checkout.\r\n\r\nIt could be worthwhile to make this a configuration parameter if there is a concern about performance.\r\n\r\nI believe this is the relevant part of the code.\r\nhttps://github.com/cli/cli/blob/d43cdfe59d374114b96ab84dc09a9a579ddb0d98/command/pr_checkout.go#L69-L78"},{"labels":["enhancement"],"text":"Changing the colour of text in terminals is tricky, because you never know what the background colour is, so the text may be unreadable or just look ugly. This is especially an issue with lighter backgrounds.\r\n\r\nA `-no-color` switch or something to that would be useful. Right now I have to pipe stuff to `cat` to make the colours go away, which isn't very convenient."},{"labels":["enhancement"],"text":"Editing to clarify for people who come upon this issue that:\r\n\r\n- Shell completion of commands is already supported in gh\r\n- This issue is about shell completion for particular GitHub objects (for example, easily cycling through possible PRs to checkout or view)\r\n---\r\nOriginal issue content:\r\n\r\nIt would be great to have completions for different shell environments. Not only for commands, but, for example, cycling through open pull request when checking out a PR branch or something like that."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nPRs have a really nice way of leaving approvals, change requests, comments, and marking comments as resolved.  gh cli does not appear to support comments on PRs\r\n\r\n### Proposed solution\r\n\r\nCLI could allow commenting on a commit, filename, and line number, and it could allow retrieving all comments on all changes in a commit. \r\n\r\n### Additional context\r\n\r\nThis likely will need support from GH API -- There's comments on PR issues in general (https://developer.github.com/v4/object/pullrequest/) and comments for reviews: https://developer.github.com/v4/object/pullrequestreviewcomment/\r\n"},{"labels":["enhancement"],"text":"[This comment](https://github.com/cli/cli/issues/172#issuecomment-567944874) by @mislav seems to state the current view of the CLI project regarding the choice of whether to push the local topic branch to `origin` or `upstream` when both are accessible. The logic is simple: prefer pushing to `upstream`, falling back to `origin` when access is denied.\r\n\r\nAs a member of a medium-sized open-source project, [Hazelcast Jet](https://jet.hazelcast.org/), I can attest that our process demands pushing to `origin` while developers also have write access to `upstream` because the same devs approve and merge PRs after review.\r\n\r\n### Proposed solution\r\n\r\nA very convenient solution would be to introduce a property on the repository itself, visible on the GitHub web interface. The property would tell the Pull Request policy in effect, it could be \"push your branch to the central repository\" vs. \"ask for your private fork's branch to be pulled\". This would be useful on its own and would allow enforcing this policy when creating pull requests through other means as well. Then the CLI tool would just follow it.\r\n"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI'd like to submit PRs automatically with a single command, without any interactive prompt.\r\n\r\nI can do this very easily with `hub pull-request -f --no-edit`.\r\n\r\n### Proposed solution\r\n\r\nI think `gh` should gain flags like `-f` and `--no-edit` its `gh pr create` command.\r\n\r\n### Additional context\r\n\r\nI don't care too much about the names, or how the options should be surfaced. Right now, `gh pr create` is always interactive, so it's not a good replacement.\r\n\r\nI realise I can specify the title and body via flags, but the beauty of `--no-edit` is that it defaulted to sane defaults - when creating a PR with a single commit, the commit message filled the title and body.\r\n"},{"labels":["enhancement",null,null,null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nAdd support to the `gh pr create` command to set fields like assignee, reviewers, labels, projects, etc for a new PR.\r\n\r\n### Proposed solution\r\n\r\nAdditional prompts in the \"create wizard\" and additional flags for non-interactive use.\r\n\r\nIt would benefits users as it would avoid the need to open the PR in a web browser after creating a PR in order to add the correct related fields for their PR.\r\n\r\n"},{"labels":[null,"enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently the only way to discover GitHub CLI is through the review request on GitHub's PR pages. This was just an initial mechanism to improve discoverability, but more people than just those who use PR reviews will benefit from a better connection between GitHub and their local machine through `gh`, so we should make it clearer that this is available to more of those people as well!\r\n\r\n### Proposed solution\r\n\r\nA broader \"Check out locally\" on the pull request page on GitHub.com to allow users to quickly check out a PR locally using `gh`, GitHub Desktop, or Git.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWe know some folks have the intuition to use `gh clone` as opposed to `gh repo clone`, and although we're treading carefully here so as not to make the design patterns confusion, we do think it's worth supporting both cases.\r\n\r\n### Proposed solution\r\n\r\n`gh clone [repo]`: Clones the repo specified to your current directory, supporting owner/repo and URL\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nCurrently, we help people create a fork if they don't have one in the `gh pr create` command, but this isn't particularly discoverable as we've heard requests for an explicit ability to fork a repo.\r\n\r\n### Proposed solution\r\n\r\n`gh repo fork` with no args: fork the repo I'm currently in\r\n`gh repo fork [repo]`: fork the repo specified, supporting owner/repo and URL\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI want a simpler way to clone a repo than having to remember or copy the syntax for a `git clone` from github.com.\r\n\r\n### Proposed solution\r\n\r\nI want to be able to clone a repo quickly and easily with either owner/repo or URL.\r\n\r\n`gh repo clone [repo]`\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nGitHub CLI is relatively opinionated and necessarily limited in its scope. Therefore, giving people the option to directly access the API via the CLI would be a nice way of providing an option for more custom requests without building all of them in directly.\r\n\r\n### Proposed solution\r\n\r\nI have no strong opinion about how this should work, though `hub api` might provide some inspiration: https://hub.github.com/hub-api.1.html\r\n"},{"labels":["enhancement"],"text":"It would be nice to see linked issues surfaced in `gh pr` commands and all linked pull requests in `gh issue` commands.\r\n\r\nJust navigate to any issue or pull request and check the right-hand sidebar to see the feature.\r\n\r\nHowever, notice the warning text, saying it _may_ close the issue/pr.\r\n\r\n![Screen Shot 2020-02-07 at 11 52 39 AM](https://user-images.githubusercontent.com/14828183/74068816-a92b3e80-49a0-11ea-8b8b-f8c9a40fe596.png)\r\n\r\n![Screen Shot 2020-02-07 at 11 52 49 AM](https://user-images.githubusercontent.com/14828183/74068810-a7fa1180-49a0-11ea-9bca-424b2577ce66.png)\r\n"},{"labels":[null,"enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI have two accounts on github each with access to a different set of private repositories. Currently I use a combination of git's `[IncludeIf ...]` config and a custom config which overrides the SSH private key I use for certain repositories. E.g.:\r\n\r\nIn `~/.gitconfig`:\r\n\r\n```\r\n[includeIf \"gitdir:~/work/\"]\r\n  path = ~/work/.gitconfig\r\n```\r\n\r\nand in `~/work/.gitconfig`:\r\n```\r\n[core]\r\n  sshCommand = \"ssh -i ~/.ssh/work\"\r\n```\r\n\r\nIt will be great if the credentials for `gh` can also be configured per repository as well.\r\n\r\n### Proposed solution\r\n\r\nThere are a bunch of options I can think of:\r\n\r\n* Allow overriding `gh` config by a file in a local clone's `.git` directory\r\n* Allow defining rules in the `gh` config which defines which repos/orgs should use which credential. E.g.\r\n\r\n```\r\ngithub.com/google:\r\n  - user: gemployee\r\n    oauth_token: ...\r\n\r\ngithub.com/microsoft:\r\n  - user: msemployee\r\n    oauth_token: ...\r\n\r\ngithub.com:\r\n  - user: personal\r\n    oauth_token: ...\r\n```\r\n\r\n**How will it benefit CLI and its users?**\r\n\r\nIt will allow Github users with multiple accounts of varying access to seamlessly work on different repositories."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI would like to see a `gh branch` command in order to create new branches, view my branch list/status, and checkout existing branches.\r\n\r\n### Proposed solution\r\n\r\nThe solution would be a complement to existing commands. Although current git commands do the same thing, I find myself constantly breaking my flow by typing the non-existent command `gh checkout [branch-name]`.\r\n\r\nI suggest:\r\n`gh branch create [branch-name]`\r\n`gh branch list` (shows all open branches, with current branch highlighted)\r\n`gh branch status` (shows all: mine, active, stale, with default branch highlighted)\r\n`gh branch checkout [branch-name]`"},{"labels":["enhancement"],"text":"Ported from https://github.com/cli/cli/issues/251#issuecomment-581181964 with improvements.\r\n\r\n### Describe the feature or problem you’d like to solve\r\n\r\nA simple way to target the fork instead of the original repo with any command.\r\n\r\nUse cases:\r\nI have some forked repositories that I maintain & work on myself, with all intentions to target the fork's issues, PRs etc., and not the original repository.\r\n\r\nExamples:\r\n\r\n* ESLint config (https://github.com/sarpik/eslint-config-sarpik)\r\n* Dotfiles (https://github.com/sarpik/voidrice)\r\n* Dotfile installer with custom program list (https://github.com/sarpik/LARBS)\r\n* Suckless terminal with custom patches (https://github.com/sarpik/st)\r\n\r\nas you can see, these are all forks that are specific specifically to my specific use case. (lol)\r\n\r\nThere are no intentions to merge them back or interact with the original repository, except for seeing how many commits the repos have diverged, being open about the fact that the repo is forked and having it in the list of forks at the original repository etc.\r\n\r\n---\r\n\r\nCurrently, with https://github.com/github/hub, I've set-up the following git aliases to allow me to have a comfortable workflow with such cases:\r\n\r\n[`~/.gitconfig`](https://github.com/sarpik/voidrice/blob/current/.gitconfig):\r\n\r\n```ini\r\n# replace `sarpik` with your github username\r\n\r\n[alias]\r\n\tprme =        pull-request --push -a sarpik  --base        master  -epo                                                  # targets upstream\r\n\tprmee =  !hub pull-request --push -a sarpik  --base sarpik:master  -epo --head sarpik:\"$(git symbolic-ref --short HEAD)\" # targets origin  (your repo)\r\n\tprmed =       pull-request --push -a sarpik  --base        master -depo                                                  # targets upstream\r\n\tprmeed = !hub pull-request --push -a sarpik  --base sarpik:master -depo --head sarpik:\"$(git symbolic-ref --short HEAD)\" # targets origin  (your repo)\r\n```\r\n\r\n### Proposed **solution**\r\n\r\nI can think of maybe having something like a \"local\" option, which makes any command operate on the local repo (the repository you forked, not the original one), something like `-l, --local`,\r\n\r\n~~or allow selecting the remote, just like `hub` allows you to, say `--head`~~  that's `--repo`,  but also provide some sugar to make it easier - for example:\r\n\r\na) if the `--repo` option is not provided - do whatever you do currently;\r\na) if it is provided with a specified head - use that;\r\n    a) could we possibly allow a less verbose format for `--repo`?\r\n    something like only providing the `OWNER` and using the current repo's name as the `REPO` automatically?\r\na) (!) if the `--repo` option is provided without anything specified - default to the local repo (if that's even possible).\r\n\r\n### Additional context\r\n\r\nThis would allow simplier alias set-ups, such as the alias examples shown in https://github.com/cli/cli/issues/294 & here - above.\r\n\r\nThanks & best of luck with the cli!\r\n\r\n---\r\n\r\n#### Edit:\r\n\r\nI really like the idea of @bbutkovic @ https://github.com/cli/cli/issues/251#issuecomment-581791099:\r\n\r\n> Perhaps we could add some sort of a flag (--self) to actually open a PR on the current repo instead of fork if someone does end up needing this.\r\n\r\nbut allow this not only for PRs, but also for `issue` & any other commands that can either operate.\r\n\r\nThis would make things way simplier, because you could share your aliases with others without either them having replace the user & repo.\r\n\r\nSo the request is to either improve the `--repo` option, or add a new option - something like `--self`.\r\n\r\n---\r\n\r\nP.S.\r\n\r\nIf https://github.com/github/hub still matters, could we also get a similar feature there for the `--head` option?\r\n\r\nThe alias example shown above could really use it for good,\r\nbut I assume that if the `gh` cli will provide this functionality,\r\nit's probably unnecessary."},{"labels":[null,"enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nThere are some rough edges with the current state of PR checkout; mainly, a nice remote is not added in the case of a PR originating in a fork and tracking is not set up properly for the local -> remote relationship.\r\n\r\n### Proposed solution\r\n\r\n- [ ] Add a remote for forks\r\n- [ ] Consult the repo network to find parent repos like the other commands\r\n- [ ] Set the new local branch as tracking the PR's remote branch\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nGit actions will work more as expected when dealing with locally checked out PRs.\r\n\r\n### Additional context\r\n\r\nI believe the branch tracking used to happen implicitly since the local/remote branch names matched; when I did #302 I broke that."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI used `gh pr create` (surprised that it defaulted to open my PR from a fork into the upstream repo - it was awesome🤩) and when I went to edit the PR body, it defaulted to `nano` but I'd prefer it to use `vim`. \r\n\r\n### Proposed solution\r\n\r\n1. When a user first install `gh` prompt them to choose a default editor:\r\n- nano\r\n- vim\r\n\r\n2. Let a user specify editor\r\n```shell\r\ngh set-editor vim\r\n```\r\n\r\nHow will it benefit CLI and its users?\r\n- it will support nano and vim users ❤️\r\n\r\n### Additional context\r\nN/A\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nSometimes after pushing up a branch, I want to navigate to that repo's website. But usually I type it out manually in the browser after pushing. Instead, it would be nice to run a command and open the repo website for me. \r\n\r\n### Proposed solution\r\n\r\nSomething similar to [`git-open`](https://github.com/paulirish/git-open)\r\n\r\n`gh open` would open the repo under the currently active branch.\r\n\r\n### Additional context\r\n\r\n\r\n"},{"labels":["enhancement",null],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nI use `hub create` to easily get a new repository up on GitHub. I'd like to be able to replace that with the `gh` cli.\r\n\r\n### Proposed solution\r\n\r\nIt could work the same way as `hub create` \r\n\r\nHow will it benefit CLI and its users?\r\n\r\nUsers who use `hub create` will be able to use `gh` instead. New users will benefit from being able to create repos from the command line. \r\n\r\n### Additional context\r\n\r\nAdd any other context like screenshots or mockups are helpful, if applicable.\r\n\r\nShared this feedback on Twitter and it was suggested I open an issue :) \r\n\r\nhttps://twitter.com/billygriffin22/status/1224681668595707907?s=19"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\n[Git's aliases](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases) are extremely useful.\r\nI'd be great to have alias support for github's cli aswell!\r\n\r\nAs mentioned in https://github.com/cli/cli/issues/251#issuecomment-581181964, I currently use aliases together with https://github.com/github/hub, such as:\r\n\r\n[`~/.gitconfig`](https://github.com/sarpik/voidrice/blob/current/.gitconfig):\r\n\r\n```ini\r\n# replace `sarpik` with your github username\r\n\r\n[alias]\r\n\tprme =        pull-request --push -a sarpik  --base        master  -epo                                                  # targets upstream\r\n\tprmee =  !hub pull-request --push -a sarpik  --base sarpik:master  -epo --head sarpik:\"$(git symbolic-ref --short HEAD)\" # targets origin  (your repo)\r\n\tprmed =       pull-request --push -a sarpik  --base        master -depo                                                  # targets upstream\r\n\tprmeed = !hub pull-request --push -a sarpik  --base sarpik:master -depo --head sarpik:\"$(git symbolic-ref --short HEAD)\" # targets origin  (your repo)\r\n```\r\n\r\n### Proposed solution\r\n\r\nHave them aliases! Preferably as close to git's configuration as possible, for simplicity's sake.\r\n\r\n### Additional context\r\n\r\nSince `hub` was a proxy for git, it was easy & simple to just create git's aliases (as mentioned above) for hub itself, since `git` could be aliased to `hub`.\r\nHowever, it isn't clear to me right now whether `gh` will be available for use as a proxy for git (see also https://github.com/cli/cli#comparison-with-hub).\r\n\r\nAnother solution would be to just call `gh` externally from git's aliases, like so:\r\n\r\n```ini\r\n[alias]\r\n\tprls = !gh pr list\r\n```"},{"labels":[null,"enhancement"],"text":"Currently, if I want to install the cli to the system (for example, to `/usr/local/bin`), I need to first run `make` and then manually copy the built executable into the desired location. The same scenario applies once uninstalling.\r\n\r\nIt'd be great if I could just run `sudo make install` to build + install the project, and obviously `sudo make uninstall` to uninstall it.\r\n\r\nThis would make it a little easier to package the project. For example, I'd like to add this to the [Arch User Repository](https://wiki.archlinux.org/index.php/Arch_User_Repository) as `github-cli-git`.\r\n\r\nThanks & good luck with the development of the cli!\r\n\r\n---\r\n\r\nEdit:\r\n\r\nFrom [Makefile](https://github.com/cli/cli/blob/master/Makefile#L12-L13):\r\n\r\n```make\r\nbin/gh: $(BUILD_FILES)\r\n\t@go build -ldflags \"$(LDFLAGS)\" -o \"$@\" ./cmd/gh\r\n```\r\n\r\nWould that supposedly solve my issue?\r\nI tried both\r\n\r\n```sh\r\nsudo make /usr/local/bin/\r\n```\r\n\r\nand\r\n\r\n```sh\r\nsudo make bin/gh /usr/local/bin/\r\n```\r\n\r\nbut neither worked - I just get \r\n\r\n```console\r\nmake: 'bin/gh' is up to date.\r\nmake: Nothing to be done for '/usr/local/bin/'.\r\n```\r\n\r\nAlso, the uninstall step is missing."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nA clear and concise description of what the feature or problem is.\r\n\r\nprobably more of a question than request to start with since i haven't yet had a chance to check out many details yet, but thought it would get this question on the list early.\r\n\r\nsince curl can use credentials, including tokens, configured in a [`~/.netrc` file](https://ec.haxx.se/usingcurl/usingcurl-netrc), i have the github api already configured there. also, git uses curl under the hood, so credentials there can be used through git as well.\r\n\r\nif credentials exist there, can they be used for `gh` as well?\r\n\r\n### Proposed solution\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nthose that already have credentials configured for curl or git using a `~/.netrc` could avoid configuring auth again for `gh`\r\n"},{"labels":["enhancement"],"text":"When attempting to create a PR on a protected branch (with committed changes), the following results:\r\n\r\n```\r\n➜  PRlist git:(ABC) gh pr create\r\nremote: error: GH006: Protected branch update failed for refs/heads/ABC.\r\nremote: error: At least 1 approving review is required by reviewers with write access.\r\nTo https://github.com/tierninho/PRlist.git\r\n ! [remote rejected] HEAD -> ABC (protected branch hook declined)\r\nerror: failed to push some refs to 'https://github.com/tierninho/PRlist.git'\r\n```\r\n\r\nI suggest we use the simpler messaging on GitHub.com UI:\r\n`You can’t commit to ABC because it is a protected branch.`\r\n\r\nAdditionally, when running `gh pr create` with uncommitted changes, the user has to go through the whole flow of adding the files, and committing, only to be rejected with the messaging above.\r\n\r\nI suggest the simpler messaging is adopted here as well, and at an earlier stage."},{"labels":["enhancement",null,null,null],"text":"### Describe the feature or problem you’d like to solve\r\nI'd like to see all the issues or PRs related to me from all my repos, not just the current repo I'm in.\r\n\r\n### Proposed solution\r\n`-a` or `--all` or by default when not in a repo.\r\n"},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nWhen prompting to upgrade to a new version, don't make me think 😄 . In the current version I have to remember how I installed the CLI and how to upgrade it.\r\n\r\nrelated #99 \r\n\r\n\r\n### Proposed solution\r\n\r\nIf not #166 could we add some static suggestions like `brew upgrade gh` to these lines?\r\n\r\n```go\r\n\tnewRelease := <-updateMessageChan\r\n\tif newRelease != nil {\r\n\t\tmsg := fmt.Sprintf(\"%s %s → %s\\n%s\",\r\n\t\t\tansi.Color(\"A new release of gh is available:\", \"yellow\"),\r\n\t\t\tansi.Color(currentVersion, \"cyan\"),\r\n\t\t\tansi.Color(newRelease.Version, \"cyan\"),\r\n\t\t\tansi.Color(newRelease.URL, \"yellow\"))\r\n\r\n\r\n\t\tstderr := utils.NewColorable(os.Stderr)\r\n\t\tfmt.Fprintf(stderr, \"\\n\\n%s\\n\\n\", msg)\r\n\t}\r\n```\r\n\r\nHow will it benefit CLI and its users?\r\n\r\nIt will make getting the latest version easier\r\n\r\n### Additional context\r\n\r\nThe CLI is ✨ .\r\n"},{"labels":["enhancement"],"text":"This looks awesome! Are you planning GHE support already?\r\n\r\n---\r\n\r\n#### Update from the GitHub CLI team:\r\n\r\nIn the [README](https://github.com/cli/cli#availability) we shared additional information about this to help set expectations. Enterprise Server support is something we're really excited to provide, but we want to ensure it's actually usable and that the API endpoints are available on the GHES versions people are using."},{"labels":["enhancement"],"text":"<img> tags are dropped when rendering issue/pr markdown in the terminal. They should be rendered in the same way as other images."},{"labels":["enhancement"],"text":"While view a pr or issue in [Preview](https://github.com/github/gh-cli/pull/203) mode, it would be great to see the URL of any linked issues or pull requests. \r\n\r\nCurrently we only the number in plain text. Adding a link we give the user some additional reference.\r\n\r\n![Screen Shot 2020-01-14 at 11 17 01 AM](https://user-images.githubusercontent.com/14828183/72384570-d21e2380-36c1-11ea-99db-12b33b66d632.png)\r\n\r\nAlternatively, we can surface meta data from the `Linked issue/pull request` section of the online version of Issue/PR. If the user fills out this section, it could be shown next to preview meta data.\r\n\r\n![Screen Shot 2020-01-15 at 9 22 57 AM](https://user-images.githubusercontent.com/14828183/72464088-bcb80080-3778-11ea-8700-10068bf7caff.png)\r\n"},{"labels":["enhancement"],"text":"We are intentionally ignoring the required argument if you are on a branch that has an associated PR and run `gh pr view`.  Doing so opens the browser with the \"default\" pull request.\r\n\r\nOur usage instructions say otherwise: `gh pr view {<number> | <url> | <branch>} [flags]`. \r\n\r\nWe should update the docs to reflect that an argument isn't always needed. "},{"labels":["enhancement"],"text":"- with no args: open the repository on github.com\r\n- with an arg: open that object on github.com\r\n  - owner/repo\r\n  - branch\r\n  - PR/issue number\r\n  - URL\r\n  - file path (and optionally line number) "},{"labels":["enhancement"],"text":"\"I usually use the commit message + commit body to auto-fill PR titles (for single-commit PRs) and descriptions on GitHub, but this tool asked me for that info outside of those, so it was either retype or just cancel and create it on the browser.\"\r\n \r\n\"I really enjoy how hub auto-populates a Pull Request title and body with the branches last commit, if it is the only committed change. I wish the gh CLI would do that as well.\"\r\n\r\n- From feedback form\r\n\r\n"},{"labels":["enhancement",null],"text":"- Check: CI passed\r\n- Check: Approved\r\n- X: CI fail\r\n- X: Changes requested"},{"labels":["enhancement",null],"text":"As we allow the user to create a PR with a `--draft` label, we should in turn allow the user to see PRs marked as a draft when they run `gh pr status` (and `gh pr list`?).\r\n\r\nWe currently give no indication that the pull request is a draft, like so:\r\n\r\n```\r\ngh pr status\r\n\r\nCurrent branch\r\n  There is no pull request associated with [@tierninho]\r\n\r\nCreated by you\r\n  #55  sdfsdf [prcreate]\r\n  #54  zxczxc [tierninho-patch-9]\r\n  #51  dsfsdfsdfsdf [tierninho-patch-1]\r\n  #48  my-title [PRCREATE] \r\n```\r\n\r\nMaybe add a new color? badge? text? \r\n\r\n`#55  sdfsdf [prcreate] [draft]`\r\n\r\ncc @ampinsk for ideas."},{"labels":["enhancement"],"text":"Currently we return the following message if the api cannot be reached due to no internet connection.\r\n\r\n```\r\nPost https://api.github.com/graphql: dial tcp: lookup api.github.com on [::1]:53: read udp [::1]:63914->[::1]:53: read: connection refused\r\n```\r\n\r\nWe should have a more user-friendly error message if this is the case, and if possible we should distinguish between a refused connection and no connection.\r\n\r\n_gh version 9.9.10 (2019-12-19), OSX_"},{"labels":["enhancement"],"text":"Although the color of the first warning text is from running the \"upgrade GH\" cmd, the yellow warning seems to be appropriate color for other warnings in GH. \r\n\r\ncc @ampinsk for thoughts\r\n\r\n![Screen Shot 2019-12-17 at 8 03 13 AM](https://user-images.githubusercontent.com/14828183/71022137-e1e71f80-20a3-11ea-9820-755b89661cdc.png)\r\n\r\n\r\n"},{"labels":[null,"enhancement"],"text":"Currently we use `brew upgrade gh --fetch-HEAD` to upgrade GH, which is hard to remember and means letting the entire script run just to see the build is already installed:\r\n\r\n `Warning: github/gh/gh 0.3.5 already installed` \r\n\r\nor we end up with an upgraded build with an [unclear success message](https://github.com/github/gh-cli/issues/152).\r\n\r\nPerhaps we could mask the brew command with `gh upgrade` to keep it easier to remember and allow us to control the output?\r\n\r\nSome benefits:\r\n- If homebrew was not installed, we could inform the user with instructions. Could be platform/method specific.\r\n- If the current build was already installed, we could inform the user before the script ran\r\n- It could allow the user to switch builds if we go this route "},{"labels":["enhancement"],"text":"When running `brew upgrade gh --fetch-HEAD` we should add a success message if the build upgraded. It just kind of ends with no verification to the user...\r\n\r\n```\r\n==> Checking for dependents of upgraded formulae...\r\n==> No dependents found!\r\n```\r\n\r\nSuggestion:\r\n`gh successfully upgraded to version 0.3.5`"},{"labels":["enhancement",null],"text":"When attempting to interact with an archived repo, we are serving up generic messaging and not alerting the user that the repo is archived.\r\n\r\nFor example:\r\n```\r\n➜  prlist git:(aaa) gh pr create -t my-title -b fasfsfsfsdfsdfsdfsdfsd\r\nwas not able to push to remote 'origin': exit status 128\r\n```\r\n\r\nshould be edit to something more user-friendly like: The repository you are trying to access is archived."},{"labels":["enhancement"],"text":"### Describe the feature or problem you’d like to solve\r\n\r\nIs there a need to display a changelog for CLI, potentially via the command line? \r\n\r\n### Proposed solution\r\n\r\nSomething like `gh --changelog` or similar so users can learn more about updates. It is helpful for me in case I need to go back and see when a feature was released or if I missed the marketing material.\r\n"},{"labels":["enhancement"],"text":"In #58, @probablycorey mentioned that color alone wouldn't be very sustainable. It would be nice to have a consistent design language to display them \r\n\r\n---\r\n\r\n**Update:** \r\nAt our brainstorm, we talked about proxying the default label colors to the terminal colors above as a start!\r\n\r\n"}]