"""
This type stub file was generated by pyright.
"""

import contextlib
import os
import sys
from __future__ import absolute_import, division, print_function, unicode_literals
from importlib import import_module
from . import _util

VENDORED_ROOT = os.path.dirname(os.path.abspath(__file__))
if 'pydevd' not in os.listdir(VENDORED_ROOT):
    VENDORED_ROOT = os.path.dirname(VENDORED_ROOT)
def list_all(resolve=...):
    """Return the list of vendored projects."""
    ...

def project_root(project):
    """Return the path the root dir of the vendored project.

    If "project" is an empty string then the path prefix for vendored
    projects (e.g. "debugpy/_vendored/") will be returned.
    """
    ...

def iter_project_files(project, relative=..., **kwargs):
    """Yield (dirname, basename, filename) for all files in the project."""
    ...

def iter_packaging_files(project):
    """Yield the filenames for all files in the project.

    The filenames are relative to "debugpy/_vendored".  This is most
    useful for the "package data" in a setup.py.
    """
    ...

def prefix_matcher(*prefixes):
    """Return a module match func that matches any of the given prefixes."""
    ...

def check_modules(project, match, root=...):
    """Verify that only vendored modules have been imported."""
    ...

@contextlib.contextmanager
def vendored(project, root=...):
    """A context manager under which the vendored project will be imported."""
    ...

def preimport(project, modules, **kwargs):
    """Import each of the named modules out of the vendored project."""
    ...

