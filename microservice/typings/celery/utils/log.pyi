"""
This type stub file was generated by pyright.
"""

import logging
import os
from contextlib import contextmanager
from kombu.log import get_logger as _get_logger

"""Logging utilities."""
_process_aware = False
_in_sighandler = False
MP_LOG = os.environ.get('MP_LOG', False)
RESERVED_LOGGER_NAMES = 'celery', 'celery.task'
base_logger = logger = _get_logger('celery')
def set_in_sighandler(value):
    """Set flag signifiying that we're inside a signal handler."""
    ...

def iter_open_logger_fds():
    ...

@contextmanager
def in_sighandler():
    """Context that records that we are in a signal handler."""
    ...

def logger_isa(l, p, max=...):
    ...

def get_logger(name):
    """Get logger by name."""
    ...

task_logger = get_logger('celery.task')
worker_logger = get_logger('celery.worker')
def get_task_logger(name):
    """Get logger for task module by name."""
    ...

def mlevel(level):
    """Convert level name/int to log level."""
    ...

class ColorFormatter(logging.Formatter):
    """Logging formatter that adds colors based on severity."""
    COLORS = ...
    colors = ...
    def __init__(self, fmt=..., use_color=...) -> None:
        ...
    
    def formatException(self, ei):
        ...
    
    def format(self, record):
        ...
    


class LoggingProxy:
    """Forward file object to :class:`logging.Logger` instance.

    Arguments:
        logger (~logging.Logger): Logger instance to forward to.
        loglevel (int, str): Log level to use when logging messages.
    """
    mode = ...
    name = ...
    closed = ...
    loglevel = ...
    _thread = ...
    def __init__(self, logger, loglevel=...) -> None:
        ...
    
    def write(self, data):
        """Write message to logging object."""
        ...
    
    def writelines(self, sequence: Sequence[str]) -> None:
        """Write list of strings to file.

        The sequence can be any iterable object producing strings.
        This is equivalent to calling :meth:`write` for each string.
        """
        ...
    
    def flush(self):
        ...
    
    def close(self):
        ...
    
    def isatty(self):
        """Here for file support."""
        ...
    


def get_multiprocessing_logger():
    """Return the multiprocessing logger."""
    ...

def reset_multiprocessing_logger():
    """Reset multiprocessing logging setup."""
    ...

def current_process():
    ...

def current_process_index(base=...):
    ...

