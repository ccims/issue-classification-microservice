"""
This type stub file was generated by pyright.
"""

import re
from collections import namedtuple
from celery.utils.collections import ConfigurationView
from .defaults import DEFAULTS, _OLD_DEFAULTS, _TO_NEW_KEY, _TO_OLD_KEY

"""App utilities: Compat settings, bug-report tool, pickling apps."""
BUGREPORT_INFO = """
software -> celery:{celery_v} kombu:{kombu_v} py:{py_v}
            billiard:{billiard_v} {driver_v}
platform -> system:{system} arch:{arch}
            kernel version:{kernel_version} imp:{py_i}
loader   -> {loader}
settings -> transport:{transport} results:{results}

{human_settings}
"""
HIDDEN_SETTINGS = re.compile('API|TOKEN|KEY|SECRET|PASS|PROFANITIES_LIST|SIGNATURE|DATABASE', re.IGNORECASE)
E_MIX_OLD_INTO_NEW = """

Cannot mix new and old setting keys, please rename the
following settings to the new format:

{renames}

"""
E_MIX_NEW_INTO_OLD = """

Cannot mix new setting names with old setting names, please
rename the following settings to use the old format:

{renames}

Or change all of the settings to use the new format :)

"""
FMT_REPLACE_SETTING = '{replace:<36} -> {with_}'
def appstr(app):
    """String used in __repr__ etc, to id app instances."""
    ...

class Settings(ConfigurationView):
    """Celery settings object.

    .. seealso:

        :ref:`configuration` for a full list of configuration keys.

    """
    def __init__(self, *args, deprecated_settings=..., **kwargs) -> None:
        ...
    
    @property
    def broker_read_url(self):
        ...
    
    @property
    def broker_write_url(self):
        ...
    
    @property
    def broker_url(self):
        ...
    
    @property
    def result_backend(self):
        ...
    
    @property
    def task_default_exchange(self):
        ...
    
    @property
    def task_default_routing_key(self):
        ...
    
    @property
    def timezone(self):
        ...
    
    def without_defaults(self):
        """Return the current configuration, but without defaults."""
        ...
    
    def value_set_for(self, key):
        ...
    
    def find_option(self, name, namespace=...):
        """Search for option by name.

        Example:
            >>> from proj.celery import app
            >>> app.conf.find_option('disable_rate_limits')
            ('worker', 'prefetch_multiplier',
             <Option: type->bool default->False>))

        Arguments:
            name (str): Name of option, cannot be partial.
            namespace (str): Preferred name-space (``None`` by default).
        Returns:
            Tuple: of ``(namespace, key, type)``.
        """
        ...
    
    def find_value_for_key(self, name, namespace=...):
        """Shortcut to ``get_by_parts(*find_option(name)[:-1])``."""
        ...
    
    def get_by_parts(self, *parts):
        """Return the current value for setting specified as a path.

        Example:
            >>> from proj.celery import app
            >>> app.conf.get_by_parts('worker', 'disable_rate_limits')
            False
        """
        ...
    
    def finalize(self):
        ...
    
    def table(self, with_defaults=..., censored=...):
        ...
    
    def humanize(self, with_defaults=..., censored=...):
        """Return a human readable text showing configuration changes."""
        ...
    
    def maybe_warn_deprecated_settings(self):
        ...
    


_settings_info_t = namedtuple('settings_info_t', ('defaults', 'convert', 'key_t', 'mix_error'))
_settings_info = _settings_info_t(DEFAULTS, _TO_NEW_KEY, _old_key_to_new, E_MIX_OLD_INTO_NEW)
_old_settings_info = _settings_info_t(_OLD_DEFAULTS, _TO_OLD_KEY, _new_key_to_old, E_MIX_NEW_INTO_OLD)
def detect_settings(conf, preconf=..., ignore_keys=..., prefix=..., all_keys=..., old_keys=...):
    ...

class AppPickler:
    """Old application pickler/unpickler (< 3.1)."""
    def __call__(self, cls, *args):
        ...
    
    def prepare(self, app, **kwargs):
        ...
    
    def build_kwargs(self, *args):
        ...
    
    def build_standard_kwargs(self, main, changes, loader, backend, amqp, events, log, control, accept_magic_kwargs, config_source=...):
        ...
    
    def construct(self, cls, **kwargs):
        ...
    


def filter_hidden_settings(conf):
    """Filter sensitive settings."""
    ...

def bugreport(app):
    """Return a string containing information useful in bug-reports."""
    ...

def find_app(app, symbol_by_name=..., imp=...):
    """Find app by name."""
    ...

