"""
This type stub file was generated by pyright.
"""

import re
import click
from celery.bin.base import CeleryCommand

"""The ``celery logtool`` command."""
RE_LOG_START = re.compile(r'^\[\d\d\d\d\-\d\d-\d\d ')
RE_TASK_RECEIVED = re.compile(r'.+?\] Received')
RE_TASK_READY = re.compile(r'.+?\] Task')
RE_TASK_INFO = re.compile(r'.+?([\w\.]+)\[(.+?)\].+')
RE_TASK_RESULT = re.compile(r'.+?[\w\.]+\[.+?\] (.+)')
REPORT_FORMAT = """
Report
======
Task total: {task[total]}
Task errors: {task[errors]}
Task success: {task[succeeded]}
Task completed: {task[completed]}
Tasks
=====
{task[types].format}
"""
class _task_counts(list):
    @property
    def format(self):
        ...
    


def task_info(line):
    ...

class Audit:
    def __init__(self, on_task_error=..., on_trace=..., on_debug=...) -> None:
        ...
    
    def run(self, files):
        ...
    
    def task_received(self, line, task_name, task_id):
        ...
    
    def task_ready(self, line, task_name, task_id, result):
        ...
    
    def task_error(self, line, task_name, task_id, result):
        ...
    
    def feed(self, line):
        ...
    
    def incomplete_tasks(self):
        ...
    
    def report(self):
        ...
    


@click.group()
def logtool():
    """The ``celery logtool`` command."""
    ...

@logtool.command(cls=CeleryCommand)
@click.argument('files', nargs=- 1)
@click.pass_context
def stats(ctx, files):
    ...

@logtool.command(cls=CeleryCommand)
@click.argument('files', nargs=- 1)
@click.pass_context
def traces(ctx, files):
    ...

@logtool.command(cls=CeleryCommand)
@click.argument('files', nargs=- 1)
@click.pass_context
def errors(ctx, files):
    ...

@logtool.command(cls=CeleryCommand)
@click.argument('files', nargs=- 1)
@click.pass_context
def incomplete(ctx, files):
    ...

@logtool.command(cls=CeleryCommand)
@click.argument('files', nargs=- 1)
@click.pass_context
def debug(ctx, files):
    ...

